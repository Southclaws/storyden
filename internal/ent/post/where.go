// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeletedAt, v))
}

// IndexedAt applies equality check predicate on the "indexed_at" field. It's identical to IndexedAtEQ.
func IndexedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIndexedAt, v))
}

// First applies equality check predicate on the "first" field. It's identical to FirstEQ.
func First(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldFirst, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSlug, v))
}

// Pinned applies equality check predicate on the "pinned" field. It's identical to PinnedEQ.
func Pinned(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPinned, v))
}

// RootPostID applies equality check predicate on the "root_post_id" field. It's identical to RootPostIDEQ.
func RootPostID(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldRootPostID, v))
}

// ReplyToPostID applies equality check predicate on the "reply_to_post_id" field. It's identical to ReplyToPostIDEQ.
func ReplyToPostID(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReplyToPostID, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldBody, v))
}

// Short applies equality check predicate on the "short" field. It's identical to ShortEQ.
func Short(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldShort, v))
}

// AccountPosts applies equality check predicate on the "account_posts" field. It's identical to AccountPostsEQ.
func AccountPosts(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldAccountPosts, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCategoryID, v))
}

// LinkID applies equality check predicate on the "link_id" field. It's identical to LinkIDEQ.
func LinkID(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLinkID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldDeletedAt))
}

// IndexedAtEQ applies the EQ predicate on the "indexed_at" field.
func IndexedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIndexedAt, v))
}

// IndexedAtNEQ applies the NEQ predicate on the "indexed_at" field.
func IndexedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldIndexedAt, v))
}

// IndexedAtIn applies the In predicate on the "indexed_at" field.
func IndexedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldIndexedAt, vs...))
}

// IndexedAtNotIn applies the NotIn predicate on the "indexed_at" field.
func IndexedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldIndexedAt, vs...))
}

// IndexedAtGT applies the GT predicate on the "indexed_at" field.
func IndexedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldIndexedAt, v))
}

// IndexedAtGTE applies the GTE predicate on the "indexed_at" field.
func IndexedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldIndexedAt, v))
}

// IndexedAtLT applies the LT predicate on the "indexed_at" field.
func IndexedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldIndexedAt, v))
}

// IndexedAtLTE applies the LTE predicate on the "indexed_at" field.
func IndexedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldIndexedAt, v))
}

// IndexedAtIsNil applies the IsNil predicate on the "indexed_at" field.
func IndexedAtIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldIndexedAt))
}

// IndexedAtNotNil applies the NotNil predicate on the "indexed_at" field.
func IndexedAtNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldIndexedAt))
}

// FirstEQ applies the EQ predicate on the "first" field.
func FirstEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldFirst, v))
}

// FirstNEQ applies the NEQ predicate on the "first" field.
func FirstNEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldFirst, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTitle, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugIsNil applies the IsNil predicate on the "slug" field.
func SlugIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldSlug))
}

// SlugNotNil applies the NotNil predicate on the "slug" field.
func SlugNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldSlug))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldSlug, v))
}

// PinnedEQ applies the EQ predicate on the "pinned" field.
func PinnedEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPinned, v))
}

// PinnedNEQ applies the NEQ predicate on the "pinned" field.
func PinnedNEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldPinned, v))
}

// RootPostIDEQ applies the EQ predicate on the "root_post_id" field.
func RootPostIDEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldRootPostID, v))
}

// RootPostIDNEQ applies the NEQ predicate on the "root_post_id" field.
func RootPostIDNEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldRootPostID, v))
}

// RootPostIDIn applies the In predicate on the "root_post_id" field.
func RootPostIDIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldRootPostID, vs...))
}

// RootPostIDNotIn applies the NotIn predicate on the "root_post_id" field.
func RootPostIDNotIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldRootPostID, vs...))
}

// RootPostIDGT applies the GT predicate on the "root_post_id" field.
func RootPostIDGT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldRootPostID, v))
}

// RootPostIDGTE applies the GTE predicate on the "root_post_id" field.
func RootPostIDGTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldRootPostID, v))
}

// RootPostIDLT applies the LT predicate on the "root_post_id" field.
func RootPostIDLT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldRootPostID, v))
}

// RootPostIDLTE applies the LTE predicate on the "root_post_id" field.
func RootPostIDLTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldRootPostID, v))
}

// RootPostIDContains applies the Contains predicate on the "root_post_id" field.
func RootPostIDContains(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContains(FieldRootPostID, vc))
}

// RootPostIDHasPrefix applies the HasPrefix predicate on the "root_post_id" field.
func RootPostIDHasPrefix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasPrefix(FieldRootPostID, vc))
}

// RootPostIDHasSuffix applies the HasSuffix predicate on the "root_post_id" field.
func RootPostIDHasSuffix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasSuffix(FieldRootPostID, vc))
}

// RootPostIDIsNil applies the IsNil predicate on the "root_post_id" field.
func RootPostIDIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldRootPostID))
}

// RootPostIDNotNil applies the NotNil predicate on the "root_post_id" field.
func RootPostIDNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldRootPostID))
}

// RootPostIDEqualFold applies the EqualFold predicate on the "root_post_id" field.
func RootPostIDEqualFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldEqualFold(FieldRootPostID, vc))
}

// RootPostIDContainsFold applies the ContainsFold predicate on the "root_post_id" field.
func RootPostIDContainsFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContainsFold(FieldRootPostID, vc))
}

// ReplyToPostIDEQ applies the EQ predicate on the "reply_to_post_id" field.
func ReplyToPostIDEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReplyToPostID, v))
}

// ReplyToPostIDNEQ applies the NEQ predicate on the "reply_to_post_id" field.
func ReplyToPostIDNEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldReplyToPostID, v))
}

// ReplyToPostIDIn applies the In predicate on the "reply_to_post_id" field.
func ReplyToPostIDIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldReplyToPostID, vs...))
}

// ReplyToPostIDNotIn applies the NotIn predicate on the "reply_to_post_id" field.
func ReplyToPostIDNotIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldReplyToPostID, vs...))
}

// ReplyToPostIDGT applies the GT predicate on the "reply_to_post_id" field.
func ReplyToPostIDGT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldReplyToPostID, v))
}

// ReplyToPostIDGTE applies the GTE predicate on the "reply_to_post_id" field.
func ReplyToPostIDGTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldReplyToPostID, v))
}

// ReplyToPostIDLT applies the LT predicate on the "reply_to_post_id" field.
func ReplyToPostIDLT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldReplyToPostID, v))
}

// ReplyToPostIDLTE applies the LTE predicate on the "reply_to_post_id" field.
func ReplyToPostIDLTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldReplyToPostID, v))
}

// ReplyToPostIDContains applies the Contains predicate on the "reply_to_post_id" field.
func ReplyToPostIDContains(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContains(FieldReplyToPostID, vc))
}

// ReplyToPostIDHasPrefix applies the HasPrefix predicate on the "reply_to_post_id" field.
func ReplyToPostIDHasPrefix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasPrefix(FieldReplyToPostID, vc))
}

// ReplyToPostIDHasSuffix applies the HasSuffix predicate on the "reply_to_post_id" field.
func ReplyToPostIDHasSuffix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasSuffix(FieldReplyToPostID, vc))
}

// ReplyToPostIDIsNil applies the IsNil predicate on the "reply_to_post_id" field.
func ReplyToPostIDIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldReplyToPostID))
}

// ReplyToPostIDNotNil applies the NotNil predicate on the "reply_to_post_id" field.
func ReplyToPostIDNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldReplyToPostID))
}

// ReplyToPostIDEqualFold applies the EqualFold predicate on the "reply_to_post_id" field.
func ReplyToPostIDEqualFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldEqualFold(FieldReplyToPostID, vc))
}

// ReplyToPostIDContainsFold applies the ContainsFold predicate on the "reply_to_post_id" field.
func ReplyToPostIDContainsFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContainsFold(FieldReplyToPostID, vc))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldBody, v))
}

// ShortEQ applies the EQ predicate on the "short" field.
func ShortEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldShort, v))
}

// ShortNEQ applies the NEQ predicate on the "short" field.
func ShortNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldShort, v))
}

// ShortIn applies the In predicate on the "short" field.
func ShortIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldShort, vs...))
}

// ShortNotIn applies the NotIn predicate on the "short" field.
func ShortNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldShort, vs...))
}

// ShortGT applies the GT predicate on the "short" field.
func ShortGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldShort, v))
}

// ShortGTE applies the GTE predicate on the "short" field.
func ShortGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldShort, v))
}

// ShortLT applies the LT predicate on the "short" field.
func ShortLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldShort, v))
}

// ShortLTE applies the LTE predicate on the "short" field.
func ShortLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldShort, v))
}

// ShortContains applies the Contains predicate on the "short" field.
func ShortContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldShort, v))
}

// ShortHasPrefix applies the HasPrefix predicate on the "short" field.
func ShortHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldShort, v))
}

// ShortHasSuffix applies the HasSuffix predicate on the "short" field.
func ShortHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldShort, v))
}

// ShortEqualFold applies the EqualFold predicate on the "short" field.
func ShortEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldShort, v))
}

// ShortContainsFold applies the ContainsFold predicate on the "short" field.
func ShortContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldShort, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldMetadata))
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v Visibility) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldVisibility, v))
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v Visibility) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldVisibility, v))
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...Visibility) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldVisibility, vs...))
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...Visibility) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldVisibility, vs...))
}

// AccountPostsEQ applies the EQ predicate on the "account_posts" field.
func AccountPostsEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldAccountPosts, v))
}

// AccountPostsNEQ applies the NEQ predicate on the "account_posts" field.
func AccountPostsNEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldAccountPosts, v))
}

// AccountPostsIn applies the In predicate on the "account_posts" field.
func AccountPostsIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldAccountPosts, vs...))
}

// AccountPostsNotIn applies the NotIn predicate on the "account_posts" field.
func AccountPostsNotIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldAccountPosts, vs...))
}

// AccountPostsGT applies the GT predicate on the "account_posts" field.
func AccountPostsGT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldAccountPosts, v))
}

// AccountPostsGTE applies the GTE predicate on the "account_posts" field.
func AccountPostsGTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldAccountPosts, v))
}

// AccountPostsLT applies the LT predicate on the "account_posts" field.
func AccountPostsLT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldAccountPosts, v))
}

// AccountPostsLTE applies the LTE predicate on the "account_posts" field.
func AccountPostsLTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldAccountPosts, v))
}

// AccountPostsContains applies the Contains predicate on the "account_posts" field.
func AccountPostsContains(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContains(FieldAccountPosts, vc))
}

// AccountPostsHasPrefix applies the HasPrefix predicate on the "account_posts" field.
func AccountPostsHasPrefix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasPrefix(FieldAccountPosts, vc))
}

// AccountPostsHasSuffix applies the HasSuffix predicate on the "account_posts" field.
func AccountPostsHasSuffix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasSuffix(FieldAccountPosts, vc))
}

// AccountPostsEqualFold applies the EqualFold predicate on the "account_posts" field.
func AccountPostsEqualFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldEqualFold(FieldAccountPosts, vc))
}

// AccountPostsContainsFold applies the ContainsFold predicate on the "account_posts" field.
func AccountPostsContainsFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContainsFold(FieldAccountPosts, vc))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDContains applies the Contains predicate on the "category_id" field.
func CategoryIDContains(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContains(FieldCategoryID, vc))
}

// CategoryIDHasPrefix applies the HasPrefix predicate on the "category_id" field.
func CategoryIDHasPrefix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasPrefix(FieldCategoryID, vc))
}

// CategoryIDHasSuffix applies the HasSuffix predicate on the "category_id" field.
func CategoryIDHasSuffix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasSuffix(FieldCategoryID, vc))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldCategoryID))
}

// CategoryIDEqualFold applies the EqualFold predicate on the "category_id" field.
func CategoryIDEqualFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldEqualFold(FieldCategoryID, vc))
}

// CategoryIDContainsFold applies the ContainsFold predicate on the "category_id" field.
func CategoryIDContainsFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContainsFold(FieldCategoryID, vc))
}

// LinkIDEQ applies the EQ predicate on the "link_id" field.
func LinkIDEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLinkID, v))
}

// LinkIDNEQ applies the NEQ predicate on the "link_id" field.
func LinkIDNEQ(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldLinkID, v))
}

// LinkIDIn applies the In predicate on the "link_id" field.
func LinkIDIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldLinkID, vs...))
}

// LinkIDNotIn applies the NotIn predicate on the "link_id" field.
func LinkIDNotIn(vs ...xid.ID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldLinkID, vs...))
}

// LinkIDGT applies the GT predicate on the "link_id" field.
func LinkIDGT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldLinkID, v))
}

// LinkIDGTE applies the GTE predicate on the "link_id" field.
func LinkIDGTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldLinkID, v))
}

// LinkIDLT applies the LT predicate on the "link_id" field.
func LinkIDLT(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldLinkID, v))
}

// LinkIDLTE applies the LTE predicate on the "link_id" field.
func LinkIDLTE(v xid.ID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldLinkID, v))
}

// LinkIDContains applies the Contains predicate on the "link_id" field.
func LinkIDContains(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContains(FieldLinkID, vc))
}

// LinkIDHasPrefix applies the HasPrefix predicate on the "link_id" field.
func LinkIDHasPrefix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasPrefix(FieldLinkID, vc))
}

// LinkIDHasSuffix applies the HasSuffix predicate on the "link_id" field.
func LinkIDHasSuffix(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldHasSuffix(FieldLinkID, vc))
}

// LinkIDIsNil applies the IsNil predicate on the "link_id" field.
func LinkIDIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldLinkID))
}

// LinkIDNotNil applies the NotNil predicate on the "link_id" field.
func LinkIDNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldLinkID))
}

// LinkIDEqualFold applies the EqualFold predicate on the "link_id" field.
func LinkIDEqualFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldEqualFold(FieldLinkID, vc))
}

// LinkIDContainsFold applies the ContainsFold predicate on the "link_id" field.
func LinkIDContainsFold(v xid.ID) predicate.Post {
	vc := v.String()
	return predicate.Post(sql.FieldContainsFold(FieldLinkID, vc))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.Account) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoot applies the HasEdge predicate on the "root" edge.
func HasRoot() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RootTable, RootColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRootWith applies the HasEdge predicate on the "root" edge with a given conditions (other predicates).
func HasRootWith(preds ...predicate.Post) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newRootStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReplyTo applies the HasEdge predicate on the "replyTo" edge.
func HasReplyTo() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReplyToTable, ReplyToColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReplyToWith applies the HasEdge predicate on the "replyTo" edge with a given conditions (other predicates).
func HasReplyToWith(preds ...predicate.Post) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newReplyToStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReplies applies the HasEdge predicate on the "replies" edge.
func HasReplies() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepliesWith applies the HasEdge predicate on the "replies" edge with a given conditions (other predicates).
func HasRepliesWith(preds ...predicate.Post) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newRepliesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReacts applies the HasEdge predicate on the "reacts" edge.
func HasReacts() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReactsTable, ReactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactsWith applies the HasEdge predicate on the "reacts" edge with a given conditions (other predicates).
func HasReactsWith(preds ...predicate.React) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newReactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikes applies the HasEdge predicate on the "likes" edge.
func HasLikes() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikesWith applies the HasEdge predicate on the "likes" edge with a given conditions (other predicates).
func HasLikesWith(preds ...predicate.LikePost) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMentions applies the HasEdge predicate on the "mentions" edge.
func HasMentions() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MentionsTable, MentionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentionsWith applies the HasEdge predicate on the "mentions" edge with a given conditions (other predicates).
func HasMentionsWith(preds ...predicate.MentionProfile) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newMentionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssets applies the HasEdge predicate on the "assets" edge.
func HasAssets() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AssetsTable, AssetsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetsWith applies the HasEdge predicate on the "assets" edge with a given conditions (other predicates).
func HasAssetsWith(preds ...predicate.Asset) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newAssetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCollections applies the HasEdge predicate on the "collections" edge.
func HasCollections() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CollectionsTable, CollectionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionsWith applies the HasEdge predicate on the "collections" edge with a given conditions (other predicates).
func HasCollectionsWith(preds ...predicate.Collection) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newCollectionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLink applies the HasEdge predicate on the "link" edge.
func HasLink() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LinkTable, LinkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinkWith applies the HasEdge predicate on the "link" edge with a given conditions (other predicates).
func HasLinkWith(preds ...predicate.Link) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newLinkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContentLinks applies the HasEdge predicate on the "content_links" edge.
func HasContentLinks() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ContentLinksTable, ContentLinksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentLinksWith applies the HasEdge predicate on the "content_links" edge with a given conditions (other predicates).
func HasContentLinksWith(preds ...predicate.Link) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newContentLinksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostTags applies the HasEdge predicate on the "post_tags" edge.
func HasPostTags() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PostTagsTable, PostTagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostTagsWith applies the HasEdge predicate on the "post_tags" edge with a given conditions (other predicates).
func HasPostTagsWith(preds ...predicate.TagPost) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newPostTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
