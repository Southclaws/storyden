// Code generated by ent, DO NOT EDIT.

package report

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldUpdatedAt, v))
}

// TargetID applies equality check predicate on the "target_id" field. It's identical to TargetIDEQ.
func TargetID(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTargetID, v))
}

// TargetKind applies equality check predicate on the "target_kind" field. It's identical to TargetKindEQ.
func TargetKind(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTargetKind, v))
}

// ReportedByID applies equality check predicate on the "reported_by_id" field. It's identical to ReportedByIDEQ.
func ReportedByID(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReportedByID, v))
}

// HandledByID applies equality check predicate on the "handled_by_id" field. It's identical to HandledByIDEQ.
func HandledByID(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldHandledByID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldComment, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReason, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldUpdatedAt, v))
}

// TargetIDEQ applies the EQ predicate on the "target_id" field.
func TargetIDEQ(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTargetID, v))
}

// TargetIDNEQ applies the NEQ predicate on the "target_id" field.
func TargetIDNEQ(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldTargetID, v))
}

// TargetIDIn applies the In predicate on the "target_id" field.
func TargetIDIn(vs ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldTargetID, vs...))
}

// TargetIDNotIn applies the NotIn predicate on the "target_id" field.
func TargetIDNotIn(vs ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldTargetID, vs...))
}

// TargetIDGT applies the GT predicate on the "target_id" field.
func TargetIDGT(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldTargetID, v))
}

// TargetIDGTE applies the GTE predicate on the "target_id" field.
func TargetIDGTE(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldTargetID, v))
}

// TargetIDLT applies the LT predicate on the "target_id" field.
func TargetIDLT(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldTargetID, v))
}

// TargetIDLTE applies the LTE predicate on the "target_id" field.
func TargetIDLTE(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldTargetID, v))
}

// TargetIDContains applies the Contains predicate on the "target_id" field.
func TargetIDContains(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldContains(FieldTargetID, vc))
}

// TargetIDHasPrefix applies the HasPrefix predicate on the "target_id" field.
func TargetIDHasPrefix(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldHasPrefix(FieldTargetID, vc))
}

// TargetIDHasSuffix applies the HasSuffix predicate on the "target_id" field.
func TargetIDHasSuffix(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldHasSuffix(FieldTargetID, vc))
}

// TargetIDEqualFold applies the EqualFold predicate on the "target_id" field.
func TargetIDEqualFold(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldEqualFold(FieldTargetID, vc))
}

// TargetIDContainsFold applies the ContainsFold predicate on the "target_id" field.
func TargetIDContainsFold(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldContainsFold(FieldTargetID, vc))
}

// TargetKindEQ applies the EQ predicate on the "target_kind" field.
func TargetKindEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTargetKind, v))
}

// TargetKindNEQ applies the NEQ predicate on the "target_kind" field.
func TargetKindNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldTargetKind, v))
}

// TargetKindIn applies the In predicate on the "target_kind" field.
func TargetKindIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldTargetKind, vs...))
}

// TargetKindNotIn applies the NotIn predicate on the "target_kind" field.
func TargetKindNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldTargetKind, vs...))
}

// TargetKindGT applies the GT predicate on the "target_kind" field.
func TargetKindGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldTargetKind, v))
}

// TargetKindGTE applies the GTE predicate on the "target_kind" field.
func TargetKindGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldTargetKind, v))
}

// TargetKindLT applies the LT predicate on the "target_kind" field.
func TargetKindLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldTargetKind, v))
}

// TargetKindLTE applies the LTE predicate on the "target_kind" field.
func TargetKindLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldTargetKind, v))
}

// TargetKindContains applies the Contains predicate on the "target_kind" field.
func TargetKindContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldTargetKind, v))
}

// TargetKindHasPrefix applies the HasPrefix predicate on the "target_kind" field.
func TargetKindHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldTargetKind, v))
}

// TargetKindHasSuffix applies the HasSuffix predicate on the "target_kind" field.
func TargetKindHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldTargetKind, v))
}

// TargetKindEqualFold applies the EqualFold predicate on the "target_kind" field.
func TargetKindEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldTargetKind, v))
}

// TargetKindContainsFold applies the ContainsFold predicate on the "target_kind" field.
func TargetKindContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldTargetKind, v))
}

// ReportedByIDEQ applies the EQ predicate on the "reported_by_id" field.
func ReportedByIDEQ(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReportedByID, v))
}

// ReportedByIDNEQ applies the NEQ predicate on the "reported_by_id" field.
func ReportedByIDNEQ(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldReportedByID, v))
}

// ReportedByIDIn applies the In predicate on the "reported_by_id" field.
func ReportedByIDIn(vs ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldReportedByID, vs...))
}

// ReportedByIDNotIn applies the NotIn predicate on the "reported_by_id" field.
func ReportedByIDNotIn(vs ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldReportedByID, vs...))
}

// ReportedByIDGT applies the GT predicate on the "reported_by_id" field.
func ReportedByIDGT(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldReportedByID, v))
}

// ReportedByIDGTE applies the GTE predicate on the "reported_by_id" field.
func ReportedByIDGTE(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldReportedByID, v))
}

// ReportedByIDLT applies the LT predicate on the "reported_by_id" field.
func ReportedByIDLT(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldReportedByID, v))
}

// ReportedByIDLTE applies the LTE predicate on the "reported_by_id" field.
func ReportedByIDLTE(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldReportedByID, v))
}

// ReportedByIDContains applies the Contains predicate on the "reported_by_id" field.
func ReportedByIDContains(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldContains(FieldReportedByID, vc))
}

// ReportedByIDHasPrefix applies the HasPrefix predicate on the "reported_by_id" field.
func ReportedByIDHasPrefix(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldHasPrefix(FieldReportedByID, vc))
}

// ReportedByIDHasSuffix applies the HasSuffix predicate on the "reported_by_id" field.
func ReportedByIDHasSuffix(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldHasSuffix(FieldReportedByID, vc))
}

// ReportedByIDEqualFold applies the EqualFold predicate on the "reported_by_id" field.
func ReportedByIDEqualFold(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldEqualFold(FieldReportedByID, vc))
}

// ReportedByIDContainsFold applies the ContainsFold predicate on the "reported_by_id" field.
func ReportedByIDContainsFold(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldContainsFold(FieldReportedByID, vc))
}

// HandledByIDEQ applies the EQ predicate on the "handled_by_id" field.
func HandledByIDEQ(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldHandledByID, v))
}

// HandledByIDNEQ applies the NEQ predicate on the "handled_by_id" field.
func HandledByIDNEQ(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldHandledByID, v))
}

// HandledByIDIn applies the In predicate on the "handled_by_id" field.
func HandledByIDIn(vs ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldHandledByID, vs...))
}

// HandledByIDNotIn applies the NotIn predicate on the "handled_by_id" field.
func HandledByIDNotIn(vs ...xid.ID) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldHandledByID, vs...))
}

// HandledByIDGT applies the GT predicate on the "handled_by_id" field.
func HandledByIDGT(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldHandledByID, v))
}

// HandledByIDGTE applies the GTE predicate on the "handled_by_id" field.
func HandledByIDGTE(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldHandledByID, v))
}

// HandledByIDLT applies the LT predicate on the "handled_by_id" field.
func HandledByIDLT(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldHandledByID, v))
}

// HandledByIDLTE applies the LTE predicate on the "handled_by_id" field.
func HandledByIDLTE(v xid.ID) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldHandledByID, v))
}

// HandledByIDContains applies the Contains predicate on the "handled_by_id" field.
func HandledByIDContains(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldContains(FieldHandledByID, vc))
}

// HandledByIDHasPrefix applies the HasPrefix predicate on the "handled_by_id" field.
func HandledByIDHasPrefix(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldHasPrefix(FieldHandledByID, vc))
}

// HandledByIDHasSuffix applies the HasSuffix predicate on the "handled_by_id" field.
func HandledByIDHasSuffix(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldHasSuffix(FieldHandledByID, vc))
}

// HandledByIDIsNil applies the IsNil predicate on the "handled_by_id" field.
func HandledByIDIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldHandledByID))
}

// HandledByIDNotNil applies the NotNil predicate on the "handled_by_id" field.
func HandledByIDNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldHandledByID))
}

// HandledByIDEqualFold applies the EqualFold predicate on the "handled_by_id" field.
func HandledByIDEqualFold(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldEqualFold(FieldHandledByID, vc))
}

// HandledByIDContainsFold applies the ContainsFold predicate on the "handled_by_id" field.
func HandledByIDContainsFold(v xid.ID) predicate.Report {
	vc := v.String()
	return predicate.Report(sql.FieldContainsFold(FieldHandledByID, vc))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldComment, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldReason, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldStatus, v))
}

// HasReportedBy applies the HasEdge predicate on the "reported_by" edge.
func HasReportedBy() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReportedByTable, ReportedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportedByWith applies the HasEdge predicate on the "reported_by" edge with a given conditions (other predicates).
func HasReportedByWith(preds ...predicate.Account) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := newReportedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHandledBy applies the HasEdge predicate on the "handled_by" edge.
func HasHandledBy() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HandledByTable, HandledByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandledByWith applies the HasEdge predicate on the "handled_by" edge with a given conditions (other predicates).
func HasHandledByWith(preds ...predicate.Account) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := newHandledByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(sql.NotPredicates(p))
}
