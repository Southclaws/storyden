// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/accountfollow"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// AccountFollowUpdate is the builder for updating AccountFollow entities.
type AccountFollowUpdate struct {
	config
	hooks     []Hook
	mutation  *AccountFollowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AccountFollowUpdate builder.
func (afu *AccountFollowUpdate) Where(ps ...predicate.AccountFollow) *AccountFollowUpdate {
	afu.mutation.Where(ps...)
	return afu
}

// SetFollowerAccountID sets the "follower_account_id" field.
func (afu *AccountFollowUpdate) SetFollowerAccountID(x xid.ID) *AccountFollowUpdate {
	afu.mutation.SetFollowerAccountID(x)
	return afu
}

// SetNillableFollowerAccountID sets the "follower_account_id" field if the given value is not nil.
func (afu *AccountFollowUpdate) SetNillableFollowerAccountID(x *xid.ID) *AccountFollowUpdate {
	if x != nil {
		afu.SetFollowerAccountID(*x)
	}
	return afu
}

// SetFollowingAccountID sets the "following_account_id" field.
func (afu *AccountFollowUpdate) SetFollowingAccountID(x xid.ID) *AccountFollowUpdate {
	afu.mutation.SetFollowingAccountID(x)
	return afu
}

// SetNillableFollowingAccountID sets the "following_account_id" field if the given value is not nil.
func (afu *AccountFollowUpdate) SetNillableFollowingAccountID(x *xid.ID) *AccountFollowUpdate {
	if x != nil {
		afu.SetFollowingAccountID(*x)
	}
	return afu
}

// SetFollowerID sets the "follower" edge to the Account entity by ID.
func (afu *AccountFollowUpdate) SetFollowerID(id xid.ID) *AccountFollowUpdate {
	afu.mutation.SetFollowerID(id)
	return afu
}

// SetFollower sets the "follower" edge to the Account entity.
func (afu *AccountFollowUpdate) SetFollower(a *Account) *AccountFollowUpdate {
	return afu.SetFollowerID(a.ID)
}

// SetFollowingID sets the "following" edge to the Account entity by ID.
func (afu *AccountFollowUpdate) SetFollowingID(id xid.ID) *AccountFollowUpdate {
	afu.mutation.SetFollowingID(id)
	return afu
}

// SetFollowing sets the "following" edge to the Account entity.
func (afu *AccountFollowUpdate) SetFollowing(a *Account) *AccountFollowUpdate {
	return afu.SetFollowingID(a.ID)
}

// Mutation returns the AccountFollowMutation object of the builder.
func (afu *AccountFollowUpdate) Mutation() *AccountFollowMutation {
	return afu.mutation
}

// ClearFollower clears the "follower" edge to the Account entity.
func (afu *AccountFollowUpdate) ClearFollower() *AccountFollowUpdate {
	afu.mutation.ClearFollower()
	return afu
}

// ClearFollowing clears the "following" edge to the Account entity.
func (afu *AccountFollowUpdate) ClearFollowing() *AccountFollowUpdate {
	afu.mutation.ClearFollowing()
	return afu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (afu *AccountFollowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, afu.sqlSave, afu.mutation, afu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afu *AccountFollowUpdate) SaveX(ctx context.Context) int {
	affected, err := afu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (afu *AccountFollowUpdate) Exec(ctx context.Context) error {
	_, err := afu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afu *AccountFollowUpdate) ExecX(ctx context.Context) {
	if err := afu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afu *AccountFollowUpdate) check() error {
	if afu.mutation.FollowerCleared() && len(afu.mutation.FollowerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountFollow.follower"`)
	}
	if afu.mutation.FollowingCleared() && len(afu.mutation.FollowingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountFollow.following"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (afu *AccountFollowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountFollowUpdate {
	afu.modifiers = append(afu.modifiers, modifiers...)
	return afu
}

func (afu *AccountFollowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := afu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountfollow.Table, accountfollow.Columns, sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString))
	if ps := afu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if afu.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowerTable,
			Columns: []string{accountfollow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afu.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowerTable,
			Columns: []string{accountfollow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if afu.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowingTable,
			Columns: []string{accountfollow.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afu.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowingTable,
			Columns: []string{accountfollow.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(afu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, afu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountfollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	afu.mutation.done = true
	return n, nil
}

// AccountFollowUpdateOne is the builder for updating a single AccountFollow entity.
type AccountFollowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AccountFollowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetFollowerAccountID sets the "follower_account_id" field.
func (afuo *AccountFollowUpdateOne) SetFollowerAccountID(x xid.ID) *AccountFollowUpdateOne {
	afuo.mutation.SetFollowerAccountID(x)
	return afuo
}

// SetNillableFollowerAccountID sets the "follower_account_id" field if the given value is not nil.
func (afuo *AccountFollowUpdateOne) SetNillableFollowerAccountID(x *xid.ID) *AccountFollowUpdateOne {
	if x != nil {
		afuo.SetFollowerAccountID(*x)
	}
	return afuo
}

// SetFollowingAccountID sets the "following_account_id" field.
func (afuo *AccountFollowUpdateOne) SetFollowingAccountID(x xid.ID) *AccountFollowUpdateOne {
	afuo.mutation.SetFollowingAccountID(x)
	return afuo
}

// SetNillableFollowingAccountID sets the "following_account_id" field if the given value is not nil.
func (afuo *AccountFollowUpdateOne) SetNillableFollowingAccountID(x *xid.ID) *AccountFollowUpdateOne {
	if x != nil {
		afuo.SetFollowingAccountID(*x)
	}
	return afuo
}

// SetFollowerID sets the "follower" edge to the Account entity by ID.
func (afuo *AccountFollowUpdateOne) SetFollowerID(id xid.ID) *AccountFollowUpdateOne {
	afuo.mutation.SetFollowerID(id)
	return afuo
}

// SetFollower sets the "follower" edge to the Account entity.
func (afuo *AccountFollowUpdateOne) SetFollower(a *Account) *AccountFollowUpdateOne {
	return afuo.SetFollowerID(a.ID)
}

// SetFollowingID sets the "following" edge to the Account entity by ID.
func (afuo *AccountFollowUpdateOne) SetFollowingID(id xid.ID) *AccountFollowUpdateOne {
	afuo.mutation.SetFollowingID(id)
	return afuo
}

// SetFollowing sets the "following" edge to the Account entity.
func (afuo *AccountFollowUpdateOne) SetFollowing(a *Account) *AccountFollowUpdateOne {
	return afuo.SetFollowingID(a.ID)
}

// Mutation returns the AccountFollowMutation object of the builder.
func (afuo *AccountFollowUpdateOne) Mutation() *AccountFollowMutation {
	return afuo.mutation
}

// ClearFollower clears the "follower" edge to the Account entity.
func (afuo *AccountFollowUpdateOne) ClearFollower() *AccountFollowUpdateOne {
	afuo.mutation.ClearFollower()
	return afuo
}

// ClearFollowing clears the "following" edge to the Account entity.
func (afuo *AccountFollowUpdateOne) ClearFollowing() *AccountFollowUpdateOne {
	afuo.mutation.ClearFollowing()
	return afuo
}

// Where appends a list predicates to the AccountFollowUpdate builder.
func (afuo *AccountFollowUpdateOne) Where(ps ...predicate.AccountFollow) *AccountFollowUpdateOne {
	afuo.mutation.Where(ps...)
	return afuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (afuo *AccountFollowUpdateOne) Select(field string, fields ...string) *AccountFollowUpdateOne {
	afuo.fields = append([]string{field}, fields...)
	return afuo
}

// Save executes the query and returns the updated AccountFollow entity.
func (afuo *AccountFollowUpdateOne) Save(ctx context.Context) (*AccountFollow, error) {
	return withHooks(ctx, afuo.sqlSave, afuo.mutation, afuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afuo *AccountFollowUpdateOne) SaveX(ctx context.Context) *AccountFollow {
	node, err := afuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (afuo *AccountFollowUpdateOne) Exec(ctx context.Context) error {
	_, err := afuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afuo *AccountFollowUpdateOne) ExecX(ctx context.Context) {
	if err := afuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afuo *AccountFollowUpdateOne) check() error {
	if afuo.mutation.FollowerCleared() && len(afuo.mutation.FollowerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountFollow.follower"`)
	}
	if afuo.mutation.FollowingCleared() && len(afuo.mutation.FollowingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountFollow.following"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (afuo *AccountFollowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountFollowUpdateOne {
	afuo.modifiers = append(afuo.modifiers, modifiers...)
	return afuo
}

func (afuo *AccountFollowUpdateOne) sqlSave(ctx context.Context) (_node *AccountFollow, err error) {
	if err := afuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountfollow.Table, accountfollow.Columns, sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString))
	id, ok := afuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountFollow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := afuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountfollow.FieldID)
		for _, f := range fields {
			if !accountfollow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountfollow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := afuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if afuo.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowerTable,
			Columns: []string{accountfollow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afuo.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowerTable,
			Columns: []string{accountfollow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if afuo.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowingTable,
			Columns: []string{accountfollow.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afuo.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountfollow.FollowingTable,
			Columns: []string{accountfollow.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(afuo.modifiers...)
	_node = &AccountFollow{config: afuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, afuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountfollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	afuo.mutation.done = true
	return _node, nil
}
