// Code generated by ent, DO NOT EDIT.

package link

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldCreatedAt, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldURL, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldSlug, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDomain, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDescription, v))
}

// PrimaryAssetID applies equality check predicate on the "primary_asset_id" field. It's identical to PrimaryAssetIDEQ.
func PrimaryAssetID(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldPrimaryAssetID, v))
}

// FaviconAssetID applies equality check predicate on the "favicon_asset_id" field. It's identical to FaviconAssetIDEQ.
func FaviconAssetID(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldFaviconAssetID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldCreatedAt, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldURL, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldSlug, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldDomain, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldDescription, v))
}

// PrimaryAssetIDEQ applies the EQ predicate on the "primary_asset_id" field.
func PrimaryAssetIDEQ(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldPrimaryAssetID, v))
}

// PrimaryAssetIDNEQ applies the NEQ predicate on the "primary_asset_id" field.
func PrimaryAssetIDNEQ(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldPrimaryAssetID, v))
}

// PrimaryAssetIDIn applies the In predicate on the "primary_asset_id" field.
func PrimaryAssetIDIn(vs ...xid.ID) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldPrimaryAssetID, vs...))
}

// PrimaryAssetIDNotIn applies the NotIn predicate on the "primary_asset_id" field.
func PrimaryAssetIDNotIn(vs ...xid.ID) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldPrimaryAssetID, vs...))
}

// PrimaryAssetIDGT applies the GT predicate on the "primary_asset_id" field.
func PrimaryAssetIDGT(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldPrimaryAssetID, v))
}

// PrimaryAssetIDGTE applies the GTE predicate on the "primary_asset_id" field.
func PrimaryAssetIDGTE(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldPrimaryAssetID, v))
}

// PrimaryAssetIDLT applies the LT predicate on the "primary_asset_id" field.
func PrimaryAssetIDLT(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldPrimaryAssetID, v))
}

// PrimaryAssetIDLTE applies the LTE predicate on the "primary_asset_id" field.
func PrimaryAssetIDLTE(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldPrimaryAssetID, v))
}

// PrimaryAssetIDContains applies the Contains predicate on the "primary_asset_id" field.
func PrimaryAssetIDContains(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldContains(FieldPrimaryAssetID, vc))
}

// PrimaryAssetIDHasPrefix applies the HasPrefix predicate on the "primary_asset_id" field.
func PrimaryAssetIDHasPrefix(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldHasPrefix(FieldPrimaryAssetID, vc))
}

// PrimaryAssetIDHasSuffix applies the HasSuffix predicate on the "primary_asset_id" field.
func PrimaryAssetIDHasSuffix(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldHasSuffix(FieldPrimaryAssetID, vc))
}

// PrimaryAssetIDIsNil applies the IsNil predicate on the "primary_asset_id" field.
func PrimaryAssetIDIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldPrimaryAssetID))
}

// PrimaryAssetIDNotNil applies the NotNil predicate on the "primary_asset_id" field.
func PrimaryAssetIDNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldPrimaryAssetID))
}

// PrimaryAssetIDEqualFold applies the EqualFold predicate on the "primary_asset_id" field.
func PrimaryAssetIDEqualFold(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldEqualFold(FieldPrimaryAssetID, vc))
}

// PrimaryAssetIDContainsFold applies the ContainsFold predicate on the "primary_asset_id" field.
func PrimaryAssetIDContainsFold(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldContainsFold(FieldPrimaryAssetID, vc))
}

// FaviconAssetIDEQ applies the EQ predicate on the "favicon_asset_id" field.
func FaviconAssetIDEQ(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldFaviconAssetID, v))
}

// FaviconAssetIDNEQ applies the NEQ predicate on the "favicon_asset_id" field.
func FaviconAssetIDNEQ(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldFaviconAssetID, v))
}

// FaviconAssetIDIn applies the In predicate on the "favicon_asset_id" field.
func FaviconAssetIDIn(vs ...xid.ID) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldFaviconAssetID, vs...))
}

// FaviconAssetIDNotIn applies the NotIn predicate on the "favicon_asset_id" field.
func FaviconAssetIDNotIn(vs ...xid.ID) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldFaviconAssetID, vs...))
}

// FaviconAssetIDGT applies the GT predicate on the "favicon_asset_id" field.
func FaviconAssetIDGT(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldFaviconAssetID, v))
}

// FaviconAssetIDGTE applies the GTE predicate on the "favicon_asset_id" field.
func FaviconAssetIDGTE(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldFaviconAssetID, v))
}

// FaviconAssetIDLT applies the LT predicate on the "favicon_asset_id" field.
func FaviconAssetIDLT(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldFaviconAssetID, v))
}

// FaviconAssetIDLTE applies the LTE predicate on the "favicon_asset_id" field.
func FaviconAssetIDLTE(v xid.ID) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldFaviconAssetID, v))
}

// FaviconAssetIDContains applies the Contains predicate on the "favicon_asset_id" field.
func FaviconAssetIDContains(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldContains(FieldFaviconAssetID, vc))
}

// FaviconAssetIDHasPrefix applies the HasPrefix predicate on the "favicon_asset_id" field.
func FaviconAssetIDHasPrefix(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldHasPrefix(FieldFaviconAssetID, vc))
}

// FaviconAssetIDHasSuffix applies the HasSuffix predicate on the "favicon_asset_id" field.
func FaviconAssetIDHasSuffix(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldHasSuffix(FieldFaviconAssetID, vc))
}

// FaviconAssetIDIsNil applies the IsNil predicate on the "favicon_asset_id" field.
func FaviconAssetIDIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldFaviconAssetID))
}

// FaviconAssetIDNotNil applies the NotNil predicate on the "favicon_asset_id" field.
func FaviconAssetIDNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldFaviconAssetID))
}

// FaviconAssetIDEqualFold applies the EqualFold predicate on the "favicon_asset_id" field.
func FaviconAssetIDEqualFold(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldEqualFold(FieldFaviconAssetID, vc))
}

// FaviconAssetIDContainsFold applies the ContainsFold predicate on the "favicon_asset_id" field.
func FaviconAssetIDContainsFold(v xid.ID) predicate.Link {
	vc := v.String()
	return predicate.Link(sql.FieldContainsFold(FieldFaviconAssetID, vc))
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostContentReferences applies the HasEdge predicate on the "post_content_references" edge.
func HasPostContentReferences() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PostContentReferencesTable, PostContentReferencesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostContentReferencesWith applies the HasEdge predicate on the "post_content_references" edge with a given conditions (other predicates).
func HasPostContentReferencesWith(preds ...predicate.Post) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newPostContentReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodes applies the HasEdge predicate on the "nodes" edge.
func HasNodes() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodesTable, NodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodesWith applies the HasEdge predicate on the "nodes" edge with a given conditions (other predicates).
func HasNodesWith(preds ...predicate.Node) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newNodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodeContentReferences applies the HasEdge predicate on the "node_content_references" edge.
func HasNodeContentReferences() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NodeContentReferencesTable, NodeContentReferencesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeContentReferencesWith applies the HasEdge predicate on the "node_content_references" edge with a given conditions (other predicates).
func HasNodeContentReferencesWith(preds ...predicate.Node) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newNodeContentReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryImage applies the HasEdge predicate on the "primary_image" edge.
func HasPrimaryImage() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PrimaryImageTable, PrimaryImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryImageWith applies the HasEdge predicate on the "primary_image" edge with a given conditions (other predicates).
func HasPrimaryImageWith(preds ...predicate.Asset) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newPrimaryImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFaviconImage applies the HasEdge predicate on the "favicon_image" edge.
func HasFaviconImage() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FaviconImageTable, FaviconImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFaviconImageWith applies the HasEdge predicate on the "favicon_image" edge with a given conditions (other predicates).
func HasFaviconImageWith(preds ...predicate.Asset) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newFaviconImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssets applies the HasEdge predicate on the "assets" edge.
func HasAssets() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AssetsTable, AssetsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetsWith applies the HasEdge predicate on the "assets" edge with a given conditions (other predicates).
func HasAssetsWith(preds ...predicate.Asset) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newAssetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Link) predicate.Link {
	return predicate.Link(sql.NotPredicates(p))
}
