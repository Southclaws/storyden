// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagpost"
	"github.com/rs/xid"
)

// TagPostQuery is the builder for querying TagPost entities.
type TagPostQuery struct {
	config
	ctx        *QueryContext
	order      []tagpost.OrderOption
	inters     []Interceptor
	predicates []predicate.TagPost
	withTag    *TagQuery
	withPost   *PostQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TagPostQuery builder.
func (tpq *TagPostQuery) Where(ps ...predicate.TagPost) *TagPostQuery {
	tpq.predicates = append(tpq.predicates, ps...)
	return tpq
}

// Limit the number of records to be returned by this query.
func (tpq *TagPostQuery) Limit(limit int) *TagPostQuery {
	tpq.ctx.Limit = &limit
	return tpq
}

// Offset to start from.
func (tpq *TagPostQuery) Offset(offset int) *TagPostQuery {
	tpq.ctx.Offset = &offset
	return tpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tpq *TagPostQuery) Unique(unique bool) *TagPostQuery {
	tpq.ctx.Unique = &unique
	return tpq
}

// Order specifies how the records should be ordered.
func (tpq *TagPostQuery) Order(o ...tagpost.OrderOption) *TagPostQuery {
	tpq.order = append(tpq.order, o...)
	return tpq
}

// QueryTag chains the current query on the "tag" edge.
func (tpq *TagPostQuery) QueryTag() *TagQuery {
	query := (&TagClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tagpost.Table, tagpost.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tagpost.TagTable, tagpost.TagColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPost chains the current query on the "post" edge.
func (tpq *TagPostQuery) QueryPost() *PostQuery {
	query := (&PostClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tagpost.Table, tagpost.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tagpost.PostTable, tagpost.PostColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TagPost entity from the query.
// Returns a *NotFoundError when no TagPost was found.
func (tpq *TagPostQuery) First(ctx context.Context) (*TagPost, error) {
	nodes, err := tpq.Limit(1).All(setContextOp(ctx, tpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tagpost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tpq *TagPostQuery) FirstX(ctx context.Context) *TagPost {
	node, err := tpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TagPost ID from the query.
// Returns a *NotFoundError when no TagPost ID was found.
func (tpq *TagPostQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tpq.Limit(1).IDs(setContextOp(ctx, tpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tagpost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tpq *TagPostQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := tpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TagPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TagPost entity is found.
// Returns a *NotFoundError when no TagPost entities are found.
func (tpq *TagPostQuery) Only(ctx context.Context) (*TagPost, error) {
	nodes, err := tpq.Limit(2).All(setContextOp(ctx, tpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tagpost.Label}
	default:
		return nil, &NotSingularError{tagpost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tpq *TagPostQuery) OnlyX(ctx context.Context) *TagPost {
	node, err := tpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TagPost ID in the query.
// Returns a *NotSingularError when more than one TagPost ID is found.
// Returns a *NotFoundError when no entities are found.
func (tpq *TagPostQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tpq.Limit(2).IDs(setContextOp(ctx, tpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tagpost.Label}
	default:
		err = &NotSingularError{tagpost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tpq *TagPostQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := tpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TagPosts.
func (tpq *TagPostQuery) All(ctx context.Context) ([]*TagPost, error) {
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryAll)
	if err := tpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TagPost, *TagPostQuery]()
	return withInterceptors[[]*TagPost](ctx, tpq, qr, tpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tpq *TagPostQuery) AllX(ctx context.Context) []*TagPost {
	nodes, err := tpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TagPost IDs.
func (tpq *TagPostQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if tpq.ctx.Unique == nil && tpq.path != nil {
		tpq.Unique(true)
	}
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryIDs)
	if err = tpq.Select(tagpost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tpq *TagPostQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := tpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tpq *TagPostQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryCount)
	if err := tpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tpq, querierCount[*TagPostQuery](), tpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tpq *TagPostQuery) CountX(ctx context.Context) int {
	count, err := tpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tpq *TagPostQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryExist)
	switch _, err := tpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tpq *TagPostQuery) ExistX(ctx context.Context) bool {
	exist, err := tpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TagPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tpq *TagPostQuery) Clone() *TagPostQuery {
	if tpq == nil {
		return nil
	}
	return &TagPostQuery{
		config:     tpq.config,
		ctx:        tpq.ctx.Clone(),
		order:      append([]tagpost.OrderOption{}, tpq.order...),
		inters:     append([]Interceptor{}, tpq.inters...),
		predicates: append([]predicate.TagPost{}, tpq.predicates...),
		withTag:    tpq.withTag.Clone(),
		withPost:   tpq.withPost.Clone(),
		// clone intermediate query.
		sql:       tpq.sql.Clone(),
		path:      tpq.path,
		modifiers: append([]func(*sql.Selector){}, tpq.modifiers...),
	}
}

// WithTag tells the query-builder to eager-load the nodes that are connected to
// the "tag" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TagPostQuery) WithTag(opts ...func(*TagQuery)) *TagPostQuery {
	query := (&TagClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withTag = query
	return tpq
}

// WithPost tells the query-builder to eager-load the nodes that are connected to
// the "post" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TagPostQuery) WithPost(opts ...func(*PostQuery)) *TagPostQuery {
	query := (&PostClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withPost = query
	return tpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TagID xid.ID `json:"tag_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TagPost.Query().
//		GroupBy(tagpost.FieldTagID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tpq *TagPostQuery) GroupBy(field string, fields ...string) *TagPostGroupBy {
	tpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TagPostGroupBy{build: tpq}
	grbuild.flds = &tpq.ctx.Fields
	grbuild.label = tagpost.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TagID xid.ID `json:"tag_id,omitempty"`
//	}
//
//	client.TagPost.Query().
//		Select(tagpost.FieldTagID).
//		Scan(ctx, &v)
func (tpq *TagPostQuery) Select(fields ...string) *TagPostSelect {
	tpq.ctx.Fields = append(tpq.ctx.Fields, fields...)
	sbuild := &TagPostSelect{TagPostQuery: tpq}
	sbuild.label = tagpost.Label
	sbuild.flds, sbuild.scan = &tpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TagPostSelect configured with the given aggregations.
func (tpq *TagPostQuery) Aggregate(fns ...AggregateFunc) *TagPostSelect {
	return tpq.Select().Aggregate(fns...)
}

func (tpq *TagPostQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tpq); err != nil {
				return err
			}
		}
	}
	for _, f := range tpq.ctx.Fields {
		if !tagpost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tpq.path != nil {
		prev, err := tpq.path(ctx)
		if err != nil {
			return err
		}
		tpq.sql = prev
	}
	return nil
}

func (tpq *TagPostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TagPost, error) {
	var (
		nodes       = []*TagPost{}
		_spec       = tpq.querySpec()
		loadedTypes = [2]bool{
			tpq.withTag != nil,
			tpq.withPost != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TagPost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TagPost{config: tpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tpq.modifiers) > 0 {
		_spec.Modifiers = tpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tpq.withTag; query != nil {
		if err := tpq.loadTag(ctx, query, nodes, nil,
			func(n *TagPost, e *Tag) { n.Edges.Tag = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withPost; query != nil {
		if err := tpq.loadPost(ctx, query, nodes, nil,
			func(n *TagPost, e *Post) { n.Edges.Post = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tpq *TagPostQuery) loadTag(ctx context.Context, query *TagQuery, nodes []*TagPost, init func(*TagPost), assign func(*TagPost, *Tag)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TagPost)
	for i := range nodes {
		fk := nodes[i].TagID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tag.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tag_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TagPostQuery) loadPost(ctx context.Context, query *PostQuery, nodes []*TagPost, init func(*TagPost), assign func(*TagPost, *Post)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TagPost)
	for i := range nodes {
		fk := nodes[i].PostID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(post.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "post_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tpq *TagPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tpq.querySpec()
	if len(tpq.modifiers) > 0 {
		_spec.Modifiers = tpq.modifiers
	}
	_spec.Node.Columns = tpq.ctx.Fields
	if len(tpq.ctx.Fields) > 0 {
		_spec.Unique = tpq.ctx.Unique != nil && *tpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tpq.driver, _spec)
}

func (tpq *TagPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tagpost.Table, tagpost.Columns, sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString))
	_spec.From = tpq.sql
	if unique := tpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tpq.path != nil {
		_spec.Unique = true
	}
	if fields := tpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tagpost.FieldID)
		for i := range fields {
			if fields[i] != tagpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tpq.withTag != nil {
			_spec.Node.AddColumnOnce(tagpost.FieldTagID)
		}
		if tpq.withPost != nil {
			_spec.Node.AddColumnOnce(tagpost.FieldPostID)
		}
	}
	if ps := tpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tpq *TagPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tpq.driver.Dialect())
	t1 := builder.Table(tagpost.Table)
	columns := tpq.ctx.Fields
	if len(columns) == 0 {
		columns = tagpost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tpq.sql != nil {
		selector = tpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tpq.ctx.Unique != nil && *tpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tpq.modifiers {
		m(selector)
	}
	for _, p := range tpq.predicates {
		p(selector)
	}
	for _, p := range tpq.order {
		p(selector)
	}
	if offset := tpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tpq *TagPostQuery) Modify(modifiers ...func(s *sql.Selector)) *TagPostSelect {
	tpq.modifiers = append(tpq.modifiers, modifiers...)
	return tpq.Select()
}

// TagPostGroupBy is the group-by builder for TagPost entities.
type TagPostGroupBy struct {
	selector
	build *TagPostQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tpgb *TagPostGroupBy) Aggregate(fns ...AggregateFunc) *TagPostGroupBy {
	tpgb.fns = append(tpgb.fns, fns...)
	return tpgb
}

// Scan applies the selector query and scans the result into the given value.
func (tpgb *TagPostGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tpgb.build.ctx, ent.OpQueryGroupBy)
	if err := tpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TagPostQuery, *TagPostGroupBy](ctx, tpgb.build, tpgb, tpgb.build.inters, v)
}

func (tpgb *TagPostGroupBy) sqlScan(ctx context.Context, root *TagPostQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tpgb.fns))
	for _, fn := range tpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tpgb.flds)+len(tpgb.fns))
		for _, f := range *tpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TagPostSelect is the builder for selecting fields of TagPost entities.
type TagPostSelect struct {
	*TagPostQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tps *TagPostSelect) Aggregate(fns ...AggregateFunc) *TagPostSelect {
	tps.fns = append(tps.fns, fns...)
	return tps
}

// Scan applies the selector query and scans the result into the given value.
func (tps *TagPostSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tps.ctx, ent.OpQuerySelect)
	if err := tps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TagPostQuery, *TagPostSelect](ctx, tps.TagPostQuery, tps, tps.inters, v)
}

func (tps *TagPostSelect) sqlScan(ctx context.Context, root *TagPostQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tps.fns))
	for _, fn := range tps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tps *TagPostSelect) Modify(modifiers ...func(s *sql.Selector)) *TagPostSelect {
	tps.modifiers = append(tps.modifiers, modifiers...)
	return tps
}
