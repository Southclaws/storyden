// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagpost"
	"github.com/rs/xid"
)

// TagPostUpdate is the builder for updating TagPost entities.
type TagPostUpdate struct {
	config
	hooks     []Hook
	mutation  *TagPostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TagPostUpdate builder.
func (tpu *TagPostUpdate) Where(ps ...predicate.TagPost) *TagPostUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetTagID sets the "tag_id" field.
func (tpu *TagPostUpdate) SetTagID(x xid.ID) *TagPostUpdate {
	tpu.mutation.SetTagID(x)
	return tpu
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tpu *TagPostUpdate) SetNillableTagID(x *xid.ID) *TagPostUpdate {
	if x != nil {
		tpu.SetTagID(*x)
	}
	return tpu
}

// SetPostID sets the "post_id" field.
func (tpu *TagPostUpdate) SetPostID(x xid.ID) *TagPostUpdate {
	tpu.mutation.SetPostID(x)
	return tpu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (tpu *TagPostUpdate) SetNillablePostID(x *xid.ID) *TagPostUpdate {
	if x != nil {
		tpu.SetPostID(*x)
	}
	return tpu
}

// SetTag sets the "tag" edge to the Tag entity.
func (tpu *TagPostUpdate) SetTag(t *Tag) *TagPostUpdate {
	return tpu.SetTagID(t.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (tpu *TagPostUpdate) SetPost(p *Post) *TagPostUpdate {
	return tpu.SetPostID(p.ID)
}

// Mutation returns the TagPostMutation object of the builder.
func (tpu *TagPostUpdate) Mutation() *TagPostMutation {
	return tpu.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (tpu *TagPostUpdate) ClearTag() *TagPostUpdate {
	tpu.mutation.ClearTag()
	return tpu
}

// ClearPost clears the "post" edge to the Post entity.
func (tpu *TagPostUpdate) ClearPost() *TagPostUpdate {
	tpu.mutation.ClearPost()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TagPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TagPostUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TagPostUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TagPostUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TagPostUpdate) check() error {
	if tpu.mutation.TagCleared() && len(tpu.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagPost.tag"`)
	}
	if tpu.mutation.PostCleared() && len(tpu.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagPost.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpu *TagPostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagPostUpdate {
	tpu.modifiers = append(tpu.modifiers, modifiers...)
	return tpu
}

func (tpu *TagPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tagpost.Table, tagpost.Columns, sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tpu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.TagTable,
			Columns: []string{tagpost.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.TagTable,
			Columns: []string{tagpost.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.PostTable,
			Columns: []string{tagpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.PostTable,
			Columns: []string{tagpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TagPostUpdateOne is the builder for updating a single TagPost entity.
type TagPostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TagPostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTagID sets the "tag_id" field.
func (tpuo *TagPostUpdateOne) SetTagID(x xid.ID) *TagPostUpdateOne {
	tpuo.mutation.SetTagID(x)
	return tpuo
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tpuo *TagPostUpdateOne) SetNillableTagID(x *xid.ID) *TagPostUpdateOne {
	if x != nil {
		tpuo.SetTagID(*x)
	}
	return tpuo
}

// SetPostID sets the "post_id" field.
func (tpuo *TagPostUpdateOne) SetPostID(x xid.ID) *TagPostUpdateOne {
	tpuo.mutation.SetPostID(x)
	return tpuo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (tpuo *TagPostUpdateOne) SetNillablePostID(x *xid.ID) *TagPostUpdateOne {
	if x != nil {
		tpuo.SetPostID(*x)
	}
	return tpuo
}

// SetTag sets the "tag" edge to the Tag entity.
func (tpuo *TagPostUpdateOne) SetTag(t *Tag) *TagPostUpdateOne {
	return tpuo.SetTagID(t.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (tpuo *TagPostUpdateOne) SetPost(p *Post) *TagPostUpdateOne {
	return tpuo.SetPostID(p.ID)
}

// Mutation returns the TagPostMutation object of the builder.
func (tpuo *TagPostUpdateOne) Mutation() *TagPostMutation {
	return tpuo.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (tpuo *TagPostUpdateOne) ClearTag() *TagPostUpdateOne {
	tpuo.mutation.ClearTag()
	return tpuo
}

// ClearPost clears the "post" edge to the Post entity.
func (tpuo *TagPostUpdateOne) ClearPost() *TagPostUpdateOne {
	tpuo.mutation.ClearPost()
	return tpuo
}

// Where appends a list predicates to the TagPostUpdate builder.
func (tpuo *TagPostUpdateOne) Where(ps ...predicate.TagPost) *TagPostUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TagPostUpdateOne) Select(field string, fields ...string) *TagPostUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TagPost entity.
func (tpuo *TagPostUpdateOne) Save(ctx context.Context) (*TagPost, error) {
	return withHooks(ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TagPostUpdateOne) SaveX(ctx context.Context) *TagPost {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TagPostUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TagPostUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TagPostUpdateOne) check() error {
	if tpuo.mutation.TagCleared() && len(tpuo.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagPost.tag"`)
	}
	if tpuo.mutation.PostCleared() && len(tpuo.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagPost.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpuo *TagPostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagPostUpdateOne {
	tpuo.modifiers = append(tpuo.modifiers, modifiers...)
	return tpuo
}

func (tpuo *TagPostUpdateOne) sqlSave(ctx context.Context) (_node *TagPost, err error) {
	if err := tpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tagpost.Table, tagpost.Columns, sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TagPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tagpost.FieldID)
		for _, f := range fields {
			if !tagpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tagpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tpuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.TagTable,
			Columns: []string{tagpost.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.TagTable,
			Columns: []string{tagpost.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.PostTable,
			Columns: []string{tagpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.PostTable,
			Columns: []string{tagpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tpuo.modifiers...)
	_node = &TagPost{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
