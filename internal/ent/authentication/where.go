// Code generated by ent, DO NOT EDIT.

package authentication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldCreatedAt, v))
}

// Service applies equality check predicate on the "service" field. It's identical to ServiceEQ.
func Service(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldService, v))
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldTokenType, v))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldIdentifier, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldToken, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldName, v))
}

// AccountAuthentication applies equality check predicate on the "account_authentication" field. It's identical to AccountAuthenticationEQ.
func AccountAuthentication(v xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldAccountAuthentication, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldCreatedAt, v))
}

// ServiceEQ applies the EQ predicate on the "service" field.
func ServiceEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldService, v))
}

// ServiceNEQ applies the NEQ predicate on the "service" field.
func ServiceNEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldService, v))
}

// ServiceIn applies the In predicate on the "service" field.
func ServiceIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldService, vs...))
}

// ServiceNotIn applies the NotIn predicate on the "service" field.
func ServiceNotIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldService, vs...))
}

// ServiceGT applies the GT predicate on the "service" field.
func ServiceGT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldService, v))
}

// ServiceGTE applies the GTE predicate on the "service" field.
func ServiceGTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldService, v))
}

// ServiceLT applies the LT predicate on the "service" field.
func ServiceLT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldService, v))
}

// ServiceLTE applies the LTE predicate on the "service" field.
func ServiceLTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldService, v))
}

// ServiceContains applies the Contains predicate on the "service" field.
func ServiceContains(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContains(FieldService, v))
}

// ServiceHasPrefix applies the HasPrefix predicate on the "service" field.
func ServiceHasPrefix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasPrefix(FieldService, v))
}

// ServiceHasSuffix applies the HasSuffix predicate on the "service" field.
func ServiceHasSuffix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasSuffix(FieldService, v))
}

// ServiceEqualFold applies the EqualFold predicate on the "service" field.
func ServiceEqualFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEqualFold(FieldService, v))
}

// ServiceContainsFold applies the ContainsFold predicate on the "service" field.
func ServiceContainsFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContainsFold(FieldService, v))
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldTokenType, v))
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldTokenType, v))
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldTokenType, vs...))
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldTokenType, vs...))
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldTokenType, v))
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldTokenType, v))
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldTokenType, v))
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldTokenType, v))
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContains(FieldTokenType, v))
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasPrefix(FieldTokenType, v))
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasSuffix(FieldTokenType, v))
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEqualFold(FieldTokenType, v))
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContainsFold(FieldTokenType, v))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContainsFold(FieldIdentifier, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContainsFold(FieldToken, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Authentication {
	return predicate.Authentication(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Authentication {
	return predicate.Authentication(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContainsFold(FieldName, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Authentication {
	return predicate.Authentication(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Authentication {
	return predicate.Authentication(sql.FieldNotNull(FieldMetadata))
}

// AccountAuthenticationEQ applies the EQ predicate on the "account_authentication" field.
func AccountAuthenticationEQ(v xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldAccountAuthentication, v))
}

// AccountAuthenticationNEQ applies the NEQ predicate on the "account_authentication" field.
func AccountAuthenticationNEQ(v xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldAccountAuthentication, v))
}

// AccountAuthenticationIn applies the In predicate on the "account_authentication" field.
func AccountAuthenticationIn(vs ...xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldAccountAuthentication, vs...))
}

// AccountAuthenticationNotIn applies the NotIn predicate on the "account_authentication" field.
func AccountAuthenticationNotIn(vs ...xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldAccountAuthentication, vs...))
}

// AccountAuthenticationGT applies the GT predicate on the "account_authentication" field.
func AccountAuthenticationGT(v xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldAccountAuthentication, v))
}

// AccountAuthenticationGTE applies the GTE predicate on the "account_authentication" field.
func AccountAuthenticationGTE(v xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldAccountAuthentication, v))
}

// AccountAuthenticationLT applies the LT predicate on the "account_authentication" field.
func AccountAuthenticationLT(v xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldAccountAuthentication, v))
}

// AccountAuthenticationLTE applies the LTE predicate on the "account_authentication" field.
func AccountAuthenticationLTE(v xid.ID) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldAccountAuthentication, v))
}

// AccountAuthenticationContains applies the Contains predicate on the "account_authentication" field.
func AccountAuthenticationContains(v xid.ID) predicate.Authentication {
	vc := v.String()
	return predicate.Authentication(sql.FieldContains(FieldAccountAuthentication, vc))
}

// AccountAuthenticationHasPrefix applies the HasPrefix predicate on the "account_authentication" field.
func AccountAuthenticationHasPrefix(v xid.ID) predicate.Authentication {
	vc := v.String()
	return predicate.Authentication(sql.FieldHasPrefix(FieldAccountAuthentication, vc))
}

// AccountAuthenticationHasSuffix applies the HasSuffix predicate on the "account_authentication" field.
func AccountAuthenticationHasSuffix(v xid.ID) predicate.Authentication {
	vc := v.String()
	return predicate.Authentication(sql.FieldHasSuffix(FieldAccountAuthentication, vc))
}

// AccountAuthenticationEqualFold applies the EqualFold predicate on the "account_authentication" field.
func AccountAuthenticationEqualFold(v xid.ID) predicate.Authentication {
	vc := v.String()
	return predicate.Authentication(sql.FieldEqualFold(FieldAccountAuthentication, vc))
}

// AccountAuthenticationContainsFold applies the ContainsFold predicate on the "account_authentication" field.
func AccountAuthenticationContainsFold(v xid.ID) predicate.Authentication {
	vc := v.String()
	return predicate.Authentication(sql.FieldContainsFold(FieldAccountAuthentication, vc))
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.Authentication {
	return predicate.Authentication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.Account) predicate.Authentication {
	return predicate.Authentication(func(s *sql.Selector) {
		step := newAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Authentication) predicate.Authentication {
	return predicate.Authentication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Authentication) predicate.Authentication {
	return predicate.Authentication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Authentication) predicate.Authentication {
	return predicate.Authentication(sql.NotPredicates(p))
}
