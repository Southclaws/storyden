// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/link"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// LinkQuery is the builder for querying Link entities.
type LinkQuery struct {
	config
	ctx                       *QueryContext
	order                     []link.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Link
	withPosts                 *PostQuery
	withPostContentReferences *PostQuery
	withNodes                 *NodeQuery
	withNodeContentReferences *NodeQuery
	withPrimaryImage          *AssetQuery
	withFaviconImage          *AssetQuery
	withAssets                *AssetQuery
	modifiers                 []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LinkQuery builder.
func (_q *LinkQuery) Where(ps ...predicate.Link) *LinkQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *LinkQuery) Limit(limit int) *LinkQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *LinkQuery) Offset(offset int) *LinkQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *LinkQuery) Unique(unique bool) *LinkQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *LinkQuery) Order(o ...link.OrderOption) *LinkQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryPosts chains the current query on the "posts" edge.
func (_q *LinkQuery) QueryPosts() *PostQuery {
	query := (&PostClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, link.PostsTable, link.PostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPostContentReferences chains the current query on the "post_content_references" edge.
func (_q *LinkQuery) QueryPostContentReferences() *PostQuery {
	query := (&PostClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, link.PostContentReferencesTable, link.PostContentReferencesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNodes chains the current query on the "nodes" edge.
func (_q *LinkQuery) QueryNodes() *NodeQuery {
	query := (&NodeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, selector),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, link.NodesTable, link.NodesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNodeContentReferences chains the current query on the "node_content_references" edge.
func (_q *LinkQuery) QueryNodeContentReferences() *NodeQuery {
	query := (&NodeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, selector),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, link.NodeContentReferencesTable, link.NodeContentReferencesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryImage chains the current query on the "primary_image" edge.
func (_q *LinkQuery) QueryPrimaryImage() *AssetQuery {
	query := (&AssetClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, link.PrimaryImageTable, link.PrimaryImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFaviconImage chains the current query on the "favicon_image" edge.
func (_q *LinkQuery) QueryFaviconImage() *AssetQuery {
	query := (&AssetClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, link.FaviconImageTable, link.FaviconImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssets chains the current query on the "assets" edge.
func (_q *LinkQuery) QueryAssets() *AssetQuery {
	query := (&AssetClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, link.AssetsTable, link.AssetsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Link entity from the query.
// Returns a *NotFoundError when no Link was found.
func (_q *LinkQuery) First(ctx context.Context) (*Link, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{link.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *LinkQuery) FirstX(ctx context.Context) *Link {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Link ID from the query.
// Returns a *NotFoundError when no Link ID was found.
func (_q *LinkQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{link.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *LinkQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Link entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Link entity is found.
// Returns a *NotFoundError when no Link entities are found.
func (_q *LinkQuery) Only(ctx context.Context) (*Link, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{link.Label}
	default:
		return nil, &NotSingularError{link.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *LinkQuery) OnlyX(ctx context.Context) *Link {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Link ID in the query.
// Returns a *NotSingularError when more than one Link ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *LinkQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{link.Label}
	default:
		err = &NotSingularError{link.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *LinkQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Links.
func (_q *LinkQuery) All(ctx context.Context) ([]*Link, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Link, *LinkQuery]()
	return withInterceptors[[]*Link](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *LinkQuery) AllX(ctx context.Context) []*Link {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Link IDs.
func (_q *LinkQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(link.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *LinkQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *LinkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*LinkQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *LinkQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *LinkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *LinkQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LinkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *LinkQuery) Clone() *LinkQuery {
	if _q == nil {
		return nil
	}
	return &LinkQuery{
		config:                    _q.config,
		ctx:                       _q.ctx.Clone(),
		order:                     append([]link.OrderOption{}, _q.order...),
		inters:                    append([]Interceptor{}, _q.inters...),
		predicates:                append([]predicate.Link{}, _q.predicates...),
		withPosts:                 _q.withPosts.Clone(),
		withPostContentReferences: _q.withPostContentReferences.Clone(),
		withNodes:                 _q.withNodes.Clone(),
		withNodeContentReferences: _q.withNodeContentReferences.Clone(),
		withPrimaryImage:          _q.withPrimaryImage.Clone(),
		withFaviconImage:          _q.withFaviconImage.Clone(),
		withAssets:                _q.withAssets.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithPosts tells the query-builder to eager-load the nodes that are connected to
// the "posts" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *LinkQuery) WithPosts(opts ...func(*PostQuery)) *LinkQuery {
	query := (&PostClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPosts = query
	return _q
}

// WithPostContentReferences tells the query-builder to eager-load the nodes that are connected to
// the "post_content_references" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *LinkQuery) WithPostContentReferences(opts ...func(*PostQuery)) *LinkQuery {
	query := (&PostClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPostContentReferences = query
	return _q
}

// WithNodes tells the query-builder to eager-load the nodes that are connected to
// the "nodes" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *LinkQuery) WithNodes(opts ...func(*NodeQuery)) *LinkQuery {
	query := (&NodeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNodes = query
	return _q
}

// WithNodeContentReferences tells the query-builder to eager-load the nodes that are connected to
// the "node_content_references" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *LinkQuery) WithNodeContentReferences(opts ...func(*NodeQuery)) *LinkQuery {
	query := (&NodeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNodeContentReferences = query
	return _q
}

// WithPrimaryImage tells the query-builder to eager-load the nodes that are connected to
// the "primary_image" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *LinkQuery) WithPrimaryImage(opts ...func(*AssetQuery)) *LinkQuery {
	query := (&AssetClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPrimaryImage = query
	return _q
}

// WithFaviconImage tells the query-builder to eager-load the nodes that are connected to
// the "favicon_image" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *LinkQuery) WithFaviconImage(opts ...func(*AssetQuery)) *LinkQuery {
	query := (&AssetClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withFaviconImage = query
	return _q
}

// WithAssets tells the query-builder to eager-load the nodes that are connected to
// the "assets" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *LinkQuery) WithAssets(opts ...func(*AssetQuery)) *LinkQuery {
	query := (&AssetClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAssets = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Link.Query().
//		GroupBy(link.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *LinkQuery) GroupBy(field string, fields ...string) *LinkGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LinkGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = link.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Link.Query().
//		Select(link.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *LinkQuery) Select(fields ...string) *LinkSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &LinkSelect{LinkQuery: _q}
	sbuild.label = link.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LinkSelect configured with the given aggregations.
func (_q *LinkQuery) Aggregate(fns ...AggregateFunc) *LinkSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *LinkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !link.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *LinkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Link, error) {
	var (
		nodes       = []*Link{}
		_spec       = _q.querySpec()
		loadedTypes = [7]bool{
			_q.withPosts != nil,
			_q.withPostContentReferences != nil,
			_q.withNodes != nil,
			_q.withNodeContentReferences != nil,
			_q.withPrimaryImage != nil,
			_q.withFaviconImage != nil,
			_q.withAssets != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Link).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Link{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withPosts; query != nil {
		if err := _q.loadPosts(ctx, query, nodes,
			func(n *Link) { n.Edges.Posts = []*Post{} },
			func(n *Link, e *Post) { n.Edges.Posts = append(n.Edges.Posts, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPostContentReferences; query != nil {
		if err := _q.loadPostContentReferences(ctx, query, nodes,
			func(n *Link) { n.Edges.PostContentReferences = []*Post{} },
			func(n *Link, e *Post) { n.Edges.PostContentReferences = append(n.Edges.PostContentReferences, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withNodes; query != nil {
		if err := _q.loadNodes(ctx, query, nodes,
			func(n *Link) { n.Edges.Nodes = []*Node{} },
			func(n *Link, e *Node) { n.Edges.Nodes = append(n.Edges.Nodes, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withNodeContentReferences; query != nil {
		if err := _q.loadNodeContentReferences(ctx, query, nodes,
			func(n *Link) { n.Edges.NodeContentReferences = []*Node{} },
			func(n *Link, e *Node) { n.Edges.NodeContentReferences = append(n.Edges.NodeContentReferences, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPrimaryImage; query != nil {
		if err := _q.loadPrimaryImage(ctx, query, nodes, nil,
			func(n *Link, e *Asset) { n.Edges.PrimaryImage = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withFaviconImage; query != nil {
		if err := _q.loadFaviconImage(ctx, query, nodes, nil,
			func(n *Link, e *Asset) { n.Edges.FaviconImage = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAssets; query != nil {
		if err := _q.loadAssets(ctx, query, nodes,
			func(n *Link) { n.Edges.Assets = []*Asset{} },
			func(n *Link, e *Asset) { n.Edges.Assets = append(n.Edges.Assets, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *LinkQuery) loadPosts(ctx context.Context, query *PostQuery, nodes []*Link, init func(*Link), assign func(*Link, *Post)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[xid.ID]*Link)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(post.FieldLinkID)
	}
	query.Where(predicate.Post(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(link.PostsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LinkID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "link_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *LinkQuery) loadPostContentReferences(ctx context.Context, query *PostQuery, nodes []*Link, init func(*Link), assign func(*Link, *Post)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[xid.ID]*Link)
	nids := make(map[xid.ID]map[*Link]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(link.PostContentReferencesTable)
		s.Join(joinT).On(s.C(post.FieldID), joinT.C(link.PostContentReferencesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(link.PostContentReferencesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(link.PostContentReferencesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(xid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*xid.ID)
				inValue := *values[1].(*xid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Link]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Post](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "post_content_references" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *LinkQuery) loadNodes(ctx context.Context, query *NodeQuery, nodes []*Link, init func(*Link), assign func(*Link, *Node)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[xid.ID]*Link)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(node.FieldLinkID)
	}
	query.Where(predicate.Node(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(link.NodesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LinkID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "link_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *LinkQuery) loadNodeContentReferences(ctx context.Context, query *NodeQuery, nodes []*Link, init func(*Link), assign func(*Link, *Node)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[xid.ID]*Link)
	nids := make(map[xid.ID]map[*Link]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(link.NodeContentReferencesTable)
		s.Join(joinT).On(s.C(node.FieldID), joinT.C(link.NodeContentReferencesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(link.NodeContentReferencesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(link.NodeContentReferencesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(xid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*xid.ID)
				inValue := *values[1].(*xid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Link]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Node](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "node_content_references" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *LinkQuery) loadPrimaryImage(ctx context.Context, query *AssetQuery, nodes []*Link, init func(*Link), assign func(*Link, *Asset)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Link)
	for i := range nodes {
		if nodes[i].PrimaryAssetID == nil {
			continue
		}
		fk := *nodes[i].PrimaryAssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "primary_asset_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *LinkQuery) loadFaviconImage(ctx context.Context, query *AssetQuery, nodes []*Link, init func(*Link), assign func(*Link, *Asset)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Link)
	for i := range nodes {
		if nodes[i].FaviconAssetID == nil {
			continue
		}
		fk := *nodes[i].FaviconAssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "favicon_asset_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *LinkQuery) loadAssets(ctx context.Context, query *AssetQuery, nodes []*Link, init func(*Link), assign func(*Link, *Asset)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[xid.ID]*Link)
	nids := make(map[xid.ID]map[*Link]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(link.AssetsTable)
		s.Join(joinT).On(s.C(asset.FieldID), joinT.C(link.AssetsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(link.AssetsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(link.AssetsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(xid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*xid.ID)
				inValue := *values[1].(*xid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Link]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Asset](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "assets" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (_q *LinkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *LinkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, link.FieldID)
		for i := range fields {
			if fields[i] != link.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withPrimaryImage != nil {
			_spec.Node.AddColumnOnce(link.FieldPrimaryAssetID)
		}
		if _q.withFaviconImage != nil {
			_spec.Node.AddColumnOnce(link.FieldFaviconAssetID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *LinkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(link.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = link.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *LinkQuery) Modify(modifiers ...func(s *sql.Selector)) *LinkSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// LinkGroupBy is the group-by builder for Link entities.
type LinkGroupBy struct {
	selector
	build *LinkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *LinkGroupBy) Aggregate(fns ...AggregateFunc) *LinkGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *LinkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LinkQuery, *LinkGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *LinkGroupBy) sqlScan(ctx context.Context, root *LinkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LinkSelect is the builder for selecting fields of Link entities.
type LinkSelect struct {
	*LinkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *LinkSelect) Aggregate(fns ...AggregateFunc) *LinkSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *LinkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LinkQuery, *LinkSelect](ctx, _s.LinkQuery, _s, _s.inters, v)
}

func (_s *LinkSelect) sqlScan(ctx context.Context, root *LinkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *LinkSelect) Modify(modifiers ...func(s *sql.Selector)) *LinkSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
