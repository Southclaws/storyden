// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/property"
	"github.com/Southclaws/storyden/internal/ent/propertyschema"
	"github.com/Southclaws/storyden/internal/ent/propertyschemafield"
	"github.com/rs/xid"
)

// PropertySchemaFieldQuery is the builder for querying PropertySchemaField entities.
type PropertySchemaFieldQuery struct {
	config
	ctx            *QueryContext
	order          []propertyschemafield.OrderOption
	inters         []Interceptor
	predicates     []predicate.PropertySchemaField
	withSchema     *PropertySchemaQuery
	withProperties *PropertyQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PropertySchemaFieldQuery builder.
func (psfq *PropertySchemaFieldQuery) Where(ps ...predicate.PropertySchemaField) *PropertySchemaFieldQuery {
	psfq.predicates = append(psfq.predicates, ps...)
	return psfq
}

// Limit the number of records to be returned by this query.
func (psfq *PropertySchemaFieldQuery) Limit(limit int) *PropertySchemaFieldQuery {
	psfq.ctx.Limit = &limit
	return psfq
}

// Offset to start from.
func (psfq *PropertySchemaFieldQuery) Offset(offset int) *PropertySchemaFieldQuery {
	psfq.ctx.Offset = &offset
	return psfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psfq *PropertySchemaFieldQuery) Unique(unique bool) *PropertySchemaFieldQuery {
	psfq.ctx.Unique = &unique
	return psfq
}

// Order specifies how the records should be ordered.
func (psfq *PropertySchemaFieldQuery) Order(o ...propertyschemafield.OrderOption) *PropertySchemaFieldQuery {
	psfq.order = append(psfq.order, o...)
	return psfq
}

// QuerySchema chains the current query on the "schema" edge.
func (psfq *PropertySchemaFieldQuery) QuerySchema() *PropertySchemaQuery {
	query := (&PropertySchemaClient{config: psfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(propertyschemafield.Table, propertyschemafield.FieldID, selector),
			sqlgraph.To(propertyschema.Table, propertyschema.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertyschemafield.SchemaTable, propertyschemafield.SchemaColumn),
		)
		fromU = sqlgraph.SetNeighbors(psfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProperties chains the current query on the "properties" edge.
func (psfq *PropertySchemaFieldQuery) QueryProperties() *PropertyQuery {
	query := (&PropertyClient{config: psfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(propertyschemafield.Table, propertyschemafield.FieldID, selector),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, propertyschemafield.PropertiesTable, propertyschemafield.PropertiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(psfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PropertySchemaField entity from the query.
// Returns a *NotFoundError when no PropertySchemaField was found.
func (psfq *PropertySchemaFieldQuery) First(ctx context.Context) (*PropertySchemaField, error) {
	nodes, err := psfq.Limit(1).All(setContextOp(ctx, psfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{propertyschemafield.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) FirstX(ctx context.Context) *PropertySchemaField {
	node, err := psfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PropertySchemaField ID from the query.
// Returns a *NotFoundError when no PropertySchemaField ID was found.
func (psfq *PropertySchemaFieldQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = psfq.Limit(1).IDs(setContextOp(ctx, psfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{propertyschemafield.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := psfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PropertySchemaField entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PropertySchemaField entity is found.
// Returns a *NotFoundError when no PropertySchemaField entities are found.
func (psfq *PropertySchemaFieldQuery) Only(ctx context.Context) (*PropertySchemaField, error) {
	nodes, err := psfq.Limit(2).All(setContextOp(ctx, psfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{propertyschemafield.Label}
	default:
		return nil, &NotSingularError{propertyschemafield.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) OnlyX(ctx context.Context) *PropertySchemaField {
	node, err := psfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PropertySchemaField ID in the query.
// Returns a *NotSingularError when more than one PropertySchemaField ID is found.
// Returns a *NotFoundError when no entities are found.
func (psfq *PropertySchemaFieldQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = psfq.Limit(2).IDs(setContextOp(ctx, psfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{propertyschemafield.Label}
	default:
		err = &NotSingularError{propertyschemafield.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := psfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PropertySchemaFields.
func (psfq *PropertySchemaFieldQuery) All(ctx context.Context) ([]*PropertySchemaField, error) {
	ctx = setContextOp(ctx, psfq.ctx, ent.OpQueryAll)
	if err := psfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PropertySchemaField, *PropertySchemaFieldQuery]()
	return withInterceptors[[]*PropertySchemaField](ctx, psfq, qr, psfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) AllX(ctx context.Context) []*PropertySchemaField {
	nodes, err := psfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PropertySchemaField IDs.
func (psfq *PropertySchemaFieldQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if psfq.ctx.Unique == nil && psfq.path != nil {
		psfq.Unique(true)
	}
	ctx = setContextOp(ctx, psfq.ctx, ent.OpQueryIDs)
	if err = psfq.Select(propertyschemafield.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := psfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psfq *PropertySchemaFieldQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, psfq.ctx, ent.OpQueryCount)
	if err := psfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, psfq, querierCount[*PropertySchemaFieldQuery](), psfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) CountX(ctx context.Context) int {
	count, err := psfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psfq *PropertySchemaFieldQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, psfq.ctx, ent.OpQueryExist)
	switch _, err := psfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (psfq *PropertySchemaFieldQuery) ExistX(ctx context.Context) bool {
	exist, err := psfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PropertySchemaFieldQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psfq *PropertySchemaFieldQuery) Clone() *PropertySchemaFieldQuery {
	if psfq == nil {
		return nil
	}
	return &PropertySchemaFieldQuery{
		config:         psfq.config,
		ctx:            psfq.ctx.Clone(),
		order:          append([]propertyschemafield.OrderOption{}, psfq.order...),
		inters:         append([]Interceptor{}, psfq.inters...),
		predicates:     append([]predicate.PropertySchemaField{}, psfq.predicates...),
		withSchema:     psfq.withSchema.Clone(),
		withProperties: psfq.withProperties.Clone(),
		// clone intermediate query.
		sql:       psfq.sql.Clone(),
		path:      psfq.path,
		modifiers: append([]func(*sql.Selector){}, psfq.modifiers...),
	}
}

// WithSchema tells the query-builder to eager-load the nodes that are connected to
// the "schema" edge. The optional arguments are used to configure the query builder of the edge.
func (psfq *PropertySchemaFieldQuery) WithSchema(opts ...func(*PropertySchemaQuery)) *PropertySchemaFieldQuery {
	query := (&PropertySchemaClient{config: psfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psfq.withSchema = query
	return psfq
}

// WithProperties tells the query-builder to eager-load the nodes that are connected to
// the "properties" edge. The optional arguments are used to configure the query builder of the edge.
func (psfq *PropertySchemaFieldQuery) WithProperties(opts ...func(*PropertyQuery)) *PropertySchemaFieldQuery {
	query := (&PropertyClient{config: psfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psfq.withProperties = query
	return psfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PropertySchemaField.Query().
//		GroupBy(propertyschemafield.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psfq *PropertySchemaFieldQuery) GroupBy(field string, fields ...string) *PropertySchemaFieldGroupBy {
	psfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PropertySchemaFieldGroupBy{build: psfq}
	grbuild.flds = &psfq.ctx.Fields
	grbuild.label = propertyschemafield.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.PropertySchemaField.Query().
//		Select(propertyschemafield.FieldName).
//		Scan(ctx, &v)
func (psfq *PropertySchemaFieldQuery) Select(fields ...string) *PropertySchemaFieldSelect {
	psfq.ctx.Fields = append(psfq.ctx.Fields, fields...)
	sbuild := &PropertySchemaFieldSelect{PropertySchemaFieldQuery: psfq}
	sbuild.label = propertyschemafield.Label
	sbuild.flds, sbuild.scan = &psfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PropertySchemaFieldSelect configured with the given aggregations.
func (psfq *PropertySchemaFieldQuery) Aggregate(fns ...AggregateFunc) *PropertySchemaFieldSelect {
	return psfq.Select().Aggregate(fns...)
}

func (psfq *PropertySchemaFieldQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range psfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, psfq); err != nil {
				return err
			}
		}
	}
	for _, f := range psfq.ctx.Fields {
		if !propertyschemafield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psfq.path != nil {
		prev, err := psfq.path(ctx)
		if err != nil {
			return err
		}
		psfq.sql = prev
	}
	return nil
}

func (psfq *PropertySchemaFieldQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PropertySchemaField, error) {
	var (
		nodes       = []*PropertySchemaField{}
		_spec       = psfq.querySpec()
		loadedTypes = [2]bool{
			psfq.withSchema != nil,
			psfq.withProperties != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PropertySchemaField).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PropertySchemaField{config: psfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(psfq.modifiers) > 0 {
		_spec.Modifiers = psfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psfq.withSchema; query != nil {
		if err := psfq.loadSchema(ctx, query, nodes, nil,
			func(n *PropertySchemaField, e *PropertySchema) { n.Edges.Schema = e }); err != nil {
			return nil, err
		}
	}
	if query := psfq.withProperties; query != nil {
		if err := psfq.loadProperties(ctx, query, nodes,
			func(n *PropertySchemaField) { n.Edges.Properties = []*Property{} },
			func(n *PropertySchemaField, e *Property) { n.Edges.Properties = append(n.Edges.Properties, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psfq *PropertySchemaFieldQuery) loadSchema(ctx context.Context, query *PropertySchemaQuery, nodes []*PropertySchemaField, init func(*PropertySchemaField), assign func(*PropertySchemaField, *PropertySchema)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*PropertySchemaField)
	for i := range nodes {
		fk := nodes[i].SchemaID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(propertyschema.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schema_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psfq *PropertySchemaFieldQuery) loadProperties(ctx context.Context, query *PropertyQuery, nodes []*PropertySchemaField, init func(*PropertySchemaField), assign func(*PropertySchemaField, *Property)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[xid.ID]*PropertySchemaField)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(property.FieldFieldID)
	}
	query.Where(predicate.Property(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(propertyschemafield.PropertiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FieldID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "field_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (psfq *PropertySchemaFieldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psfq.querySpec()
	if len(psfq.modifiers) > 0 {
		_spec.Modifiers = psfq.modifiers
	}
	_spec.Node.Columns = psfq.ctx.Fields
	if len(psfq.ctx.Fields) > 0 {
		_spec.Unique = psfq.ctx.Unique != nil && *psfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, psfq.driver, _spec)
}

func (psfq *PropertySchemaFieldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(propertyschemafield.Table, propertyschemafield.Columns, sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString))
	_spec.From = psfq.sql
	if unique := psfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if psfq.path != nil {
		_spec.Unique = true
	}
	if fields := psfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, propertyschemafield.FieldID)
		for i := range fields {
			if fields[i] != propertyschemafield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if psfq.withSchema != nil {
			_spec.Node.AddColumnOnce(propertyschemafield.FieldSchemaID)
		}
	}
	if ps := psfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psfq *PropertySchemaFieldQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psfq.driver.Dialect())
	t1 := builder.Table(propertyschemafield.Table)
	columns := psfq.ctx.Fields
	if len(columns) == 0 {
		columns = propertyschemafield.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psfq.sql != nil {
		selector = psfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psfq.ctx.Unique != nil && *psfq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range psfq.modifiers {
		m(selector)
	}
	for _, p := range psfq.predicates {
		p(selector)
	}
	for _, p := range psfq.order {
		p(selector)
	}
	if offset := psfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (psfq *PropertySchemaFieldQuery) Modify(modifiers ...func(s *sql.Selector)) *PropertySchemaFieldSelect {
	psfq.modifiers = append(psfq.modifiers, modifiers...)
	return psfq.Select()
}

// PropertySchemaFieldGroupBy is the group-by builder for PropertySchemaField entities.
type PropertySchemaFieldGroupBy struct {
	selector
	build *PropertySchemaFieldQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psfgb *PropertySchemaFieldGroupBy) Aggregate(fns ...AggregateFunc) *PropertySchemaFieldGroupBy {
	psfgb.fns = append(psfgb.fns, fns...)
	return psfgb
}

// Scan applies the selector query and scans the result into the given value.
func (psfgb *PropertySchemaFieldGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psfgb.build.ctx, ent.OpQueryGroupBy)
	if err := psfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PropertySchemaFieldQuery, *PropertySchemaFieldGroupBy](ctx, psfgb.build, psfgb, psfgb.build.inters, v)
}

func (psfgb *PropertySchemaFieldGroupBy) sqlScan(ctx context.Context, root *PropertySchemaFieldQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(psfgb.fns))
	for _, fn := range psfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*psfgb.flds)+len(psfgb.fns))
		for _, f := range *psfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*psfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PropertySchemaFieldSelect is the builder for selecting fields of PropertySchemaField entities.
type PropertySchemaFieldSelect struct {
	*PropertySchemaFieldQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (psfs *PropertySchemaFieldSelect) Aggregate(fns ...AggregateFunc) *PropertySchemaFieldSelect {
	psfs.fns = append(psfs.fns, fns...)
	return psfs
}

// Scan applies the selector query and scans the result into the given value.
func (psfs *PropertySchemaFieldSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psfs.ctx, ent.OpQuerySelect)
	if err := psfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PropertySchemaFieldQuery, *PropertySchemaFieldSelect](ctx, psfs.PropertySchemaFieldQuery, psfs, psfs.inters, v)
}

func (psfs *PropertySchemaFieldSelect) sqlScan(ctx context.Context, root *PropertySchemaFieldQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(psfs.fns))
	for _, fn := range psfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*psfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (psfs *PropertySchemaFieldSelect) Modify(modifiers ...func(s *sql.Selector)) *PropertySchemaFieldSelect {
	psfs.modifiers = append(psfs.modifiers, modifiers...)
	return psfs
}
