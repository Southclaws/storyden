// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagpost"
	"github.com/rs/xid"
)

// TagPostCreate is the builder for creating a TagPost entity.
type TagPostCreate struct {
	config
	mutation *TagPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTagID sets the "tag_id" field.
func (tpc *TagPostCreate) SetTagID(x xid.ID) *TagPostCreate {
	tpc.mutation.SetTagID(x)
	return tpc
}

// SetPostID sets the "post_id" field.
func (tpc *TagPostCreate) SetPostID(x xid.ID) *TagPostCreate {
	tpc.mutation.SetPostID(x)
	return tpc
}

// SetID sets the "id" field.
func (tpc *TagPostCreate) SetID(x xid.ID) *TagPostCreate {
	tpc.mutation.SetID(x)
	return tpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tpc *TagPostCreate) SetNillableID(x *xid.ID) *TagPostCreate {
	if x != nil {
		tpc.SetID(*x)
	}
	return tpc
}

// SetTag sets the "tag" edge to the Tag entity.
func (tpc *TagPostCreate) SetTag(t *Tag) *TagPostCreate {
	return tpc.SetTagID(t.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (tpc *TagPostCreate) SetPost(p *Post) *TagPostCreate {
	return tpc.SetPostID(p.ID)
}

// Mutation returns the TagPostMutation object of the builder.
func (tpc *TagPostCreate) Mutation() *TagPostMutation {
	return tpc.mutation
}

// Save creates the TagPost in the database.
func (tpc *TagPostCreate) Save(ctx context.Context) (*TagPost, error) {
	tpc.defaults()
	return withHooks(ctx, tpc.sqlSave, tpc.mutation, tpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TagPostCreate) SaveX(ctx context.Context) *TagPost {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TagPostCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TagPostCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpc *TagPostCreate) defaults() {
	if _, ok := tpc.mutation.ID(); !ok {
		v := tagpost.DefaultID()
		tpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TagPostCreate) check() error {
	if _, ok := tpc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "TagPost.tag_id"`)}
	}
	if _, ok := tpc.mutation.PostID(); !ok {
		return &ValidationError{Name: "post_id", err: errors.New(`ent: missing required field "TagPost.post_id"`)}
	}
	if v, ok := tpc.mutation.ID(); ok {
		if err := tagpost.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TagPost.id": %w`, err)}
		}
	}
	if len(tpc.mutation.TagIDs()) == 0 {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "TagPost.tag"`)}
	}
	if len(tpc.mutation.PostIDs()) == 0 {
		return &ValidationError{Name: "post", err: errors.New(`ent: missing required edge "TagPost.post"`)}
	}
	return nil
}

func (tpc *TagPostCreate) sqlSave(ctx context.Context) (*TagPost, error) {
	if err := tpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tpc.mutation.id = &_node.ID
	tpc.mutation.done = true
	return _node, nil
}

func (tpc *TagPostCreate) createSpec() (*TagPost, *sqlgraph.CreateSpec) {
	var (
		_node = &TagPost{config: tpc.config}
		_spec = sqlgraph.NewCreateSpec(tagpost.Table, sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString))
	)
	_spec.OnConflict = tpc.conflict
	if id, ok := tpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := tpc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.TagTable,
			Columns: []string{tagpost.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagpost.PostTable,
			Columns: []string{tagpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TagPost.Create().
//		SetTagID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagPostUpsert) {
//			SetTagID(v+v).
//		}).
//		Exec(ctx)
func (tpc *TagPostCreate) OnConflict(opts ...sql.ConflictOption) *TagPostUpsertOne {
	tpc.conflict = opts
	return &TagPostUpsertOne{
		create: tpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TagPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpc *TagPostCreate) OnConflictColumns(columns ...string) *TagPostUpsertOne {
	tpc.conflict = append(tpc.conflict, sql.ConflictColumns(columns...))
	return &TagPostUpsertOne{
		create: tpc,
	}
}

type (
	// TagPostUpsertOne is the builder for "upsert"-ing
	//  one TagPost node.
	TagPostUpsertOne struct {
		create *TagPostCreate
	}

	// TagPostUpsert is the "OnConflict" setter.
	TagPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetTagID sets the "tag_id" field.
func (u *TagPostUpsert) SetTagID(v xid.ID) *TagPostUpsert {
	u.Set(tagpost.FieldTagID, v)
	return u
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagPostUpsert) UpdateTagID() *TagPostUpsert {
	u.SetExcluded(tagpost.FieldTagID)
	return u
}

// SetPostID sets the "post_id" field.
func (u *TagPostUpsert) SetPostID(v xid.ID) *TagPostUpsert {
	u.Set(tagpost.FieldPostID, v)
	return u
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *TagPostUpsert) UpdatePostID() *TagPostUpsert {
	u.SetExcluded(tagpost.FieldPostID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TagPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tagpost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagPostUpsertOne) UpdateNewValues() *TagPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tagpost.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TagPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TagPostUpsertOne) Ignore() *TagPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagPostUpsertOne) DoNothing() *TagPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagPostCreate.OnConflict
// documentation for more info.
func (u *TagPostUpsertOne) Update(set func(*TagPostUpsert)) *TagPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTagID sets the "tag_id" field.
func (u *TagPostUpsertOne) SetTagID(v xid.ID) *TagPostUpsertOne {
	return u.Update(func(s *TagPostUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagPostUpsertOne) UpdateTagID() *TagPostUpsertOne {
	return u.Update(func(s *TagPostUpsert) {
		s.UpdateTagID()
	})
}

// SetPostID sets the "post_id" field.
func (u *TagPostUpsertOne) SetPostID(v xid.ID) *TagPostUpsertOne {
	return u.Update(func(s *TagPostUpsert) {
		s.SetPostID(v)
	})
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *TagPostUpsertOne) UpdatePostID() *TagPostUpsertOne {
	return u.Update(func(s *TagPostUpsert) {
		s.UpdatePostID()
	})
}

// Exec executes the query.
func (u *TagPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TagPostUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TagPostUpsertOne.ID is not supported by MySQL driver. Use TagPostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TagPostUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TagPostCreateBulk is the builder for creating many TagPost entities in bulk.
type TagPostCreateBulk struct {
	config
	err      error
	builders []*TagPostCreate
	conflict []sql.ConflictOption
}

// Save creates the TagPost entities in the database.
func (tpcb *TagPostCreateBulk) Save(ctx context.Context) ([]*TagPost, error) {
	if tpcb.err != nil {
		return nil, tpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TagPost, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TagPostCreateBulk) SaveX(ctx context.Context) []*TagPost {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TagPostCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TagPostCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TagPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagPostUpsert) {
//			SetTagID(v+v).
//		}).
//		Exec(ctx)
func (tpcb *TagPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *TagPostUpsertBulk {
	tpcb.conflict = opts
	return &TagPostUpsertBulk{
		create: tpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TagPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpcb *TagPostCreateBulk) OnConflictColumns(columns ...string) *TagPostUpsertBulk {
	tpcb.conflict = append(tpcb.conflict, sql.ConflictColumns(columns...))
	return &TagPostUpsertBulk{
		create: tpcb,
	}
}

// TagPostUpsertBulk is the builder for "upsert"-ing
// a bulk of TagPost nodes.
type TagPostUpsertBulk struct {
	create *TagPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TagPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tagpost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagPostUpsertBulk) UpdateNewValues() *TagPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tagpost.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TagPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TagPostUpsertBulk) Ignore() *TagPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagPostUpsertBulk) DoNothing() *TagPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagPostCreateBulk.OnConflict
// documentation for more info.
func (u *TagPostUpsertBulk) Update(set func(*TagPostUpsert)) *TagPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTagID sets the "tag_id" field.
func (u *TagPostUpsertBulk) SetTagID(v xid.ID) *TagPostUpsertBulk {
	return u.Update(func(s *TagPostUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagPostUpsertBulk) UpdateTagID() *TagPostUpsertBulk {
	return u.Update(func(s *TagPostUpsert) {
		s.UpdateTagID()
	})
}

// SetPostID sets the "post_id" field.
func (u *TagPostUpsertBulk) SetPostID(v xid.ID) *TagPostUpsertBulk {
	return u.Update(func(s *TagPostUpsert) {
		s.SetPostID(v)
	})
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *TagPostUpsertBulk) UpdatePostID() *TagPostUpsertBulk {
	return u.Update(func(s *TagPostUpsert) {
		s.UpdatePostID()
	})
}

// Exec executes the query.
func (u *TagPostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TagPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
