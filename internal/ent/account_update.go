// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/accountfollow"
	"github.com/Southclaws/storyden/internal/ent/accountroles"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/authentication"
	"github.com/Southclaws/storyden/internal/ent/collection"
	"github.com/Southclaws/storyden/internal/ent/email"
	"github.com/Southclaws/storyden/internal/ent/likepost"
	"github.com/Southclaws/storyden/internal/ent/mentionprofile"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/notification"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/react"
	"github.com/Southclaws/storyden/internal/ent/role"
	"github.com/Southclaws/storyden/internal/ent/schema"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/rs/xid"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks     []Hook
	mutation  *AccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AccountUpdate) SetUpdatedAt(t time.Time) *AccountUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AccountUpdate) SetDeletedAt(t time.Time) *AccountUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AccountUpdate) SetNillableDeletedAt(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AccountUpdate) ClearDeletedAt() *AccountUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetHandle sets the "handle" field.
func (au *AccountUpdate) SetHandle(s string) *AccountUpdate {
	au.mutation.SetHandle(s)
	return au
}

// SetNillableHandle sets the "handle" field if the given value is not nil.
func (au *AccountUpdate) SetNillableHandle(s *string) *AccountUpdate {
	if s != nil {
		au.SetHandle(*s)
	}
	return au
}

// SetName sets the "name" field.
func (au *AccountUpdate) SetName(s string) *AccountUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AccountUpdate) SetNillableName(s *string) *AccountUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetBio sets the "bio" field.
func (au *AccountUpdate) SetBio(s string) *AccountUpdate {
	au.mutation.SetBio(s)
	return au
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (au *AccountUpdate) SetNillableBio(s *string) *AccountUpdate {
	if s != nil {
		au.SetBio(*s)
	}
	return au
}

// ClearBio clears the value of the "bio" field.
func (au *AccountUpdate) ClearBio() *AccountUpdate {
	au.mutation.ClearBio()
	return au
}

// SetAdmin sets the "admin" field.
func (au *AccountUpdate) SetAdmin(b bool) *AccountUpdate {
	au.mutation.SetAdmin(b)
	return au
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (au *AccountUpdate) SetNillableAdmin(b *bool) *AccountUpdate {
	if b != nil {
		au.SetAdmin(*b)
	}
	return au
}

// SetLinks sets the "links" field.
func (au *AccountUpdate) SetLinks(sl []schema.ExternalLink) *AccountUpdate {
	au.mutation.SetLinks(sl)
	return au
}

// AppendLinks appends sl to the "links" field.
func (au *AccountUpdate) AppendLinks(sl []schema.ExternalLink) *AccountUpdate {
	au.mutation.AppendLinks(sl)
	return au
}

// ClearLinks clears the value of the "links" field.
func (au *AccountUpdate) ClearLinks() *AccountUpdate {
	au.mutation.ClearLinks()
	return au
}

// SetMetadata sets the "metadata" field.
func (au *AccountUpdate) SetMetadata(m map[string]interface{}) *AccountUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *AccountUpdate) ClearMetadata() *AccountUpdate {
	au.mutation.ClearMetadata()
	return au
}

// AddEmailIDs adds the "emails" edge to the Email entity by IDs.
func (au *AccountUpdate) AddEmailIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddEmailIDs(ids...)
	return au
}

// AddEmails adds the "emails" edges to the Email entity.
func (au *AccountUpdate) AddEmails(e ...*Email) *AccountUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmailIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (au *AccountUpdate) AddNotificationIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddNotificationIDs(ids...)
	return au
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (au *AccountUpdate) AddNotifications(n ...*Notification) *AccountUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNotificationIDs(ids...)
}

// AddTriggeredNotificationIDs adds the "triggered_notifications" edge to the Notification entity by IDs.
func (au *AccountUpdate) AddTriggeredNotificationIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddTriggeredNotificationIDs(ids...)
	return au
}

// AddTriggeredNotifications adds the "triggered_notifications" edges to the Notification entity.
func (au *AccountUpdate) AddTriggeredNotifications(n ...*Notification) *AccountUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddTriggeredNotificationIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the AccountFollow entity by IDs.
func (au *AccountUpdate) AddFollowingIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddFollowingIDs(ids...)
	return au
}

// AddFollowing adds the "following" edges to the AccountFollow entity.
func (au *AccountUpdate) AddFollowing(a ...*AccountFollow) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddFollowingIDs(ids...)
}

// AddFollowedByIDs adds the "followed_by" edge to the AccountFollow entity by IDs.
func (au *AccountUpdate) AddFollowedByIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddFollowedByIDs(ids...)
	return au
}

// AddFollowedBy adds the "followed_by" edges to the AccountFollow entity.
func (au *AccountUpdate) AddFollowedBy(a ...*AccountFollow) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddFollowedByIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (au *AccountUpdate) AddPostIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddPostIDs(ids...)
	return au
}

// AddPosts adds the "posts" edges to the Post entity.
func (au *AccountUpdate) AddPosts(p ...*Post) *AccountUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPostIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (au *AccountUpdate) AddReactIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddReactIDs(ids...)
	return au
}

// AddReacts adds the "reacts" edges to the React entity.
func (au *AccountUpdate) AddReacts(r ...*React) *AccountUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddReactIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the LikePost entity by IDs.
func (au *AccountUpdate) AddLikeIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddLikeIDs(ids...)
	return au
}

// AddLikes adds the "likes" edges to the LikePost entity.
func (au *AccountUpdate) AddLikes(l ...*LikePost) *AccountUpdate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.AddLikeIDs(ids...)
}

// AddMentionIDs adds the "mentions" edge to the MentionProfile entity by IDs.
func (au *AccountUpdate) AddMentionIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddMentionIDs(ids...)
	return au
}

// AddMentions adds the "mentions" edges to the MentionProfile entity.
func (au *AccountUpdate) AddMentions(m ...*MentionProfile) *AccountUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMentionIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (au *AccountUpdate) AddRoleIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddRoleIDs(ids...)
	return au
}

// AddRoles adds the "roles" edges to the Role entity.
func (au *AccountUpdate) AddRoles(r ...*Role) *AccountUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoleIDs(ids...)
}

// AddAuthenticationIDs adds the "authentication" edge to the Authentication entity by IDs.
func (au *AccountUpdate) AddAuthenticationIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddAuthenticationIDs(ids...)
	return au
}

// AddAuthentication adds the "authentication" edges to the Authentication entity.
func (au *AccountUpdate) AddAuthentication(a ...*Authentication) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAuthenticationIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (au *AccountUpdate) AddTagIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddTagIDs(ids...)
	return au
}

// AddTags adds the "tags" edges to the Tag entity.
func (au *AccountUpdate) AddTags(t ...*Tag) *AccountUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTagIDs(ids...)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (au *AccountUpdate) AddCollectionIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddCollectionIDs(ids...)
	return au
}

// AddCollections adds the "collections" edges to the Collection entity.
func (au *AccountUpdate) AddCollections(c ...*Collection) *AccountUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCollectionIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (au *AccountUpdate) AddNodeIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddNodeIDs(ids...)
	return au
}

// AddNodes adds the "nodes" edges to the Node entity.
func (au *AccountUpdate) AddNodes(n ...*Node) *AccountUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNodeIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (au *AccountUpdate) AddAssetIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddAssetIDs(ids...)
	return au
}

// AddAssets adds the "assets" edges to the Asset entity.
func (au *AccountUpdate) AddAssets(a ...*Asset) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAssetIDs(ids...)
}

// AddAccountRoleIDs adds the "account_roles" edge to the AccountRoles entity by IDs.
func (au *AccountUpdate) AddAccountRoleIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.AddAccountRoleIDs(ids...)
	return au
}

// AddAccountRoles adds the "account_roles" edges to the AccountRoles entity.
func (au *AccountUpdate) AddAccountRoles(a ...*AccountRoles) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAccountRoleIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// ClearEmails clears all "emails" edges to the Email entity.
func (au *AccountUpdate) ClearEmails() *AccountUpdate {
	au.mutation.ClearEmails()
	return au
}

// RemoveEmailIDs removes the "emails" edge to Email entities by IDs.
func (au *AccountUpdate) RemoveEmailIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveEmailIDs(ids...)
	return au
}

// RemoveEmails removes "emails" edges to Email entities.
func (au *AccountUpdate) RemoveEmails(e ...*Email) *AccountUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmailIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (au *AccountUpdate) ClearNotifications() *AccountUpdate {
	au.mutation.ClearNotifications()
	return au
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (au *AccountUpdate) RemoveNotificationIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveNotificationIDs(ids...)
	return au
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (au *AccountUpdate) RemoveNotifications(n ...*Notification) *AccountUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNotificationIDs(ids...)
}

// ClearTriggeredNotifications clears all "triggered_notifications" edges to the Notification entity.
func (au *AccountUpdate) ClearTriggeredNotifications() *AccountUpdate {
	au.mutation.ClearTriggeredNotifications()
	return au
}

// RemoveTriggeredNotificationIDs removes the "triggered_notifications" edge to Notification entities by IDs.
func (au *AccountUpdate) RemoveTriggeredNotificationIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveTriggeredNotificationIDs(ids...)
	return au
}

// RemoveTriggeredNotifications removes "triggered_notifications" edges to Notification entities.
func (au *AccountUpdate) RemoveTriggeredNotifications(n ...*Notification) *AccountUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveTriggeredNotificationIDs(ids...)
}

// ClearFollowing clears all "following" edges to the AccountFollow entity.
func (au *AccountUpdate) ClearFollowing() *AccountUpdate {
	au.mutation.ClearFollowing()
	return au
}

// RemoveFollowingIDs removes the "following" edge to AccountFollow entities by IDs.
func (au *AccountUpdate) RemoveFollowingIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveFollowingIDs(ids...)
	return au
}

// RemoveFollowing removes "following" edges to AccountFollow entities.
func (au *AccountUpdate) RemoveFollowing(a ...*AccountFollow) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveFollowingIDs(ids...)
}

// ClearFollowedBy clears all "followed_by" edges to the AccountFollow entity.
func (au *AccountUpdate) ClearFollowedBy() *AccountUpdate {
	au.mutation.ClearFollowedBy()
	return au
}

// RemoveFollowedByIDs removes the "followed_by" edge to AccountFollow entities by IDs.
func (au *AccountUpdate) RemoveFollowedByIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveFollowedByIDs(ids...)
	return au
}

// RemoveFollowedBy removes "followed_by" edges to AccountFollow entities.
func (au *AccountUpdate) RemoveFollowedBy(a ...*AccountFollow) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveFollowedByIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (au *AccountUpdate) ClearPosts() *AccountUpdate {
	au.mutation.ClearPosts()
	return au
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (au *AccountUpdate) RemovePostIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemovePostIDs(ids...)
	return au
}

// RemovePosts removes "posts" edges to Post entities.
func (au *AccountUpdate) RemovePosts(p ...*Post) *AccountUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePostIDs(ids...)
}

// ClearReacts clears all "reacts" edges to the React entity.
func (au *AccountUpdate) ClearReacts() *AccountUpdate {
	au.mutation.ClearReacts()
	return au
}

// RemoveReactIDs removes the "reacts" edge to React entities by IDs.
func (au *AccountUpdate) RemoveReactIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveReactIDs(ids...)
	return au
}

// RemoveReacts removes "reacts" edges to React entities.
func (au *AccountUpdate) RemoveReacts(r ...*React) *AccountUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveReactIDs(ids...)
}

// ClearLikes clears all "likes" edges to the LikePost entity.
func (au *AccountUpdate) ClearLikes() *AccountUpdate {
	au.mutation.ClearLikes()
	return au
}

// RemoveLikeIDs removes the "likes" edge to LikePost entities by IDs.
func (au *AccountUpdate) RemoveLikeIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveLikeIDs(ids...)
	return au
}

// RemoveLikes removes "likes" edges to LikePost entities.
func (au *AccountUpdate) RemoveLikes(l ...*LikePost) *AccountUpdate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.RemoveLikeIDs(ids...)
}

// ClearMentions clears all "mentions" edges to the MentionProfile entity.
func (au *AccountUpdate) ClearMentions() *AccountUpdate {
	au.mutation.ClearMentions()
	return au
}

// RemoveMentionIDs removes the "mentions" edge to MentionProfile entities by IDs.
func (au *AccountUpdate) RemoveMentionIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveMentionIDs(ids...)
	return au
}

// RemoveMentions removes "mentions" edges to MentionProfile entities.
func (au *AccountUpdate) RemoveMentions(m ...*MentionProfile) *AccountUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMentionIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (au *AccountUpdate) ClearRoles() *AccountUpdate {
	au.mutation.ClearRoles()
	return au
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (au *AccountUpdate) RemoveRoleIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveRoleIDs(ids...)
	return au
}

// RemoveRoles removes "roles" edges to Role entities.
func (au *AccountUpdate) RemoveRoles(r ...*Role) *AccountUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoleIDs(ids...)
}

// ClearAuthentication clears all "authentication" edges to the Authentication entity.
func (au *AccountUpdate) ClearAuthentication() *AccountUpdate {
	au.mutation.ClearAuthentication()
	return au
}

// RemoveAuthenticationIDs removes the "authentication" edge to Authentication entities by IDs.
func (au *AccountUpdate) RemoveAuthenticationIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveAuthenticationIDs(ids...)
	return au
}

// RemoveAuthentication removes "authentication" edges to Authentication entities.
func (au *AccountUpdate) RemoveAuthentication(a ...*Authentication) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAuthenticationIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (au *AccountUpdate) ClearTags() *AccountUpdate {
	au.mutation.ClearTags()
	return au
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (au *AccountUpdate) RemoveTagIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveTagIDs(ids...)
	return au
}

// RemoveTags removes "tags" edges to Tag entities.
func (au *AccountUpdate) RemoveTags(t ...*Tag) *AccountUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTagIDs(ids...)
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (au *AccountUpdate) ClearCollections() *AccountUpdate {
	au.mutation.ClearCollections()
	return au
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (au *AccountUpdate) RemoveCollectionIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveCollectionIDs(ids...)
	return au
}

// RemoveCollections removes "collections" edges to Collection entities.
func (au *AccountUpdate) RemoveCollections(c ...*Collection) *AccountUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCollectionIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (au *AccountUpdate) ClearNodes() *AccountUpdate {
	au.mutation.ClearNodes()
	return au
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (au *AccountUpdate) RemoveNodeIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveNodeIDs(ids...)
	return au
}

// RemoveNodes removes "nodes" edges to Node entities.
func (au *AccountUpdate) RemoveNodes(n ...*Node) *AccountUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNodeIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (au *AccountUpdate) ClearAssets() *AccountUpdate {
	au.mutation.ClearAssets()
	return au
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (au *AccountUpdate) RemoveAssetIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveAssetIDs(ids...)
	return au
}

// RemoveAssets removes "assets" edges to Asset entities.
func (au *AccountUpdate) RemoveAssets(a ...*Asset) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAssetIDs(ids...)
}

// ClearAccountRoles clears all "account_roles" edges to the AccountRoles entity.
func (au *AccountUpdate) ClearAccountRoles() *AccountUpdate {
	au.mutation.ClearAccountRoles()
	return au
}

// RemoveAccountRoleIDs removes the "account_roles" edge to AccountRoles entities by IDs.
func (au *AccountUpdate) RemoveAccountRoleIDs(ids ...xid.ID) *AccountUpdate {
	au.mutation.RemoveAccountRoleIDs(ids...)
	return au
}

// RemoveAccountRoles removes "account_roles" edges to AccountRoles entities.
func (au *AccountUpdate) RemoveAccountRoles(a ...*AccountRoles) *AccountUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAccountRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AccountUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := account.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AccountUpdate) check() error {
	if v, ok := au.mutation.Handle(); ok {
		if err := account.HandleValidator(v); err != nil {
			return &ValidationError{Name: "handle", err: fmt.Errorf(`ent: validator failed for field "Account.handle": %w`, err)}
		}
	}
	if v, ok := au.mutation.Name(); ok {
		if err := account.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Account.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AccountUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(account.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Handle(); ok {
		_spec.SetField(account.FieldHandle, field.TypeString, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(account.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Bio(); ok {
		_spec.SetField(account.FieldBio, field.TypeString, value)
	}
	if au.mutation.BioCleared() {
		_spec.ClearField(account.FieldBio, field.TypeString)
	}
	if value, ok := au.mutation.Admin(); ok {
		_spec.SetField(account.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := au.mutation.Links(); ok {
		_spec.SetField(account.FieldLinks, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, account.FieldLinks, value)
		})
	}
	if au.mutation.LinksCleared() {
		_spec.ClearField(account.FieldLinks, field.TypeJSON)
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(account.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(account.FieldMetadata, field.TypeJSON)
	}
	if au.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.EmailsTable,
			Columns: []string{account.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmailsIDs(); len(nodes) > 0 && !au.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.EmailsTable,
			Columns: []string{account.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.EmailsTable,
			Columns: []string{account.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NotificationsTable,
			Columns: []string{account.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !au.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NotificationsTable,
			Columns: []string{account.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NotificationsTable,
			Columns: []string{account.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TriggeredNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TriggeredNotificationsTable,
			Columns: []string{account.TriggeredNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTriggeredNotificationsIDs(); len(nodes) > 0 && !au.mutation.TriggeredNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TriggeredNotificationsTable,
			Columns: []string{account.TriggeredNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TriggeredNotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TriggeredNotificationsTable,
			Columns: []string{account.TriggeredNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowingTable,
			Columns: []string{account.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFollowingIDs(); len(nodes) > 0 && !au.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowingTable,
			Columns: []string{account.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowingTable,
			Columns: []string{account.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowedByTable,
			Columns: []string{account.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFollowedByIDs(); len(nodes) > 0 && !au.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowedByTable,
			Columns: []string{account.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FollowedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowedByTable,
			Columns: []string{account.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPostsIDs(); len(nodes) > 0 && !au.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ReactsTable,
			Columns: []string{account.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedReactsIDs(); len(nodes) > 0 && !au.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ReactsTable,
			Columns: []string{account.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ReactsTable,
			Columns: []string{account.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLikesIDs(); len(nodes) > 0 && !au.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.MentionsTable,
			Columns: []string{account.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMentionsIDs(); len(nodes) > 0 && !au.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.MentionsTable,
			Columns: []string{account.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MentionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.MentionsTable,
			Columns: []string{account.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   account.RolesTable,
			Columns: account.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		createE := &AccountRolesCreate{config: au.config, mutation: newAccountRolesMutation(au.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRolesIDs(); len(nodes) > 0 && !au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   account.RolesTable,
			Columns: account.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AccountRolesCreate{config: au.config, mutation: newAccountRolesMutation(au.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   account.RolesTable,
			Columns: account.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AccountRolesCreate{config: au.config, mutation: newAccountRolesMutation(au.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AuthenticationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AuthenticationTable,
			Columns: []string{account.AuthenticationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAuthenticationIDs(); len(nodes) > 0 && !au.mutation.AuthenticationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AuthenticationTable,
			Columns: []string{account.AuthenticationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AuthenticationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AuthenticationTable,
			Columns: []string{account.AuthenticationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.TagsTable,
			Columns: account.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTagsIDs(); len(nodes) > 0 && !au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.TagsTable,
			Columns: account.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.TagsTable,
			Columns: account.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CollectionsTable,
			Columns: []string{account.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !au.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CollectionsTable,
			Columns: []string{account.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CollectionsTable,
			Columns: []string{account.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNodesIDs(); len(nodes) > 0 && !au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AssetsTable,
			Columns: []string{account.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !au.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AssetsTable,
			Columns: []string{account.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AssetsTable,
			Columns: []string{account.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AccountRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   account.AccountRolesTable,
			Columns: []string{account.AccountRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAccountRolesIDs(); len(nodes) > 0 && !au.mutation.AccountRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   account.AccountRolesTable,
			Columns: []string{account.AccountRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AccountRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   account.AccountRolesTable,
			Columns: []string{account.AccountRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AccountUpdateOne) SetUpdatedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AccountUpdateOne) SetDeletedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableDeletedAt(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AccountUpdateOne) ClearDeletedAt() *AccountUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetHandle sets the "handle" field.
func (auo *AccountUpdateOne) SetHandle(s string) *AccountUpdateOne {
	auo.mutation.SetHandle(s)
	return auo
}

// SetNillableHandle sets the "handle" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableHandle(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetHandle(*s)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *AccountUpdateOne) SetName(s string) *AccountUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableName(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetBio sets the "bio" field.
func (auo *AccountUpdateOne) SetBio(s string) *AccountUpdateOne {
	auo.mutation.SetBio(s)
	return auo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableBio(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetBio(*s)
	}
	return auo
}

// ClearBio clears the value of the "bio" field.
func (auo *AccountUpdateOne) ClearBio() *AccountUpdateOne {
	auo.mutation.ClearBio()
	return auo
}

// SetAdmin sets the "admin" field.
func (auo *AccountUpdateOne) SetAdmin(b bool) *AccountUpdateOne {
	auo.mutation.SetAdmin(b)
	return auo
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableAdmin(b *bool) *AccountUpdateOne {
	if b != nil {
		auo.SetAdmin(*b)
	}
	return auo
}

// SetLinks sets the "links" field.
func (auo *AccountUpdateOne) SetLinks(sl []schema.ExternalLink) *AccountUpdateOne {
	auo.mutation.SetLinks(sl)
	return auo
}

// AppendLinks appends sl to the "links" field.
func (auo *AccountUpdateOne) AppendLinks(sl []schema.ExternalLink) *AccountUpdateOne {
	auo.mutation.AppendLinks(sl)
	return auo
}

// ClearLinks clears the value of the "links" field.
func (auo *AccountUpdateOne) ClearLinks() *AccountUpdateOne {
	auo.mutation.ClearLinks()
	return auo
}

// SetMetadata sets the "metadata" field.
func (auo *AccountUpdateOne) SetMetadata(m map[string]interface{}) *AccountUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *AccountUpdateOne) ClearMetadata() *AccountUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// AddEmailIDs adds the "emails" edge to the Email entity by IDs.
func (auo *AccountUpdateOne) AddEmailIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddEmailIDs(ids...)
	return auo
}

// AddEmails adds the "emails" edges to the Email entity.
func (auo *AccountUpdateOne) AddEmails(e ...*Email) *AccountUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmailIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (auo *AccountUpdateOne) AddNotificationIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddNotificationIDs(ids...)
	return auo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (auo *AccountUpdateOne) AddNotifications(n ...*Notification) *AccountUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNotificationIDs(ids...)
}

// AddTriggeredNotificationIDs adds the "triggered_notifications" edge to the Notification entity by IDs.
func (auo *AccountUpdateOne) AddTriggeredNotificationIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddTriggeredNotificationIDs(ids...)
	return auo
}

// AddTriggeredNotifications adds the "triggered_notifications" edges to the Notification entity.
func (auo *AccountUpdateOne) AddTriggeredNotifications(n ...*Notification) *AccountUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddTriggeredNotificationIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the AccountFollow entity by IDs.
func (auo *AccountUpdateOne) AddFollowingIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddFollowingIDs(ids...)
	return auo
}

// AddFollowing adds the "following" edges to the AccountFollow entity.
func (auo *AccountUpdateOne) AddFollowing(a ...*AccountFollow) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddFollowingIDs(ids...)
}

// AddFollowedByIDs adds the "followed_by" edge to the AccountFollow entity by IDs.
func (auo *AccountUpdateOne) AddFollowedByIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddFollowedByIDs(ids...)
	return auo
}

// AddFollowedBy adds the "followed_by" edges to the AccountFollow entity.
func (auo *AccountUpdateOne) AddFollowedBy(a ...*AccountFollow) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddFollowedByIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (auo *AccountUpdateOne) AddPostIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddPostIDs(ids...)
	return auo
}

// AddPosts adds the "posts" edges to the Post entity.
func (auo *AccountUpdateOne) AddPosts(p ...*Post) *AccountUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPostIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (auo *AccountUpdateOne) AddReactIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddReactIDs(ids...)
	return auo
}

// AddReacts adds the "reacts" edges to the React entity.
func (auo *AccountUpdateOne) AddReacts(r ...*React) *AccountUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddReactIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the LikePost entity by IDs.
func (auo *AccountUpdateOne) AddLikeIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddLikeIDs(ids...)
	return auo
}

// AddLikes adds the "likes" edges to the LikePost entity.
func (auo *AccountUpdateOne) AddLikes(l ...*LikePost) *AccountUpdateOne {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.AddLikeIDs(ids...)
}

// AddMentionIDs adds the "mentions" edge to the MentionProfile entity by IDs.
func (auo *AccountUpdateOne) AddMentionIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddMentionIDs(ids...)
	return auo
}

// AddMentions adds the "mentions" edges to the MentionProfile entity.
func (auo *AccountUpdateOne) AddMentions(m ...*MentionProfile) *AccountUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMentionIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (auo *AccountUpdateOne) AddRoleIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddRoleIDs(ids...)
	return auo
}

// AddRoles adds the "roles" edges to the Role entity.
func (auo *AccountUpdateOne) AddRoles(r ...*Role) *AccountUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoleIDs(ids...)
}

// AddAuthenticationIDs adds the "authentication" edge to the Authentication entity by IDs.
func (auo *AccountUpdateOne) AddAuthenticationIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddAuthenticationIDs(ids...)
	return auo
}

// AddAuthentication adds the "authentication" edges to the Authentication entity.
func (auo *AccountUpdateOne) AddAuthentication(a ...*Authentication) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAuthenticationIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (auo *AccountUpdateOne) AddTagIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddTagIDs(ids...)
	return auo
}

// AddTags adds the "tags" edges to the Tag entity.
func (auo *AccountUpdateOne) AddTags(t ...*Tag) *AccountUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTagIDs(ids...)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (auo *AccountUpdateOne) AddCollectionIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddCollectionIDs(ids...)
	return auo
}

// AddCollections adds the "collections" edges to the Collection entity.
func (auo *AccountUpdateOne) AddCollections(c ...*Collection) *AccountUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCollectionIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (auo *AccountUpdateOne) AddNodeIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddNodeIDs(ids...)
	return auo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (auo *AccountUpdateOne) AddNodes(n ...*Node) *AccountUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNodeIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (auo *AccountUpdateOne) AddAssetIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddAssetIDs(ids...)
	return auo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (auo *AccountUpdateOne) AddAssets(a ...*Asset) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAssetIDs(ids...)
}

// AddAccountRoleIDs adds the "account_roles" edge to the AccountRoles entity by IDs.
func (auo *AccountUpdateOne) AddAccountRoleIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.AddAccountRoleIDs(ids...)
	return auo
}

// AddAccountRoles adds the "account_roles" edges to the AccountRoles entity.
func (auo *AccountUpdateOne) AddAccountRoles(a ...*AccountRoles) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAccountRoleIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// ClearEmails clears all "emails" edges to the Email entity.
func (auo *AccountUpdateOne) ClearEmails() *AccountUpdateOne {
	auo.mutation.ClearEmails()
	return auo
}

// RemoveEmailIDs removes the "emails" edge to Email entities by IDs.
func (auo *AccountUpdateOne) RemoveEmailIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveEmailIDs(ids...)
	return auo
}

// RemoveEmails removes "emails" edges to Email entities.
func (auo *AccountUpdateOne) RemoveEmails(e ...*Email) *AccountUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmailIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (auo *AccountUpdateOne) ClearNotifications() *AccountUpdateOne {
	auo.mutation.ClearNotifications()
	return auo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (auo *AccountUpdateOne) RemoveNotificationIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveNotificationIDs(ids...)
	return auo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (auo *AccountUpdateOne) RemoveNotifications(n ...*Notification) *AccountUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNotificationIDs(ids...)
}

// ClearTriggeredNotifications clears all "triggered_notifications" edges to the Notification entity.
func (auo *AccountUpdateOne) ClearTriggeredNotifications() *AccountUpdateOne {
	auo.mutation.ClearTriggeredNotifications()
	return auo
}

// RemoveTriggeredNotificationIDs removes the "triggered_notifications" edge to Notification entities by IDs.
func (auo *AccountUpdateOne) RemoveTriggeredNotificationIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveTriggeredNotificationIDs(ids...)
	return auo
}

// RemoveTriggeredNotifications removes "triggered_notifications" edges to Notification entities.
func (auo *AccountUpdateOne) RemoveTriggeredNotifications(n ...*Notification) *AccountUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveTriggeredNotificationIDs(ids...)
}

// ClearFollowing clears all "following" edges to the AccountFollow entity.
func (auo *AccountUpdateOne) ClearFollowing() *AccountUpdateOne {
	auo.mutation.ClearFollowing()
	return auo
}

// RemoveFollowingIDs removes the "following" edge to AccountFollow entities by IDs.
func (auo *AccountUpdateOne) RemoveFollowingIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveFollowingIDs(ids...)
	return auo
}

// RemoveFollowing removes "following" edges to AccountFollow entities.
func (auo *AccountUpdateOne) RemoveFollowing(a ...*AccountFollow) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveFollowingIDs(ids...)
}

// ClearFollowedBy clears all "followed_by" edges to the AccountFollow entity.
func (auo *AccountUpdateOne) ClearFollowedBy() *AccountUpdateOne {
	auo.mutation.ClearFollowedBy()
	return auo
}

// RemoveFollowedByIDs removes the "followed_by" edge to AccountFollow entities by IDs.
func (auo *AccountUpdateOne) RemoveFollowedByIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveFollowedByIDs(ids...)
	return auo
}

// RemoveFollowedBy removes "followed_by" edges to AccountFollow entities.
func (auo *AccountUpdateOne) RemoveFollowedBy(a ...*AccountFollow) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveFollowedByIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (auo *AccountUpdateOne) ClearPosts() *AccountUpdateOne {
	auo.mutation.ClearPosts()
	return auo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (auo *AccountUpdateOne) RemovePostIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemovePostIDs(ids...)
	return auo
}

// RemovePosts removes "posts" edges to Post entities.
func (auo *AccountUpdateOne) RemovePosts(p ...*Post) *AccountUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePostIDs(ids...)
}

// ClearReacts clears all "reacts" edges to the React entity.
func (auo *AccountUpdateOne) ClearReacts() *AccountUpdateOne {
	auo.mutation.ClearReacts()
	return auo
}

// RemoveReactIDs removes the "reacts" edge to React entities by IDs.
func (auo *AccountUpdateOne) RemoveReactIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveReactIDs(ids...)
	return auo
}

// RemoveReacts removes "reacts" edges to React entities.
func (auo *AccountUpdateOne) RemoveReacts(r ...*React) *AccountUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveReactIDs(ids...)
}

// ClearLikes clears all "likes" edges to the LikePost entity.
func (auo *AccountUpdateOne) ClearLikes() *AccountUpdateOne {
	auo.mutation.ClearLikes()
	return auo
}

// RemoveLikeIDs removes the "likes" edge to LikePost entities by IDs.
func (auo *AccountUpdateOne) RemoveLikeIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveLikeIDs(ids...)
	return auo
}

// RemoveLikes removes "likes" edges to LikePost entities.
func (auo *AccountUpdateOne) RemoveLikes(l ...*LikePost) *AccountUpdateOne {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.RemoveLikeIDs(ids...)
}

// ClearMentions clears all "mentions" edges to the MentionProfile entity.
func (auo *AccountUpdateOne) ClearMentions() *AccountUpdateOne {
	auo.mutation.ClearMentions()
	return auo
}

// RemoveMentionIDs removes the "mentions" edge to MentionProfile entities by IDs.
func (auo *AccountUpdateOne) RemoveMentionIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveMentionIDs(ids...)
	return auo
}

// RemoveMentions removes "mentions" edges to MentionProfile entities.
func (auo *AccountUpdateOne) RemoveMentions(m ...*MentionProfile) *AccountUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMentionIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (auo *AccountUpdateOne) ClearRoles() *AccountUpdateOne {
	auo.mutation.ClearRoles()
	return auo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (auo *AccountUpdateOne) RemoveRoleIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveRoleIDs(ids...)
	return auo
}

// RemoveRoles removes "roles" edges to Role entities.
func (auo *AccountUpdateOne) RemoveRoles(r ...*Role) *AccountUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoleIDs(ids...)
}

// ClearAuthentication clears all "authentication" edges to the Authentication entity.
func (auo *AccountUpdateOne) ClearAuthentication() *AccountUpdateOne {
	auo.mutation.ClearAuthentication()
	return auo
}

// RemoveAuthenticationIDs removes the "authentication" edge to Authentication entities by IDs.
func (auo *AccountUpdateOne) RemoveAuthenticationIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveAuthenticationIDs(ids...)
	return auo
}

// RemoveAuthentication removes "authentication" edges to Authentication entities.
func (auo *AccountUpdateOne) RemoveAuthentication(a ...*Authentication) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAuthenticationIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (auo *AccountUpdateOne) ClearTags() *AccountUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (auo *AccountUpdateOne) RemoveTagIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveTagIDs(ids...)
	return auo
}

// RemoveTags removes "tags" edges to Tag entities.
func (auo *AccountUpdateOne) RemoveTags(t ...*Tag) *AccountUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTagIDs(ids...)
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (auo *AccountUpdateOne) ClearCollections() *AccountUpdateOne {
	auo.mutation.ClearCollections()
	return auo
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (auo *AccountUpdateOne) RemoveCollectionIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveCollectionIDs(ids...)
	return auo
}

// RemoveCollections removes "collections" edges to Collection entities.
func (auo *AccountUpdateOne) RemoveCollections(c ...*Collection) *AccountUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCollectionIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (auo *AccountUpdateOne) ClearNodes() *AccountUpdateOne {
	auo.mutation.ClearNodes()
	return auo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (auo *AccountUpdateOne) RemoveNodeIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveNodeIDs(ids...)
	return auo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (auo *AccountUpdateOne) RemoveNodes(n ...*Node) *AccountUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNodeIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (auo *AccountUpdateOne) ClearAssets() *AccountUpdateOne {
	auo.mutation.ClearAssets()
	return auo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (auo *AccountUpdateOne) RemoveAssetIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveAssetIDs(ids...)
	return auo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (auo *AccountUpdateOne) RemoveAssets(a ...*Asset) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAssetIDs(ids...)
}

// ClearAccountRoles clears all "account_roles" edges to the AccountRoles entity.
func (auo *AccountUpdateOne) ClearAccountRoles() *AccountUpdateOne {
	auo.mutation.ClearAccountRoles()
	return auo
}

// RemoveAccountRoleIDs removes the "account_roles" edge to AccountRoles entities by IDs.
func (auo *AccountUpdateOne) RemoveAccountRoleIDs(ids ...xid.ID) *AccountUpdateOne {
	auo.mutation.RemoveAccountRoleIDs(ids...)
	return auo
}

// RemoveAccountRoles removes "account_roles" edges to AccountRoles entities.
func (auo *AccountUpdateOne) RemoveAccountRoles(a ...*AccountRoles) *AccountUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAccountRoleIDs(ids...)
}

// Where appends a list predicates to the AccountUpdate builder.
func (auo *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AccountUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := account.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AccountUpdateOne) check() error {
	if v, ok := auo.mutation.Handle(); ok {
		if err := account.HandleValidator(v); err != nil {
			return &ValidationError{Name: "handle", err: fmt.Errorf(`ent: validator failed for field "Account.handle": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Name(); ok {
		if err := account.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Account.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AccountUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(account.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Handle(); ok {
		_spec.SetField(account.FieldHandle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(account.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Bio(); ok {
		_spec.SetField(account.FieldBio, field.TypeString, value)
	}
	if auo.mutation.BioCleared() {
		_spec.ClearField(account.FieldBio, field.TypeString)
	}
	if value, ok := auo.mutation.Admin(); ok {
		_spec.SetField(account.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := auo.mutation.Links(); ok {
		_spec.SetField(account.FieldLinks, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, account.FieldLinks, value)
		})
	}
	if auo.mutation.LinksCleared() {
		_spec.ClearField(account.FieldLinks, field.TypeJSON)
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(account.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(account.FieldMetadata, field.TypeJSON)
	}
	if auo.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.EmailsTable,
			Columns: []string{account.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmailsIDs(); len(nodes) > 0 && !auo.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.EmailsTable,
			Columns: []string{account.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.EmailsTable,
			Columns: []string{account.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NotificationsTable,
			Columns: []string{account.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !auo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NotificationsTable,
			Columns: []string{account.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NotificationsTable,
			Columns: []string{account.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TriggeredNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TriggeredNotificationsTable,
			Columns: []string{account.TriggeredNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTriggeredNotificationsIDs(); len(nodes) > 0 && !auo.mutation.TriggeredNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TriggeredNotificationsTable,
			Columns: []string{account.TriggeredNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TriggeredNotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TriggeredNotificationsTable,
			Columns: []string{account.TriggeredNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowingTable,
			Columns: []string{account.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFollowingIDs(); len(nodes) > 0 && !auo.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowingTable,
			Columns: []string{account.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowingTable,
			Columns: []string{account.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowedByTable,
			Columns: []string{account.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFollowedByIDs(); len(nodes) > 0 && !auo.mutation.FollowedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowedByTable,
			Columns: []string{account.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FollowedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.FollowedByTable,
			Columns: []string{account.FollowedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountfollow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !auo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ReactsTable,
			Columns: []string{account.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedReactsIDs(); len(nodes) > 0 && !auo.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ReactsTable,
			Columns: []string{account.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ReactsTable,
			Columns: []string{account.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !auo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.MentionsTable,
			Columns: []string{account.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMentionsIDs(); len(nodes) > 0 && !auo.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.MentionsTable,
			Columns: []string{account.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MentionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.MentionsTable,
			Columns: []string{account.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   account.RolesTable,
			Columns: account.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		createE := &AccountRolesCreate{config: auo.config, mutation: newAccountRolesMutation(auo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   account.RolesTable,
			Columns: account.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AccountRolesCreate{config: auo.config, mutation: newAccountRolesMutation(auo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   account.RolesTable,
			Columns: account.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AccountRolesCreate{config: auo.config, mutation: newAccountRolesMutation(auo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AuthenticationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AuthenticationTable,
			Columns: []string{account.AuthenticationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAuthenticationIDs(); len(nodes) > 0 && !auo.mutation.AuthenticationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AuthenticationTable,
			Columns: []string{account.AuthenticationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AuthenticationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AuthenticationTable,
			Columns: []string{account.AuthenticationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.TagsTable,
			Columns: account.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.TagsTable,
			Columns: account.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.TagsTable,
			Columns: account.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CollectionsTable,
			Columns: []string{account.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !auo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CollectionsTable,
			Columns: []string{account.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CollectionsTable,
			Columns: []string{account.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AssetsTable,
			Columns: []string{account.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !auo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AssetsTable,
			Columns: []string{account.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.AssetsTable,
			Columns: []string{account.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AccountRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   account.AccountRolesTable,
			Columns: []string{account.AccountRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAccountRolesIDs(); len(nodes) > 0 && !auo.mutation.AccountRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   account.AccountRolesTable,
			Columns: []string{account.AccountRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AccountRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   account.AccountRolesTable,
			Columns: []string{account.AccountRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
