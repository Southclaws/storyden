// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/likepost"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// LikePostQuery is the builder for querying LikePost entities.
type LikePostQuery struct {
	config
	ctx         *QueryContext
	order       []likepost.OrderOption
	inters      []Interceptor
	predicates  []predicate.LikePost
	withAccount *AccountQuery
	withPost    *PostQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LikePostQuery builder.
func (lpq *LikePostQuery) Where(ps ...predicate.LikePost) *LikePostQuery {
	lpq.predicates = append(lpq.predicates, ps...)
	return lpq
}

// Limit the number of records to be returned by this query.
func (lpq *LikePostQuery) Limit(limit int) *LikePostQuery {
	lpq.ctx.Limit = &limit
	return lpq
}

// Offset to start from.
func (lpq *LikePostQuery) Offset(offset int) *LikePostQuery {
	lpq.ctx.Offset = &offset
	return lpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lpq *LikePostQuery) Unique(unique bool) *LikePostQuery {
	lpq.ctx.Unique = &unique
	return lpq
}

// Order specifies how the records should be ordered.
func (lpq *LikePostQuery) Order(o ...likepost.OrderOption) *LikePostQuery {
	lpq.order = append(lpq.order, o...)
	return lpq
}

// QueryAccount chains the current query on the "account" edge.
func (lpq *LikePostQuery) QueryAccount() *AccountQuery {
	query := (&AccountClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(likepost.Table, likepost.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, likepost.AccountTable, likepost.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPost chains the current query on the "Post" edge.
func (lpq *LikePostQuery) QueryPost() *PostQuery {
	query := (&PostClient{config: lpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(likepost.Table, likepost.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, likepost.PostTable, likepost.PostColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LikePost entity from the query.
// Returns a *NotFoundError when no LikePost was found.
func (lpq *LikePostQuery) First(ctx context.Context) (*LikePost, error) {
	nodes, err := lpq.Limit(1).All(setContextOp(ctx, lpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{likepost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lpq *LikePostQuery) FirstX(ctx context.Context) *LikePost {
	node, err := lpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LikePost ID from the query.
// Returns a *NotFoundError when no LikePost ID was found.
func (lpq *LikePostQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = lpq.Limit(1).IDs(setContextOp(ctx, lpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{likepost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lpq *LikePostQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := lpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LikePost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LikePost entity is found.
// Returns a *NotFoundError when no LikePost entities are found.
func (lpq *LikePostQuery) Only(ctx context.Context) (*LikePost, error) {
	nodes, err := lpq.Limit(2).All(setContextOp(ctx, lpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{likepost.Label}
	default:
		return nil, &NotSingularError{likepost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lpq *LikePostQuery) OnlyX(ctx context.Context) *LikePost {
	node, err := lpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LikePost ID in the query.
// Returns a *NotSingularError when more than one LikePost ID is found.
// Returns a *NotFoundError when no entities are found.
func (lpq *LikePostQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = lpq.Limit(2).IDs(setContextOp(ctx, lpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{likepost.Label}
	default:
		err = &NotSingularError{likepost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lpq *LikePostQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := lpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LikePosts.
func (lpq *LikePostQuery) All(ctx context.Context) ([]*LikePost, error) {
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryAll)
	if err := lpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LikePost, *LikePostQuery]()
	return withInterceptors[[]*LikePost](ctx, lpq, qr, lpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lpq *LikePostQuery) AllX(ctx context.Context) []*LikePost {
	nodes, err := lpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LikePost IDs.
func (lpq *LikePostQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if lpq.ctx.Unique == nil && lpq.path != nil {
		lpq.Unique(true)
	}
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryIDs)
	if err = lpq.Select(likepost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lpq *LikePostQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := lpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lpq *LikePostQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryCount)
	if err := lpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lpq, querierCount[*LikePostQuery](), lpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lpq *LikePostQuery) CountX(ctx context.Context) int {
	count, err := lpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lpq *LikePostQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lpq.ctx, ent.OpQueryExist)
	switch _, err := lpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lpq *LikePostQuery) ExistX(ctx context.Context) bool {
	exist, err := lpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LikePostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lpq *LikePostQuery) Clone() *LikePostQuery {
	if lpq == nil {
		return nil
	}
	return &LikePostQuery{
		config:      lpq.config,
		ctx:         lpq.ctx.Clone(),
		order:       append([]likepost.OrderOption{}, lpq.order...),
		inters:      append([]Interceptor{}, lpq.inters...),
		predicates:  append([]predicate.LikePost{}, lpq.predicates...),
		withAccount: lpq.withAccount.Clone(),
		withPost:    lpq.withPost.Clone(),
		// clone intermediate query.
		sql:       lpq.sql.Clone(),
		path:      lpq.path,
		modifiers: append([]func(*sql.Selector){}, lpq.modifiers...),
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LikePostQuery) WithAccount(opts ...func(*AccountQuery)) *LikePostQuery {
	query := (&AccountClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withAccount = query
	return lpq
}

// WithPost tells the query-builder to eager-load the nodes that are connected to
// the "Post" edge. The optional arguments are used to configure the query builder of the edge.
func (lpq *LikePostQuery) WithPost(opts ...func(*PostQuery)) *LikePostQuery {
	query := (&PostClient{config: lpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpq.withPost = query
	return lpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LikePost.Query().
//		GroupBy(likepost.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lpq *LikePostQuery) GroupBy(field string, fields ...string) *LikePostGroupBy {
	lpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LikePostGroupBy{build: lpq}
	grbuild.flds = &lpq.ctx.Fields
	grbuild.label = likepost.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.LikePost.Query().
//		Select(likepost.FieldCreatedAt).
//		Scan(ctx, &v)
func (lpq *LikePostQuery) Select(fields ...string) *LikePostSelect {
	lpq.ctx.Fields = append(lpq.ctx.Fields, fields...)
	sbuild := &LikePostSelect{LikePostQuery: lpq}
	sbuild.label = likepost.Label
	sbuild.flds, sbuild.scan = &lpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LikePostSelect configured with the given aggregations.
func (lpq *LikePostQuery) Aggregate(fns ...AggregateFunc) *LikePostSelect {
	return lpq.Select().Aggregate(fns...)
}

func (lpq *LikePostQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lpq); err != nil {
				return err
			}
		}
	}
	for _, f := range lpq.ctx.Fields {
		if !likepost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lpq.path != nil {
		prev, err := lpq.path(ctx)
		if err != nil {
			return err
		}
		lpq.sql = prev
	}
	return nil
}

func (lpq *LikePostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LikePost, error) {
	var (
		nodes       = []*LikePost{}
		_spec       = lpq.querySpec()
		loadedTypes = [2]bool{
			lpq.withAccount != nil,
			lpq.withPost != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LikePost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LikePost{config: lpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(lpq.modifiers) > 0 {
		_spec.Modifiers = lpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lpq.withAccount; query != nil {
		if err := lpq.loadAccount(ctx, query, nodes, nil,
			func(n *LikePost, e *Account) { n.Edges.Account = e }); err != nil {
			return nil, err
		}
	}
	if query := lpq.withPost; query != nil {
		if err := lpq.loadPost(ctx, query, nodes, nil,
			func(n *LikePost, e *Post) { n.Edges.Post = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lpq *LikePostQuery) loadAccount(ctx context.Context, query *AccountQuery, nodes []*LikePost, init func(*LikePost), assign func(*LikePost, *Account)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*LikePost)
	for i := range nodes {
		fk := nodes[i].AccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(account.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpq *LikePostQuery) loadPost(ctx context.Context, query *PostQuery, nodes []*LikePost, init func(*LikePost), assign func(*LikePost, *Post)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*LikePost)
	for i := range nodes {
		fk := nodes[i].PostID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(post.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "post_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lpq *LikePostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lpq.querySpec()
	if len(lpq.modifiers) > 0 {
		_spec.Modifiers = lpq.modifiers
	}
	_spec.Node.Columns = lpq.ctx.Fields
	if len(lpq.ctx.Fields) > 0 {
		_spec.Unique = lpq.ctx.Unique != nil && *lpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lpq.driver, _spec)
}

func (lpq *LikePostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(likepost.Table, likepost.Columns, sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString))
	_spec.From = lpq.sql
	if unique := lpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lpq.path != nil {
		_spec.Unique = true
	}
	if fields := lpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likepost.FieldID)
		for i := range fields {
			if fields[i] != likepost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lpq.withAccount != nil {
			_spec.Node.AddColumnOnce(likepost.FieldAccountID)
		}
		if lpq.withPost != nil {
			_spec.Node.AddColumnOnce(likepost.FieldPostID)
		}
	}
	if ps := lpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lpq *LikePostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lpq.driver.Dialect())
	t1 := builder.Table(likepost.Table)
	columns := lpq.ctx.Fields
	if len(columns) == 0 {
		columns = likepost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lpq.sql != nil {
		selector = lpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lpq.ctx.Unique != nil && *lpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range lpq.modifiers {
		m(selector)
	}
	for _, p := range lpq.predicates {
		p(selector)
	}
	for _, p := range lpq.order {
		p(selector)
	}
	if offset := lpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lpq *LikePostQuery) Modify(modifiers ...func(s *sql.Selector)) *LikePostSelect {
	lpq.modifiers = append(lpq.modifiers, modifiers...)
	return lpq.Select()
}

// LikePostGroupBy is the group-by builder for LikePost entities.
type LikePostGroupBy struct {
	selector
	build *LikePostQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lpgb *LikePostGroupBy) Aggregate(fns ...AggregateFunc) *LikePostGroupBy {
	lpgb.fns = append(lpgb.fns, fns...)
	return lpgb
}

// Scan applies the selector query and scans the result into the given value.
func (lpgb *LikePostGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpgb.build.ctx, ent.OpQueryGroupBy)
	if err := lpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LikePostQuery, *LikePostGroupBy](ctx, lpgb.build, lpgb, lpgb.build.inters, v)
}

func (lpgb *LikePostGroupBy) sqlScan(ctx context.Context, root *LikePostQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lpgb.fns))
	for _, fn := range lpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lpgb.flds)+len(lpgb.fns))
		for _, f := range *lpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LikePostSelect is the builder for selecting fields of LikePost entities.
type LikePostSelect struct {
	*LikePostQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lps *LikePostSelect) Aggregate(fns ...AggregateFunc) *LikePostSelect {
	lps.fns = append(lps.fns, fns...)
	return lps
}

// Scan applies the selector query and scans the result into the given value.
func (lps *LikePostSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lps.ctx, ent.OpQuerySelect)
	if err := lps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LikePostQuery, *LikePostSelect](ctx, lps.LikePostQuery, lps, lps.inters, v)
}

func (lps *LikePostSelect) sqlScan(ctx context.Context, root *LikePostQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lps.fns))
	for _, fn := range lps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lps *LikePostSelect) Modify(modifiers ...func(s *sql.Selector)) *LikePostSelect {
	lps.modifiers = append(lps.modifiers, modifiers...)
	return lps
}
