// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagnode"
	"github.com/rs/xid"
)

// TagNodeUpdate is the builder for updating TagNode entities.
type TagNodeUpdate struct {
	config
	hooks     []Hook
	mutation  *TagNodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TagNodeUpdate builder.
func (tnu *TagNodeUpdate) Where(ps ...predicate.TagNode) *TagNodeUpdate {
	tnu.mutation.Where(ps...)
	return tnu
}

// SetTagID sets the "tag_id" field.
func (tnu *TagNodeUpdate) SetTagID(x xid.ID) *TagNodeUpdate {
	tnu.mutation.SetTagID(x)
	return tnu
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tnu *TagNodeUpdate) SetNillableTagID(x *xid.ID) *TagNodeUpdate {
	if x != nil {
		tnu.SetTagID(*x)
	}
	return tnu
}

// SetNodeID sets the "node_id" field.
func (tnu *TagNodeUpdate) SetNodeID(x xid.ID) *TagNodeUpdate {
	tnu.mutation.SetNodeID(x)
	return tnu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (tnu *TagNodeUpdate) SetNillableNodeID(x *xid.ID) *TagNodeUpdate {
	if x != nil {
		tnu.SetNodeID(*x)
	}
	return tnu
}

// SetTag sets the "tag" edge to the Tag entity.
func (tnu *TagNodeUpdate) SetTag(t *Tag) *TagNodeUpdate {
	return tnu.SetTagID(t.ID)
}

// SetNode sets the "node" edge to the Node entity.
func (tnu *TagNodeUpdate) SetNode(n *Node) *TagNodeUpdate {
	return tnu.SetNodeID(n.ID)
}

// Mutation returns the TagNodeMutation object of the builder.
func (tnu *TagNodeUpdate) Mutation() *TagNodeMutation {
	return tnu.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (tnu *TagNodeUpdate) ClearTag() *TagNodeUpdate {
	tnu.mutation.ClearTag()
	return tnu
}

// ClearNode clears the "node" edge to the Node entity.
func (tnu *TagNodeUpdate) ClearNode() *TagNodeUpdate {
	tnu.mutation.ClearNode()
	return tnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tnu *TagNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tnu.sqlSave, tnu.mutation, tnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tnu *TagNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := tnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tnu *TagNodeUpdate) Exec(ctx context.Context) error {
	_, err := tnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnu *TagNodeUpdate) ExecX(ctx context.Context) {
	if err := tnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tnu *TagNodeUpdate) check() error {
	if tnu.mutation.TagCleared() && len(tnu.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagNode.tag"`)
	}
	if tnu.mutation.NodeCleared() && len(tnu.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagNode.node"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnu *TagNodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagNodeUpdate {
	tnu.modifiers = append(tnu.modifiers, modifiers...)
	return tnu
}

func (tnu *TagNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tagnode.Table, tagnode.Columns, sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString))
	if ps := tnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tnu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.TagTable,
			Columns: []string{tagnode.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tnu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.TagTable,
			Columns: []string{tagnode.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tnu.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.NodeTable,
			Columns: []string{tagnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tnu.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.NodeTable,
			Columns: []string{tagnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tnu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tnu.mutation.done = true
	return n, nil
}

// TagNodeUpdateOne is the builder for updating a single TagNode entity.
type TagNodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TagNodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTagID sets the "tag_id" field.
func (tnuo *TagNodeUpdateOne) SetTagID(x xid.ID) *TagNodeUpdateOne {
	tnuo.mutation.SetTagID(x)
	return tnuo
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (tnuo *TagNodeUpdateOne) SetNillableTagID(x *xid.ID) *TagNodeUpdateOne {
	if x != nil {
		tnuo.SetTagID(*x)
	}
	return tnuo
}

// SetNodeID sets the "node_id" field.
func (tnuo *TagNodeUpdateOne) SetNodeID(x xid.ID) *TagNodeUpdateOne {
	tnuo.mutation.SetNodeID(x)
	return tnuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (tnuo *TagNodeUpdateOne) SetNillableNodeID(x *xid.ID) *TagNodeUpdateOne {
	if x != nil {
		tnuo.SetNodeID(*x)
	}
	return tnuo
}

// SetTag sets the "tag" edge to the Tag entity.
func (tnuo *TagNodeUpdateOne) SetTag(t *Tag) *TagNodeUpdateOne {
	return tnuo.SetTagID(t.ID)
}

// SetNode sets the "node" edge to the Node entity.
func (tnuo *TagNodeUpdateOne) SetNode(n *Node) *TagNodeUpdateOne {
	return tnuo.SetNodeID(n.ID)
}

// Mutation returns the TagNodeMutation object of the builder.
func (tnuo *TagNodeUpdateOne) Mutation() *TagNodeMutation {
	return tnuo.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (tnuo *TagNodeUpdateOne) ClearTag() *TagNodeUpdateOne {
	tnuo.mutation.ClearTag()
	return tnuo
}

// ClearNode clears the "node" edge to the Node entity.
func (tnuo *TagNodeUpdateOne) ClearNode() *TagNodeUpdateOne {
	tnuo.mutation.ClearNode()
	return tnuo
}

// Where appends a list predicates to the TagNodeUpdate builder.
func (tnuo *TagNodeUpdateOne) Where(ps ...predicate.TagNode) *TagNodeUpdateOne {
	tnuo.mutation.Where(ps...)
	return tnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tnuo *TagNodeUpdateOne) Select(field string, fields ...string) *TagNodeUpdateOne {
	tnuo.fields = append([]string{field}, fields...)
	return tnuo
}

// Save executes the query and returns the updated TagNode entity.
func (tnuo *TagNodeUpdateOne) Save(ctx context.Context) (*TagNode, error) {
	return withHooks(ctx, tnuo.sqlSave, tnuo.mutation, tnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tnuo *TagNodeUpdateOne) SaveX(ctx context.Context) *TagNode {
	node, err := tnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tnuo *TagNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := tnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnuo *TagNodeUpdateOne) ExecX(ctx context.Context) {
	if err := tnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tnuo *TagNodeUpdateOne) check() error {
	if tnuo.mutation.TagCleared() && len(tnuo.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagNode.tag"`)
	}
	if tnuo.mutation.NodeCleared() && len(tnuo.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TagNode.node"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnuo *TagNodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagNodeUpdateOne {
	tnuo.modifiers = append(tnuo.modifiers, modifiers...)
	return tnuo
}

func (tnuo *TagNodeUpdateOne) sqlSave(ctx context.Context) (_node *TagNode, err error) {
	if err := tnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tagnode.Table, tagnode.Columns, sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString))
	id, ok := tnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TagNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tagnode.FieldID)
		for _, f := range fields {
			if !tagnode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tagnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tnuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.TagTable,
			Columns: []string{tagnode.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tnuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.TagTable,
			Columns: []string{tagnode.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tnuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.NodeTable,
			Columns: []string{tagnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tnuo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.NodeTable,
			Columns: []string{tagnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tnuo.modifiers...)
	_node = &TagNode{config: tnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tnuo.mutation.done = true
	return _node, nil
}
