// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/mentionprofile"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// MentionProfileUpdate is the builder for updating MentionProfile entities.
type MentionProfileUpdate struct {
	config
	hooks     []Hook
	mutation  *MentionProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MentionProfileUpdate builder.
func (mpu *MentionProfileUpdate) Where(ps ...predicate.MentionProfile) *MentionProfileUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetAccountID sets the "account_id" field.
func (mpu *MentionProfileUpdate) SetAccountID(x xid.ID) *MentionProfileUpdate {
	mpu.mutation.SetAccountID(x)
	return mpu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (mpu *MentionProfileUpdate) SetNillableAccountID(x *xid.ID) *MentionProfileUpdate {
	if x != nil {
		mpu.SetAccountID(*x)
	}
	return mpu
}

// SetPostID sets the "post_id" field.
func (mpu *MentionProfileUpdate) SetPostID(x xid.ID) *MentionProfileUpdate {
	mpu.mutation.SetPostID(x)
	return mpu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (mpu *MentionProfileUpdate) SetNillablePostID(x *xid.ID) *MentionProfileUpdate {
	if x != nil {
		mpu.SetPostID(*x)
	}
	return mpu
}

// SetAccount sets the "account" edge to the Account entity.
func (mpu *MentionProfileUpdate) SetAccount(a *Account) *MentionProfileUpdate {
	return mpu.SetAccountID(a.ID)
}

// SetPost sets the "Post" edge to the Post entity.
func (mpu *MentionProfileUpdate) SetPost(p *Post) *MentionProfileUpdate {
	return mpu.SetPostID(p.ID)
}

// Mutation returns the MentionProfileMutation object of the builder.
func (mpu *MentionProfileUpdate) Mutation() *MentionProfileMutation {
	return mpu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (mpu *MentionProfileUpdate) ClearAccount() *MentionProfileUpdate {
	mpu.mutation.ClearAccount()
	return mpu
}

// ClearPost clears the "Post" edge to the Post entity.
func (mpu *MentionProfileUpdate) ClearPost() *MentionProfileUpdate {
	mpu.mutation.ClearPost()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MentionProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MentionProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MentionProfileUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MentionProfileUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MentionProfileUpdate) check() error {
	if _, ok := mpu.mutation.AccountID(); mpu.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MentionProfile.account"`)
	}
	if _, ok := mpu.mutation.PostID(); mpu.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MentionProfile.Post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpu *MentionProfileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MentionProfileUpdate {
	mpu.modifiers = append(mpu.modifiers, modifiers...)
	return mpu
}

func (mpu *MentionProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mentionprofile.Table, mentionprofile.Columns, sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.AccountTable,
			Columns: []string{mentionprofile.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.AccountTable,
			Columns: []string{mentionprofile.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.PostTable,
			Columns: []string{mentionprofile.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.PostTable,
			Columns: []string{mentionprofile.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentionprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MentionProfileUpdateOne is the builder for updating a single MentionProfile entity.
type MentionProfileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MentionProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAccountID sets the "account_id" field.
func (mpuo *MentionProfileUpdateOne) SetAccountID(x xid.ID) *MentionProfileUpdateOne {
	mpuo.mutation.SetAccountID(x)
	return mpuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (mpuo *MentionProfileUpdateOne) SetNillableAccountID(x *xid.ID) *MentionProfileUpdateOne {
	if x != nil {
		mpuo.SetAccountID(*x)
	}
	return mpuo
}

// SetPostID sets the "post_id" field.
func (mpuo *MentionProfileUpdateOne) SetPostID(x xid.ID) *MentionProfileUpdateOne {
	mpuo.mutation.SetPostID(x)
	return mpuo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (mpuo *MentionProfileUpdateOne) SetNillablePostID(x *xid.ID) *MentionProfileUpdateOne {
	if x != nil {
		mpuo.SetPostID(*x)
	}
	return mpuo
}

// SetAccount sets the "account" edge to the Account entity.
func (mpuo *MentionProfileUpdateOne) SetAccount(a *Account) *MentionProfileUpdateOne {
	return mpuo.SetAccountID(a.ID)
}

// SetPost sets the "Post" edge to the Post entity.
func (mpuo *MentionProfileUpdateOne) SetPost(p *Post) *MentionProfileUpdateOne {
	return mpuo.SetPostID(p.ID)
}

// Mutation returns the MentionProfileMutation object of the builder.
func (mpuo *MentionProfileUpdateOne) Mutation() *MentionProfileMutation {
	return mpuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (mpuo *MentionProfileUpdateOne) ClearAccount() *MentionProfileUpdateOne {
	mpuo.mutation.ClearAccount()
	return mpuo
}

// ClearPost clears the "Post" edge to the Post entity.
func (mpuo *MentionProfileUpdateOne) ClearPost() *MentionProfileUpdateOne {
	mpuo.mutation.ClearPost()
	return mpuo
}

// Where appends a list predicates to the MentionProfileUpdate builder.
func (mpuo *MentionProfileUpdateOne) Where(ps ...predicate.MentionProfile) *MentionProfileUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MentionProfileUpdateOne) Select(field string, fields ...string) *MentionProfileUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MentionProfile entity.
func (mpuo *MentionProfileUpdateOne) Save(ctx context.Context) (*MentionProfile, error) {
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MentionProfileUpdateOne) SaveX(ctx context.Context) *MentionProfile {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MentionProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MentionProfileUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MentionProfileUpdateOne) check() error {
	if _, ok := mpuo.mutation.AccountID(); mpuo.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MentionProfile.account"`)
	}
	if _, ok := mpuo.mutation.PostID(); mpuo.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MentionProfile.Post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpuo *MentionProfileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MentionProfileUpdateOne {
	mpuo.modifiers = append(mpuo.modifiers, modifiers...)
	return mpuo
}

func (mpuo *MentionProfileUpdateOne) sqlSave(ctx context.Context) (_node *MentionProfile, err error) {
	if err := mpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mentionprofile.Table, mentionprofile.Columns, sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MentionProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mentionprofile.FieldID)
		for _, f := range fields {
			if !mentionprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mentionprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.AccountTable,
			Columns: []string{mentionprofile.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.AccountTable,
			Columns: []string{mentionprofile.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.PostTable,
			Columns: []string{mentionprofile.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentionprofile.PostTable,
			Columns: []string{mentionprofile.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mpuo.modifiers...)
	_node = &MentionProfile{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentionprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}
