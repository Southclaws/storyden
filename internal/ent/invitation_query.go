// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/invitation"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// InvitationQuery is the builder for querying Invitation entities.
type InvitationQuery struct {
	config
	ctx         *QueryContext
	order       []invitation.OrderOption
	inters      []Interceptor
	predicates  []predicate.Invitation
	withCreator *AccountQuery
	withInvited *AccountQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InvitationQuery builder.
func (_q *InvitationQuery) Where(ps ...predicate.Invitation) *InvitationQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *InvitationQuery) Limit(limit int) *InvitationQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *InvitationQuery) Offset(offset int) *InvitationQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *InvitationQuery) Unique(unique bool) *InvitationQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *InvitationQuery) Order(o ...invitation.OrderOption) *InvitationQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryCreator chains the current query on the "creator" edge.
func (_q *InvitationQuery) QueryCreator() *AccountQuery {
	query := (&AccountClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invitation.CreatorTable, invitation.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvited chains the current query on the "invited" edge.
func (_q *InvitationQuery) QueryInvited() *AccountQuery {
	query := (&AccountClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, invitation.InvitedTable, invitation.InvitedColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Invitation entity from the query.
// Returns a *NotFoundError when no Invitation was found.
func (_q *InvitationQuery) First(ctx context.Context) (*Invitation, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{invitation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *InvitationQuery) FirstX(ctx context.Context) *Invitation {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Invitation ID from the query.
// Returns a *NotFoundError when no Invitation ID was found.
func (_q *InvitationQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{invitation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *InvitationQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Invitation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Invitation entity is found.
// Returns a *NotFoundError when no Invitation entities are found.
func (_q *InvitationQuery) Only(ctx context.Context) (*Invitation, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{invitation.Label}
	default:
		return nil, &NotSingularError{invitation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *InvitationQuery) OnlyX(ctx context.Context) *Invitation {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Invitation ID in the query.
// Returns a *NotSingularError when more than one Invitation ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *InvitationQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{invitation.Label}
	default:
		err = &NotSingularError{invitation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *InvitationQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Invitations.
func (_q *InvitationQuery) All(ctx context.Context) ([]*Invitation, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Invitation, *InvitationQuery]()
	return withInterceptors[[]*Invitation](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *InvitationQuery) AllX(ctx context.Context) []*Invitation {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Invitation IDs.
func (_q *InvitationQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(invitation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *InvitationQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *InvitationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*InvitationQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *InvitationQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *InvitationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *InvitationQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InvitationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *InvitationQuery) Clone() *InvitationQuery {
	if _q == nil {
		return nil
	}
	return &InvitationQuery{
		config:      _q.config,
		ctx:         _q.ctx.Clone(),
		order:       append([]invitation.OrderOption{}, _q.order...),
		inters:      append([]Interceptor{}, _q.inters...),
		predicates:  append([]predicate.Invitation{}, _q.predicates...),
		withCreator: _q.withCreator.Clone(),
		withInvited: _q.withInvited.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InvitationQuery) WithCreator(opts ...func(*AccountQuery)) *InvitationQuery {
	query := (&AccountClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCreator = query
	return _q
}

// WithInvited tells the query-builder to eager-load the nodes that are connected to
// the "invited" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InvitationQuery) WithInvited(opts ...func(*AccountQuery)) *InvitationQuery {
	query := (&AccountClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInvited = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Invitation.Query().
//		GroupBy(invitation.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *InvitationQuery) GroupBy(field string, fields ...string) *InvitationGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InvitationGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = invitation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Invitation.Query().
//		Select(invitation.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *InvitationQuery) Select(fields ...string) *InvitationSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &InvitationSelect{InvitationQuery: _q}
	sbuild.label = invitation.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InvitationSelect configured with the given aggregations.
func (_q *InvitationQuery) Aggregate(fns ...AggregateFunc) *InvitationSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *InvitationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !invitation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *InvitationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Invitation, error) {
	var (
		nodes       = []*Invitation{}
		_spec       = _q.querySpec()
		loadedTypes = [2]bool{
			_q.withCreator != nil,
			_q.withInvited != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Invitation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Invitation{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withCreator; query != nil {
		if err := _q.loadCreator(ctx, query, nodes, nil,
			func(n *Invitation, e *Account) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInvited; query != nil {
		if err := _q.loadInvited(ctx, query, nodes,
			func(n *Invitation) { n.Edges.Invited = []*Account{} },
			func(n *Invitation, e *Account) { n.Edges.Invited = append(n.Edges.Invited, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *InvitationQuery) loadCreator(ctx context.Context, query *AccountQuery, nodes []*Invitation, init func(*Invitation), assign func(*Invitation, *Account)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Invitation)
	for i := range nodes {
		fk := nodes[i].CreatorAccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(account.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InvitationQuery) loadInvited(ctx context.Context, query *AccountQuery, nodes []*Invitation, init func(*Invitation), assign func(*Invitation, *Account)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[xid.ID]*Invitation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(account.FieldInvitedByID)
	}
	query.Where(predicate.Account(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(invitation.InvitedColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InvitedByID
		if fk == nil {
			return fmt.Errorf(`foreign-key "invited_by_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "invited_by_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *InvitationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *InvitationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(invitation.Table, invitation.Columns, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitation.FieldID)
		for i := range fields {
			if fields[i] != invitation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withCreator != nil {
			_spec.Node.AddColumnOnce(invitation.FieldCreatorAccountID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *InvitationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(invitation.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = invitation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *InvitationQuery) Modify(modifiers ...func(s *sql.Selector)) *InvitationSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// InvitationGroupBy is the group-by builder for Invitation entities.
type InvitationGroupBy struct {
	selector
	build *InvitationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *InvitationGroupBy) Aggregate(fns ...AggregateFunc) *InvitationGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *InvitationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvitationQuery, *InvitationGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *InvitationGroupBy) sqlScan(ctx context.Context, root *InvitationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InvitationSelect is the builder for selecting fields of Invitation entities.
type InvitationSelect struct {
	*InvitationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *InvitationSelect) Aggregate(fns ...AggregateFunc) *InvitationSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *InvitationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvitationQuery, *InvitationSelect](ctx, _s.InvitationQuery, _s, _s.inters, v)
}

func (_s *InvitationSelect) sqlScan(ctx context.Context, root *InvitationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *InvitationSelect) Modify(modifiers ...func(s *sql.Selector)) *InvitationSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
