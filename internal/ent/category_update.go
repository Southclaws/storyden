// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/category"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *CategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CategoryUpdate) SetUpdatedAt(v time.Time) *CategoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CategoryUpdate) SetName(v string) *CategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableName(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSlug sets the "slug" field.
func (_u *CategoryUpdate) SetSlug(v string) *CategoryUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableSlug(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CategoryUpdate) SetDescription(v string) *CategoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableDescription(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetColour sets the "colour" field.
func (_u *CategoryUpdate) SetColour(v string) *CategoryUpdate {
	_u.mutation.SetColour(v)
	return _u
}

// SetNillableColour sets the "colour" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableColour(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetColour(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *CategoryUpdate) SetSort(v int) *CategoryUpdate {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableSort(v *int) *CategoryUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *CategoryUpdate) AddSort(v int) *CategoryUpdate {
	_u.mutation.AddSort(v)
	return _u
}

// SetAdmin sets the "admin" field.
func (_u *CategoryUpdate) SetAdmin(v bool) *CategoryUpdate {
	_u.mutation.SetAdmin(v)
	return _u
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableAdmin(v *bool) *CategoryUpdate {
	if v != nil {
		_u.SetAdmin(*v)
	}
	return _u
}

// SetParentCategoryID sets the "parent_category_id" field.
func (_u *CategoryUpdate) SetParentCategoryID(v xid.ID) *CategoryUpdate {
	_u.mutation.SetParentCategoryID(v)
	return _u
}

// SetNillableParentCategoryID sets the "parent_category_id" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableParentCategoryID(v *xid.ID) *CategoryUpdate {
	if v != nil {
		_u.SetParentCategoryID(*v)
	}
	return _u
}

// ClearParentCategoryID clears the value of the "parent_category_id" field.
func (_u *CategoryUpdate) ClearParentCategoryID() *CategoryUpdate {
	_u.mutation.ClearParentCategoryID()
	return _u
}

// SetCoverImageAssetID sets the "cover_image_asset_id" field.
func (_u *CategoryUpdate) SetCoverImageAssetID(v xid.ID) *CategoryUpdate {
	_u.mutation.SetCoverImageAssetID(v)
	return _u
}

// SetNillableCoverImageAssetID sets the "cover_image_asset_id" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableCoverImageAssetID(v *xid.ID) *CategoryUpdate {
	if v != nil {
		_u.SetCoverImageAssetID(*v)
	}
	return _u
}

// ClearCoverImageAssetID clears the value of the "cover_image_asset_id" field.
func (_u *CategoryUpdate) ClearCoverImageAssetID() *CategoryUpdate {
	_u.mutation.ClearCoverImageAssetID()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *CategoryUpdate) SetMetadata(v map[string]interface{}) *CategoryUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CategoryUpdate) ClearMetadata() *CategoryUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *CategoryUpdate) AddPostIDs(ids ...xid.ID) *CategoryUpdate {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *CategoryUpdate) AddPosts(v ...*Post) *CategoryUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// SetParentID sets the "parent" edge to the Category entity by ID.
func (_u *CategoryUpdate) SetParentID(id xid.ID) *CategoryUpdate {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the Category entity by ID if the given value is not nil.
func (_u *CategoryUpdate) SetNillableParentID(id *xid.ID) *CategoryUpdate {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the Category entity.
func (_u *CategoryUpdate) SetParent(v *Category) *CategoryUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Category entity by IDs.
func (_u *CategoryUpdate) AddChildIDs(ids ...xid.ID) *CategoryUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Category entity.
func (_u *CategoryUpdate) AddChildren(v ...*Category) *CategoryUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetCoverImageID sets the "cover_image" edge to the Asset entity by ID.
func (_u *CategoryUpdate) SetCoverImageID(id xid.ID) *CategoryUpdate {
	_u.mutation.SetCoverImageID(id)
	return _u
}

// SetNillableCoverImageID sets the "cover_image" edge to the Asset entity by ID if the given value is not nil.
func (_u *CategoryUpdate) SetNillableCoverImageID(id *xid.ID) *CategoryUpdate {
	if id != nil {
		_u = _u.SetCoverImageID(*id)
	}
	return _u
}

// SetCoverImage sets the "cover_image" edge to the Asset entity.
func (_u *CategoryUpdate) SetCoverImage(v *Asset) *CategoryUpdate {
	return _u.SetCoverImageID(v.ID)
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdate) Mutation() *CategoryMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *CategoryUpdate) ClearPosts() *CategoryUpdate {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *CategoryUpdate) RemovePostIDs(ids ...xid.ID) *CategoryUpdate {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *CategoryUpdate) RemovePosts(v ...*Post) *CategoryUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearParent clears the "parent" edge to the Category entity.
func (_u *CategoryUpdate) ClearParent() *CategoryUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Category entity.
func (_u *CategoryUpdate) ClearChildren() *CategoryUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Category entities by IDs.
func (_u *CategoryUpdate) RemoveChildIDs(ids ...xid.ID) *CategoryUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Category entities.
func (_u *CategoryUpdate) RemoveChildren(v ...*Category) *CategoryUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearCoverImage clears the "cover_image" edge to the Asset entity.
func (_u *CategoryUpdate) ClearCoverImage() *CategoryUpdate {
	_u.mutation.ClearCoverImage()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CategoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CategoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := category.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CategoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Colour(); ok {
		_spec.SetField(category.FieldColour, field.TypeString, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(category.FieldSort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(category.FieldSort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Admin(); ok {
		_spec.SetField(category.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(category.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(category.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.PostsTable,
			Columns: []string{category.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.PostsTable,
			Columns: []string{category.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.PostsTable,
			Columns: []string{category.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.ParentTable,
			Columns: []string{category.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.ParentTable,
			Columns: []string{category.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ChildrenTable,
			Columns: []string{category.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ChildrenTable,
			Columns: []string{category.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ChildrenTable,
			Columns: []string{category.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   category.CoverImageTable,
			Columns: []string{category.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   category.CoverImageTable,
			Columns: []string{category.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CategoryUpdateOne) SetUpdatedAt(v time.Time) *CategoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CategoryUpdateOne) SetName(v string) *CategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableName(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSlug sets the "slug" field.
func (_u *CategoryUpdateOne) SetSlug(v string) *CategoryUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableSlug(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CategoryUpdateOne) SetDescription(v string) *CategoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableDescription(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetColour sets the "colour" field.
func (_u *CategoryUpdateOne) SetColour(v string) *CategoryUpdateOne {
	_u.mutation.SetColour(v)
	return _u
}

// SetNillableColour sets the "colour" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableColour(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetColour(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *CategoryUpdateOne) SetSort(v int) *CategoryUpdateOne {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableSort(v *int) *CategoryUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *CategoryUpdateOne) AddSort(v int) *CategoryUpdateOne {
	_u.mutation.AddSort(v)
	return _u
}

// SetAdmin sets the "admin" field.
func (_u *CategoryUpdateOne) SetAdmin(v bool) *CategoryUpdateOne {
	_u.mutation.SetAdmin(v)
	return _u
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableAdmin(v *bool) *CategoryUpdateOne {
	if v != nil {
		_u.SetAdmin(*v)
	}
	return _u
}

// SetParentCategoryID sets the "parent_category_id" field.
func (_u *CategoryUpdateOne) SetParentCategoryID(v xid.ID) *CategoryUpdateOne {
	_u.mutation.SetParentCategoryID(v)
	return _u
}

// SetNillableParentCategoryID sets the "parent_category_id" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableParentCategoryID(v *xid.ID) *CategoryUpdateOne {
	if v != nil {
		_u.SetParentCategoryID(*v)
	}
	return _u
}

// ClearParentCategoryID clears the value of the "parent_category_id" field.
func (_u *CategoryUpdateOne) ClearParentCategoryID() *CategoryUpdateOne {
	_u.mutation.ClearParentCategoryID()
	return _u
}

// SetCoverImageAssetID sets the "cover_image_asset_id" field.
func (_u *CategoryUpdateOne) SetCoverImageAssetID(v xid.ID) *CategoryUpdateOne {
	_u.mutation.SetCoverImageAssetID(v)
	return _u
}

// SetNillableCoverImageAssetID sets the "cover_image_asset_id" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableCoverImageAssetID(v *xid.ID) *CategoryUpdateOne {
	if v != nil {
		_u.SetCoverImageAssetID(*v)
	}
	return _u
}

// ClearCoverImageAssetID clears the value of the "cover_image_asset_id" field.
func (_u *CategoryUpdateOne) ClearCoverImageAssetID() *CategoryUpdateOne {
	_u.mutation.ClearCoverImageAssetID()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *CategoryUpdateOne) SetMetadata(v map[string]interface{}) *CategoryUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CategoryUpdateOne) ClearMetadata() *CategoryUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *CategoryUpdateOne) AddPostIDs(ids ...xid.ID) *CategoryUpdateOne {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *CategoryUpdateOne) AddPosts(v ...*Post) *CategoryUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// SetParentID sets the "parent" edge to the Category entity by ID.
func (_u *CategoryUpdateOne) SetParentID(id xid.ID) *CategoryUpdateOne {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the Category entity by ID if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableParentID(id *xid.ID) *CategoryUpdateOne {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the Category entity.
func (_u *CategoryUpdateOne) SetParent(v *Category) *CategoryUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Category entity by IDs.
func (_u *CategoryUpdateOne) AddChildIDs(ids ...xid.ID) *CategoryUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Category entity.
func (_u *CategoryUpdateOne) AddChildren(v ...*Category) *CategoryUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetCoverImageID sets the "cover_image" edge to the Asset entity by ID.
func (_u *CategoryUpdateOne) SetCoverImageID(id xid.ID) *CategoryUpdateOne {
	_u.mutation.SetCoverImageID(id)
	return _u
}

// SetNillableCoverImageID sets the "cover_image" edge to the Asset entity by ID if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableCoverImageID(id *xid.ID) *CategoryUpdateOne {
	if id != nil {
		_u = _u.SetCoverImageID(*id)
	}
	return _u
}

// SetCoverImage sets the "cover_image" edge to the Asset entity.
func (_u *CategoryUpdateOne) SetCoverImage(v *Asset) *CategoryUpdateOne {
	return _u.SetCoverImageID(v.ID)
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdateOne) Mutation() *CategoryMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *CategoryUpdateOne) ClearPosts() *CategoryUpdateOne {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *CategoryUpdateOne) RemovePostIDs(ids ...xid.ID) *CategoryUpdateOne {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *CategoryUpdateOne) RemovePosts(v ...*Post) *CategoryUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearParent clears the "parent" edge to the Category entity.
func (_u *CategoryUpdateOne) ClearParent() *CategoryUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Category entity.
func (_u *CategoryUpdateOne) ClearChildren() *CategoryUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Category entities by IDs.
func (_u *CategoryUpdateOne) RemoveChildIDs(ids ...xid.ID) *CategoryUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Category entities.
func (_u *CategoryUpdateOne) RemoveChildren(v ...*Category) *CategoryUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearCoverImage clears the "cover_image" edge to the Asset entity.
func (_u *CategoryUpdateOne) ClearCoverImage() *CategoryUpdateOne {
	_u.mutation.ClearCoverImage()
	return _u
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdateOne) Where(ps ...predicate.Category) *CategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CategoryUpdateOne) Select(field string, fields ...string) *CategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Category entity.
func (_u *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CategoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := category.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CategoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category.FieldID)
		for _, f := range fields {
			if !category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Colour(); ok {
		_spec.SetField(category.FieldColour, field.TypeString, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(category.FieldSort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(category.FieldSort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Admin(); ok {
		_spec.SetField(category.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(category.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(category.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.PostsTable,
			Columns: []string{category.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.PostsTable,
			Columns: []string{category.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.PostsTable,
			Columns: []string{category.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.ParentTable,
			Columns: []string{category.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.ParentTable,
			Columns: []string{category.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ChildrenTable,
			Columns: []string{category.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ChildrenTable,
			Columns: []string{category.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category.ChildrenTable,
			Columns: []string{category.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   category.CoverImageTable,
			Columns: []string{category.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   category.CoverImageTable,
			Columns: []string{category.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Category{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
