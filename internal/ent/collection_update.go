// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/collection"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// CollectionUpdate is the builder for updating Collection entities.
type CollectionUpdate struct {
	config
	hooks     []Hook
	mutation  *CollectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cu *CollectionUpdate) Where(ps ...predicate.Collection) *CollectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CollectionUpdate) SetUpdatedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetIndexedAt sets the "indexed_at" field.
func (cu *CollectionUpdate) SetIndexedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetIndexedAt(t)
	return cu
}

// SetNillableIndexedAt sets the "indexed_at" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableIndexedAt(t *time.Time) *CollectionUpdate {
	if t != nil {
		cu.SetIndexedAt(*t)
	}
	return cu
}

// ClearIndexedAt clears the value of the "indexed_at" field.
func (cu *CollectionUpdate) ClearIndexedAt() *CollectionUpdate {
	cu.mutation.ClearIndexedAt()
	return cu
}

// SetName sets the "name" field.
func (cu *CollectionUpdate) SetName(s string) *CollectionUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableName(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetSlug sets the "slug" field.
func (cu *CollectionUpdate) SetSlug(s string) *CollectionUpdate {
	cu.mutation.SetSlug(s)
	return cu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableSlug(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetSlug(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CollectionUpdate) SetDescription(s string) *CollectionUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDescription(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CollectionUpdate) ClearDescription() *CollectionUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetCoverAssetID sets the "cover_asset_id" field.
func (cu *CollectionUpdate) SetCoverAssetID(x xid.ID) *CollectionUpdate {
	cu.mutation.SetCoverAssetID(x)
	return cu
}

// SetNillableCoverAssetID sets the "cover_asset_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCoverAssetID(x *xid.ID) *CollectionUpdate {
	if x != nil {
		cu.SetCoverAssetID(*x)
	}
	return cu
}

// ClearCoverAssetID clears the value of the "cover_asset_id" field.
func (cu *CollectionUpdate) ClearCoverAssetID() *CollectionUpdate {
	cu.mutation.ClearCoverAssetID()
	return cu
}

// SetVisibility sets the "visibility" field.
func (cu *CollectionUpdate) SetVisibility(c collection.Visibility) *CollectionUpdate {
	cu.mutation.SetVisibility(c)
	return cu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableVisibility(c *collection.Visibility) *CollectionUpdate {
	if c != nil {
		cu.SetVisibility(*c)
	}
	return cu
}

// SetOwnerID sets the "owner" edge to the Account entity by ID.
func (cu *CollectionUpdate) SetOwnerID(id xid.ID) *CollectionUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the Account entity by ID if the given value is not nil.
func (cu *CollectionUpdate) SetNillableOwnerID(id *xid.ID) *CollectionUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the Account entity.
func (cu *CollectionUpdate) SetOwner(a *Account) *CollectionUpdate {
	return cu.SetOwnerID(a.ID)
}

// SetCoverImageID sets the "cover_image" edge to the Asset entity by ID.
func (cu *CollectionUpdate) SetCoverImageID(id xid.ID) *CollectionUpdate {
	cu.mutation.SetCoverImageID(id)
	return cu
}

// SetNillableCoverImageID sets the "cover_image" edge to the Asset entity by ID if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCoverImageID(id *xid.ID) *CollectionUpdate {
	if id != nil {
		cu = cu.SetCoverImageID(*id)
	}
	return cu
}

// SetCoverImage sets the "cover_image" edge to the Asset entity.
func (cu *CollectionUpdate) SetCoverImage(a *Asset) *CollectionUpdate {
	return cu.SetCoverImageID(a.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (cu *CollectionUpdate) AddPostIDs(ids ...xid.ID) *CollectionUpdate {
	cu.mutation.AddPostIDs(ids...)
	return cu
}

// AddPosts adds the "posts" edges to the Post entity.
func (cu *CollectionUpdate) AddPosts(p ...*Post) *CollectionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPostIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (cu *CollectionUpdate) AddNodeIDs(ids ...xid.ID) *CollectionUpdate {
	cu.mutation.AddNodeIDs(ids...)
	return cu
}

// AddNodes adds the "nodes" edges to the Node entity.
func (cu *CollectionUpdate) AddNodes(n ...*Node) *CollectionUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNodeIDs(ids...)
}

// Mutation returns the CollectionMutation object of the builder.
func (cu *CollectionUpdate) Mutation() *CollectionMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the Account entity.
func (cu *CollectionUpdate) ClearOwner() *CollectionUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearCoverImage clears the "cover_image" edge to the Asset entity.
func (cu *CollectionUpdate) ClearCoverImage() *CollectionUpdate {
	cu.mutation.ClearCoverImage()
	return cu
}

// ClearPosts clears all "posts" edges to the Post entity.
func (cu *CollectionUpdate) ClearPosts() *CollectionUpdate {
	cu.mutation.ClearPosts()
	return cu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (cu *CollectionUpdate) RemovePostIDs(ids ...xid.ID) *CollectionUpdate {
	cu.mutation.RemovePostIDs(ids...)
	return cu
}

// RemovePosts removes "posts" edges to Post entities.
func (cu *CollectionUpdate) RemovePosts(p ...*Post) *CollectionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePostIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (cu *CollectionUpdate) ClearNodes() *CollectionUpdate {
	cu.mutation.ClearNodes()
	return cu
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (cu *CollectionUpdate) RemoveNodeIDs(ids ...xid.ID) *CollectionUpdate {
	cu.mutation.RemoveNodeIDs(ids...)
	return cu
}

// RemoveNodes removes "nodes" edges to Node entities.
func (cu *CollectionUpdate) RemoveNodes(n ...*Node) *CollectionUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectionUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CollectionUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := collection.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CollectionUpdate) check() error {
	if v, ok := cu.mutation.Visibility(); ok {
		if err := collection.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Collection.visibility": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CollectionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CollectionUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.IndexedAt(); ok {
		_spec.SetField(collection.FieldIndexedAt, field.TypeTime, value)
	}
	if cu.mutation.IndexedAtCleared() {
		_spec.ClearField(collection.FieldIndexedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(collection.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Slug(); ok {
		_spec.SetField(collection.FieldSlug, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(collection.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(collection.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Visibility(); ok {
		_spec.SetField(collection.FieldVisibility, field.TypeEnum, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.OwnerTable,
			Columns: []string{collection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.OwnerTable,
			Columns: []string{collection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collection.CoverImageTable,
			Columns: []string{collection.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collection.CoverImageTable,
			Columns: []string{collection.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.PostsTable,
			Columns: collection.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		createE := &CollectionPostCreate{config: cu.config, mutation: newCollectionPostMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !cu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.PostsTable,
			Columns: collection.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionPostCreate{config: cu.config, mutation: newCollectionPostMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.PostsTable,
			Columns: collection.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionPostCreate{config: cu.config, mutation: newCollectionPostMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.NodesTable,
			Columns: collection.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		createE := &CollectionNodeCreate{config: cu.config, mutation: newCollectionNodeMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNodesIDs(); len(nodes) > 0 && !cu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.NodesTable,
			Columns: collection.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionNodeCreate{config: cu.config, mutation: newCollectionNodeMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.NodesTable,
			Columns: collection.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionNodeCreate{config: cu.config, mutation: newCollectionNodeMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollectionUpdateOne is the builder for updating a single Collection entity.
type CollectionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CollectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CollectionUpdateOne) SetUpdatedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetIndexedAt sets the "indexed_at" field.
func (cuo *CollectionUpdateOne) SetIndexedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetIndexedAt(t)
	return cuo
}

// SetNillableIndexedAt sets the "indexed_at" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableIndexedAt(t *time.Time) *CollectionUpdateOne {
	if t != nil {
		cuo.SetIndexedAt(*t)
	}
	return cuo
}

// ClearIndexedAt clears the value of the "indexed_at" field.
func (cuo *CollectionUpdateOne) ClearIndexedAt() *CollectionUpdateOne {
	cuo.mutation.ClearIndexedAt()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CollectionUpdateOne) SetName(s string) *CollectionUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableName(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetSlug sets the "slug" field.
func (cuo *CollectionUpdateOne) SetSlug(s string) *CollectionUpdateOne {
	cuo.mutation.SetSlug(s)
	return cuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableSlug(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetSlug(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CollectionUpdateOne) SetDescription(s string) *CollectionUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDescription(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CollectionUpdateOne) ClearDescription() *CollectionUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetCoverAssetID sets the "cover_asset_id" field.
func (cuo *CollectionUpdateOne) SetCoverAssetID(x xid.ID) *CollectionUpdateOne {
	cuo.mutation.SetCoverAssetID(x)
	return cuo
}

// SetNillableCoverAssetID sets the "cover_asset_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCoverAssetID(x *xid.ID) *CollectionUpdateOne {
	if x != nil {
		cuo.SetCoverAssetID(*x)
	}
	return cuo
}

// ClearCoverAssetID clears the value of the "cover_asset_id" field.
func (cuo *CollectionUpdateOne) ClearCoverAssetID() *CollectionUpdateOne {
	cuo.mutation.ClearCoverAssetID()
	return cuo
}

// SetVisibility sets the "visibility" field.
func (cuo *CollectionUpdateOne) SetVisibility(c collection.Visibility) *CollectionUpdateOne {
	cuo.mutation.SetVisibility(c)
	return cuo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableVisibility(c *collection.Visibility) *CollectionUpdateOne {
	if c != nil {
		cuo.SetVisibility(*c)
	}
	return cuo
}

// SetOwnerID sets the "owner" edge to the Account entity by ID.
func (cuo *CollectionUpdateOne) SetOwnerID(id xid.ID) *CollectionUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the Account entity by ID if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableOwnerID(id *xid.ID) *CollectionUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the Account entity.
func (cuo *CollectionUpdateOne) SetOwner(a *Account) *CollectionUpdateOne {
	return cuo.SetOwnerID(a.ID)
}

// SetCoverImageID sets the "cover_image" edge to the Asset entity by ID.
func (cuo *CollectionUpdateOne) SetCoverImageID(id xid.ID) *CollectionUpdateOne {
	cuo.mutation.SetCoverImageID(id)
	return cuo
}

// SetNillableCoverImageID sets the "cover_image" edge to the Asset entity by ID if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCoverImageID(id *xid.ID) *CollectionUpdateOne {
	if id != nil {
		cuo = cuo.SetCoverImageID(*id)
	}
	return cuo
}

// SetCoverImage sets the "cover_image" edge to the Asset entity.
func (cuo *CollectionUpdateOne) SetCoverImage(a *Asset) *CollectionUpdateOne {
	return cuo.SetCoverImageID(a.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (cuo *CollectionUpdateOne) AddPostIDs(ids ...xid.ID) *CollectionUpdateOne {
	cuo.mutation.AddPostIDs(ids...)
	return cuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (cuo *CollectionUpdateOne) AddPosts(p ...*Post) *CollectionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPostIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (cuo *CollectionUpdateOne) AddNodeIDs(ids ...xid.ID) *CollectionUpdateOne {
	cuo.mutation.AddNodeIDs(ids...)
	return cuo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (cuo *CollectionUpdateOne) AddNodes(n ...*Node) *CollectionUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNodeIDs(ids...)
}

// Mutation returns the CollectionMutation object of the builder.
func (cuo *CollectionUpdateOne) Mutation() *CollectionMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the Account entity.
func (cuo *CollectionUpdateOne) ClearOwner() *CollectionUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearCoverImage clears the "cover_image" edge to the Asset entity.
func (cuo *CollectionUpdateOne) ClearCoverImage() *CollectionUpdateOne {
	cuo.mutation.ClearCoverImage()
	return cuo
}

// ClearPosts clears all "posts" edges to the Post entity.
func (cuo *CollectionUpdateOne) ClearPosts() *CollectionUpdateOne {
	cuo.mutation.ClearPosts()
	return cuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (cuo *CollectionUpdateOne) RemovePostIDs(ids ...xid.ID) *CollectionUpdateOne {
	cuo.mutation.RemovePostIDs(ids...)
	return cuo
}

// RemovePosts removes "posts" edges to Post entities.
func (cuo *CollectionUpdateOne) RemovePosts(p ...*Post) *CollectionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePostIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (cuo *CollectionUpdateOne) ClearNodes() *CollectionUpdateOne {
	cuo.mutation.ClearNodes()
	return cuo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (cuo *CollectionUpdateOne) RemoveNodeIDs(ids ...xid.ID) *CollectionUpdateOne {
	cuo.mutation.RemoveNodeIDs(ids...)
	return cuo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (cuo *CollectionUpdateOne) RemoveNodes(n ...*Node) *CollectionUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNodeIDs(ids...)
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cuo *CollectionUpdateOne) Where(ps ...predicate.Collection) *CollectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectionUpdateOne) Select(field string, fields ...string) *CollectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collection entity.
func (cuo *CollectionUpdateOne) Save(ctx context.Context) (*Collection, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectionUpdateOne) SaveX(ctx context.Context) *Collection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CollectionUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := collection.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CollectionUpdateOne) check() error {
	if v, ok := cuo.mutation.Visibility(); ok {
		if err := collection.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Collection.visibility": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CollectionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CollectionUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CollectionUpdateOne) sqlSave(ctx context.Context) (_node *Collection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collection.FieldID)
		for _, f := range fields {
			if !collection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.IndexedAt(); ok {
		_spec.SetField(collection.FieldIndexedAt, field.TypeTime, value)
	}
	if cuo.mutation.IndexedAtCleared() {
		_spec.ClearField(collection.FieldIndexedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(collection.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Slug(); ok {
		_spec.SetField(collection.FieldSlug, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(collection.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(collection.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Visibility(); ok {
		_spec.SetField(collection.FieldVisibility, field.TypeEnum, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.OwnerTable,
			Columns: []string{collection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.OwnerTable,
			Columns: []string{collection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collection.CoverImageTable,
			Columns: []string{collection.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collection.CoverImageTable,
			Columns: []string{collection.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.PostsTable,
			Columns: collection.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		createE := &CollectionPostCreate{config: cuo.config, mutation: newCollectionPostMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !cuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.PostsTable,
			Columns: collection.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionPostCreate{config: cuo.config, mutation: newCollectionPostMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.PostsTable,
			Columns: collection.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionPostCreate{config: cuo.config, mutation: newCollectionPostMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.NodesTable,
			Columns: collection.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		createE := &CollectionNodeCreate{config: cuo.config, mutation: newCollectionNodeMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !cuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.NodesTable,
			Columns: collection.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionNodeCreate{config: cuo.config, mutation: newCollectionNodeMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   collection.NodesTable,
			Columns: collection.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollectionNodeCreate{config: cuo.config, mutation: newCollectionNodeMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Collection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
