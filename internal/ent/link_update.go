// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/link"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// LinkUpdate is the builder for updating Link entities.
type LinkUpdate struct {
	config
	hooks     []Hook
	mutation  *LinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LinkUpdate builder.
func (_u *LinkUpdate) Where(ps ...predicate.Link) *LinkUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDomain sets the "domain" field.
func (_u *LinkUpdate) SetDomain(v string) *LinkUpdate {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *LinkUpdate) SetNillableDomain(v *string) *LinkUpdate {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *LinkUpdate) SetTitle(v string) *LinkUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *LinkUpdate) SetNillableTitle(v *string) *LinkUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *LinkUpdate) SetDescription(v string) *LinkUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *LinkUpdate) SetNillableDescription(v *string) *LinkUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetPrimaryAssetID sets the "primary_asset_id" field.
func (_u *LinkUpdate) SetPrimaryAssetID(v xid.ID) *LinkUpdate {
	_u.mutation.SetPrimaryAssetID(v)
	return _u
}

// SetNillablePrimaryAssetID sets the "primary_asset_id" field if the given value is not nil.
func (_u *LinkUpdate) SetNillablePrimaryAssetID(v *xid.ID) *LinkUpdate {
	if v != nil {
		_u.SetPrimaryAssetID(*v)
	}
	return _u
}

// ClearPrimaryAssetID clears the value of the "primary_asset_id" field.
func (_u *LinkUpdate) ClearPrimaryAssetID() *LinkUpdate {
	_u.mutation.ClearPrimaryAssetID()
	return _u
}

// SetFaviconAssetID sets the "favicon_asset_id" field.
func (_u *LinkUpdate) SetFaviconAssetID(v xid.ID) *LinkUpdate {
	_u.mutation.SetFaviconAssetID(v)
	return _u
}

// SetNillableFaviconAssetID sets the "favicon_asset_id" field if the given value is not nil.
func (_u *LinkUpdate) SetNillableFaviconAssetID(v *xid.ID) *LinkUpdate {
	if v != nil {
		_u.SetFaviconAssetID(*v)
	}
	return _u
}

// ClearFaviconAssetID clears the value of the "favicon_asset_id" field.
func (_u *LinkUpdate) ClearFaviconAssetID() *LinkUpdate {
	_u.mutation.ClearFaviconAssetID()
	return _u
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *LinkUpdate) AddPostIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *LinkUpdate) AddPosts(v ...*Post) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// AddPostContentReferenceIDs adds the "post_content_references" edge to the Post entity by IDs.
func (_u *LinkUpdate) AddPostContentReferenceIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.AddPostContentReferenceIDs(ids...)
	return _u
}

// AddPostContentReferences adds the "post_content_references" edges to the Post entity.
func (_u *LinkUpdate) AddPostContentReferences(v ...*Post) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostContentReferenceIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (_u *LinkUpdate) AddNodeIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.AddNodeIDs(ids...)
	return _u
}

// AddNodes adds the "nodes" edges to the Node entity.
func (_u *LinkUpdate) AddNodes(v ...*Node) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeIDs(ids...)
}

// AddNodeContentReferenceIDs adds the "node_content_references" edge to the Node entity by IDs.
func (_u *LinkUpdate) AddNodeContentReferenceIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.AddNodeContentReferenceIDs(ids...)
	return _u
}

// AddNodeContentReferences adds the "node_content_references" edges to the Node entity.
func (_u *LinkUpdate) AddNodeContentReferences(v ...*Node) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeContentReferenceIDs(ids...)
}

// SetPrimaryImageID sets the "primary_image" edge to the Asset entity by ID.
func (_u *LinkUpdate) SetPrimaryImageID(id xid.ID) *LinkUpdate {
	_u.mutation.SetPrimaryImageID(id)
	return _u
}

// SetNillablePrimaryImageID sets the "primary_image" edge to the Asset entity by ID if the given value is not nil.
func (_u *LinkUpdate) SetNillablePrimaryImageID(id *xid.ID) *LinkUpdate {
	if id != nil {
		_u = _u.SetPrimaryImageID(*id)
	}
	return _u
}

// SetPrimaryImage sets the "primary_image" edge to the Asset entity.
func (_u *LinkUpdate) SetPrimaryImage(v *Asset) *LinkUpdate {
	return _u.SetPrimaryImageID(v.ID)
}

// SetFaviconImageID sets the "favicon_image" edge to the Asset entity by ID.
func (_u *LinkUpdate) SetFaviconImageID(id xid.ID) *LinkUpdate {
	_u.mutation.SetFaviconImageID(id)
	return _u
}

// SetNillableFaviconImageID sets the "favicon_image" edge to the Asset entity by ID if the given value is not nil.
func (_u *LinkUpdate) SetNillableFaviconImageID(id *xid.ID) *LinkUpdate {
	if id != nil {
		_u = _u.SetFaviconImageID(*id)
	}
	return _u
}

// SetFaviconImage sets the "favicon_image" edge to the Asset entity.
func (_u *LinkUpdate) SetFaviconImage(v *Asset) *LinkUpdate {
	return _u.SetFaviconImageID(v.ID)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *LinkUpdate) AddAssetIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *LinkUpdate) AddAssets(v ...*Asset) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// Mutation returns the LinkMutation object of the builder.
func (_u *LinkUpdate) Mutation() *LinkMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *LinkUpdate) ClearPosts() *LinkUpdate {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *LinkUpdate) RemovePostIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *LinkUpdate) RemovePosts(v ...*Post) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearPostContentReferences clears all "post_content_references" edges to the Post entity.
func (_u *LinkUpdate) ClearPostContentReferences() *LinkUpdate {
	_u.mutation.ClearPostContentReferences()
	return _u
}

// RemovePostContentReferenceIDs removes the "post_content_references" edge to Post entities by IDs.
func (_u *LinkUpdate) RemovePostContentReferenceIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.RemovePostContentReferenceIDs(ids...)
	return _u
}

// RemovePostContentReferences removes "post_content_references" edges to Post entities.
func (_u *LinkUpdate) RemovePostContentReferences(v ...*Post) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostContentReferenceIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (_u *LinkUpdate) ClearNodes() *LinkUpdate {
	_u.mutation.ClearNodes()
	return _u
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (_u *LinkUpdate) RemoveNodeIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.RemoveNodeIDs(ids...)
	return _u
}

// RemoveNodes removes "nodes" edges to Node entities.
func (_u *LinkUpdate) RemoveNodes(v ...*Node) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeIDs(ids...)
}

// ClearNodeContentReferences clears all "node_content_references" edges to the Node entity.
func (_u *LinkUpdate) ClearNodeContentReferences() *LinkUpdate {
	_u.mutation.ClearNodeContentReferences()
	return _u
}

// RemoveNodeContentReferenceIDs removes the "node_content_references" edge to Node entities by IDs.
func (_u *LinkUpdate) RemoveNodeContentReferenceIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.RemoveNodeContentReferenceIDs(ids...)
	return _u
}

// RemoveNodeContentReferences removes "node_content_references" edges to Node entities.
func (_u *LinkUpdate) RemoveNodeContentReferences(v ...*Node) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeContentReferenceIDs(ids...)
}

// ClearPrimaryImage clears the "primary_image" edge to the Asset entity.
func (_u *LinkUpdate) ClearPrimaryImage() *LinkUpdate {
	_u.mutation.ClearPrimaryImage()
	return _u
}

// ClearFaviconImage clears the "favicon_image" edge to the Asset entity.
func (_u *LinkUpdate) ClearFaviconImage() *LinkUpdate {
	_u.mutation.ClearFaviconImage()
	return _u
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *LinkUpdate) ClearAssets() *LinkUpdate {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *LinkUpdate) RemoveAssetIDs(ids ...xid.ID) *LinkUpdate {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *LinkUpdate) RemoveAssets(v ...*Asset) *LinkUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LinkUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LinkUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LinkUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *LinkUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LinkUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *LinkUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(link.FieldDomain, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(link.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(link.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.PostsTable,
			Columns: []string{link.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.PostsTable,
			Columns: []string{link.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.PostsTable,
			Columns: []string{link.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.PostContentReferencesTable,
			Columns: link.PostContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostContentReferencesIDs(); len(nodes) > 0 && !_u.mutation.PostContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.PostContentReferencesTable,
			Columns: link.PostContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostContentReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.PostContentReferencesTable,
			Columns: link.PostContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.NodesTable,
			Columns: []string{link.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodesIDs(); len(nodes) > 0 && !_u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.NodesTable,
			Columns: []string{link.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.NodesTable,
			Columns: []string{link.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodeContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.NodeContentReferencesTable,
			Columns: link.NodeContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodeContentReferencesIDs(); len(nodes) > 0 && !_u.mutation.NodeContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.NodeContentReferencesTable,
			Columns: link.NodeContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeContentReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.NodeContentReferencesTable,
			Columns: link.NodeContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PrimaryImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.PrimaryImageTable,
			Columns: []string{link.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PrimaryImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.PrimaryImageTable,
			Columns: []string{link.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FaviconImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.FaviconImageTable,
			Columns: []string{link.FaviconImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FaviconImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.FaviconImageTable,
			Columns: []string{link.FaviconImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.AssetsTable,
			Columns: link.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.AssetsTable,
			Columns: link.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.AssetsTable,
			Columns: link.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LinkUpdateOne is the builder for updating a single Link entity.
type LinkUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDomain sets the "domain" field.
func (_u *LinkUpdateOne) SetDomain(v string) *LinkUpdateOne {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *LinkUpdateOne) SetNillableDomain(v *string) *LinkUpdateOne {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *LinkUpdateOne) SetTitle(v string) *LinkUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *LinkUpdateOne) SetNillableTitle(v *string) *LinkUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *LinkUpdateOne) SetDescription(v string) *LinkUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *LinkUpdateOne) SetNillableDescription(v *string) *LinkUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetPrimaryAssetID sets the "primary_asset_id" field.
func (_u *LinkUpdateOne) SetPrimaryAssetID(v xid.ID) *LinkUpdateOne {
	_u.mutation.SetPrimaryAssetID(v)
	return _u
}

// SetNillablePrimaryAssetID sets the "primary_asset_id" field if the given value is not nil.
func (_u *LinkUpdateOne) SetNillablePrimaryAssetID(v *xid.ID) *LinkUpdateOne {
	if v != nil {
		_u.SetPrimaryAssetID(*v)
	}
	return _u
}

// ClearPrimaryAssetID clears the value of the "primary_asset_id" field.
func (_u *LinkUpdateOne) ClearPrimaryAssetID() *LinkUpdateOne {
	_u.mutation.ClearPrimaryAssetID()
	return _u
}

// SetFaviconAssetID sets the "favicon_asset_id" field.
func (_u *LinkUpdateOne) SetFaviconAssetID(v xid.ID) *LinkUpdateOne {
	_u.mutation.SetFaviconAssetID(v)
	return _u
}

// SetNillableFaviconAssetID sets the "favicon_asset_id" field if the given value is not nil.
func (_u *LinkUpdateOne) SetNillableFaviconAssetID(v *xid.ID) *LinkUpdateOne {
	if v != nil {
		_u.SetFaviconAssetID(*v)
	}
	return _u
}

// ClearFaviconAssetID clears the value of the "favicon_asset_id" field.
func (_u *LinkUpdateOne) ClearFaviconAssetID() *LinkUpdateOne {
	_u.mutation.ClearFaviconAssetID()
	return _u
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *LinkUpdateOne) AddPostIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *LinkUpdateOne) AddPosts(v ...*Post) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// AddPostContentReferenceIDs adds the "post_content_references" edge to the Post entity by IDs.
func (_u *LinkUpdateOne) AddPostContentReferenceIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.AddPostContentReferenceIDs(ids...)
	return _u
}

// AddPostContentReferences adds the "post_content_references" edges to the Post entity.
func (_u *LinkUpdateOne) AddPostContentReferences(v ...*Post) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostContentReferenceIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (_u *LinkUpdateOne) AddNodeIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.AddNodeIDs(ids...)
	return _u
}

// AddNodes adds the "nodes" edges to the Node entity.
func (_u *LinkUpdateOne) AddNodes(v ...*Node) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeIDs(ids...)
}

// AddNodeContentReferenceIDs adds the "node_content_references" edge to the Node entity by IDs.
func (_u *LinkUpdateOne) AddNodeContentReferenceIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.AddNodeContentReferenceIDs(ids...)
	return _u
}

// AddNodeContentReferences adds the "node_content_references" edges to the Node entity.
func (_u *LinkUpdateOne) AddNodeContentReferences(v ...*Node) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeContentReferenceIDs(ids...)
}

// SetPrimaryImageID sets the "primary_image" edge to the Asset entity by ID.
func (_u *LinkUpdateOne) SetPrimaryImageID(id xid.ID) *LinkUpdateOne {
	_u.mutation.SetPrimaryImageID(id)
	return _u
}

// SetNillablePrimaryImageID sets the "primary_image" edge to the Asset entity by ID if the given value is not nil.
func (_u *LinkUpdateOne) SetNillablePrimaryImageID(id *xid.ID) *LinkUpdateOne {
	if id != nil {
		_u = _u.SetPrimaryImageID(*id)
	}
	return _u
}

// SetPrimaryImage sets the "primary_image" edge to the Asset entity.
func (_u *LinkUpdateOne) SetPrimaryImage(v *Asset) *LinkUpdateOne {
	return _u.SetPrimaryImageID(v.ID)
}

// SetFaviconImageID sets the "favicon_image" edge to the Asset entity by ID.
func (_u *LinkUpdateOne) SetFaviconImageID(id xid.ID) *LinkUpdateOne {
	_u.mutation.SetFaviconImageID(id)
	return _u
}

// SetNillableFaviconImageID sets the "favicon_image" edge to the Asset entity by ID if the given value is not nil.
func (_u *LinkUpdateOne) SetNillableFaviconImageID(id *xid.ID) *LinkUpdateOne {
	if id != nil {
		_u = _u.SetFaviconImageID(*id)
	}
	return _u
}

// SetFaviconImage sets the "favicon_image" edge to the Asset entity.
func (_u *LinkUpdateOne) SetFaviconImage(v *Asset) *LinkUpdateOne {
	return _u.SetFaviconImageID(v.ID)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *LinkUpdateOne) AddAssetIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *LinkUpdateOne) AddAssets(v ...*Asset) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// Mutation returns the LinkMutation object of the builder.
func (_u *LinkUpdateOne) Mutation() *LinkMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *LinkUpdateOne) ClearPosts() *LinkUpdateOne {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *LinkUpdateOne) RemovePostIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *LinkUpdateOne) RemovePosts(v ...*Post) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearPostContentReferences clears all "post_content_references" edges to the Post entity.
func (_u *LinkUpdateOne) ClearPostContentReferences() *LinkUpdateOne {
	_u.mutation.ClearPostContentReferences()
	return _u
}

// RemovePostContentReferenceIDs removes the "post_content_references" edge to Post entities by IDs.
func (_u *LinkUpdateOne) RemovePostContentReferenceIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.RemovePostContentReferenceIDs(ids...)
	return _u
}

// RemovePostContentReferences removes "post_content_references" edges to Post entities.
func (_u *LinkUpdateOne) RemovePostContentReferences(v ...*Post) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostContentReferenceIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (_u *LinkUpdateOne) ClearNodes() *LinkUpdateOne {
	_u.mutation.ClearNodes()
	return _u
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (_u *LinkUpdateOne) RemoveNodeIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.RemoveNodeIDs(ids...)
	return _u
}

// RemoveNodes removes "nodes" edges to Node entities.
func (_u *LinkUpdateOne) RemoveNodes(v ...*Node) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeIDs(ids...)
}

// ClearNodeContentReferences clears all "node_content_references" edges to the Node entity.
func (_u *LinkUpdateOne) ClearNodeContentReferences() *LinkUpdateOne {
	_u.mutation.ClearNodeContentReferences()
	return _u
}

// RemoveNodeContentReferenceIDs removes the "node_content_references" edge to Node entities by IDs.
func (_u *LinkUpdateOne) RemoveNodeContentReferenceIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.RemoveNodeContentReferenceIDs(ids...)
	return _u
}

// RemoveNodeContentReferences removes "node_content_references" edges to Node entities.
func (_u *LinkUpdateOne) RemoveNodeContentReferences(v ...*Node) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeContentReferenceIDs(ids...)
}

// ClearPrimaryImage clears the "primary_image" edge to the Asset entity.
func (_u *LinkUpdateOne) ClearPrimaryImage() *LinkUpdateOne {
	_u.mutation.ClearPrimaryImage()
	return _u
}

// ClearFaviconImage clears the "favicon_image" edge to the Asset entity.
func (_u *LinkUpdateOne) ClearFaviconImage() *LinkUpdateOne {
	_u.mutation.ClearFaviconImage()
	return _u
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *LinkUpdateOne) ClearAssets() *LinkUpdateOne {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *LinkUpdateOne) RemoveAssetIDs(ids ...xid.ID) *LinkUpdateOne {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *LinkUpdateOne) RemoveAssets(v ...*Asset) *LinkUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// Where appends a list predicates to the LinkUpdate builder.
func (_u *LinkUpdateOne) Where(ps ...predicate.Link) *LinkUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LinkUpdateOne) Select(field string, fields ...string) *LinkUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Link entity.
func (_u *LinkUpdateOne) Save(ctx context.Context) (*Link, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LinkUpdateOne) SaveX(ctx context.Context) *Link {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LinkUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LinkUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *LinkUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LinkUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *LinkUpdateOne) sqlSave(ctx context.Context) (_node *Link, err error) {
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Link.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, link.FieldID)
		for _, f := range fields {
			if !link.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != link.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(link.FieldDomain, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(link.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(link.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.PostsTable,
			Columns: []string{link.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.PostsTable,
			Columns: []string{link.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.PostsTable,
			Columns: []string{link.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.PostContentReferencesTable,
			Columns: link.PostContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostContentReferencesIDs(); len(nodes) > 0 && !_u.mutation.PostContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.PostContentReferencesTable,
			Columns: link.PostContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostContentReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.PostContentReferencesTable,
			Columns: link.PostContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.NodesTable,
			Columns: []string{link.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodesIDs(); len(nodes) > 0 && !_u.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.NodesTable,
			Columns: []string{link.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   link.NodesTable,
			Columns: []string{link.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NodeContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.NodeContentReferencesTable,
			Columns: link.NodeContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodeContentReferencesIDs(); len(nodes) > 0 && !_u.mutation.NodeContentReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.NodeContentReferencesTable,
			Columns: link.NodeContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeContentReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.NodeContentReferencesTable,
			Columns: link.NodeContentReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PrimaryImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.PrimaryImageTable,
			Columns: []string{link.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PrimaryImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.PrimaryImageTable,
			Columns: []string{link.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FaviconImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.FaviconImageTable,
			Columns: []string{link.FaviconImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FaviconImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   link.FaviconImageTable,
			Columns: []string{link.FaviconImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.AssetsTable,
			Columns: link.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.AssetsTable,
			Columns: link.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.AssetsTable,
			Columns: link.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Link{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
