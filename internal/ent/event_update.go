// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/event"
	"github.com/Southclaws/storyden/internal/ent/eventparticipant"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EventUpdate) SetDeletedAt(t time.Time) *EventUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeletedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EventUpdate) ClearDeletedAt() *EventUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EventUpdate) SetNillableName(s *string) *EventUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// SetSlug sets the "slug" field.
func (eu *EventUpdate) SetSlug(s string) *EventUpdate {
	eu.mutation.SetSlug(s)
	return eu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSlug(s *string) *EventUpdate {
	if s != nil {
		eu.SetSlug(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EventUpdate) ClearDescription() *EventUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetStartTime sets the "start_time" field.
func (eu *EventUpdate) SetStartTime(t time.Time) *EventUpdate {
	eu.mutation.SetStartTime(t)
	return eu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartTime(*t)
	}
	return eu
}

// SetEndTime sets the "end_time" field.
func (eu *EventUpdate) SetEndTime(t time.Time) *EventUpdate {
	eu.mutation.SetEndTime(t)
	return eu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetEndTime(*t)
	}
	return eu
}

// SetParticipationPolicy sets the "participation_policy" field.
func (eu *EventUpdate) SetParticipationPolicy(s string) *EventUpdate {
	eu.mutation.SetParticipationPolicy(s)
	return eu
}

// SetNillableParticipationPolicy sets the "participation_policy" field if the given value is not nil.
func (eu *EventUpdate) SetNillableParticipationPolicy(s *string) *EventUpdate {
	if s != nil {
		eu.SetParticipationPolicy(*s)
	}
	return eu
}

// SetVisibility sets the "visibility" field.
func (eu *EventUpdate) SetVisibility(e event.Visibility) *EventUpdate {
	eu.mutation.SetVisibility(e)
	return eu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVisibility(e *event.Visibility) *EventUpdate {
	if e != nil {
		eu.SetVisibility(*e)
	}
	return eu
}

// SetLocationType sets the "location_type" field.
func (eu *EventUpdate) SetLocationType(s string) *EventUpdate {
	eu.mutation.SetLocationType(s)
	return eu
}

// SetNillableLocationType sets the "location_type" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationType(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocationType(*s)
	}
	return eu
}

// ClearLocationType clears the value of the "location_type" field.
func (eu *EventUpdate) ClearLocationType() *EventUpdate {
	eu.mutation.ClearLocationType()
	return eu
}

// SetLocationName sets the "location_name" field.
func (eu *EventUpdate) SetLocationName(s string) *EventUpdate {
	eu.mutation.SetLocationName(s)
	return eu
}

// SetNillableLocationName sets the "location_name" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationName(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocationName(*s)
	}
	return eu
}

// ClearLocationName clears the value of the "location_name" field.
func (eu *EventUpdate) ClearLocationName() *EventUpdate {
	eu.mutation.ClearLocationName()
	return eu
}

// SetLocationAddress sets the "location_address" field.
func (eu *EventUpdate) SetLocationAddress(s string) *EventUpdate {
	eu.mutation.SetLocationAddress(s)
	return eu
}

// SetNillableLocationAddress sets the "location_address" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationAddress(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocationAddress(*s)
	}
	return eu
}

// ClearLocationAddress clears the value of the "location_address" field.
func (eu *EventUpdate) ClearLocationAddress() *EventUpdate {
	eu.mutation.ClearLocationAddress()
	return eu
}

// SetLocationLatitude sets the "location_latitude" field.
func (eu *EventUpdate) SetLocationLatitude(f float64) *EventUpdate {
	eu.mutation.ResetLocationLatitude()
	eu.mutation.SetLocationLatitude(f)
	return eu
}

// SetNillableLocationLatitude sets the "location_latitude" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationLatitude(f *float64) *EventUpdate {
	if f != nil {
		eu.SetLocationLatitude(*f)
	}
	return eu
}

// AddLocationLatitude adds f to the "location_latitude" field.
func (eu *EventUpdate) AddLocationLatitude(f float64) *EventUpdate {
	eu.mutation.AddLocationLatitude(f)
	return eu
}

// ClearLocationLatitude clears the value of the "location_latitude" field.
func (eu *EventUpdate) ClearLocationLatitude() *EventUpdate {
	eu.mutation.ClearLocationLatitude()
	return eu
}

// SetLocationLongitude sets the "location_longitude" field.
func (eu *EventUpdate) SetLocationLongitude(f float64) *EventUpdate {
	eu.mutation.ResetLocationLongitude()
	eu.mutation.SetLocationLongitude(f)
	return eu
}

// SetNillableLocationLongitude sets the "location_longitude" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationLongitude(f *float64) *EventUpdate {
	if f != nil {
		eu.SetLocationLongitude(*f)
	}
	return eu
}

// AddLocationLongitude adds f to the "location_longitude" field.
func (eu *EventUpdate) AddLocationLongitude(f float64) *EventUpdate {
	eu.mutation.AddLocationLongitude(f)
	return eu
}

// ClearLocationLongitude clears the value of the "location_longitude" field.
func (eu *EventUpdate) ClearLocationLongitude() *EventUpdate {
	eu.mutation.ClearLocationLongitude()
	return eu
}

// SetLocationURL sets the "location_url" field.
func (eu *EventUpdate) SetLocationURL(s string) *EventUpdate {
	eu.mutation.SetLocationURL(s)
	return eu
}

// SetNillableLocationURL sets the "location_url" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationURL(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocationURL(*s)
	}
	return eu
}

// ClearLocationURL clears the value of the "location_url" field.
func (eu *EventUpdate) ClearLocationURL() *EventUpdate {
	eu.mutation.ClearLocationURL()
	return eu
}

// SetCapacity sets the "capacity" field.
func (eu *EventUpdate) SetCapacity(i int) *EventUpdate {
	eu.mutation.ResetCapacity()
	eu.mutation.SetCapacity(i)
	return eu
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCapacity(i *int) *EventUpdate {
	if i != nil {
		eu.SetCapacity(*i)
	}
	return eu
}

// AddCapacity adds i to the "capacity" field.
func (eu *EventUpdate) AddCapacity(i int) *EventUpdate {
	eu.mutation.AddCapacity(i)
	return eu
}

// ClearCapacity clears the value of the "capacity" field.
func (eu *EventUpdate) ClearCapacity() *EventUpdate {
	eu.mutation.ClearCapacity()
	return eu
}

// SetMetadata sets the "metadata" field.
func (eu *EventUpdate) SetMetadata(m map[string]interface{}) *EventUpdate {
	eu.mutation.SetMetadata(m)
	return eu
}

// ClearMetadata clears the value of the "metadata" field.
func (eu *EventUpdate) ClearMetadata() *EventUpdate {
	eu.mutation.ClearMetadata()
	return eu
}

// AddParticipantIDs adds the "participants" edge to the EventParticipant entity by IDs.
func (eu *EventUpdate) AddParticipantIDs(ids ...xid.ID) *EventUpdate {
	eu.mutation.AddParticipantIDs(ids...)
	return eu
}

// AddParticipants adds the "participants" edges to the EventParticipant entity.
func (eu *EventUpdate) AddParticipants(e ...*EventParticipant) *EventUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddParticipantIDs(ids...)
}

// SetThreadID sets the "thread" edge to the Post entity by ID.
func (eu *EventUpdate) SetThreadID(id xid.ID) *EventUpdate {
	eu.mutation.SetThreadID(id)
	return eu
}

// SetThread sets the "thread" edge to the Post entity.
func (eu *EventUpdate) SetThread(p *Post) *EventUpdate {
	return eu.SetThreadID(p.ID)
}

// SetPrimaryImageID sets the "primary_image" edge to the Asset entity by ID.
func (eu *EventUpdate) SetPrimaryImageID(id xid.ID) *EventUpdate {
	eu.mutation.SetPrimaryImageID(id)
	return eu
}

// SetNillablePrimaryImageID sets the "primary_image" edge to the Asset entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillablePrimaryImageID(id *xid.ID) *EventUpdate {
	if id != nil {
		eu = eu.SetPrimaryImageID(*id)
	}
	return eu
}

// SetPrimaryImage sets the "primary_image" edge to the Asset entity.
func (eu *EventUpdate) SetPrimaryImage(a *Asset) *EventUpdate {
	return eu.SetPrimaryImageID(a.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearParticipants clears all "participants" edges to the EventParticipant entity.
func (eu *EventUpdate) ClearParticipants() *EventUpdate {
	eu.mutation.ClearParticipants()
	return eu
}

// RemoveParticipantIDs removes the "participants" edge to EventParticipant entities by IDs.
func (eu *EventUpdate) RemoveParticipantIDs(ids ...xid.ID) *EventUpdate {
	eu.mutation.RemoveParticipantIDs(ids...)
	return eu
}

// RemoveParticipants removes "participants" edges to EventParticipant entities.
func (eu *EventUpdate) RemoveParticipants(e ...*EventParticipant) *EventUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveParticipantIDs(ids...)
}

// ClearThread clears the "thread" edge to the Post entity.
func (eu *EventUpdate) ClearThread() *EventUpdate {
	eu.mutation.ClearThread()
	return eu
}

// ClearPrimaryImage clears the "primary_image" edge to the Asset entity.
func (eu *EventUpdate) ClearPrimaryImage() *EventUpdate {
	eu.mutation.ClearPrimaryImage()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Visibility(); ok {
		if err := event.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Event.visibility": %w`, err)}
		}
	}
	if eu.mutation.ThreadCleared() && len(eu.mutation.ThreadIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.thread"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Slug(); ok {
		_spec.SetField(event.FieldSlug, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.ParticipationPolicy(); ok {
		_spec.SetField(event.FieldParticipationPolicy, field.TypeString, value)
	}
	if value, ok := eu.mutation.Visibility(); ok {
		_spec.SetField(event.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.LocationType(); ok {
		_spec.SetField(event.FieldLocationType, field.TypeString, value)
	}
	if eu.mutation.LocationTypeCleared() {
		_spec.ClearField(event.FieldLocationType, field.TypeString)
	}
	if value, ok := eu.mutation.LocationName(); ok {
		_spec.SetField(event.FieldLocationName, field.TypeString, value)
	}
	if eu.mutation.LocationNameCleared() {
		_spec.ClearField(event.FieldLocationName, field.TypeString)
	}
	if value, ok := eu.mutation.LocationAddress(); ok {
		_spec.SetField(event.FieldLocationAddress, field.TypeString, value)
	}
	if eu.mutation.LocationAddressCleared() {
		_spec.ClearField(event.FieldLocationAddress, field.TypeString)
	}
	if value, ok := eu.mutation.LocationLatitude(); ok {
		_spec.SetField(event.FieldLocationLatitude, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedLocationLatitude(); ok {
		_spec.AddField(event.FieldLocationLatitude, field.TypeFloat64, value)
	}
	if eu.mutation.LocationLatitudeCleared() {
		_spec.ClearField(event.FieldLocationLatitude, field.TypeFloat64)
	}
	if value, ok := eu.mutation.LocationLongitude(); ok {
		_spec.SetField(event.FieldLocationLongitude, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedLocationLongitude(); ok {
		_spec.AddField(event.FieldLocationLongitude, field.TypeFloat64, value)
	}
	if eu.mutation.LocationLongitudeCleared() {
		_spec.ClearField(event.FieldLocationLongitude, field.TypeFloat64)
	}
	if value, ok := eu.mutation.LocationURL(); ok {
		_spec.SetField(event.FieldLocationURL, field.TypeString, value)
	}
	if eu.mutation.LocationURLCleared() {
		_spec.ClearField(event.FieldLocationURL, field.TypeString)
	}
	if value, ok := eu.mutation.Capacity(); ok {
		_spec.SetField(event.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedCapacity(); ok {
		_spec.AddField(event.FieldCapacity, field.TypeInt, value)
	}
	if eu.mutation.CapacityCleared() {
		_spec.ClearField(event.FieldCapacity, field.TypeInt)
	}
	if value, ok := eu.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if eu.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ThreadTable,
			Columns: []string{event.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ThreadTable,
			Columns: []string{event.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PrimaryImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.PrimaryImageTable,
			Columns: []string{event.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PrimaryImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.PrimaryImageTable,
			Columns: []string{event.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EventUpdateOne) SetDeletedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeletedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EventUpdateOne) ClearDeletedAt() *EventUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableName(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// SetSlug sets the "slug" field.
func (euo *EventUpdateOne) SetSlug(s string) *EventUpdateOne {
	euo.mutation.SetSlug(s)
	return euo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSlug(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSlug(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EventUpdateOne) ClearDescription() *EventUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetStartTime sets the "start_time" field.
func (euo *EventUpdateOne) SetStartTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartTime(t)
	return euo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartTime(*t)
	}
	return euo
}

// SetEndTime sets the "end_time" field.
func (euo *EventUpdateOne) SetEndTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetEndTime(t)
	return euo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetEndTime(*t)
	}
	return euo
}

// SetParticipationPolicy sets the "participation_policy" field.
func (euo *EventUpdateOne) SetParticipationPolicy(s string) *EventUpdateOne {
	euo.mutation.SetParticipationPolicy(s)
	return euo
}

// SetNillableParticipationPolicy sets the "participation_policy" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableParticipationPolicy(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetParticipationPolicy(*s)
	}
	return euo
}

// SetVisibility sets the "visibility" field.
func (euo *EventUpdateOne) SetVisibility(e event.Visibility) *EventUpdateOne {
	euo.mutation.SetVisibility(e)
	return euo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVisibility(e *event.Visibility) *EventUpdateOne {
	if e != nil {
		euo.SetVisibility(*e)
	}
	return euo
}

// SetLocationType sets the "location_type" field.
func (euo *EventUpdateOne) SetLocationType(s string) *EventUpdateOne {
	euo.mutation.SetLocationType(s)
	return euo
}

// SetNillableLocationType sets the "location_type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationType(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocationType(*s)
	}
	return euo
}

// ClearLocationType clears the value of the "location_type" field.
func (euo *EventUpdateOne) ClearLocationType() *EventUpdateOne {
	euo.mutation.ClearLocationType()
	return euo
}

// SetLocationName sets the "location_name" field.
func (euo *EventUpdateOne) SetLocationName(s string) *EventUpdateOne {
	euo.mutation.SetLocationName(s)
	return euo
}

// SetNillableLocationName sets the "location_name" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationName(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocationName(*s)
	}
	return euo
}

// ClearLocationName clears the value of the "location_name" field.
func (euo *EventUpdateOne) ClearLocationName() *EventUpdateOne {
	euo.mutation.ClearLocationName()
	return euo
}

// SetLocationAddress sets the "location_address" field.
func (euo *EventUpdateOne) SetLocationAddress(s string) *EventUpdateOne {
	euo.mutation.SetLocationAddress(s)
	return euo
}

// SetNillableLocationAddress sets the "location_address" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationAddress(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocationAddress(*s)
	}
	return euo
}

// ClearLocationAddress clears the value of the "location_address" field.
func (euo *EventUpdateOne) ClearLocationAddress() *EventUpdateOne {
	euo.mutation.ClearLocationAddress()
	return euo
}

// SetLocationLatitude sets the "location_latitude" field.
func (euo *EventUpdateOne) SetLocationLatitude(f float64) *EventUpdateOne {
	euo.mutation.ResetLocationLatitude()
	euo.mutation.SetLocationLatitude(f)
	return euo
}

// SetNillableLocationLatitude sets the "location_latitude" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationLatitude(f *float64) *EventUpdateOne {
	if f != nil {
		euo.SetLocationLatitude(*f)
	}
	return euo
}

// AddLocationLatitude adds f to the "location_latitude" field.
func (euo *EventUpdateOne) AddLocationLatitude(f float64) *EventUpdateOne {
	euo.mutation.AddLocationLatitude(f)
	return euo
}

// ClearLocationLatitude clears the value of the "location_latitude" field.
func (euo *EventUpdateOne) ClearLocationLatitude() *EventUpdateOne {
	euo.mutation.ClearLocationLatitude()
	return euo
}

// SetLocationLongitude sets the "location_longitude" field.
func (euo *EventUpdateOne) SetLocationLongitude(f float64) *EventUpdateOne {
	euo.mutation.ResetLocationLongitude()
	euo.mutation.SetLocationLongitude(f)
	return euo
}

// SetNillableLocationLongitude sets the "location_longitude" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationLongitude(f *float64) *EventUpdateOne {
	if f != nil {
		euo.SetLocationLongitude(*f)
	}
	return euo
}

// AddLocationLongitude adds f to the "location_longitude" field.
func (euo *EventUpdateOne) AddLocationLongitude(f float64) *EventUpdateOne {
	euo.mutation.AddLocationLongitude(f)
	return euo
}

// ClearLocationLongitude clears the value of the "location_longitude" field.
func (euo *EventUpdateOne) ClearLocationLongitude() *EventUpdateOne {
	euo.mutation.ClearLocationLongitude()
	return euo
}

// SetLocationURL sets the "location_url" field.
func (euo *EventUpdateOne) SetLocationURL(s string) *EventUpdateOne {
	euo.mutation.SetLocationURL(s)
	return euo
}

// SetNillableLocationURL sets the "location_url" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationURL(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocationURL(*s)
	}
	return euo
}

// ClearLocationURL clears the value of the "location_url" field.
func (euo *EventUpdateOne) ClearLocationURL() *EventUpdateOne {
	euo.mutation.ClearLocationURL()
	return euo
}

// SetCapacity sets the "capacity" field.
func (euo *EventUpdateOne) SetCapacity(i int) *EventUpdateOne {
	euo.mutation.ResetCapacity()
	euo.mutation.SetCapacity(i)
	return euo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCapacity(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetCapacity(*i)
	}
	return euo
}

// AddCapacity adds i to the "capacity" field.
func (euo *EventUpdateOne) AddCapacity(i int) *EventUpdateOne {
	euo.mutation.AddCapacity(i)
	return euo
}

// ClearCapacity clears the value of the "capacity" field.
func (euo *EventUpdateOne) ClearCapacity() *EventUpdateOne {
	euo.mutation.ClearCapacity()
	return euo
}

// SetMetadata sets the "metadata" field.
func (euo *EventUpdateOne) SetMetadata(m map[string]interface{}) *EventUpdateOne {
	euo.mutation.SetMetadata(m)
	return euo
}

// ClearMetadata clears the value of the "metadata" field.
func (euo *EventUpdateOne) ClearMetadata() *EventUpdateOne {
	euo.mutation.ClearMetadata()
	return euo
}

// AddParticipantIDs adds the "participants" edge to the EventParticipant entity by IDs.
func (euo *EventUpdateOne) AddParticipantIDs(ids ...xid.ID) *EventUpdateOne {
	euo.mutation.AddParticipantIDs(ids...)
	return euo
}

// AddParticipants adds the "participants" edges to the EventParticipant entity.
func (euo *EventUpdateOne) AddParticipants(e ...*EventParticipant) *EventUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddParticipantIDs(ids...)
}

// SetThreadID sets the "thread" edge to the Post entity by ID.
func (euo *EventUpdateOne) SetThreadID(id xid.ID) *EventUpdateOne {
	euo.mutation.SetThreadID(id)
	return euo
}

// SetThread sets the "thread" edge to the Post entity.
func (euo *EventUpdateOne) SetThread(p *Post) *EventUpdateOne {
	return euo.SetThreadID(p.ID)
}

// SetPrimaryImageID sets the "primary_image" edge to the Asset entity by ID.
func (euo *EventUpdateOne) SetPrimaryImageID(id xid.ID) *EventUpdateOne {
	euo.mutation.SetPrimaryImageID(id)
	return euo
}

// SetNillablePrimaryImageID sets the "primary_image" edge to the Asset entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePrimaryImageID(id *xid.ID) *EventUpdateOne {
	if id != nil {
		euo = euo.SetPrimaryImageID(*id)
	}
	return euo
}

// SetPrimaryImage sets the "primary_image" edge to the Asset entity.
func (euo *EventUpdateOne) SetPrimaryImage(a *Asset) *EventUpdateOne {
	return euo.SetPrimaryImageID(a.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearParticipants clears all "participants" edges to the EventParticipant entity.
func (euo *EventUpdateOne) ClearParticipants() *EventUpdateOne {
	euo.mutation.ClearParticipants()
	return euo
}

// RemoveParticipantIDs removes the "participants" edge to EventParticipant entities by IDs.
func (euo *EventUpdateOne) RemoveParticipantIDs(ids ...xid.ID) *EventUpdateOne {
	euo.mutation.RemoveParticipantIDs(ids...)
	return euo
}

// RemoveParticipants removes "participants" edges to EventParticipant entities.
func (euo *EventUpdateOne) RemoveParticipants(e ...*EventParticipant) *EventUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveParticipantIDs(ids...)
}

// ClearThread clears the "thread" edge to the Post entity.
func (euo *EventUpdateOne) ClearThread() *EventUpdateOne {
	euo.mutation.ClearThread()
	return euo
}

// ClearPrimaryImage clears the "primary_image" edge to the Asset entity.
func (euo *EventUpdateOne) ClearPrimaryImage() *EventUpdateOne {
	euo.mutation.ClearPrimaryImage()
	return euo
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Visibility(); ok {
		if err := event.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Event.visibility": %w`, err)}
		}
	}
	if euo.mutation.ThreadCleared() && len(euo.mutation.ThreadIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.thread"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Slug(); ok {
		_spec.SetField(event.FieldSlug, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.ParticipationPolicy(); ok {
		_spec.SetField(event.FieldParticipationPolicy, field.TypeString, value)
	}
	if value, ok := euo.mutation.Visibility(); ok {
		_spec.SetField(event.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.LocationType(); ok {
		_spec.SetField(event.FieldLocationType, field.TypeString, value)
	}
	if euo.mutation.LocationTypeCleared() {
		_spec.ClearField(event.FieldLocationType, field.TypeString)
	}
	if value, ok := euo.mutation.LocationName(); ok {
		_spec.SetField(event.FieldLocationName, field.TypeString, value)
	}
	if euo.mutation.LocationNameCleared() {
		_spec.ClearField(event.FieldLocationName, field.TypeString)
	}
	if value, ok := euo.mutation.LocationAddress(); ok {
		_spec.SetField(event.FieldLocationAddress, field.TypeString, value)
	}
	if euo.mutation.LocationAddressCleared() {
		_spec.ClearField(event.FieldLocationAddress, field.TypeString)
	}
	if value, ok := euo.mutation.LocationLatitude(); ok {
		_spec.SetField(event.FieldLocationLatitude, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedLocationLatitude(); ok {
		_spec.AddField(event.FieldLocationLatitude, field.TypeFloat64, value)
	}
	if euo.mutation.LocationLatitudeCleared() {
		_spec.ClearField(event.FieldLocationLatitude, field.TypeFloat64)
	}
	if value, ok := euo.mutation.LocationLongitude(); ok {
		_spec.SetField(event.FieldLocationLongitude, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedLocationLongitude(); ok {
		_spec.AddField(event.FieldLocationLongitude, field.TypeFloat64, value)
	}
	if euo.mutation.LocationLongitudeCleared() {
		_spec.ClearField(event.FieldLocationLongitude, field.TypeFloat64)
	}
	if value, ok := euo.mutation.LocationURL(); ok {
		_spec.SetField(event.FieldLocationURL, field.TypeString, value)
	}
	if euo.mutation.LocationURLCleared() {
		_spec.ClearField(event.FieldLocationURL, field.TypeString)
	}
	if value, ok := euo.mutation.Capacity(); ok {
		_spec.SetField(event.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedCapacity(); ok {
		_spec.AddField(event.FieldCapacity, field.TypeInt, value)
	}
	if euo.mutation.CapacityCleared() {
		_spec.ClearField(event.FieldCapacity, field.TypeInt)
	}
	if value, ok := euo.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if euo.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ThreadTable,
			Columns: []string{event.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ThreadTable,
			Columns: []string{event.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PrimaryImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.PrimaryImageTable,
			Columns: []string{event.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PrimaryImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.PrimaryImageTable,
			Columns: []string{event.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
