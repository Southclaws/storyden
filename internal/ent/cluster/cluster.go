// Code generated by ent, DO NOT EDIT.

package cluster

import (
	"time"

	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the cluster type in the database.
	Label = "cluster"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldParentClusterID holds the string denoting the parent_cluster_id field in the database.
	FieldParentClusterID = "parent_cluster_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeClusters holds the string denoting the clusters edge name in mutations.
	EdgeClusters = "clusters"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeAssets holds the string denoting the assets edge name in mutations.
	EdgeAssets = "assets"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// Table holds the table name of the cluster in the database.
	Table = "clusters"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "clusters"
	// OwnerInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	OwnerInverseTable = "accounts"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "account_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "clusters"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_cluster_id"
	// ClustersTable is the table that holds the clusters relation/edge.
	ClustersTable = "clusters"
	// ClustersColumn is the table column denoting the clusters relation/edge.
	ClustersColumn = "parent_cluster_id"
	// ItemsTable is the table that holds the items relation/edge. The primary key declared below.
	ItemsTable = "cluster_items"
	// ItemsInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemsInverseTable = "items"
	// AssetsTable is the table that holds the assets relation/edge. The primary key declared below.
	AssetsTable = "cluster_assets"
	// AssetsInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetsInverseTable = "assets"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "tag_clusters"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
)

// Columns holds all SQL columns for cluster fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldSlug,
	FieldImageURL,
	FieldDescription,
	FieldParentClusterID,
	FieldAccountID,
	FieldProperties,
}

var (
	// ItemsPrimaryKey and ItemsColumn2 are the table columns denoting the
	// primary key for the items relation (M2M).
	ItemsPrimaryKey = []string{"cluster_id", "item_id"}
	// AssetsPrimaryKey and AssetsColumn2 are the table columns denoting the
	// primary key for the assets relation (M2M).
	AssetsPrimaryKey = []string{"cluster_id", "asset_id"}
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"tag_id", "cluster_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
