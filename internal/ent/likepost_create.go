// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/likepost"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/rs/xid"
)

// LikePostCreate is the builder for creating a LikePost entity.
type LikePostCreate struct {
	config
	mutation *LikePostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lpc *LikePostCreate) SetCreatedAt(t time.Time) *LikePostCreate {
	lpc.mutation.SetCreatedAt(t)
	return lpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpc *LikePostCreate) SetNillableCreatedAt(t *time.Time) *LikePostCreate {
	if t != nil {
		lpc.SetCreatedAt(*t)
	}
	return lpc
}

// SetAccountID sets the "account_id" field.
func (lpc *LikePostCreate) SetAccountID(x xid.ID) *LikePostCreate {
	lpc.mutation.SetAccountID(x)
	return lpc
}

// SetPostID sets the "post_id" field.
func (lpc *LikePostCreate) SetPostID(x xid.ID) *LikePostCreate {
	lpc.mutation.SetPostID(x)
	return lpc
}

// SetID sets the "id" field.
func (lpc *LikePostCreate) SetID(x xid.ID) *LikePostCreate {
	lpc.mutation.SetID(x)
	return lpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lpc *LikePostCreate) SetNillableID(x *xid.ID) *LikePostCreate {
	if x != nil {
		lpc.SetID(*x)
	}
	return lpc
}

// SetAccount sets the "account" edge to the Account entity.
func (lpc *LikePostCreate) SetAccount(a *Account) *LikePostCreate {
	return lpc.SetAccountID(a.ID)
}

// SetPost sets the "Post" edge to the Post entity.
func (lpc *LikePostCreate) SetPost(p *Post) *LikePostCreate {
	return lpc.SetPostID(p.ID)
}

// Mutation returns the LikePostMutation object of the builder.
func (lpc *LikePostCreate) Mutation() *LikePostMutation {
	return lpc.mutation
}

// Save creates the LikePost in the database.
func (lpc *LikePostCreate) Save(ctx context.Context) (*LikePost, error) {
	lpc.defaults()
	return withHooks(ctx, lpc.sqlSave, lpc.mutation, lpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpc *LikePostCreate) SaveX(ctx context.Context) *LikePost {
	v, err := lpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpc *LikePostCreate) Exec(ctx context.Context) error {
	_, err := lpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpc *LikePostCreate) ExecX(ctx context.Context) {
	if err := lpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpc *LikePostCreate) defaults() {
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		v := likepost.DefaultCreatedAt()
		lpc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpc.mutation.ID(); !ok {
		v := likepost.DefaultID()
		lpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpc *LikePostCreate) check() error {
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LikePost.created_at"`)}
	}
	if _, ok := lpc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "LikePost.account_id"`)}
	}
	if _, ok := lpc.mutation.PostID(); !ok {
		return &ValidationError{Name: "post_id", err: errors.New(`ent: missing required field "LikePost.post_id"`)}
	}
	if v, ok := lpc.mutation.ID(); ok {
		if err := likepost.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LikePost.id": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "LikePost.account"`)}
	}
	if _, ok := lpc.mutation.PostID(); !ok {
		return &ValidationError{Name: "Post", err: errors.New(`ent: missing required edge "LikePost.Post"`)}
	}
	return nil
}

func (lpc *LikePostCreate) sqlSave(ctx context.Context) (*LikePost, error) {
	if err := lpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lpc.mutation.id = &_node.ID
	lpc.mutation.done = true
	return _node, nil
}

func (lpc *LikePostCreate) createSpec() (*LikePost, *sqlgraph.CreateSpec) {
	var (
		_node = &LikePost{config: lpc.config}
		_spec = sqlgraph.NewCreateSpec(likepost.Table, sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString))
	)
	_spec.OnConflict = lpc.conflict
	if id, ok := lpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lpc.mutation.CreatedAt(); ok {
		_spec.SetField(likepost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := lpc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.AccountTable,
			Columns: []string{likepost.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.PostTable,
			Columns: []string{likepost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LikePost.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LikePostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lpc *LikePostCreate) OnConflict(opts ...sql.ConflictOption) *LikePostUpsertOne {
	lpc.conflict = opts
	return &LikePostUpsertOne{
		create: lpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LikePost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lpc *LikePostCreate) OnConflictColumns(columns ...string) *LikePostUpsertOne {
	lpc.conflict = append(lpc.conflict, sql.ConflictColumns(columns...))
	return &LikePostUpsertOne{
		create: lpc,
	}
}

type (
	// LikePostUpsertOne is the builder for "upsert"-ing
	//  one LikePost node.
	LikePostUpsertOne struct {
		create *LikePostCreate
	}

	// LikePostUpsert is the "OnConflict" setter.
	LikePostUpsert struct {
		*sql.UpdateSet
	}
)

// SetAccountID sets the "account_id" field.
func (u *LikePostUpsert) SetAccountID(v xid.ID) *LikePostUpsert {
	u.Set(likepost.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *LikePostUpsert) UpdateAccountID() *LikePostUpsert {
	u.SetExcluded(likepost.FieldAccountID)
	return u
}

// SetPostID sets the "post_id" field.
func (u *LikePostUpsert) SetPostID(v xid.ID) *LikePostUpsert {
	u.Set(likepost.FieldPostID, v)
	return u
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *LikePostUpsert) UpdatePostID() *LikePostUpsert {
	u.SetExcluded(likepost.FieldPostID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LikePost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(likepost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LikePostUpsertOne) UpdateNewValues() *LikePostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(likepost.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(likepost.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LikePost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LikePostUpsertOne) Ignore() *LikePostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LikePostUpsertOne) DoNothing() *LikePostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LikePostCreate.OnConflict
// documentation for more info.
func (u *LikePostUpsertOne) Update(set func(*LikePostUpsert)) *LikePostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LikePostUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccountID sets the "account_id" field.
func (u *LikePostUpsertOne) SetAccountID(v xid.ID) *LikePostUpsertOne {
	return u.Update(func(s *LikePostUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *LikePostUpsertOne) UpdateAccountID() *LikePostUpsertOne {
	return u.Update(func(s *LikePostUpsert) {
		s.UpdateAccountID()
	})
}

// SetPostID sets the "post_id" field.
func (u *LikePostUpsertOne) SetPostID(v xid.ID) *LikePostUpsertOne {
	return u.Update(func(s *LikePostUpsert) {
		s.SetPostID(v)
	})
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *LikePostUpsertOne) UpdatePostID() *LikePostUpsertOne {
	return u.Update(func(s *LikePostUpsert) {
		s.UpdatePostID()
	})
}

// Exec executes the query.
func (u *LikePostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LikePostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LikePostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LikePostUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LikePostUpsertOne.ID is not supported by MySQL driver. Use LikePostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LikePostUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LikePostCreateBulk is the builder for creating many LikePost entities in bulk.
type LikePostCreateBulk struct {
	config
	err      error
	builders []*LikePostCreate
	conflict []sql.ConflictOption
}

// Save creates the LikePost entities in the database.
func (lpcb *LikePostCreateBulk) Save(ctx context.Context) ([]*LikePost, error) {
	if lpcb.err != nil {
		return nil, lpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpcb.builders))
	nodes := make([]*LikePost, len(lpcb.builders))
	mutators := make([]Mutator, len(lpcb.builders))
	for i := range lpcb.builders {
		func(i int, root context.Context) {
			builder := lpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LikePostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpcb *LikePostCreateBulk) SaveX(ctx context.Context) []*LikePost {
	v, err := lpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpcb *LikePostCreateBulk) Exec(ctx context.Context) error {
	_, err := lpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpcb *LikePostCreateBulk) ExecX(ctx context.Context) {
	if err := lpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LikePost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LikePostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lpcb *LikePostCreateBulk) OnConflict(opts ...sql.ConflictOption) *LikePostUpsertBulk {
	lpcb.conflict = opts
	return &LikePostUpsertBulk{
		create: lpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LikePost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lpcb *LikePostCreateBulk) OnConflictColumns(columns ...string) *LikePostUpsertBulk {
	lpcb.conflict = append(lpcb.conflict, sql.ConflictColumns(columns...))
	return &LikePostUpsertBulk{
		create: lpcb,
	}
}

// LikePostUpsertBulk is the builder for "upsert"-ing
// a bulk of LikePost nodes.
type LikePostUpsertBulk struct {
	create *LikePostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LikePost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(likepost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LikePostUpsertBulk) UpdateNewValues() *LikePostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(likepost.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(likepost.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LikePost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LikePostUpsertBulk) Ignore() *LikePostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LikePostUpsertBulk) DoNothing() *LikePostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LikePostCreateBulk.OnConflict
// documentation for more info.
func (u *LikePostUpsertBulk) Update(set func(*LikePostUpsert)) *LikePostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LikePostUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccountID sets the "account_id" field.
func (u *LikePostUpsertBulk) SetAccountID(v xid.ID) *LikePostUpsertBulk {
	return u.Update(func(s *LikePostUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *LikePostUpsertBulk) UpdateAccountID() *LikePostUpsertBulk {
	return u.Update(func(s *LikePostUpsert) {
		s.UpdateAccountID()
	})
}

// SetPostID sets the "post_id" field.
func (u *LikePostUpsertBulk) SetPostID(v xid.ID) *LikePostUpsertBulk {
	return u.Update(func(s *LikePostUpsert) {
		s.SetPostID(v)
	})
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *LikePostUpsertBulk) UpdatePostID() *LikePostUpsertBulk {
	return u.Update(func(s *LikePostUpsert) {
		s.UpdatePostID()
	})
}

// Exec executes the query.
func (u *LikePostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LikePostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LikePostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LikePostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
