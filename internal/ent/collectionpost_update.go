// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/collection"
	"github.com/Southclaws/storyden/internal/ent/collectionpost"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// CollectionPostUpdate is the builder for updating CollectionPost entities.
type CollectionPostUpdate struct {
	config
	hooks     []Hook
	mutation  *CollectionPostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CollectionPostUpdate builder.
func (cpu *CollectionPostUpdate) Where(ps ...predicate.CollectionPost) *CollectionPostUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetCollectionID sets the "collection_id" field.
func (cpu *CollectionPostUpdate) SetCollectionID(x xid.ID) *CollectionPostUpdate {
	cpu.mutation.SetCollectionID(x)
	return cpu
}

// SetNillableCollectionID sets the "collection_id" field if the given value is not nil.
func (cpu *CollectionPostUpdate) SetNillableCollectionID(x *xid.ID) *CollectionPostUpdate {
	if x != nil {
		cpu.SetCollectionID(*x)
	}
	return cpu
}

// SetPostID sets the "post_id" field.
func (cpu *CollectionPostUpdate) SetPostID(x xid.ID) *CollectionPostUpdate {
	cpu.mutation.SetPostID(x)
	return cpu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (cpu *CollectionPostUpdate) SetNillablePostID(x *xid.ID) *CollectionPostUpdate {
	if x != nil {
		cpu.SetPostID(*x)
	}
	return cpu
}

// SetMembershipType sets the "membership_type" field.
func (cpu *CollectionPostUpdate) SetMembershipType(s string) *CollectionPostUpdate {
	cpu.mutation.SetMembershipType(s)
	return cpu
}

// SetNillableMembershipType sets the "membership_type" field if the given value is not nil.
func (cpu *CollectionPostUpdate) SetNillableMembershipType(s *string) *CollectionPostUpdate {
	if s != nil {
		cpu.SetMembershipType(*s)
	}
	return cpu
}

// SetCollection sets the "collection" edge to the Collection entity.
func (cpu *CollectionPostUpdate) SetCollection(c *Collection) *CollectionPostUpdate {
	return cpu.SetCollectionID(c.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (cpu *CollectionPostUpdate) SetPost(p *Post) *CollectionPostUpdate {
	return cpu.SetPostID(p.ID)
}

// Mutation returns the CollectionPostMutation object of the builder.
func (cpu *CollectionPostUpdate) Mutation() *CollectionPostMutation {
	return cpu.mutation
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (cpu *CollectionPostUpdate) ClearCollection() *CollectionPostUpdate {
	cpu.mutation.ClearCollection()
	return cpu
}

// ClearPost clears the "post" edge to the Post entity.
func (cpu *CollectionPostUpdate) ClearPost() *CollectionPostUpdate {
	cpu.mutation.ClearPost()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CollectionPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CollectionPostUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CollectionPostUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CollectionPostUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *CollectionPostUpdate) check() error {
	if v, ok := cpu.mutation.CollectionID(); ok {
		if err := collectionpost.CollectionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "collection_id", err: fmt.Errorf(`ent: validator failed for field "CollectionPost.collection_id": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.PostID(); ok {
		if err := collectionpost.PostIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`ent: validator failed for field "CollectionPost.post_id": %w`, err)}
		}
	}
	if _, ok := cpu.mutation.CollectionID(); cpu.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionPost.collection"`)
	}
	if _, ok := cpu.mutation.PostID(); cpu.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionPost.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cpu *CollectionPostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CollectionPostUpdate {
	cpu.modifiers = append(cpu.modifiers, modifiers...)
	return cpu
}

func (cpu *CollectionPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collectionpost.Table, collectionpost.Columns, sqlgraph.NewFieldSpec(collectionpost.FieldCollectionID, field.TypeString), sqlgraph.NewFieldSpec(collectionpost.FieldPostID, field.TypeString))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.MembershipType(); ok {
		_spec.SetField(collectionpost.FieldMembershipType, field.TypeString, value)
	}
	if cpu.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.CollectionTable,
			Columns: []string{collectionpost.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.CollectionTable,
			Columns: []string{collectionpost.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.PostTable,
			Columns: []string{collectionpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.PostTable,
			Columns: []string{collectionpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectionpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// CollectionPostUpdateOne is the builder for updating a single CollectionPost entity.
type CollectionPostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CollectionPostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCollectionID sets the "collection_id" field.
func (cpuo *CollectionPostUpdateOne) SetCollectionID(x xid.ID) *CollectionPostUpdateOne {
	cpuo.mutation.SetCollectionID(x)
	return cpuo
}

// SetNillableCollectionID sets the "collection_id" field if the given value is not nil.
func (cpuo *CollectionPostUpdateOne) SetNillableCollectionID(x *xid.ID) *CollectionPostUpdateOne {
	if x != nil {
		cpuo.SetCollectionID(*x)
	}
	return cpuo
}

// SetPostID sets the "post_id" field.
func (cpuo *CollectionPostUpdateOne) SetPostID(x xid.ID) *CollectionPostUpdateOne {
	cpuo.mutation.SetPostID(x)
	return cpuo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (cpuo *CollectionPostUpdateOne) SetNillablePostID(x *xid.ID) *CollectionPostUpdateOne {
	if x != nil {
		cpuo.SetPostID(*x)
	}
	return cpuo
}

// SetMembershipType sets the "membership_type" field.
func (cpuo *CollectionPostUpdateOne) SetMembershipType(s string) *CollectionPostUpdateOne {
	cpuo.mutation.SetMembershipType(s)
	return cpuo
}

// SetNillableMembershipType sets the "membership_type" field if the given value is not nil.
func (cpuo *CollectionPostUpdateOne) SetNillableMembershipType(s *string) *CollectionPostUpdateOne {
	if s != nil {
		cpuo.SetMembershipType(*s)
	}
	return cpuo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (cpuo *CollectionPostUpdateOne) SetCollection(c *Collection) *CollectionPostUpdateOne {
	return cpuo.SetCollectionID(c.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (cpuo *CollectionPostUpdateOne) SetPost(p *Post) *CollectionPostUpdateOne {
	return cpuo.SetPostID(p.ID)
}

// Mutation returns the CollectionPostMutation object of the builder.
func (cpuo *CollectionPostUpdateOne) Mutation() *CollectionPostMutation {
	return cpuo.mutation
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (cpuo *CollectionPostUpdateOne) ClearCollection() *CollectionPostUpdateOne {
	cpuo.mutation.ClearCollection()
	return cpuo
}

// ClearPost clears the "post" edge to the Post entity.
func (cpuo *CollectionPostUpdateOne) ClearPost() *CollectionPostUpdateOne {
	cpuo.mutation.ClearPost()
	return cpuo
}

// Where appends a list predicates to the CollectionPostUpdate builder.
func (cpuo *CollectionPostUpdateOne) Where(ps ...predicate.CollectionPost) *CollectionPostUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CollectionPostUpdateOne) Select(field string, fields ...string) *CollectionPostUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CollectionPost entity.
func (cpuo *CollectionPostUpdateOne) Save(ctx context.Context) (*CollectionPost, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CollectionPostUpdateOne) SaveX(ctx context.Context) *CollectionPost {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CollectionPostUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CollectionPostUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *CollectionPostUpdateOne) check() error {
	if v, ok := cpuo.mutation.CollectionID(); ok {
		if err := collectionpost.CollectionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "collection_id", err: fmt.Errorf(`ent: validator failed for field "CollectionPost.collection_id": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.PostID(); ok {
		if err := collectionpost.PostIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`ent: validator failed for field "CollectionPost.post_id": %w`, err)}
		}
	}
	if _, ok := cpuo.mutation.CollectionID(); cpuo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionPost.collection"`)
	}
	if _, ok := cpuo.mutation.PostID(); cpuo.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionPost.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cpuo *CollectionPostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CollectionPostUpdateOne {
	cpuo.modifiers = append(cpuo.modifiers, modifiers...)
	return cpuo
}

func (cpuo *CollectionPostUpdateOne) sqlSave(ctx context.Context) (_node *CollectionPost, err error) {
	if err := cpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collectionpost.Table, collectionpost.Columns, sqlgraph.NewFieldSpec(collectionpost.FieldCollectionID, field.TypeString), sqlgraph.NewFieldSpec(collectionpost.FieldPostID, field.TypeString))
	if id, ok := cpuo.mutation.CollectionID(); !ok {
		return nil, &ValidationError{Name: "collection_id", err: errors.New(`ent: missing "CollectionPost.collection_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := cpuo.mutation.PostID(); !ok {
		return nil, &ValidationError{Name: "post_id", err: errors.New(`ent: missing "CollectionPost.post_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !collectionpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.MembershipType(); ok {
		_spec.SetField(collectionpost.FieldMembershipType, field.TypeString, value)
	}
	if cpuo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.CollectionTable,
			Columns: []string{collectionpost.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.CollectionTable,
			Columns: []string{collectionpost.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.PostTable,
			Columns: []string{collectionpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionpost.PostTable,
			Columns: []string{collectionpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cpuo.modifiers...)
	_node = &CollectionPost{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectionpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
