// Code generated by ent, DO NOT EDIT.

package accountfollow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldCreatedAt, v))
}

// FollowerAccountID applies equality check predicate on the "follower_account_id" field. It's identical to FollowerAccountIDEQ.
func FollowerAccountID(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldFollowerAccountID, v))
}

// FollowingAccountID applies equality check predicate on the "following_account_id" field. It's identical to FollowingAccountIDEQ.
func FollowingAccountID(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldFollowingAccountID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLTE(FieldCreatedAt, v))
}

// FollowerAccountIDEQ applies the EQ predicate on the "follower_account_id" field.
func FollowerAccountIDEQ(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldFollowerAccountID, v))
}

// FollowerAccountIDNEQ applies the NEQ predicate on the "follower_account_id" field.
func FollowerAccountIDNEQ(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNEQ(FieldFollowerAccountID, v))
}

// FollowerAccountIDIn applies the In predicate on the "follower_account_id" field.
func FollowerAccountIDIn(vs ...xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldIn(FieldFollowerAccountID, vs...))
}

// FollowerAccountIDNotIn applies the NotIn predicate on the "follower_account_id" field.
func FollowerAccountIDNotIn(vs ...xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNotIn(FieldFollowerAccountID, vs...))
}

// FollowerAccountIDGT applies the GT predicate on the "follower_account_id" field.
func FollowerAccountIDGT(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGT(FieldFollowerAccountID, v))
}

// FollowerAccountIDGTE applies the GTE predicate on the "follower_account_id" field.
func FollowerAccountIDGTE(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGTE(FieldFollowerAccountID, v))
}

// FollowerAccountIDLT applies the LT predicate on the "follower_account_id" field.
func FollowerAccountIDLT(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLT(FieldFollowerAccountID, v))
}

// FollowerAccountIDLTE applies the LTE predicate on the "follower_account_id" field.
func FollowerAccountIDLTE(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLTE(FieldFollowerAccountID, v))
}

// FollowerAccountIDContains applies the Contains predicate on the "follower_account_id" field.
func FollowerAccountIDContains(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldContains(FieldFollowerAccountID, vc))
}

// FollowerAccountIDHasPrefix applies the HasPrefix predicate on the "follower_account_id" field.
func FollowerAccountIDHasPrefix(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldHasPrefix(FieldFollowerAccountID, vc))
}

// FollowerAccountIDHasSuffix applies the HasSuffix predicate on the "follower_account_id" field.
func FollowerAccountIDHasSuffix(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldHasSuffix(FieldFollowerAccountID, vc))
}

// FollowerAccountIDEqualFold applies the EqualFold predicate on the "follower_account_id" field.
func FollowerAccountIDEqualFold(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldEqualFold(FieldFollowerAccountID, vc))
}

// FollowerAccountIDContainsFold applies the ContainsFold predicate on the "follower_account_id" field.
func FollowerAccountIDContainsFold(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldContainsFold(FieldFollowerAccountID, vc))
}

// FollowingAccountIDEQ applies the EQ predicate on the "following_account_id" field.
func FollowingAccountIDEQ(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldEQ(FieldFollowingAccountID, v))
}

// FollowingAccountIDNEQ applies the NEQ predicate on the "following_account_id" field.
func FollowingAccountIDNEQ(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNEQ(FieldFollowingAccountID, v))
}

// FollowingAccountIDIn applies the In predicate on the "following_account_id" field.
func FollowingAccountIDIn(vs ...xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldIn(FieldFollowingAccountID, vs...))
}

// FollowingAccountIDNotIn applies the NotIn predicate on the "following_account_id" field.
func FollowingAccountIDNotIn(vs ...xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldNotIn(FieldFollowingAccountID, vs...))
}

// FollowingAccountIDGT applies the GT predicate on the "following_account_id" field.
func FollowingAccountIDGT(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGT(FieldFollowingAccountID, v))
}

// FollowingAccountIDGTE applies the GTE predicate on the "following_account_id" field.
func FollowingAccountIDGTE(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldGTE(FieldFollowingAccountID, v))
}

// FollowingAccountIDLT applies the LT predicate on the "following_account_id" field.
func FollowingAccountIDLT(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLT(FieldFollowingAccountID, v))
}

// FollowingAccountIDLTE applies the LTE predicate on the "following_account_id" field.
func FollowingAccountIDLTE(v xid.ID) predicate.AccountFollow {
	return predicate.AccountFollow(sql.FieldLTE(FieldFollowingAccountID, v))
}

// FollowingAccountIDContains applies the Contains predicate on the "following_account_id" field.
func FollowingAccountIDContains(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldContains(FieldFollowingAccountID, vc))
}

// FollowingAccountIDHasPrefix applies the HasPrefix predicate on the "following_account_id" field.
func FollowingAccountIDHasPrefix(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldHasPrefix(FieldFollowingAccountID, vc))
}

// FollowingAccountIDHasSuffix applies the HasSuffix predicate on the "following_account_id" field.
func FollowingAccountIDHasSuffix(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldHasSuffix(FieldFollowingAccountID, vc))
}

// FollowingAccountIDEqualFold applies the EqualFold predicate on the "following_account_id" field.
func FollowingAccountIDEqualFold(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldEqualFold(FieldFollowingAccountID, vc))
}

// FollowingAccountIDContainsFold applies the ContainsFold predicate on the "following_account_id" field.
func FollowingAccountIDContainsFold(v xid.ID) predicate.AccountFollow {
	vc := v.String()
	return predicate.AccountFollow(sql.FieldContainsFold(FieldFollowingAccountID, vc))
}

// HasFollower applies the HasEdge predicate on the "follower" edge.
func HasFollower() predicate.AccountFollow {
	return predicate.AccountFollow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FollowerTable, FollowerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowerWith applies the HasEdge predicate on the "follower" edge with a given conditions (other predicates).
func HasFollowerWith(preds ...predicate.Account) predicate.AccountFollow {
	return predicate.AccountFollow(func(s *sql.Selector) {
		step := newFollowerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowing applies the HasEdge predicate on the "following" edge.
func HasFollowing() predicate.AccountFollow {
	return predicate.AccountFollow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FollowingTable, FollowingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowingWith applies the HasEdge predicate on the "following" edge with a given conditions (other predicates).
func HasFollowingWith(preds ...predicate.Account) predicate.AccountFollow {
	return predicate.AccountFollow(func(s *sql.Selector) {
		step := newFollowingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountFollow) predicate.AccountFollow {
	return predicate.AccountFollow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountFollow) predicate.AccountFollow {
	return predicate.AccountFollow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountFollow) predicate.AccountFollow {
	return predicate.AccountFollow(sql.NotPredicates(p))
}
