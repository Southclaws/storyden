// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/propertyschema"
	"github.com/Southclaws/storyden/internal/ent/propertyschemafield"
	"github.com/rs/xid"
)

// PropertySchemaUpdate is the builder for updating PropertySchema entities.
type PropertySchemaUpdate struct {
	config
	hooks     []Hook
	mutation  *PropertySchemaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PropertySchemaUpdate builder.
func (_u *PropertySchemaUpdate) Where(ps ...predicate.PropertySchema) *PropertySchemaUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// AddNodeIDs adds the "node" edge to the Node entity by IDs.
func (_u *PropertySchemaUpdate) AddNodeIDs(ids ...xid.ID) *PropertySchemaUpdate {
	_u.mutation.AddNodeIDs(ids...)
	return _u
}

// AddNode adds the "node" edges to the Node entity.
func (_u *PropertySchemaUpdate) AddNode(v ...*Node) *PropertySchemaUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeIDs(ids...)
}

// AddFieldIDs adds the "fields" edge to the PropertySchemaField entity by IDs.
func (_u *PropertySchemaUpdate) AddFieldIDs(ids ...xid.ID) *PropertySchemaUpdate {
	_u.mutation.AddFieldIDs(ids...)
	return _u
}

// AddFields adds the "fields" edges to the PropertySchemaField entity.
func (_u *PropertySchemaUpdate) AddFields(v ...*PropertySchemaField) *PropertySchemaUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFieldIDs(ids...)
}

// Mutation returns the PropertySchemaMutation object of the builder.
func (_u *PropertySchemaUpdate) Mutation() *PropertySchemaMutation {
	return _u.mutation
}

// ClearNode clears all "node" edges to the Node entity.
func (_u *PropertySchemaUpdate) ClearNode() *PropertySchemaUpdate {
	_u.mutation.ClearNode()
	return _u
}

// RemoveNodeIDs removes the "node" edge to Node entities by IDs.
func (_u *PropertySchemaUpdate) RemoveNodeIDs(ids ...xid.ID) *PropertySchemaUpdate {
	_u.mutation.RemoveNodeIDs(ids...)
	return _u
}

// RemoveNode removes "node" edges to Node entities.
func (_u *PropertySchemaUpdate) RemoveNode(v ...*Node) *PropertySchemaUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeIDs(ids...)
}

// ClearFields clears all "fields" edges to the PropertySchemaField entity.
func (_u *PropertySchemaUpdate) ClearFields() *PropertySchemaUpdate {
	_u.mutation.ClearFields()
	return _u
}

// RemoveFieldIDs removes the "fields" edge to PropertySchemaField entities by IDs.
func (_u *PropertySchemaUpdate) RemoveFieldIDs(ids ...xid.ID) *PropertySchemaUpdate {
	_u.mutation.RemoveFieldIDs(ids...)
	return _u
}

// RemoveFields removes "fields" edges to PropertySchemaField entities.
func (_u *PropertySchemaUpdate) RemoveFields(v ...*PropertySchemaField) *PropertySchemaUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFieldIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PropertySchemaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PropertySchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PropertySchemaUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PropertySchemaUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PropertySchemaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PropertySchemaUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PropertySchemaUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(propertyschema.Table, propertyschema.Columns, sqlgraph.NewFieldSpec(propertyschema.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.NodeTable,
			Columns: []string{propertyschema.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodeIDs(); len(nodes) > 0 && !_u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.NodeTable,
			Columns: []string{propertyschema.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.NodeTable,
			Columns: []string{propertyschema.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.FieldsTable,
			Columns: []string{propertyschema.FieldsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFieldsIDs(); len(nodes) > 0 && !_u.mutation.FieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.FieldsTable,
			Columns: []string{propertyschema.FieldsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FieldsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.FieldsTable,
			Columns: []string{propertyschema.FieldsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{propertyschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PropertySchemaUpdateOne is the builder for updating a single PropertySchema entity.
type PropertySchemaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PropertySchemaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// AddNodeIDs adds the "node" edge to the Node entity by IDs.
func (_u *PropertySchemaUpdateOne) AddNodeIDs(ids ...xid.ID) *PropertySchemaUpdateOne {
	_u.mutation.AddNodeIDs(ids...)
	return _u
}

// AddNode adds the "node" edges to the Node entity.
func (_u *PropertySchemaUpdateOne) AddNode(v ...*Node) *PropertySchemaUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNodeIDs(ids...)
}

// AddFieldIDs adds the "fields" edge to the PropertySchemaField entity by IDs.
func (_u *PropertySchemaUpdateOne) AddFieldIDs(ids ...xid.ID) *PropertySchemaUpdateOne {
	_u.mutation.AddFieldIDs(ids...)
	return _u
}

// AddFields adds the "fields" edges to the PropertySchemaField entity.
func (_u *PropertySchemaUpdateOne) AddFields(v ...*PropertySchemaField) *PropertySchemaUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFieldIDs(ids...)
}

// Mutation returns the PropertySchemaMutation object of the builder.
func (_u *PropertySchemaUpdateOne) Mutation() *PropertySchemaMutation {
	return _u.mutation
}

// ClearNode clears all "node" edges to the Node entity.
func (_u *PropertySchemaUpdateOne) ClearNode() *PropertySchemaUpdateOne {
	_u.mutation.ClearNode()
	return _u
}

// RemoveNodeIDs removes the "node" edge to Node entities by IDs.
func (_u *PropertySchemaUpdateOne) RemoveNodeIDs(ids ...xid.ID) *PropertySchemaUpdateOne {
	_u.mutation.RemoveNodeIDs(ids...)
	return _u
}

// RemoveNode removes "node" edges to Node entities.
func (_u *PropertySchemaUpdateOne) RemoveNode(v ...*Node) *PropertySchemaUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNodeIDs(ids...)
}

// ClearFields clears all "fields" edges to the PropertySchemaField entity.
func (_u *PropertySchemaUpdateOne) ClearFields() *PropertySchemaUpdateOne {
	_u.mutation.ClearFields()
	return _u
}

// RemoveFieldIDs removes the "fields" edge to PropertySchemaField entities by IDs.
func (_u *PropertySchemaUpdateOne) RemoveFieldIDs(ids ...xid.ID) *PropertySchemaUpdateOne {
	_u.mutation.RemoveFieldIDs(ids...)
	return _u
}

// RemoveFields removes "fields" edges to PropertySchemaField entities.
func (_u *PropertySchemaUpdateOne) RemoveFields(v ...*PropertySchemaField) *PropertySchemaUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFieldIDs(ids...)
}

// Where appends a list predicates to the PropertySchemaUpdate builder.
func (_u *PropertySchemaUpdateOne) Where(ps ...predicate.PropertySchema) *PropertySchemaUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PropertySchemaUpdateOne) Select(field string, fields ...string) *PropertySchemaUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PropertySchema entity.
func (_u *PropertySchemaUpdateOne) Save(ctx context.Context) (*PropertySchema, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PropertySchemaUpdateOne) SaveX(ctx context.Context) *PropertySchema {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PropertySchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PropertySchemaUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PropertySchemaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PropertySchemaUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PropertySchemaUpdateOne) sqlSave(ctx context.Context) (_node *PropertySchema, err error) {
	_spec := sqlgraph.NewUpdateSpec(propertyschema.Table, propertyschema.Columns, sqlgraph.NewFieldSpec(propertyschema.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PropertySchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, propertyschema.FieldID)
		for _, f := range fields {
			if !propertyschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != propertyschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.NodeTable,
			Columns: []string{propertyschema.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNodeIDs(); len(nodes) > 0 && !_u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.NodeTable,
			Columns: []string{propertyschema.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.NodeTable,
			Columns: []string{propertyschema.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.FieldsTable,
			Columns: []string{propertyschema.FieldsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFieldsIDs(); len(nodes) > 0 && !_u.mutation.FieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.FieldsTable,
			Columns: []string{propertyschema.FieldsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FieldsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschema.FieldsTable,
			Columns: []string{propertyschema.FieldsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &PropertySchema{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{propertyschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
