// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagnode"
	"github.com/rs/xid"
)

// TagNodeCreate is the builder for creating a TagNode entity.
type TagNodeCreate struct {
	config
	mutation *TagNodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTagID sets the "tag_id" field.
func (tnc *TagNodeCreate) SetTagID(x xid.ID) *TagNodeCreate {
	tnc.mutation.SetTagID(x)
	return tnc
}

// SetNodeID sets the "node_id" field.
func (tnc *TagNodeCreate) SetNodeID(x xid.ID) *TagNodeCreate {
	tnc.mutation.SetNodeID(x)
	return tnc
}

// SetID sets the "id" field.
func (tnc *TagNodeCreate) SetID(x xid.ID) *TagNodeCreate {
	tnc.mutation.SetID(x)
	return tnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tnc *TagNodeCreate) SetNillableID(x *xid.ID) *TagNodeCreate {
	if x != nil {
		tnc.SetID(*x)
	}
	return tnc
}

// SetTag sets the "tag" edge to the Tag entity.
func (tnc *TagNodeCreate) SetTag(t *Tag) *TagNodeCreate {
	return tnc.SetTagID(t.ID)
}

// SetNode sets the "node" edge to the Node entity.
func (tnc *TagNodeCreate) SetNode(n *Node) *TagNodeCreate {
	return tnc.SetNodeID(n.ID)
}

// Mutation returns the TagNodeMutation object of the builder.
func (tnc *TagNodeCreate) Mutation() *TagNodeMutation {
	return tnc.mutation
}

// Save creates the TagNode in the database.
func (tnc *TagNodeCreate) Save(ctx context.Context) (*TagNode, error) {
	tnc.defaults()
	return withHooks(ctx, tnc.sqlSave, tnc.mutation, tnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tnc *TagNodeCreate) SaveX(ctx context.Context) *TagNode {
	v, err := tnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnc *TagNodeCreate) Exec(ctx context.Context) error {
	_, err := tnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnc *TagNodeCreate) ExecX(ctx context.Context) {
	if err := tnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnc *TagNodeCreate) defaults() {
	if _, ok := tnc.mutation.ID(); !ok {
		v := tagnode.DefaultID()
		tnc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tnc *TagNodeCreate) check() error {
	if _, ok := tnc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "TagNode.tag_id"`)}
	}
	if _, ok := tnc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "TagNode.node_id"`)}
	}
	if v, ok := tnc.mutation.ID(); ok {
		if err := tagnode.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TagNode.id": %w`, err)}
		}
	}
	if len(tnc.mutation.TagIDs()) == 0 {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "TagNode.tag"`)}
	}
	if len(tnc.mutation.NodeIDs()) == 0 {
		return &ValidationError{Name: "node", err: errors.New(`ent: missing required edge "TagNode.node"`)}
	}
	return nil
}

func (tnc *TagNodeCreate) sqlSave(ctx context.Context) (*TagNode, error) {
	if err := tnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tnc.mutation.id = &_node.ID
	tnc.mutation.done = true
	return _node, nil
}

func (tnc *TagNodeCreate) createSpec() (*TagNode, *sqlgraph.CreateSpec) {
	var (
		_node = &TagNode{config: tnc.config}
		_spec = sqlgraph.NewCreateSpec(tagnode.Table, sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString))
	)
	_spec.OnConflict = tnc.conflict
	if id, ok := tnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := tnc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.TagTable,
			Columns: []string{tagnode.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tnc.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tagnode.NodeTable,
			Columns: []string{tagnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TagNode.Create().
//		SetTagID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagNodeUpsert) {
//			SetTagID(v+v).
//		}).
//		Exec(ctx)
func (tnc *TagNodeCreate) OnConflict(opts ...sql.ConflictOption) *TagNodeUpsertOne {
	tnc.conflict = opts
	return &TagNodeUpsertOne{
		create: tnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TagNode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tnc *TagNodeCreate) OnConflictColumns(columns ...string) *TagNodeUpsertOne {
	tnc.conflict = append(tnc.conflict, sql.ConflictColumns(columns...))
	return &TagNodeUpsertOne{
		create: tnc,
	}
}

type (
	// TagNodeUpsertOne is the builder for "upsert"-ing
	//  one TagNode node.
	TagNodeUpsertOne struct {
		create *TagNodeCreate
	}

	// TagNodeUpsert is the "OnConflict" setter.
	TagNodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetTagID sets the "tag_id" field.
func (u *TagNodeUpsert) SetTagID(v xid.ID) *TagNodeUpsert {
	u.Set(tagnode.FieldTagID, v)
	return u
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagNodeUpsert) UpdateTagID() *TagNodeUpsert {
	u.SetExcluded(tagnode.FieldTagID)
	return u
}

// SetNodeID sets the "node_id" field.
func (u *TagNodeUpsert) SetNodeID(v xid.ID) *TagNodeUpsert {
	u.Set(tagnode.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *TagNodeUpsert) UpdateNodeID() *TagNodeUpsert {
	u.SetExcluded(tagnode.FieldNodeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TagNode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tagnode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagNodeUpsertOne) UpdateNewValues() *TagNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tagnode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TagNode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TagNodeUpsertOne) Ignore() *TagNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagNodeUpsertOne) DoNothing() *TagNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagNodeCreate.OnConflict
// documentation for more info.
func (u *TagNodeUpsertOne) Update(set func(*TagNodeUpsert)) *TagNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagNodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTagID sets the "tag_id" field.
func (u *TagNodeUpsertOne) SetTagID(v xid.ID) *TagNodeUpsertOne {
	return u.Update(func(s *TagNodeUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagNodeUpsertOne) UpdateTagID() *TagNodeUpsertOne {
	return u.Update(func(s *TagNodeUpsert) {
		s.UpdateTagID()
	})
}

// SetNodeID sets the "node_id" field.
func (u *TagNodeUpsertOne) SetNodeID(v xid.ID) *TagNodeUpsertOne {
	return u.Update(func(s *TagNodeUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *TagNodeUpsertOne) UpdateNodeID() *TagNodeUpsertOne {
	return u.Update(func(s *TagNodeUpsert) {
		s.UpdateNodeID()
	})
}

// Exec executes the query.
func (u *TagNodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagNodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagNodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TagNodeUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TagNodeUpsertOne.ID is not supported by MySQL driver. Use TagNodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TagNodeUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TagNodeCreateBulk is the builder for creating many TagNode entities in bulk.
type TagNodeCreateBulk struct {
	config
	err      error
	builders []*TagNodeCreate
	conflict []sql.ConflictOption
}

// Save creates the TagNode entities in the database.
func (tncb *TagNodeCreateBulk) Save(ctx context.Context) ([]*TagNode, error) {
	if tncb.err != nil {
		return nil, tncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tncb.builders))
	nodes := make([]*TagNode, len(tncb.builders))
	mutators := make([]Mutator, len(tncb.builders))
	for i := range tncb.builders {
		func(i int, root context.Context) {
			builder := tncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tncb *TagNodeCreateBulk) SaveX(ctx context.Context) []*TagNode {
	v, err := tncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tncb *TagNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := tncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tncb *TagNodeCreateBulk) ExecX(ctx context.Context) {
	if err := tncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TagNode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagNodeUpsert) {
//			SetTagID(v+v).
//		}).
//		Exec(ctx)
func (tncb *TagNodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *TagNodeUpsertBulk {
	tncb.conflict = opts
	return &TagNodeUpsertBulk{
		create: tncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TagNode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tncb *TagNodeCreateBulk) OnConflictColumns(columns ...string) *TagNodeUpsertBulk {
	tncb.conflict = append(tncb.conflict, sql.ConflictColumns(columns...))
	return &TagNodeUpsertBulk{
		create: tncb,
	}
}

// TagNodeUpsertBulk is the builder for "upsert"-ing
// a bulk of TagNode nodes.
type TagNodeUpsertBulk struct {
	create *TagNodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TagNode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tagnode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagNodeUpsertBulk) UpdateNewValues() *TagNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tagnode.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TagNode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TagNodeUpsertBulk) Ignore() *TagNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagNodeUpsertBulk) DoNothing() *TagNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagNodeCreateBulk.OnConflict
// documentation for more info.
func (u *TagNodeUpsertBulk) Update(set func(*TagNodeUpsert)) *TagNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagNodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTagID sets the "tag_id" field.
func (u *TagNodeUpsertBulk) SetTagID(v xid.ID) *TagNodeUpsertBulk {
	return u.Update(func(s *TagNodeUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *TagNodeUpsertBulk) UpdateTagID() *TagNodeUpsertBulk {
	return u.Update(func(s *TagNodeUpsert) {
		s.UpdateTagID()
	})
}

// SetNodeID sets the "node_id" field.
func (u *TagNodeUpsertBulk) SetNodeID(v xid.ID) *TagNodeUpsertBulk {
	return u.Update(func(s *TagNodeUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *TagNodeUpsertBulk) UpdateNodeID() *TagNodeUpsertBulk {
	return u.Update(func(s *TagNodeUpsert) {
		s.UpdateNodeID()
	})
}

// Exec executes the query.
func (u *TagNodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TagNodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagNodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagNodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
