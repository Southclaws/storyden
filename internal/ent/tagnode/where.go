// Code generated by ent, DO NOT EDIT.

package tagnode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldLTE(FieldID, id))
}

// TagID applies equality check predicate on the "tag_id" field. It's identical to TagIDEQ.
func TagID(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldEQ(FieldTagID, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldEQ(FieldNodeID, v))
}

// TagIDEQ applies the EQ predicate on the "tag_id" field.
func TagIDEQ(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldEQ(FieldTagID, v))
}

// TagIDNEQ applies the NEQ predicate on the "tag_id" field.
func TagIDNEQ(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldNEQ(FieldTagID, v))
}

// TagIDIn applies the In predicate on the "tag_id" field.
func TagIDIn(vs ...xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldIn(FieldTagID, vs...))
}

// TagIDNotIn applies the NotIn predicate on the "tag_id" field.
func TagIDNotIn(vs ...xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldNotIn(FieldTagID, vs...))
}

// TagIDGT applies the GT predicate on the "tag_id" field.
func TagIDGT(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldGT(FieldTagID, v))
}

// TagIDGTE applies the GTE predicate on the "tag_id" field.
func TagIDGTE(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldGTE(FieldTagID, v))
}

// TagIDLT applies the LT predicate on the "tag_id" field.
func TagIDLT(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldLT(FieldTagID, v))
}

// TagIDLTE applies the LTE predicate on the "tag_id" field.
func TagIDLTE(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldLTE(FieldTagID, v))
}

// TagIDContains applies the Contains predicate on the "tag_id" field.
func TagIDContains(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldContains(FieldTagID, vc))
}

// TagIDHasPrefix applies the HasPrefix predicate on the "tag_id" field.
func TagIDHasPrefix(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldHasPrefix(FieldTagID, vc))
}

// TagIDHasSuffix applies the HasSuffix predicate on the "tag_id" field.
func TagIDHasSuffix(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldHasSuffix(FieldTagID, vc))
}

// TagIDEqualFold applies the EqualFold predicate on the "tag_id" field.
func TagIDEqualFold(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldEqualFold(FieldTagID, vc))
}

// TagIDContainsFold applies the ContainsFold predicate on the "tag_id" field.
func TagIDContainsFold(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldContainsFold(FieldTagID, vc))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v xid.ID) predicate.TagNode {
	return predicate.TagNode(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldContains(FieldNodeID, vc))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldHasPrefix(FieldNodeID, vc))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldHasSuffix(FieldNodeID, vc))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldEqualFold(FieldNodeID, vc))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v xid.ID) predicate.TagNode {
	vc := v.String()
	return predicate.TagNode(sql.FieldContainsFold(FieldNodeID, vc))
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.TagNode {
	return predicate.TagNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tag) predicate.TagNode {
	return predicate.TagNode(func(s *sql.Selector) {
		step := newTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.TagNode {
	return predicate.TagNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.TagNode {
	return predicate.TagNode(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TagNode) predicate.TagNode {
	return predicate.TagNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TagNode) predicate.TagNode {
	return predicate.TagNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TagNode) predicate.TagNode {
	return predicate.TagNode(sql.NotPredicates(p))
}
