// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/property"
	"github.com/Southclaws/storyden/internal/ent/propertyschema"
	"github.com/Southclaws/storyden/internal/ent/propertyschemafield"
	"github.com/rs/xid"
)

// PropertySchemaFieldUpdate is the builder for updating PropertySchemaField entities.
type PropertySchemaFieldUpdate struct {
	config
	hooks     []Hook
	mutation  *PropertySchemaFieldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PropertySchemaFieldUpdate builder.
func (_u *PropertySchemaFieldUpdate) Where(ps ...predicate.PropertySchemaField) *PropertySchemaFieldUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *PropertySchemaFieldUpdate) SetName(v string) *PropertySchemaFieldUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdate) SetNillableName(v *string) *PropertySchemaFieldUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *PropertySchemaFieldUpdate) SetType(v string) *PropertySchemaFieldUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdate) SetNillableType(v *string) *PropertySchemaFieldUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *PropertySchemaFieldUpdate) SetSort(v string) *PropertySchemaFieldUpdate {
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdate) SetNillableSort(v *string) *PropertySchemaFieldUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// SetSchemaID sets the "schema_id" field.
func (_u *PropertySchemaFieldUpdate) SetSchemaID(v xid.ID) *PropertySchemaFieldUpdate {
	_u.mutation.SetSchemaID(v)
	return _u
}

// SetNillableSchemaID sets the "schema_id" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdate) SetNillableSchemaID(v *xid.ID) *PropertySchemaFieldUpdate {
	if v != nil {
		_u.SetSchemaID(*v)
	}
	return _u
}

// SetSchema sets the "schema" edge to the PropertySchema entity.
func (_u *PropertySchemaFieldUpdate) SetSchema(v *PropertySchema) *PropertySchemaFieldUpdate {
	return _u.SetSchemaID(v.ID)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (_u *PropertySchemaFieldUpdate) AddPropertyIDs(ids ...xid.ID) *PropertySchemaFieldUpdate {
	_u.mutation.AddPropertyIDs(ids...)
	return _u
}

// AddProperties adds the "properties" edges to the Property entity.
func (_u *PropertySchemaFieldUpdate) AddProperties(v ...*Property) *PropertySchemaFieldUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPropertyIDs(ids...)
}

// Mutation returns the PropertySchemaFieldMutation object of the builder.
func (_u *PropertySchemaFieldUpdate) Mutation() *PropertySchemaFieldMutation {
	return _u.mutation
}

// ClearSchema clears the "schema" edge to the PropertySchema entity.
func (_u *PropertySchemaFieldUpdate) ClearSchema() *PropertySchemaFieldUpdate {
	_u.mutation.ClearSchema()
	return _u
}

// ClearProperties clears all "properties" edges to the Property entity.
func (_u *PropertySchemaFieldUpdate) ClearProperties() *PropertySchemaFieldUpdate {
	_u.mutation.ClearProperties()
	return _u
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (_u *PropertySchemaFieldUpdate) RemovePropertyIDs(ids ...xid.ID) *PropertySchemaFieldUpdate {
	_u.mutation.RemovePropertyIDs(ids...)
	return _u
}

// RemoveProperties removes "properties" edges to Property entities.
func (_u *PropertySchemaFieldUpdate) RemoveProperties(v ...*Property) *PropertySchemaFieldUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PropertySchemaFieldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PropertySchemaFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PropertySchemaFieldUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PropertySchemaFieldUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PropertySchemaFieldUpdate) check() error {
	if _u.mutation.SchemaCleared() && len(_u.mutation.SchemaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PropertySchemaField.schema"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PropertySchemaFieldUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PropertySchemaFieldUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PropertySchemaFieldUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(propertyschemafield.Table, propertyschemafield.Columns, sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(propertyschemafield.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(propertyschemafield.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(propertyschemafield.FieldSort, field.TypeString, value)
	}
	if _u.mutation.SchemaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyschemafield.SchemaTable,
			Columns: []string{propertyschemafield.SchemaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschema.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SchemaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyschemafield.SchemaTable,
			Columns: []string{propertyschemafield.SchemaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschema.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschemafield.PropertiesTable,
			Columns: []string{propertyschemafield.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !_u.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschemafield.PropertiesTable,
			Columns: []string{propertyschemafield.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschemafield.PropertiesTable,
			Columns: []string{propertyschemafield.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{propertyschemafield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PropertySchemaFieldUpdateOne is the builder for updating a single PropertySchemaField entity.
type PropertySchemaFieldUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PropertySchemaFieldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (_u *PropertySchemaFieldUpdateOne) SetName(v string) *PropertySchemaFieldUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdateOne) SetNillableName(v *string) *PropertySchemaFieldUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *PropertySchemaFieldUpdateOne) SetType(v string) *PropertySchemaFieldUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdateOne) SetNillableType(v *string) *PropertySchemaFieldUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *PropertySchemaFieldUpdateOne) SetSort(v string) *PropertySchemaFieldUpdateOne {
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdateOne) SetNillableSort(v *string) *PropertySchemaFieldUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// SetSchemaID sets the "schema_id" field.
func (_u *PropertySchemaFieldUpdateOne) SetSchemaID(v xid.ID) *PropertySchemaFieldUpdateOne {
	_u.mutation.SetSchemaID(v)
	return _u
}

// SetNillableSchemaID sets the "schema_id" field if the given value is not nil.
func (_u *PropertySchemaFieldUpdateOne) SetNillableSchemaID(v *xid.ID) *PropertySchemaFieldUpdateOne {
	if v != nil {
		_u.SetSchemaID(*v)
	}
	return _u
}

// SetSchema sets the "schema" edge to the PropertySchema entity.
func (_u *PropertySchemaFieldUpdateOne) SetSchema(v *PropertySchema) *PropertySchemaFieldUpdateOne {
	return _u.SetSchemaID(v.ID)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (_u *PropertySchemaFieldUpdateOne) AddPropertyIDs(ids ...xid.ID) *PropertySchemaFieldUpdateOne {
	_u.mutation.AddPropertyIDs(ids...)
	return _u
}

// AddProperties adds the "properties" edges to the Property entity.
func (_u *PropertySchemaFieldUpdateOne) AddProperties(v ...*Property) *PropertySchemaFieldUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPropertyIDs(ids...)
}

// Mutation returns the PropertySchemaFieldMutation object of the builder.
func (_u *PropertySchemaFieldUpdateOne) Mutation() *PropertySchemaFieldMutation {
	return _u.mutation
}

// ClearSchema clears the "schema" edge to the PropertySchema entity.
func (_u *PropertySchemaFieldUpdateOne) ClearSchema() *PropertySchemaFieldUpdateOne {
	_u.mutation.ClearSchema()
	return _u
}

// ClearProperties clears all "properties" edges to the Property entity.
func (_u *PropertySchemaFieldUpdateOne) ClearProperties() *PropertySchemaFieldUpdateOne {
	_u.mutation.ClearProperties()
	return _u
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (_u *PropertySchemaFieldUpdateOne) RemovePropertyIDs(ids ...xid.ID) *PropertySchemaFieldUpdateOne {
	_u.mutation.RemovePropertyIDs(ids...)
	return _u
}

// RemoveProperties removes "properties" edges to Property entities.
func (_u *PropertySchemaFieldUpdateOne) RemoveProperties(v ...*Property) *PropertySchemaFieldUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePropertyIDs(ids...)
}

// Where appends a list predicates to the PropertySchemaFieldUpdate builder.
func (_u *PropertySchemaFieldUpdateOne) Where(ps ...predicate.PropertySchemaField) *PropertySchemaFieldUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PropertySchemaFieldUpdateOne) Select(field string, fields ...string) *PropertySchemaFieldUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PropertySchemaField entity.
func (_u *PropertySchemaFieldUpdateOne) Save(ctx context.Context) (*PropertySchemaField, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PropertySchemaFieldUpdateOne) SaveX(ctx context.Context) *PropertySchemaField {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PropertySchemaFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PropertySchemaFieldUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PropertySchemaFieldUpdateOne) check() error {
	if _u.mutation.SchemaCleared() && len(_u.mutation.SchemaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PropertySchemaField.schema"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PropertySchemaFieldUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PropertySchemaFieldUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PropertySchemaFieldUpdateOne) sqlSave(ctx context.Context) (_node *PropertySchemaField, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(propertyschemafield.Table, propertyschemafield.Columns, sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PropertySchemaField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, propertyschemafield.FieldID)
		for _, f := range fields {
			if !propertyschemafield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != propertyschemafield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(propertyschemafield.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(propertyschemafield.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(propertyschemafield.FieldSort, field.TypeString, value)
	}
	if _u.mutation.SchemaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyschemafield.SchemaTable,
			Columns: []string{propertyschemafield.SchemaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschema.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SchemaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyschemafield.SchemaTable,
			Columns: []string{propertyschemafield.SchemaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschema.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschemafield.PropertiesTable,
			Columns: []string{propertyschemafield.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !_u.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschemafield.PropertiesTable,
			Columns: []string{propertyschemafield.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyschemafield.PropertiesTable,
			Columns: []string{propertyschemafield.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &PropertySchemaField{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{propertyschemafield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
