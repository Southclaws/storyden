// Code generated by ent, DO NOT EDIT.

package property

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldCreatedAt, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldNodeID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldCreatedAt, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...xid.ID) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...xid.ID) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldContains(FieldNodeID, vc))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldHasPrefix(FieldNodeID, vc))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldHasSuffix(FieldNodeID, vc))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldEqualFold(FieldNodeID, vc))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldContainsFold(FieldNodeID, vc))
}

// FieldIDEQ applies the EQ predicate on the "field_id" field.
func FieldIDEQ(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldFieldID, v))
}

// FieldIDNEQ applies the NEQ predicate on the "field_id" field.
func FieldIDNEQ(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldFieldID, v))
}

// FieldIDIn applies the In predicate on the "field_id" field.
func FieldIDIn(vs ...xid.ID) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldFieldID, vs...))
}

// FieldIDNotIn applies the NotIn predicate on the "field_id" field.
func FieldIDNotIn(vs ...xid.ID) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldFieldID, vs...))
}

// FieldIDGT applies the GT predicate on the "field_id" field.
func FieldIDGT(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldFieldID, v))
}

// FieldIDGTE applies the GTE predicate on the "field_id" field.
func FieldIDGTE(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldFieldID, v))
}

// FieldIDLT applies the LT predicate on the "field_id" field.
func FieldIDLT(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldFieldID, v))
}

// FieldIDLTE applies the LTE predicate on the "field_id" field.
func FieldIDLTE(v xid.ID) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldFieldID, v))
}

// FieldIDContains applies the Contains predicate on the "field_id" field.
func FieldIDContains(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldContains(FieldFieldID, vc))
}

// FieldIDHasPrefix applies the HasPrefix predicate on the "field_id" field.
func FieldIDHasPrefix(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldHasPrefix(FieldFieldID, vc))
}

// FieldIDHasSuffix applies the HasSuffix predicate on the "field_id" field.
func FieldIDHasSuffix(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldHasSuffix(FieldFieldID, vc))
}

// FieldIDEqualFold applies the EqualFold predicate on the "field_id" field.
func FieldIDEqualFold(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldEqualFold(FieldFieldID, vc))
}

// FieldIDContainsFold applies the ContainsFold predicate on the "field_id" field.
func FieldIDContainsFold(v xid.ID) predicate.Property {
	vc := v.String()
	return predicate.Property(sql.FieldContainsFold(FieldFieldID, vc))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Property {
	return predicate.Property(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Property {
	return predicate.Property(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Property {
	return predicate.Property(sql.FieldContainsFold(FieldValue, v))
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchema applies the HasEdge predicate on the "schema" edge.
func HasSchema() predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SchemaTable, SchemaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchemaWith applies the HasEdge predicate on the "schema" edge with a given conditions (other predicates).
func HasSchemaWith(preds ...predicate.PropertySchemaField) predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := newSchemaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Property) predicate.Property {
	return predicate.Property(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Property) predicate.Property {
	return predicate.Property(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Property) predicate.Property {
	return predicate.Property(sql.NotPredicates(p))
}
