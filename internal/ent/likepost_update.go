// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/likepost"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// LikePostUpdate is the builder for updating LikePost entities.
type LikePostUpdate struct {
	config
	hooks     []Hook
	mutation  *LikePostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LikePostUpdate builder.
func (lpu *LikePostUpdate) Where(ps ...predicate.LikePost) *LikePostUpdate {
	lpu.mutation.Where(ps...)
	return lpu
}

// SetAccountID sets the "account_id" field.
func (lpu *LikePostUpdate) SetAccountID(x xid.ID) *LikePostUpdate {
	lpu.mutation.SetAccountID(x)
	return lpu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (lpu *LikePostUpdate) SetNillableAccountID(x *xid.ID) *LikePostUpdate {
	if x != nil {
		lpu.SetAccountID(*x)
	}
	return lpu
}

// SetPostID sets the "post_id" field.
func (lpu *LikePostUpdate) SetPostID(x xid.ID) *LikePostUpdate {
	lpu.mutation.SetPostID(x)
	return lpu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (lpu *LikePostUpdate) SetNillablePostID(x *xid.ID) *LikePostUpdate {
	if x != nil {
		lpu.SetPostID(*x)
	}
	return lpu
}

// SetAccount sets the "account" edge to the Account entity.
func (lpu *LikePostUpdate) SetAccount(a *Account) *LikePostUpdate {
	return lpu.SetAccountID(a.ID)
}

// SetPost sets the "Post" edge to the Post entity.
func (lpu *LikePostUpdate) SetPost(p *Post) *LikePostUpdate {
	return lpu.SetPostID(p.ID)
}

// Mutation returns the LikePostMutation object of the builder.
func (lpu *LikePostUpdate) Mutation() *LikePostMutation {
	return lpu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (lpu *LikePostUpdate) ClearAccount() *LikePostUpdate {
	lpu.mutation.ClearAccount()
	return lpu
}

// ClearPost clears the "Post" edge to the Post entity.
func (lpu *LikePostUpdate) ClearPost() *LikePostUpdate {
	lpu.mutation.ClearPost()
	return lpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpu *LikePostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lpu.sqlSave, lpu.mutation, lpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpu *LikePostUpdate) SaveX(ctx context.Context) int {
	affected, err := lpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpu *LikePostUpdate) Exec(ctx context.Context) error {
	_, err := lpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpu *LikePostUpdate) ExecX(ctx context.Context) {
	if err := lpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpu *LikePostUpdate) check() error {
	if lpu.mutation.AccountCleared() && len(lpu.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikePost.account"`)
	}
	if lpu.mutation.PostCleared() && len(lpu.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikePost.Post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lpu *LikePostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LikePostUpdate {
	lpu.modifiers = append(lpu.modifiers, modifiers...)
	return lpu
}

func (lpu *LikePostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(likepost.Table, likepost.Columns, sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString))
	if ps := lpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lpu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.AccountTable,
			Columns: []string{likepost.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.AccountTable,
			Columns: []string{likepost.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.PostTable,
			Columns: []string{likepost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.PostTable,
			Columns: []string{likepost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likepost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpu.mutation.done = true
	return n, nil
}

// LikePostUpdateOne is the builder for updating a single LikePost entity.
type LikePostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LikePostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAccountID sets the "account_id" field.
func (lpuo *LikePostUpdateOne) SetAccountID(x xid.ID) *LikePostUpdateOne {
	lpuo.mutation.SetAccountID(x)
	return lpuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (lpuo *LikePostUpdateOne) SetNillableAccountID(x *xid.ID) *LikePostUpdateOne {
	if x != nil {
		lpuo.SetAccountID(*x)
	}
	return lpuo
}

// SetPostID sets the "post_id" field.
func (lpuo *LikePostUpdateOne) SetPostID(x xid.ID) *LikePostUpdateOne {
	lpuo.mutation.SetPostID(x)
	return lpuo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (lpuo *LikePostUpdateOne) SetNillablePostID(x *xid.ID) *LikePostUpdateOne {
	if x != nil {
		lpuo.SetPostID(*x)
	}
	return lpuo
}

// SetAccount sets the "account" edge to the Account entity.
func (lpuo *LikePostUpdateOne) SetAccount(a *Account) *LikePostUpdateOne {
	return lpuo.SetAccountID(a.ID)
}

// SetPost sets the "Post" edge to the Post entity.
func (lpuo *LikePostUpdateOne) SetPost(p *Post) *LikePostUpdateOne {
	return lpuo.SetPostID(p.ID)
}

// Mutation returns the LikePostMutation object of the builder.
func (lpuo *LikePostUpdateOne) Mutation() *LikePostMutation {
	return lpuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (lpuo *LikePostUpdateOne) ClearAccount() *LikePostUpdateOne {
	lpuo.mutation.ClearAccount()
	return lpuo
}

// ClearPost clears the "Post" edge to the Post entity.
func (lpuo *LikePostUpdateOne) ClearPost() *LikePostUpdateOne {
	lpuo.mutation.ClearPost()
	return lpuo
}

// Where appends a list predicates to the LikePostUpdate builder.
func (lpuo *LikePostUpdateOne) Where(ps ...predicate.LikePost) *LikePostUpdateOne {
	lpuo.mutation.Where(ps...)
	return lpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpuo *LikePostUpdateOne) Select(field string, fields ...string) *LikePostUpdateOne {
	lpuo.fields = append([]string{field}, fields...)
	return lpuo
}

// Save executes the query and returns the updated LikePost entity.
func (lpuo *LikePostUpdateOne) Save(ctx context.Context) (*LikePost, error) {
	return withHooks(ctx, lpuo.sqlSave, lpuo.mutation, lpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpuo *LikePostUpdateOne) SaveX(ctx context.Context) *LikePost {
	node, err := lpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpuo *LikePostUpdateOne) Exec(ctx context.Context) error {
	_, err := lpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpuo *LikePostUpdateOne) ExecX(ctx context.Context) {
	if err := lpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpuo *LikePostUpdateOne) check() error {
	if lpuo.mutation.AccountCleared() && len(lpuo.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikePost.account"`)
	}
	if lpuo.mutation.PostCleared() && len(lpuo.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LikePost.Post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lpuo *LikePostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LikePostUpdateOne {
	lpuo.modifiers = append(lpuo.modifiers, modifiers...)
	return lpuo
}

func (lpuo *LikePostUpdateOne) sqlSave(ctx context.Context) (_node *LikePost, err error) {
	if err := lpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(likepost.Table, likepost.Columns, sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString))
	id, ok := lpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LikePost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likepost.FieldID)
		for _, f := range fields {
			if !likepost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != likepost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lpuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.AccountTable,
			Columns: []string{likepost.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.AccountTable,
			Columns: []string{likepost.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.PostTable,
			Columns: []string{likepost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likepost.PostTable,
			Columns: []string{likepost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lpuo.modifiers...)
	_node = &LikePost{config: lpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likepost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpuo.mutation.done = true
	return _node, nil
}
