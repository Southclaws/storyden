// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/postnode"
	"github.com/rs/xid"
)

// PostNode is the model entity for the PostNode schema.
type PostNode struct {
	config `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID xid.ID `json:"node_id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID xid.ID `json:"post_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostNodeQuery when eager-loading is set.
	Edges        PostNodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostNodeEdges holds the relations/edges for other nodes in the graph.
type PostNodeEdges struct {
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostNodeEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostNodeEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case postnode.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case postnode.FieldNodeID, postnode.FieldPostID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostNode fields.
func (_m *PostNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postnode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case postnode.FieldNodeID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value != nil {
				_m.NodeID = *value
			}
		case postnode.FieldPostID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value != nil {
				_m.PostID = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostNode.
// This includes values selected through modifiers, order, etc.
func (_m *PostNode) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryNode queries the "node" edge of the PostNode entity.
func (_m *PostNode) QueryNode() *NodeQuery {
	return NewPostNodeClient(_m.config).QueryNode(_m)
}

// QueryPost queries the "post" edge of the PostNode entity.
func (_m *PostNode) QueryPost() *PostQuery {
	return NewPostNodeClient(_m.config).QueryPost(_m)
}

// Update returns a builder for updating this PostNode.
// Note that you need to call PostNode.Unwrap() before calling this method if this PostNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PostNode) Update() *PostNodeUpdateOne {
	return NewPostNodeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PostNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PostNode) Unwrap() *PostNode {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostNode is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PostNode) String() string {
	var builder strings.Builder
	builder.WriteString("PostNode(")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("node_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NodeID))
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.PostID))
	builder.WriteByte(')')
	return builder.String()
}

// PostNodes is a parsable slice of PostNode.
type PostNodes []*PostNode
