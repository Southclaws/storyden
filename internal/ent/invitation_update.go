// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/invitation"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// InvitationUpdate is the builder for updating Invitation entities.
type InvitationUpdate struct {
	config
	hooks     []Hook
	mutation  *InvitationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InvitationUpdate builder.
func (_u *InvitationUpdate) Where(ps ...predicate.Invitation) *InvitationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InvitationUpdate) SetUpdatedAt(v time.Time) *InvitationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *InvitationUpdate) SetDeletedAt(v time.Time) *InvitationUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *InvitationUpdate) SetNillableDeletedAt(v *time.Time) *InvitationUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *InvitationUpdate) ClearDeletedAt() *InvitationUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMessage sets the "message" field.
func (_u *InvitationUpdate) SetMessage(v string) *InvitationUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *InvitationUpdate) SetNillableMessage(v *string) *InvitationUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// ClearMessage clears the value of the "message" field.
func (_u *InvitationUpdate) ClearMessage() *InvitationUpdate {
	_u.mutation.ClearMessage()
	return _u
}

// SetCreatorAccountID sets the "creator_account_id" field.
func (_u *InvitationUpdate) SetCreatorAccountID(v xid.ID) *InvitationUpdate {
	_u.mutation.SetCreatorAccountID(v)
	return _u
}

// SetNillableCreatorAccountID sets the "creator_account_id" field if the given value is not nil.
func (_u *InvitationUpdate) SetNillableCreatorAccountID(v *xid.ID) *InvitationUpdate {
	if v != nil {
		_u.SetCreatorAccountID(*v)
	}
	return _u
}

// SetCreatorID sets the "creator" edge to the Account entity by ID.
func (_u *InvitationUpdate) SetCreatorID(id xid.ID) *InvitationUpdate {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the Account entity.
func (_u *InvitationUpdate) SetCreator(v *Account) *InvitationUpdate {
	return _u.SetCreatorID(v.ID)
}

// AddInvitedIDs adds the "invited" edge to the Account entity by IDs.
func (_u *InvitationUpdate) AddInvitedIDs(ids ...xid.ID) *InvitationUpdate {
	_u.mutation.AddInvitedIDs(ids...)
	return _u
}

// AddInvited adds the "invited" edges to the Account entity.
func (_u *InvitationUpdate) AddInvited(v ...*Account) *InvitationUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInvitedIDs(ids...)
}

// Mutation returns the InvitationMutation object of the builder.
func (_u *InvitationUpdate) Mutation() *InvitationMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the Account entity.
func (_u *InvitationUpdate) ClearCreator() *InvitationUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// ClearInvited clears all "invited" edges to the Account entity.
func (_u *InvitationUpdate) ClearInvited() *InvitationUpdate {
	_u.mutation.ClearInvited()
	return _u
}

// RemoveInvitedIDs removes the "invited" edge to Account entities by IDs.
func (_u *InvitationUpdate) RemoveInvitedIDs(ids ...xid.ID) *InvitationUpdate {
	_u.mutation.RemoveInvitedIDs(ids...)
	return _u
}

// RemoveInvited removes "invited" edges to Account entities.
func (_u *InvitationUpdate) RemoveInvited(v ...*Account) *InvitationUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInvitedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InvitationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvitationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InvitationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvitationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InvitationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := invitation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvitationUpdate) check() error {
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invitation.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *InvitationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvitationUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *InvitationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invitation.Table, invitation.Columns, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(invitation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(invitation.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(invitation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(invitation.FieldMessage, field.TypeString, value)
	}
	if _u.mutation.MessageCleared() {
		_spec.ClearField(invitation.FieldMessage, field.TypeString)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitation.CreatorTable,
			Columns: []string{invitation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitation.CreatorTable,
			Columns: []string{invitation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invitation.InvitedTable,
			Columns: []string{invitation.InvitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitedIDs(); len(nodes) > 0 && !_u.mutation.InvitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invitation.InvitedTable,
			Columns: []string{invitation.InvitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invitation.InvitedTable,
			Columns: []string{invitation.InvitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InvitationUpdateOne is the builder for updating a single Invitation entity.
type InvitationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InvitationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InvitationUpdateOne) SetUpdatedAt(v time.Time) *InvitationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *InvitationUpdateOne) SetDeletedAt(v time.Time) *InvitationUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *InvitationUpdateOne) SetNillableDeletedAt(v *time.Time) *InvitationUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *InvitationUpdateOne) ClearDeletedAt() *InvitationUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMessage sets the "message" field.
func (_u *InvitationUpdateOne) SetMessage(v string) *InvitationUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *InvitationUpdateOne) SetNillableMessage(v *string) *InvitationUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// ClearMessage clears the value of the "message" field.
func (_u *InvitationUpdateOne) ClearMessage() *InvitationUpdateOne {
	_u.mutation.ClearMessage()
	return _u
}

// SetCreatorAccountID sets the "creator_account_id" field.
func (_u *InvitationUpdateOne) SetCreatorAccountID(v xid.ID) *InvitationUpdateOne {
	_u.mutation.SetCreatorAccountID(v)
	return _u
}

// SetNillableCreatorAccountID sets the "creator_account_id" field if the given value is not nil.
func (_u *InvitationUpdateOne) SetNillableCreatorAccountID(v *xid.ID) *InvitationUpdateOne {
	if v != nil {
		_u.SetCreatorAccountID(*v)
	}
	return _u
}

// SetCreatorID sets the "creator" edge to the Account entity by ID.
func (_u *InvitationUpdateOne) SetCreatorID(id xid.ID) *InvitationUpdateOne {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the Account entity.
func (_u *InvitationUpdateOne) SetCreator(v *Account) *InvitationUpdateOne {
	return _u.SetCreatorID(v.ID)
}

// AddInvitedIDs adds the "invited" edge to the Account entity by IDs.
func (_u *InvitationUpdateOne) AddInvitedIDs(ids ...xid.ID) *InvitationUpdateOne {
	_u.mutation.AddInvitedIDs(ids...)
	return _u
}

// AddInvited adds the "invited" edges to the Account entity.
func (_u *InvitationUpdateOne) AddInvited(v ...*Account) *InvitationUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInvitedIDs(ids...)
}

// Mutation returns the InvitationMutation object of the builder.
func (_u *InvitationUpdateOne) Mutation() *InvitationMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the Account entity.
func (_u *InvitationUpdateOne) ClearCreator() *InvitationUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// ClearInvited clears all "invited" edges to the Account entity.
func (_u *InvitationUpdateOne) ClearInvited() *InvitationUpdateOne {
	_u.mutation.ClearInvited()
	return _u
}

// RemoveInvitedIDs removes the "invited" edge to Account entities by IDs.
func (_u *InvitationUpdateOne) RemoveInvitedIDs(ids ...xid.ID) *InvitationUpdateOne {
	_u.mutation.RemoveInvitedIDs(ids...)
	return _u
}

// RemoveInvited removes "invited" edges to Account entities.
func (_u *InvitationUpdateOne) RemoveInvited(v ...*Account) *InvitationUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInvitedIDs(ids...)
}

// Where appends a list predicates to the InvitationUpdate builder.
func (_u *InvitationUpdateOne) Where(ps ...predicate.Invitation) *InvitationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InvitationUpdateOne) Select(field string, fields ...string) *InvitationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Invitation entity.
func (_u *InvitationUpdateOne) Save(ctx context.Context) (*Invitation, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvitationUpdateOne) SaveX(ctx context.Context) *Invitation {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InvitationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvitationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InvitationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := invitation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvitationUpdateOne) check() error {
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invitation.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *InvitationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvitationUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *InvitationUpdateOne) sqlSave(ctx context.Context) (_node *Invitation, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invitation.Table, invitation.Columns, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invitation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitation.FieldID)
		for _, f := range fields {
			if !invitation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invitation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(invitation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(invitation.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(invitation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(invitation.FieldMessage, field.TypeString, value)
	}
	if _u.mutation.MessageCleared() {
		_spec.ClearField(invitation.FieldMessage, field.TypeString)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitation.CreatorTable,
			Columns: []string{invitation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitation.CreatorTable,
			Columns: []string{invitation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invitation.InvitedTable,
			Columns: []string{invitation.InvitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitedIDs(); len(nodes) > 0 && !_u.mutation.InvitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invitation.InvitedTable,
			Columns: []string{invitation.InvitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invitation.InvitedTable,
			Columns: []string{invitation.InvitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Invitation{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
