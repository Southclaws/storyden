// Code generated by ent, DO NOT EDIT.

package entplugin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldUpdatedAt, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldPath, v))
}

// ActiveState applies equality check predicate on the "active_state" field. It's identical to ActiveStateEQ.
func ActiveState(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldActiveState, v))
}

// ActiveStateChangedAt applies equality check predicate on the "active_state_changed_at" field. It's identical to ActiveStateChangedAtEQ.
func ActiveStateChangedAt(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldActiveStateChangedAt, v))
}

// StatusMessage applies equality check predicate on the "status_message" field. It's identical to StatusMessageEQ.
func StatusMessage(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldStatusMessage, v))
}

// AddedBy applies equality check predicate on the "added_by" field. It's identical to AddedByEQ.
func AddedBy(v xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldAddedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldUpdatedAt, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldContainsFold(FieldPath, v))
}

// ActiveStateEQ applies the EQ predicate on the "active_state" field.
func ActiveStateEQ(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldActiveState, v))
}

// ActiveStateNEQ applies the NEQ predicate on the "active_state" field.
func ActiveStateNEQ(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldActiveState, v))
}

// ActiveStateIn applies the In predicate on the "active_state" field.
func ActiveStateIn(vs ...string) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldActiveState, vs...))
}

// ActiveStateNotIn applies the NotIn predicate on the "active_state" field.
func ActiveStateNotIn(vs ...string) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldActiveState, vs...))
}

// ActiveStateGT applies the GT predicate on the "active_state" field.
func ActiveStateGT(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldActiveState, v))
}

// ActiveStateGTE applies the GTE predicate on the "active_state" field.
func ActiveStateGTE(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldActiveState, v))
}

// ActiveStateLT applies the LT predicate on the "active_state" field.
func ActiveStateLT(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldActiveState, v))
}

// ActiveStateLTE applies the LTE predicate on the "active_state" field.
func ActiveStateLTE(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldActiveState, v))
}

// ActiveStateContains applies the Contains predicate on the "active_state" field.
func ActiveStateContains(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldContains(FieldActiveState, v))
}

// ActiveStateHasPrefix applies the HasPrefix predicate on the "active_state" field.
func ActiveStateHasPrefix(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldHasPrefix(FieldActiveState, v))
}

// ActiveStateHasSuffix applies the HasSuffix predicate on the "active_state" field.
func ActiveStateHasSuffix(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldHasSuffix(FieldActiveState, v))
}

// ActiveStateEqualFold applies the EqualFold predicate on the "active_state" field.
func ActiveStateEqualFold(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEqualFold(FieldActiveState, v))
}

// ActiveStateContainsFold applies the ContainsFold predicate on the "active_state" field.
func ActiveStateContainsFold(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldContainsFold(FieldActiveState, v))
}

// ActiveStateChangedAtEQ applies the EQ predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtEQ(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldActiveStateChangedAt, v))
}

// ActiveStateChangedAtNEQ applies the NEQ predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtNEQ(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldActiveStateChangedAt, v))
}

// ActiveStateChangedAtIn applies the In predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtIn(vs ...time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldActiveStateChangedAt, vs...))
}

// ActiveStateChangedAtNotIn applies the NotIn predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtNotIn(vs ...time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldActiveStateChangedAt, vs...))
}

// ActiveStateChangedAtGT applies the GT predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtGT(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldActiveStateChangedAt, v))
}

// ActiveStateChangedAtGTE applies the GTE predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtGTE(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldActiveStateChangedAt, v))
}

// ActiveStateChangedAtLT applies the LT predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtLT(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldActiveStateChangedAt, v))
}

// ActiveStateChangedAtLTE applies the LTE predicate on the "active_state_changed_at" field.
func ActiveStateChangedAtLTE(v time.Time) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldActiveStateChangedAt, v))
}

// StatusMessageEQ applies the EQ predicate on the "status_message" field.
func StatusMessageEQ(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldStatusMessage, v))
}

// StatusMessageNEQ applies the NEQ predicate on the "status_message" field.
func StatusMessageNEQ(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldStatusMessage, v))
}

// StatusMessageIn applies the In predicate on the "status_message" field.
func StatusMessageIn(vs ...string) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldStatusMessage, vs...))
}

// StatusMessageNotIn applies the NotIn predicate on the "status_message" field.
func StatusMessageNotIn(vs ...string) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldStatusMessage, vs...))
}

// StatusMessageGT applies the GT predicate on the "status_message" field.
func StatusMessageGT(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldStatusMessage, v))
}

// StatusMessageGTE applies the GTE predicate on the "status_message" field.
func StatusMessageGTE(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldStatusMessage, v))
}

// StatusMessageLT applies the LT predicate on the "status_message" field.
func StatusMessageLT(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldStatusMessage, v))
}

// StatusMessageLTE applies the LTE predicate on the "status_message" field.
func StatusMessageLTE(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldStatusMessage, v))
}

// StatusMessageContains applies the Contains predicate on the "status_message" field.
func StatusMessageContains(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldContains(FieldStatusMessage, v))
}

// StatusMessageHasPrefix applies the HasPrefix predicate on the "status_message" field.
func StatusMessageHasPrefix(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldHasPrefix(FieldStatusMessage, v))
}

// StatusMessageHasSuffix applies the HasSuffix predicate on the "status_message" field.
func StatusMessageHasSuffix(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldHasSuffix(FieldStatusMessage, v))
}

// StatusMessageIsNil applies the IsNil predicate on the "status_message" field.
func StatusMessageIsNil() predicate.Plugin {
	return predicate.Plugin(sql.FieldIsNull(FieldStatusMessage))
}

// StatusMessageNotNil applies the NotNil predicate on the "status_message" field.
func StatusMessageNotNil() predicate.Plugin {
	return predicate.Plugin(sql.FieldNotNull(FieldStatusMessage))
}

// StatusMessageEqualFold applies the EqualFold predicate on the "status_message" field.
func StatusMessageEqualFold(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldEqualFold(FieldStatusMessage, v))
}

// StatusMessageContainsFold applies the ContainsFold predicate on the "status_message" field.
func StatusMessageContainsFold(v string) predicate.Plugin {
	return predicate.Plugin(sql.FieldContainsFold(FieldStatusMessage, v))
}

// StatusDetailsIsNil applies the IsNil predicate on the "status_details" field.
func StatusDetailsIsNil() predicate.Plugin {
	return predicate.Plugin(sql.FieldIsNull(FieldStatusDetails))
}

// StatusDetailsNotNil applies the NotNil predicate on the "status_details" field.
func StatusDetailsNotNil() predicate.Plugin {
	return predicate.Plugin(sql.FieldNotNull(FieldStatusDetails))
}

// AddedByEQ applies the EQ predicate on the "added_by" field.
func AddedByEQ(v xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldEQ(FieldAddedBy, v))
}

// AddedByNEQ applies the NEQ predicate on the "added_by" field.
func AddedByNEQ(v xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldNEQ(FieldAddedBy, v))
}

// AddedByIn applies the In predicate on the "added_by" field.
func AddedByIn(vs ...xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldIn(FieldAddedBy, vs...))
}

// AddedByNotIn applies the NotIn predicate on the "added_by" field.
func AddedByNotIn(vs ...xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldNotIn(FieldAddedBy, vs...))
}

// AddedByGT applies the GT predicate on the "added_by" field.
func AddedByGT(v xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldGT(FieldAddedBy, v))
}

// AddedByGTE applies the GTE predicate on the "added_by" field.
func AddedByGTE(v xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldGTE(FieldAddedBy, v))
}

// AddedByLT applies the LT predicate on the "added_by" field.
func AddedByLT(v xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldLT(FieldAddedBy, v))
}

// AddedByLTE applies the LTE predicate on the "added_by" field.
func AddedByLTE(v xid.ID) predicate.Plugin {
	return predicate.Plugin(sql.FieldLTE(FieldAddedBy, v))
}

// AddedByContains applies the Contains predicate on the "added_by" field.
func AddedByContains(v xid.ID) predicate.Plugin {
	vc := v.String()
	return predicate.Plugin(sql.FieldContains(FieldAddedBy, vc))
}

// AddedByHasPrefix applies the HasPrefix predicate on the "added_by" field.
func AddedByHasPrefix(v xid.ID) predicate.Plugin {
	vc := v.String()
	return predicate.Plugin(sql.FieldHasPrefix(FieldAddedBy, vc))
}

// AddedByHasSuffix applies the HasSuffix predicate on the "added_by" field.
func AddedByHasSuffix(v xid.ID) predicate.Plugin {
	vc := v.String()
	return predicate.Plugin(sql.FieldHasSuffix(FieldAddedBy, vc))
}

// AddedByEqualFold applies the EqualFold predicate on the "added_by" field.
func AddedByEqualFold(v xid.ID) predicate.Plugin {
	vc := v.String()
	return predicate.Plugin(sql.FieldEqualFold(FieldAddedBy, vc))
}

// AddedByContainsFold applies the ContainsFold predicate on the "added_by" field.
func AddedByContainsFold(v xid.ID) predicate.Plugin {
	vc := v.String()
	return predicate.Plugin(sql.FieldContainsFold(FieldAddedBy, vc))
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.Plugin {
	return predicate.Plugin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.Account) predicate.Plugin {
	return predicate.Plugin(func(s *sql.Selector) {
		step := newAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Plugin) predicate.Plugin {
	return predicate.Plugin(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Plugin) predicate.Plugin {
	return predicate.Plugin(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Plugin) predicate.Plugin {
	return predicate.Plugin(sql.NotPredicates(p))
}
