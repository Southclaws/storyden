// Code generated by ent, DO NOT EDIT.

package entplugin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the plugin type in the database.
	Label = "plugin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldManifest holds the string denoting the manifest field in the database.
	FieldManifest = "manifest"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldActiveState holds the string denoting the active_state field in the database.
	FieldActiveState = "active_state"
	// FieldActiveStateChangedAt holds the string denoting the active_state_changed_at field in the database.
	FieldActiveStateChangedAt = "active_state_changed_at"
	// FieldStatusMessage holds the string denoting the status_message field in the database.
	FieldStatusMessage = "status_message"
	// FieldStatusDetails holds the string denoting the status_details field in the database.
	FieldStatusDetails = "status_details"
	// FieldAddedBy holds the string denoting the added_by field in the database.
	FieldAddedBy = "added_by"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// Table holds the table name of the plugin in the database.
	Table = "plugins"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "plugins"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "added_by"
)

// Columns holds all SQL columns for plugin fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPath,
	FieldManifest,
	FieldConfig,
	FieldActiveState,
	FieldActiveStateChangedAt,
	FieldStatusMessage,
	FieldStatusDetails,
	FieldAddedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Plugin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByActiveState orders the results by the active_state field.
func ByActiveState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveState, opts...).ToFunc()
}

// ByActiveStateChangedAt orders the results by the active_state_changed_at field.
func ByActiveStateChangedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveStateChangedAt, opts...).ToFunc()
}

// ByStatusMessage orders the results by the status_message field.
func ByStatusMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusMessage, opts...).ToFunc()
}

// ByAddedBy orders the results by the added_by field.
func ByAddedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddedBy, opts...).ToFunc()
}

// ByAccountField orders the results by account field.
func ByAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountStep(), sql.OrderByField(field, opts...))
	}
}
func newAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
	)
}
