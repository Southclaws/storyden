// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/event"
	"github.com/Southclaws/storyden/internal/ent/eventparticipant"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/rs/xid"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventCreate) SetCreatedAt(t time.Time) *EventCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EventCreate) SetUpdatedAt(t time.Time) *EventCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EventCreate) SetDeletedAt(t time.Time) *EventCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableDeletedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetName sets the "name" field.
func (ec *EventCreate) SetName(s string) *EventCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetSlug sets the "slug" field.
func (ec *EventCreate) SetSlug(s string) *EventCreate {
	ec.mutation.SetSlug(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EventCreate) SetNillableDescription(s *string) *EventCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetStartTime sets the "start_time" field.
func (ec *EventCreate) SetStartTime(t time.Time) *EventCreate {
	ec.mutation.SetStartTime(t)
	return ec
}

// SetEndTime sets the "end_time" field.
func (ec *EventCreate) SetEndTime(t time.Time) *EventCreate {
	ec.mutation.SetEndTime(t)
	return ec
}

// SetParticipationPolicy sets the "participation_policy" field.
func (ec *EventCreate) SetParticipationPolicy(s string) *EventCreate {
	ec.mutation.SetParticipationPolicy(s)
	return ec
}

// SetVisibility sets the "visibility" field.
func (ec *EventCreate) SetVisibility(e event.Visibility) *EventCreate {
	ec.mutation.SetVisibility(e)
	return ec
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (ec *EventCreate) SetNillableVisibility(e *event.Visibility) *EventCreate {
	if e != nil {
		ec.SetVisibility(*e)
	}
	return ec
}

// SetLocationType sets the "location_type" field.
func (ec *EventCreate) SetLocationType(s string) *EventCreate {
	ec.mutation.SetLocationType(s)
	return ec
}

// SetNillableLocationType sets the "location_type" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocationType(s *string) *EventCreate {
	if s != nil {
		ec.SetLocationType(*s)
	}
	return ec
}

// SetLocationName sets the "location_name" field.
func (ec *EventCreate) SetLocationName(s string) *EventCreate {
	ec.mutation.SetLocationName(s)
	return ec
}

// SetNillableLocationName sets the "location_name" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocationName(s *string) *EventCreate {
	if s != nil {
		ec.SetLocationName(*s)
	}
	return ec
}

// SetLocationAddress sets the "location_address" field.
func (ec *EventCreate) SetLocationAddress(s string) *EventCreate {
	ec.mutation.SetLocationAddress(s)
	return ec
}

// SetNillableLocationAddress sets the "location_address" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocationAddress(s *string) *EventCreate {
	if s != nil {
		ec.SetLocationAddress(*s)
	}
	return ec
}

// SetLocationLatitude sets the "location_latitude" field.
func (ec *EventCreate) SetLocationLatitude(f float64) *EventCreate {
	ec.mutation.SetLocationLatitude(f)
	return ec
}

// SetNillableLocationLatitude sets the "location_latitude" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocationLatitude(f *float64) *EventCreate {
	if f != nil {
		ec.SetLocationLatitude(*f)
	}
	return ec
}

// SetLocationLongitude sets the "location_longitude" field.
func (ec *EventCreate) SetLocationLongitude(f float64) *EventCreate {
	ec.mutation.SetLocationLongitude(f)
	return ec
}

// SetNillableLocationLongitude sets the "location_longitude" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocationLongitude(f *float64) *EventCreate {
	if f != nil {
		ec.SetLocationLongitude(*f)
	}
	return ec
}

// SetLocationURL sets the "location_url" field.
func (ec *EventCreate) SetLocationURL(s string) *EventCreate {
	ec.mutation.SetLocationURL(s)
	return ec
}

// SetNillableLocationURL sets the "location_url" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocationURL(s *string) *EventCreate {
	if s != nil {
		ec.SetLocationURL(*s)
	}
	return ec
}

// SetCapacity sets the "capacity" field.
func (ec *EventCreate) SetCapacity(i int) *EventCreate {
	ec.mutation.SetCapacity(i)
	return ec
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (ec *EventCreate) SetNillableCapacity(i *int) *EventCreate {
	if i != nil {
		ec.SetCapacity(*i)
	}
	return ec
}

// SetMetadata sets the "metadata" field.
func (ec *EventCreate) SetMetadata(m map[string]interface{}) *EventCreate {
	ec.mutation.SetMetadata(m)
	return ec
}

// SetID sets the "id" field.
func (ec *EventCreate) SetID(x xid.ID) *EventCreate {
	ec.mutation.SetID(x)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EventCreate) SetNillableID(x *xid.ID) *EventCreate {
	if x != nil {
		ec.SetID(*x)
	}
	return ec
}

// AddParticipantIDs adds the "participants" edge to the EventParticipant entity by IDs.
func (ec *EventCreate) AddParticipantIDs(ids ...xid.ID) *EventCreate {
	ec.mutation.AddParticipantIDs(ids...)
	return ec
}

// AddParticipants adds the "participants" edges to the EventParticipant entity.
func (ec *EventCreate) AddParticipants(e ...*EventParticipant) *EventCreate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddParticipantIDs(ids...)
}

// SetThreadID sets the "thread" edge to the Post entity by ID.
func (ec *EventCreate) SetThreadID(id xid.ID) *EventCreate {
	ec.mutation.SetThreadID(id)
	return ec
}

// SetThread sets the "thread" edge to the Post entity.
func (ec *EventCreate) SetThread(p *Post) *EventCreate {
	return ec.SetThreadID(p.ID)
}

// SetPrimaryImageID sets the "primary_image" edge to the Asset entity by ID.
func (ec *EventCreate) SetPrimaryImageID(id xid.ID) *EventCreate {
	ec.mutation.SetPrimaryImageID(id)
	return ec
}

// SetNillablePrimaryImageID sets the "primary_image" edge to the Asset entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillablePrimaryImageID(id *xid.ID) *EventCreate {
	if id != nil {
		ec = ec.SetPrimaryImageID(*id)
	}
	return ec
}

// SetPrimaryImage sets the "primary_image" edge to the Asset entity.
func (ec *EventCreate) SetPrimaryImage(a *Asset) *EventCreate {
	return ec.SetPrimaryImageID(a.ID)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := event.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := event.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Visibility(); !ok {
		v := event.DefaultVisibility
		ec.mutation.SetVisibility(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := event.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Event.updated_at"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Event.name"`)}
	}
	if _, ok := ec.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Event.slug"`)}
	}
	if _, ok := ec.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Event.start_time"`)}
	}
	if _, ok := ec.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Event.end_time"`)}
	}
	if _, ok := ec.mutation.ParticipationPolicy(); !ok {
		return &ValidationError{Name: "participation_policy", err: errors.New(`ent: missing required field "Event.participation_policy"`)}
	}
	if _, ok := ec.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "Event.visibility"`)}
	}
	if v, ok := ec.mutation.Visibility(); ok {
		if err := event.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Event.visibility": %w`, err)}
		}
	}
	if v, ok := ec.mutation.ID(); ok {
		if err := event.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Event.id": %w`, err)}
		}
	}
	if len(ec.mutation.ThreadIDs()) == 0 {
		return &ValidationError{Name: "thread", err: errors.New(`ent: missing required edge "Event.thread"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Slug(); ok {
		_spec.SetField(event.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ec.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ec.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := ec.mutation.ParticipationPolicy(); ok {
		_spec.SetField(event.FieldParticipationPolicy, field.TypeString, value)
		_node.ParticipationPolicy = value
	}
	if value, ok := ec.mutation.Visibility(); ok {
		_spec.SetField(event.FieldVisibility, field.TypeEnum, value)
		_node.Visibility = value
	}
	if value, ok := ec.mutation.LocationType(); ok {
		_spec.SetField(event.FieldLocationType, field.TypeString, value)
		_node.LocationType = &value
	}
	if value, ok := ec.mutation.LocationName(); ok {
		_spec.SetField(event.FieldLocationName, field.TypeString, value)
		_node.LocationName = &value
	}
	if value, ok := ec.mutation.LocationAddress(); ok {
		_spec.SetField(event.FieldLocationAddress, field.TypeString, value)
		_node.LocationAddress = &value
	}
	if value, ok := ec.mutation.LocationLatitude(); ok {
		_spec.SetField(event.FieldLocationLatitude, field.TypeFloat64, value)
		_node.LocationLatitude = &value
	}
	if value, ok := ec.mutation.LocationLongitude(); ok {
		_spec.SetField(event.FieldLocationLongitude, field.TypeFloat64, value)
		_node.LocationLongitude = &value
	}
	if value, ok := ec.mutation.LocationURL(); ok {
		_spec.SetField(event.FieldLocationURL, field.TypeString, value)
		_node.LocationURL = &value
	}
	if value, ok := ec.mutation.Capacity(); ok {
		_spec.SetField(event.FieldCapacity, field.TypeInt, value)
		_node.Capacity = &value
	}
	if value, ok := ec.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := ec.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ThreadTable,
			Columns: []string{event.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.post_event = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PrimaryImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.PrimaryImageTable,
			Columns: []string{event.PrimaryImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.asset_event = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsert) SetUpdatedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateUpdatedAt() *EventUpsert {
	u.SetExcluded(event.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventUpsert) SetDeletedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateDeletedAt() *EventUpsert {
	u.SetExcluded(event.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventUpsert) ClearDeletedAt() *EventUpsert {
	u.SetNull(event.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *EventUpsert) SetName(v string) *EventUpsert {
	u.Set(event.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsert) UpdateName() *EventUpsert {
	u.SetExcluded(event.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *EventUpsert) SetSlug(v string) *EventUpsert {
	u.Set(event.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *EventUpsert) UpdateSlug() *EventUpsert {
	u.SetExcluded(event.FieldSlug)
	return u
}

// SetDescription sets the "description" field.
func (u *EventUpsert) SetDescription(v string) *EventUpsert {
	u.Set(event.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsert) UpdateDescription() *EventUpsert {
	u.SetExcluded(event.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *EventUpsert) ClearDescription() *EventUpsert {
	u.SetNull(event.FieldDescription)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *EventUpsert) SetStartTime(v time.Time) *EventUpsert {
	u.Set(event.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateStartTime() *EventUpsert {
	u.SetExcluded(event.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *EventUpsert) SetEndTime(v time.Time) *EventUpsert {
	u.Set(event.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateEndTime() *EventUpsert {
	u.SetExcluded(event.FieldEndTime)
	return u
}

// SetParticipationPolicy sets the "participation_policy" field.
func (u *EventUpsert) SetParticipationPolicy(v string) *EventUpsert {
	u.Set(event.FieldParticipationPolicy, v)
	return u
}

// UpdateParticipationPolicy sets the "participation_policy" field to the value that was provided on create.
func (u *EventUpsert) UpdateParticipationPolicy() *EventUpsert {
	u.SetExcluded(event.FieldParticipationPolicy)
	return u
}

// SetVisibility sets the "visibility" field.
func (u *EventUpsert) SetVisibility(v event.Visibility) *EventUpsert {
	u.Set(event.FieldVisibility, v)
	return u
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *EventUpsert) UpdateVisibility() *EventUpsert {
	u.SetExcluded(event.FieldVisibility)
	return u
}

// SetLocationType sets the "location_type" field.
func (u *EventUpsert) SetLocationType(v string) *EventUpsert {
	u.Set(event.FieldLocationType, v)
	return u
}

// UpdateLocationType sets the "location_type" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocationType() *EventUpsert {
	u.SetExcluded(event.FieldLocationType)
	return u
}

// ClearLocationType clears the value of the "location_type" field.
func (u *EventUpsert) ClearLocationType() *EventUpsert {
	u.SetNull(event.FieldLocationType)
	return u
}

// SetLocationName sets the "location_name" field.
func (u *EventUpsert) SetLocationName(v string) *EventUpsert {
	u.Set(event.FieldLocationName, v)
	return u
}

// UpdateLocationName sets the "location_name" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocationName() *EventUpsert {
	u.SetExcluded(event.FieldLocationName)
	return u
}

// ClearLocationName clears the value of the "location_name" field.
func (u *EventUpsert) ClearLocationName() *EventUpsert {
	u.SetNull(event.FieldLocationName)
	return u
}

// SetLocationAddress sets the "location_address" field.
func (u *EventUpsert) SetLocationAddress(v string) *EventUpsert {
	u.Set(event.FieldLocationAddress, v)
	return u
}

// UpdateLocationAddress sets the "location_address" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocationAddress() *EventUpsert {
	u.SetExcluded(event.FieldLocationAddress)
	return u
}

// ClearLocationAddress clears the value of the "location_address" field.
func (u *EventUpsert) ClearLocationAddress() *EventUpsert {
	u.SetNull(event.FieldLocationAddress)
	return u
}

// SetLocationLatitude sets the "location_latitude" field.
func (u *EventUpsert) SetLocationLatitude(v float64) *EventUpsert {
	u.Set(event.FieldLocationLatitude, v)
	return u
}

// UpdateLocationLatitude sets the "location_latitude" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocationLatitude() *EventUpsert {
	u.SetExcluded(event.FieldLocationLatitude)
	return u
}

// AddLocationLatitude adds v to the "location_latitude" field.
func (u *EventUpsert) AddLocationLatitude(v float64) *EventUpsert {
	u.Add(event.FieldLocationLatitude, v)
	return u
}

// ClearLocationLatitude clears the value of the "location_latitude" field.
func (u *EventUpsert) ClearLocationLatitude() *EventUpsert {
	u.SetNull(event.FieldLocationLatitude)
	return u
}

// SetLocationLongitude sets the "location_longitude" field.
func (u *EventUpsert) SetLocationLongitude(v float64) *EventUpsert {
	u.Set(event.FieldLocationLongitude, v)
	return u
}

// UpdateLocationLongitude sets the "location_longitude" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocationLongitude() *EventUpsert {
	u.SetExcluded(event.FieldLocationLongitude)
	return u
}

// AddLocationLongitude adds v to the "location_longitude" field.
func (u *EventUpsert) AddLocationLongitude(v float64) *EventUpsert {
	u.Add(event.FieldLocationLongitude, v)
	return u
}

// ClearLocationLongitude clears the value of the "location_longitude" field.
func (u *EventUpsert) ClearLocationLongitude() *EventUpsert {
	u.SetNull(event.FieldLocationLongitude)
	return u
}

// SetLocationURL sets the "location_url" field.
func (u *EventUpsert) SetLocationURL(v string) *EventUpsert {
	u.Set(event.FieldLocationURL, v)
	return u
}

// UpdateLocationURL sets the "location_url" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocationURL() *EventUpsert {
	u.SetExcluded(event.FieldLocationURL)
	return u
}

// ClearLocationURL clears the value of the "location_url" field.
func (u *EventUpsert) ClearLocationURL() *EventUpsert {
	u.SetNull(event.FieldLocationURL)
	return u
}

// SetCapacity sets the "capacity" field.
func (u *EventUpsert) SetCapacity(v int) *EventUpsert {
	u.Set(event.FieldCapacity, v)
	return u
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *EventUpsert) UpdateCapacity() *EventUpsert {
	u.SetExcluded(event.FieldCapacity)
	return u
}

// AddCapacity adds v to the "capacity" field.
func (u *EventUpsert) AddCapacity(v int) *EventUpsert {
	u.Add(event.FieldCapacity, v)
	return u
}

// ClearCapacity clears the value of the "capacity" field.
func (u *EventUpsert) ClearCapacity() *EventUpsert {
	u.SetNull(event.FieldCapacity)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *EventUpsert) SetMetadata(v map[string]interface{}) *EventUpsert {
	u.Set(event.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EventUpsert) UpdateMetadata() *EventUpsert {
	u.SetExcluded(event.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EventUpsert) ClearMetadata() *EventUpsert {
	u.SetNull(event.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(event.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(event.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(event.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertOne) SetUpdatedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateUpdatedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventUpsertOne) SetDeletedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDeletedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventUpsertOne) ClearDeletedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *EventUpsertOne) SetName(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateName() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *EventUpsertOne) SetSlug(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSlug() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSlug()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertOne) SetDescription(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDescription() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *EventUpsertOne) ClearDescription() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearDescription()
	})
}

// SetStartTime sets the "start_time" field.
func (u *EventUpsertOne) SetStartTime(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateStartTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *EventUpsertOne) SetEndTime(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEndTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndTime()
	})
}

// SetParticipationPolicy sets the "participation_policy" field.
func (u *EventUpsertOne) SetParticipationPolicy(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetParticipationPolicy(v)
	})
}

// UpdateParticipationPolicy sets the "participation_policy" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateParticipationPolicy() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateParticipationPolicy()
	})
}

// SetVisibility sets the "visibility" field.
func (u *EventUpsertOne) SetVisibility(v event.Visibility) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateVisibility() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVisibility()
	})
}

// SetLocationType sets the "location_type" field.
func (u *EventUpsertOne) SetLocationType(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationType(v)
	})
}

// UpdateLocationType sets the "location_type" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocationType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationType()
	})
}

// ClearLocationType clears the value of the "location_type" field.
func (u *EventUpsertOne) ClearLocationType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationType()
	})
}

// SetLocationName sets the "location_name" field.
func (u *EventUpsertOne) SetLocationName(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationName(v)
	})
}

// UpdateLocationName sets the "location_name" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocationName() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationName()
	})
}

// ClearLocationName clears the value of the "location_name" field.
func (u *EventUpsertOne) ClearLocationName() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationName()
	})
}

// SetLocationAddress sets the "location_address" field.
func (u *EventUpsertOne) SetLocationAddress(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationAddress(v)
	})
}

// UpdateLocationAddress sets the "location_address" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocationAddress() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationAddress()
	})
}

// ClearLocationAddress clears the value of the "location_address" field.
func (u *EventUpsertOne) ClearLocationAddress() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationAddress()
	})
}

// SetLocationLatitude sets the "location_latitude" field.
func (u *EventUpsertOne) SetLocationLatitude(v float64) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationLatitude(v)
	})
}

// AddLocationLatitude adds v to the "location_latitude" field.
func (u *EventUpsertOne) AddLocationLatitude(v float64) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddLocationLatitude(v)
	})
}

// UpdateLocationLatitude sets the "location_latitude" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocationLatitude() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationLatitude()
	})
}

// ClearLocationLatitude clears the value of the "location_latitude" field.
func (u *EventUpsertOne) ClearLocationLatitude() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationLatitude()
	})
}

// SetLocationLongitude sets the "location_longitude" field.
func (u *EventUpsertOne) SetLocationLongitude(v float64) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationLongitude(v)
	})
}

// AddLocationLongitude adds v to the "location_longitude" field.
func (u *EventUpsertOne) AddLocationLongitude(v float64) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddLocationLongitude(v)
	})
}

// UpdateLocationLongitude sets the "location_longitude" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocationLongitude() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationLongitude()
	})
}

// ClearLocationLongitude clears the value of the "location_longitude" field.
func (u *EventUpsertOne) ClearLocationLongitude() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationLongitude()
	})
}

// SetLocationURL sets the "location_url" field.
func (u *EventUpsertOne) SetLocationURL(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationURL(v)
	})
}

// UpdateLocationURL sets the "location_url" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocationURL() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationURL()
	})
}

// ClearLocationURL clears the value of the "location_url" field.
func (u *EventUpsertOne) ClearLocationURL() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationURL()
	})
}

// SetCapacity sets the "capacity" field.
func (u *EventUpsertOne) SetCapacity(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *EventUpsertOne) AddCapacity(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateCapacity() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *EventUpsertOne) ClearCapacity() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearCapacity()
	})
}

// SetMetadata sets the "metadata" field.
func (u *EventUpsertOne) SetMetadata(v map[string]interface{}) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateMetadata() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EventUpsertOne) ClearMetadata() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EventUpsertOne.ID is not supported by MySQL driver. Use EventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(event.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(event.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(event.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertBulk) SetUpdatedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateUpdatedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventUpsertBulk) SetDeletedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDeletedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventUpsertBulk) ClearDeletedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *EventUpsertBulk) SetName(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateName() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *EventUpsertBulk) SetSlug(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSlug() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSlug()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertBulk) SetDescription(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDescription() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *EventUpsertBulk) ClearDescription() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearDescription()
	})
}

// SetStartTime sets the "start_time" field.
func (u *EventUpsertBulk) SetStartTime(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateStartTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *EventUpsertBulk) SetEndTime(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEndTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndTime()
	})
}

// SetParticipationPolicy sets the "participation_policy" field.
func (u *EventUpsertBulk) SetParticipationPolicy(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetParticipationPolicy(v)
	})
}

// UpdateParticipationPolicy sets the "participation_policy" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateParticipationPolicy() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateParticipationPolicy()
	})
}

// SetVisibility sets the "visibility" field.
func (u *EventUpsertBulk) SetVisibility(v event.Visibility) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateVisibility() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVisibility()
	})
}

// SetLocationType sets the "location_type" field.
func (u *EventUpsertBulk) SetLocationType(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationType(v)
	})
}

// UpdateLocationType sets the "location_type" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocationType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationType()
	})
}

// ClearLocationType clears the value of the "location_type" field.
func (u *EventUpsertBulk) ClearLocationType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationType()
	})
}

// SetLocationName sets the "location_name" field.
func (u *EventUpsertBulk) SetLocationName(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationName(v)
	})
}

// UpdateLocationName sets the "location_name" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocationName() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationName()
	})
}

// ClearLocationName clears the value of the "location_name" field.
func (u *EventUpsertBulk) ClearLocationName() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationName()
	})
}

// SetLocationAddress sets the "location_address" field.
func (u *EventUpsertBulk) SetLocationAddress(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationAddress(v)
	})
}

// UpdateLocationAddress sets the "location_address" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocationAddress() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationAddress()
	})
}

// ClearLocationAddress clears the value of the "location_address" field.
func (u *EventUpsertBulk) ClearLocationAddress() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationAddress()
	})
}

// SetLocationLatitude sets the "location_latitude" field.
func (u *EventUpsertBulk) SetLocationLatitude(v float64) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationLatitude(v)
	})
}

// AddLocationLatitude adds v to the "location_latitude" field.
func (u *EventUpsertBulk) AddLocationLatitude(v float64) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddLocationLatitude(v)
	})
}

// UpdateLocationLatitude sets the "location_latitude" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocationLatitude() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationLatitude()
	})
}

// ClearLocationLatitude clears the value of the "location_latitude" field.
func (u *EventUpsertBulk) ClearLocationLatitude() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationLatitude()
	})
}

// SetLocationLongitude sets the "location_longitude" field.
func (u *EventUpsertBulk) SetLocationLongitude(v float64) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationLongitude(v)
	})
}

// AddLocationLongitude adds v to the "location_longitude" field.
func (u *EventUpsertBulk) AddLocationLongitude(v float64) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddLocationLongitude(v)
	})
}

// UpdateLocationLongitude sets the "location_longitude" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocationLongitude() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationLongitude()
	})
}

// ClearLocationLongitude clears the value of the "location_longitude" field.
func (u *EventUpsertBulk) ClearLocationLongitude() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationLongitude()
	})
}

// SetLocationURL sets the "location_url" field.
func (u *EventUpsertBulk) SetLocationURL(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationURL(v)
	})
}

// UpdateLocationURL sets the "location_url" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocationURL() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationURL()
	})
}

// ClearLocationURL clears the value of the "location_url" field.
func (u *EventUpsertBulk) ClearLocationURL() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationURL()
	})
}

// SetCapacity sets the "capacity" field.
func (u *EventUpsertBulk) SetCapacity(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *EventUpsertBulk) AddCapacity(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateCapacity() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *EventUpsertBulk) ClearCapacity() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearCapacity()
	})
}

// SetMetadata sets the "metadata" field.
func (u *EventUpsertBulk) SetMetadata(v map[string]interface{}) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateMetadata() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EventUpsertBulk) ClearMetadata() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
