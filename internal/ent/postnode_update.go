// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/postnode"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// PostNodeUpdate is the builder for updating PostNode entities.
type PostNodeUpdate struct {
	config
	hooks     []Hook
	mutation  *PostNodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostNodeUpdate builder.
func (_u *PostNodeUpdate) Where(ps ...predicate.PostNode) *PostNodeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetNodeID sets the "node_id" field.
func (_u *PostNodeUpdate) SetNodeID(v xid.ID) *PostNodeUpdate {
	_u.mutation.SetNodeID(v)
	return _u
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (_u *PostNodeUpdate) SetNillableNodeID(v *xid.ID) *PostNodeUpdate {
	if v != nil {
		_u.SetNodeID(*v)
	}
	return _u
}

// SetPostID sets the "post_id" field.
func (_u *PostNodeUpdate) SetPostID(v xid.ID) *PostNodeUpdate {
	_u.mutation.SetPostID(v)
	return _u
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (_u *PostNodeUpdate) SetNillablePostID(v *xid.ID) *PostNodeUpdate {
	if v != nil {
		_u.SetPostID(*v)
	}
	return _u
}

// SetNode sets the "node" edge to the Node entity.
func (_u *PostNodeUpdate) SetNode(v *Node) *PostNodeUpdate {
	return _u.SetNodeID(v.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (_u *PostNodeUpdate) SetPost(v *Post) *PostNodeUpdate {
	return _u.SetPostID(v.ID)
}

// Mutation returns the PostNodeMutation object of the builder.
func (_u *PostNodeUpdate) Mutation() *PostNodeMutation {
	return _u.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (_u *PostNodeUpdate) ClearNode() *PostNodeUpdate {
	_u.mutation.ClearNode()
	return _u
}

// ClearPost clears the "post" edge to the Post entity.
func (_u *PostNodeUpdate) ClearPost() *PostNodeUpdate {
	_u.mutation.ClearPost()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PostNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PostNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PostNodeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PostNodeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PostNodeUpdate) check() error {
	if v, ok := _u.mutation.NodeID(); ok {
		if err := postnode.NodeIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "PostNode.node_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PostID(); ok {
		if err := postnode.PostIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`ent: validator failed for field "PostNode.post_id": %w`, err)}
		}
	}
	if _u.mutation.NodeCleared() && len(_u.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PostNode.node"`)
	}
	if _u.mutation.PostCleared() && len(_u.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PostNode.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PostNodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostNodeUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PostNodeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postnode.Table, postnode.Columns, sqlgraph.NewFieldSpec(postnode.FieldNodeID, field.TypeString), sqlgraph.NewFieldSpec(postnode.FieldPostID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.NodeTable,
			Columns: []string{postnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.NodeTable,
			Columns: []string{postnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.PostTable,
			Columns: []string{postnode.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.PostTable,
			Columns: []string{postnode.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PostNodeUpdateOne is the builder for updating a single PostNode entity.
type PostNodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostNodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetNodeID sets the "node_id" field.
func (_u *PostNodeUpdateOne) SetNodeID(v xid.ID) *PostNodeUpdateOne {
	_u.mutation.SetNodeID(v)
	return _u
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (_u *PostNodeUpdateOne) SetNillableNodeID(v *xid.ID) *PostNodeUpdateOne {
	if v != nil {
		_u.SetNodeID(*v)
	}
	return _u
}

// SetPostID sets the "post_id" field.
func (_u *PostNodeUpdateOne) SetPostID(v xid.ID) *PostNodeUpdateOne {
	_u.mutation.SetPostID(v)
	return _u
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (_u *PostNodeUpdateOne) SetNillablePostID(v *xid.ID) *PostNodeUpdateOne {
	if v != nil {
		_u.SetPostID(*v)
	}
	return _u
}

// SetNode sets the "node" edge to the Node entity.
func (_u *PostNodeUpdateOne) SetNode(v *Node) *PostNodeUpdateOne {
	return _u.SetNodeID(v.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (_u *PostNodeUpdateOne) SetPost(v *Post) *PostNodeUpdateOne {
	return _u.SetPostID(v.ID)
}

// Mutation returns the PostNodeMutation object of the builder.
func (_u *PostNodeUpdateOne) Mutation() *PostNodeMutation {
	return _u.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (_u *PostNodeUpdateOne) ClearNode() *PostNodeUpdateOne {
	_u.mutation.ClearNode()
	return _u
}

// ClearPost clears the "post" edge to the Post entity.
func (_u *PostNodeUpdateOne) ClearPost() *PostNodeUpdateOne {
	_u.mutation.ClearPost()
	return _u
}

// Where appends a list predicates to the PostNodeUpdate builder.
func (_u *PostNodeUpdateOne) Where(ps ...predicate.PostNode) *PostNodeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PostNodeUpdateOne) Select(field string, fields ...string) *PostNodeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PostNode entity.
func (_u *PostNodeUpdateOne) Save(ctx context.Context) (*PostNode, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PostNodeUpdateOne) SaveX(ctx context.Context) *PostNode {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PostNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PostNodeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PostNodeUpdateOne) check() error {
	if v, ok := _u.mutation.NodeID(); ok {
		if err := postnode.NodeIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "PostNode.node_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PostID(); ok {
		if err := postnode.PostIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`ent: validator failed for field "PostNode.post_id": %w`, err)}
		}
	}
	if _u.mutation.NodeCleared() && len(_u.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PostNode.node"`)
	}
	if _u.mutation.PostCleared() && len(_u.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PostNode.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PostNodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostNodeUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PostNodeUpdateOne) sqlSave(ctx context.Context) (_node *PostNode, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postnode.Table, postnode.Columns, sqlgraph.NewFieldSpec(postnode.FieldNodeID, field.TypeString), sqlgraph.NewFieldSpec(postnode.FieldPostID, field.TypeString))
	if id, ok := _u.mutation.NodeID(); !ok {
		return nil, &ValidationError{Name: "node_id", err: errors.New(`ent: missing "PostNode.node_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := _u.mutation.PostID(); !ok {
		return nil, &ValidationError{Name: "post_id", err: errors.New(`ent: missing "PostNode.post_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !postnode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.NodeTable,
			Columns: []string{postnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.NodeTable,
			Columns: []string{postnode.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.PostTable,
			Columns: []string{postnode.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postnode.PostTable,
			Columns: []string{postnode.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &PostNode{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
