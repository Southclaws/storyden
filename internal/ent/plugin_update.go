// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	entplugin "github.com/Southclaws/storyden/internal/ent/plugin"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/lib/plugin"
	"github.com/rs/xid"
)

// PluginUpdate is the builder for updating Plugin entities.
type PluginUpdate struct {
	config
	hooks     []Hook
	mutation  *PluginMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PluginUpdate builder.
func (_u *PluginUpdate) Where(ps ...predicate.Plugin) *PluginUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PluginUpdate) SetUpdatedAt(v time.Time) *PluginUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *PluginUpdate) SetPath(v string) *PluginUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *PluginUpdate) SetNillablePath(v *string) *PluginUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetManifest sets the "manifest" field.
func (_u *PluginUpdate) SetManifest(v plugin.Manifest) *PluginUpdate {
	_u.mutation.SetManifest(v)
	return _u
}

// SetNillableManifest sets the "manifest" field if the given value is not nil.
func (_u *PluginUpdate) SetNillableManifest(v *plugin.Manifest) *PluginUpdate {
	if v != nil {
		_u.SetManifest(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *PluginUpdate) SetConfig(v map[string]interface{}) *PluginUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetActiveState sets the "active_state" field.
func (_u *PluginUpdate) SetActiveState(v string) *PluginUpdate {
	_u.mutation.SetActiveState(v)
	return _u
}

// SetNillableActiveState sets the "active_state" field if the given value is not nil.
func (_u *PluginUpdate) SetNillableActiveState(v *string) *PluginUpdate {
	if v != nil {
		_u.SetActiveState(*v)
	}
	return _u
}

// SetActiveStateChangedAt sets the "active_state_changed_at" field.
func (_u *PluginUpdate) SetActiveStateChangedAt(v time.Time) *PluginUpdate {
	_u.mutation.SetActiveStateChangedAt(v)
	return _u
}

// SetNillableActiveStateChangedAt sets the "active_state_changed_at" field if the given value is not nil.
func (_u *PluginUpdate) SetNillableActiveStateChangedAt(v *time.Time) *PluginUpdate {
	if v != nil {
		_u.SetActiveStateChangedAt(*v)
	}
	return _u
}

// SetStatusMessage sets the "status_message" field.
func (_u *PluginUpdate) SetStatusMessage(v string) *PluginUpdate {
	_u.mutation.SetStatusMessage(v)
	return _u
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (_u *PluginUpdate) SetNillableStatusMessage(v *string) *PluginUpdate {
	if v != nil {
		_u.SetStatusMessage(*v)
	}
	return _u
}

// ClearStatusMessage clears the value of the "status_message" field.
func (_u *PluginUpdate) ClearStatusMessage() *PluginUpdate {
	_u.mutation.ClearStatusMessage()
	return _u
}

// SetStatusDetails sets the "status_details" field.
func (_u *PluginUpdate) SetStatusDetails(v map[string]interface{}) *PluginUpdate {
	_u.mutation.SetStatusDetails(v)
	return _u
}

// ClearStatusDetails clears the value of the "status_details" field.
func (_u *PluginUpdate) ClearStatusDetails() *PluginUpdate {
	_u.mutation.ClearStatusDetails()
	return _u
}

// SetAddedBy sets the "added_by" field.
func (_u *PluginUpdate) SetAddedBy(v xid.ID) *PluginUpdate {
	_u.mutation.SetAddedBy(v)
	return _u
}

// SetNillableAddedBy sets the "added_by" field if the given value is not nil.
func (_u *PluginUpdate) SetNillableAddedBy(v *xid.ID) *PluginUpdate {
	if v != nil {
		_u.SetAddedBy(*v)
	}
	return _u
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (_u *PluginUpdate) SetAccountID(id xid.ID) *PluginUpdate {
	_u.mutation.SetAccountID(id)
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *PluginUpdate) SetAccount(v *Account) *PluginUpdate {
	return _u.SetAccountID(v.ID)
}

// Mutation returns the PluginMutation object of the builder.
func (_u *PluginUpdate) Mutation() *PluginMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *PluginUpdate) ClearAccount() *PluginUpdate {
	_u.mutation.ClearAccount()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PluginUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PluginUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PluginUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PluginUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PluginUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entplugin.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PluginUpdate) check() error {
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Plugin.account"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PluginUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PluginUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PluginUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entplugin.Table, entplugin.Columns, sqlgraph.NewFieldSpec(entplugin.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entplugin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(entplugin.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.Manifest(); ok {
		_spec.SetField(entplugin.FieldManifest, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(entplugin.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ActiveState(); ok {
		_spec.SetField(entplugin.FieldActiveState, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActiveStateChangedAt(); ok {
		_spec.SetField(entplugin.FieldActiveStateChangedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.StatusMessage(); ok {
		_spec.SetField(entplugin.FieldStatusMessage, field.TypeString, value)
	}
	if _u.mutation.StatusMessageCleared() {
		_spec.ClearField(entplugin.FieldStatusMessage, field.TypeString)
	}
	if value, ok := _u.mutation.StatusDetails(); ok {
		_spec.SetField(entplugin.FieldStatusDetails, field.TypeJSON, value)
	}
	if _u.mutation.StatusDetailsCleared() {
		_spec.ClearField(entplugin.FieldStatusDetails, field.TypeJSON)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entplugin.AccountTable,
			Columns: []string{entplugin.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entplugin.AccountTable,
			Columns: []string{entplugin.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entplugin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PluginUpdateOne is the builder for updating a single Plugin entity.
type PluginUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PluginMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PluginUpdateOne) SetUpdatedAt(v time.Time) *PluginUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *PluginUpdateOne) SetPath(v string) *PluginUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *PluginUpdateOne) SetNillablePath(v *string) *PluginUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetManifest sets the "manifest" field.
func (_u *PluginUpdateOne) SetManifest(v plugin.Manifest) *PluginUpdateOne {
	_u.mutation.SetManifest(v)
	return _u
}

// SetNillableManifest sets the "manifest" field if the given value is not nil.
func (_u *PluginUpdateOne) SetNillableManifest(v *plugin.Manifest) *PluginUpdateOne {
	if v != nil {
		_u.SetManifest(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *PluginUpdateOne) SetConfig(v map[string]interface{}) *PluginUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetActiveState sets the "active_state" field.
func (_u *PluginUpdateOne) SetActiveState(v string) *PluginUpdateOne {
	_u.mutation.SetActiveState(v)
	return _u
}

// SetNillableActiveState sets the "active_state" field if the given value is not nil.
func (_u *PluginUpdateOne) SetNillableActiveState(v *string) *PluginUpdateOne {
	if v != nil {
		_u.SetActiveState(*v)
	}
	return _u
}

// SetActiveStateChangedAt sets the "active_state_changed_at" field.
func (_u *PluginUpdateOne) SetActiveStateChangedAt(v time.Time) *PluginUpdateOne {
	_u.mutation.SetActiveStateChangedAt(v)
	return _u
}

// SetNillableActiveStateChangedAt sets the "active_state_changed_at" field if the given value is not nil.
func (_u *PluginUpdateOne) SetNillableActiveStateChangedAt(v *time.Time) *PluginUpdateOne {
	if v != nil {
		_u.SetActiveStateChangedAt(*v)
	}
	return _u
}

// SetStatusMessage sets the "status_message" field.
func (_u *PluginUpdateOne) SetStatusMessage(v string) *PluginUpdateOne {
	_u.mutation.SetStatusMessage(v)
	return _u
}

// SetNillableStatusMessage sets the "status_message" field if the given value is not nil.
func (_u *PluginUpdateOne) SetNillableStatusMessage(v *string) *PluginUpdateOne {
	if v != nil {
		_u.SetStatusMessage(*v)
	}
	return _u
}

// ClearStatusMessage clears the value of the "status_message" field.
func (_u *PluginUpdateOne) ClearStatusMessage() *PluginUpdateOne {
	_u.mutation.ClearStatusMessage()
	return _u
}

// SetStatusDetails sets the "status_details" field.
func (_u *PluginUpdateOne) SetStatusDetails(v map[string]interface{}) *PluginUpdateOne {
	_u.mutation.SetStatusDetails(v)
	return _u
}

// ClearStatusDetails clears the value of the "status_details" field.
func (_u *PluginUpdateOne) ClearStatusDetails() *PluginUpdateOne {
	_u.mutation.ClearStatusDetails()
	return _u
}

// SetAddedBy sets the "added_by" field.
func (_u *PluginUpdateOne) SetAddedBy(v xid.ID) *PluginUpdateOne {
	_u.mutation.SetAddedBy(v)
	return _u
}

// SetNillableAddedBy sets the "added_by" field if the given value is not nil.
func (_u *PluginUpdateOne) SetNillableAddedBy(v *xid.ID) *PluginUpdateOne {
	if v != nil {
		_u.SetAddedBy(*v)
	}
	return _u
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (_u *PluginUpdateOne) SetAccountID(id xid.ID) *PluginUpdateOne {
	_u.mutation.SetAccountID(id)
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *PluginUpdateOne) SetAccount(v *Account) *PluginUpdateOne {
	return _u.SetAccountID(v.ID)
}

// Mutation returns the PluginMutation object of the builder.
func (_u *PluginUpdateOne) Mutation() *PluginMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *PluginUpdateOne) ClearAccount() *PluginUpdateOne {
	_u.mutation.ClearAccount()
	return _u
}

// Where appends a list predicates to the PluginUpdate builder.
func (_u *PluginUpdateOne) Where(ps ...predicate.Plugin) *PluginUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PluginUpdateOne) Select(field string, fields ...string) *PluginUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Plugin entity.
func (_u *PluginUpdateOne) Save(ctx context.Context) (*Plugin, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PluginUpdateOne) SaveX(ctx context.Context) *Plugin {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PluginUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PluginUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PluginUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entplugin.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PluginUpdateOne) check() error {
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Plugin.account"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PluginUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PluginUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PluginUpdateOne) sqlSave(ctx context.Context) (_node *Plugin, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entplugin.Table, entplugin.Columns, sqlgraph.NewFieldSpec(entplugin.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plugin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entplugin.FieldID)
		for _, f := range fields {
			if !entplugin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entplugin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entplugin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(entplugin.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.Manifest(); ok {
		_spec.SetField(entplugin.FieldManifest, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(entplugin.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ActiveState(); ok {
		_spec.SetField(entplugin.FieldActiveState, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActiveStateChangedAt(); ok {
		_spec.SetField(entplugin.FieldActiveStateChangedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.StatusMessage(); ok {
		_spec.SetField(entplugin.FieldStatusMessage, field.TypeString, value)
	}
	if _u.mutation.StatusMessageCleared() {
		_spec.ClearField(entplugin.FieldStatusMessage, field.TypeString)
	}
	if value, ok := _u.mutation.StatusDetails(); ok {
		_spec.SetField(entplugin.FieldStatusDetails, field.TypeJSON, value)
	}
	if _u.mutation.StatusDetailsCleared() {
		_spec.ClearField(entplugin.FieldStatusDetails, field.TypeJSON)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entplugin.AccountTable,
			Columns: []string{entplugin.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entplugin.AccountTable,
			Columns: []string{entplugin.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Plugin{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entplugin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
