// Code generated by ent, DO NOT EDIT.

package postnode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldEQ(FieldCreatedAt, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldEQ(FieldNodeID, v))
}

// PostID applies equality check predicate on the "post_id" field. It's identical to PostIDEQ.
func PostID(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldEQ(FieldPostID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PostNode {
	return predicate.PostNode(sql.FieldLTE(FieldCreatedAt, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldContains(FieldNodeID, vc))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldHasPrefix(FieldNodeID, vc))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldHasSuffix(FieldNodeID, vc))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldEqualFold(FieldNodeID, vc))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldContainsFold(FieldNodeID, vc))
}

// PostIDEQ applies the EQ predicate on the "post_id" field.
func PostIDEQ(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldEQ(FieldPostID, v))
}

// PostIDNEQ applies the NEQ predicate on the "post_id" field.
func PostIDNEQ(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldNEQ(FieldPostID, v))
}

// PostIDIn applies the In predicate on the "post_id" field.
func PostIDIn(vs ...xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldIn(FieldPostID, vs...))
}

// PostIDNotIn applies the NotIn predicate on the "post_id" field.
func PostIDNotIn(vs ...xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldNotIn(FieldPostID, vs...))
}

// PostIDGT applies the GT predicate on the "post_id" field.
func PostIDGT(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldGT(FieldPostID, v))
}

// PostIDGTE applies the GTE predicate on the "post_id" field.
func PostIDGTE(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldGTE(FieldPostID, v))
}

// PostIDLT applies the LT predicate on the "post_id" field.
func PostIDLT(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldLT(FieldPostID, v))
}

// PostIDLTE applies the LTE predicate on the "post_id" field.
func PostIDLTE(v xid.ID) predicate.PostNode {
	return predicate.PostNode(sql.FieldLTE(FieldPostID, v))
}

// PostIDContains applies the Contains predicate on the "post_id" field.
func PostIDContains(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldContains(FieldPostID, vc))
}

// PostIDHasPrefix applies the HasPrefix predicate on the "post_id" field.
func PostIDHasPrefix(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldHasPrefix(FieldPostID, vc))
}

// PostIDHasSuffix applies the HasSuffix predicate on the "post_id" field.
func PostIDHasSuffix(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldHasSuffix(FieldPostID, vc))
}

// PostIDEqualFold applies the EqualFold predicate on the "post_id" field.
func PostIDEqualFold(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldEqualFold(FieldPostID, vc))
}

// PostIDContainsFold applies the ContainsFold predicate on the "post_id" field.
func PostIDContainsFold(v xid.ID) predicate.PostNode {
	vc := v.String()
	return predicate.PostNode(sql.FieldContainsFold(FieldPostID, vc))
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.PostNode {
	return predicate.PostNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, NodeColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.PostNode {
	return predicate.PostNode(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.PostNode {
	return predicate.PostNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PostColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.PostNode {
	return predicate.PostNode(func(s *sql.Selector) {
		step := newPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PostNode) predicate.PostNode {
	return predicate.PostNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PostNode) predicate.PostNode {
	return predicate.PostNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PostNode) predicate.PostNode {
	return predicate.PostNode(sql.NotPredicates(p))
}
