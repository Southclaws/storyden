// Code generated by ent, DO NOT EDIT.

package postnode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the postnode type in the database.
	Label = "post_node"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldNodeID holds the string denoting the node_id field in the database.
	FieldNodeID = "node_id"
	// FieldPostID holds the string denoting the post_id field in the database.
	FieldPostID = "post_id"
	// EdgeNode holds the string denoting the node edge name in mutations.
	EdgeNode = "node"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// NodeFieldID holds the string denoting the ID field of the Node.
	NodeFieldID = "id"
	// PostFieldID holds the string denoting the ID field of the Post.
	PostFieldID = "id"
	// Table holds the table name of the postnode in the database.
	Table = "post_nodes"
	// NodeTable is the table that holds the node relation/edge.
	NodeTable = "post_nodes"
	// NodeInverseTable is the table name for the Node entity.
	// It exists in this package in order to avoid circular dependency with the "node" package.
	NodeInverseTable = "nodes"
	// NodeColumn is the table column denoting the node relation/edge.
	NodeColumn = "node_id"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "post_nodes"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "post_id"
)

// Columns holds all SQL columns for postnode fields.
var Columns = []string{
	FieldCreatedAt,
	FieldNodeID,
	FieldPostID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultNodeID holds the default value on creation for the "node_id" field.
	DefaultNodeID func() xid.ID
	// NodeIDValidator is a validator for the "node_id" field. It is called by the builders before save.
	NodeIDValidator func(string) error
	// DefaultPostID holds the default value on creation for the "post_id" field.
	DefaultPostID func() xid.ID
	// PostIDValidator is a validator for the "post_id" field. It is called by the builders before save.
	PostIDValidator func(string) error
)

// OrderOption defines the ordering options for the PostNode queries.
type OrderOption func(*sql.Selector)

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByNodeID orders the results by the node_id field.
func ByNodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeID, opts...).ToFunc()
}

// ByPostID orders the results by the post_id field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByNodeField orders the results by node field.
func ByNodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeStep(), sql.OrderByField(field, opts...))
	}
}

// ByPostField orders the results by post field.
func ByPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), sql.OrderByField(field, opts...))
	}
}
func newNodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, NodeColumn),
		sqlgraph.To(NodeInverseTable, NodeFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NodeTable, NodeColumn),
	)
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, PostColumn),
		sqlgraph.To(PostInverseTable, PostFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PostTable, PostColumn),
	)
}
