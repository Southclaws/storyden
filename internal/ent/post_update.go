// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/category"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/react"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/rs/xid"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PostUpdate) SetDeletedAt(t time.Time) *PostUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDeletedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PostUpdate) ClearDeletedAt() *PostUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetFirst sets the "first" field.
func (pu *PostUpdate) SetFirst(b bool) *PostUpdate {
	pu.mutation.SetFirst(b)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTitle(s *string) *PostUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// ClearTitle clears the value of the "title" field.
func (pu *PostUpdate) ClearTitle() *PostUpdate {
	pu.mutation.ClearTitle()
	return pu
}

// SetSlug sets the "slug" field.
func (pu *PostUpdate) SetSlug(s string) *PostUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pu *PostUpdate) SetNillableSlug(s *string) *PostUpdate {
	if s != nil {
		pu.SetSlug(*s)
	}
	return pu
}

// ClearSlug clears the value of the "slug" field.
func (pu *PostUpdate) ClearSlug() *PostUpdate {
	pu.mutation.ClearSlug()
	return pu
}

// SetPinned sets the "pinned" field.
func (pu *PostUpdate) SetPinned(b bool) *PostUpdate {
	pu.mutation.SetPinned(b)
	return pu
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (pu *PostUpdate) SetNillablePinned(b *bool) *PostUpdate {
	if b != nil {
		pu.SetPinned(*b)
	}
	return pu
}

// SetRootPostID sets the "root_post_id" field.
func (pu *PostUpdate) SetRootPostID(x xid.ID) *PostUpdate {
	pu.mutation.SetRootPostID(x)
	return pu
}

// SetNillableRootPostID sets the "root_post_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableRootPostID(x *xid.ID) *PostUpdate {
	if x != nil {
		pu.SetRootPostID(*x)
	}
	return pu
}

// ClearRootPostID clears the value of the "root_post_id" field.
func (pu *PostUpdate) ClearRootPostID() *PostUpdate {
	pu.mutation.ClearRootPostID()
	return pu
}

// SetReplyToPostID sets the "reply_to_post_id" field.
func (pu *PostUpdate) SetReplyToPostID(x xid.ID) *PostUpdate {
	pu.mutation.SetReplyToPostID(x)
	return pu
}

// SetNillableReplyToPostID sets the "reply_to_post_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableReplyToPostID(x *xid.ID) *PostUpdate {
	if x != nil {
		pu.SetReplyToPostID(*x)
	}
	return pu
}

// ClearReplyToPostID clears the value of the "reply_to_post_id" field.
func (pu *PostUpdate) ClearReplyToPostID() *PostUpdate {
	pu.mutation.ClearReplyToPostID()
	return pu
}

// SetBody sets the "body" field.
func (pu *PostUpdate) SetBody(s string) *PostUpdate {
	pu.mutation.SetBody(s)
	return pu
}

// SetShort sets the "short" field.
func (pu *PostUpdate) SetShort(s string) *PostUpdate {
	pu.mutation.SetShort(s)
	return pu
}

// SetMetadata sets the "metadata" field.
func (pu *PostUpdate) SetMetadata(m map[string]interface{}) *PostUpdate {
	pu.mutation.SetMetadata(m)
	return pu
}

// ClearMetadata clears the value of the "metadata" field.
func (pu *PostUpdate) ClearMetadata() *PostUpdate {
	pu.mutation.ClearMetadata()
	return pu
}

// SetStatus sets the "status" field.
func (pu *PostUpdate) SetStatus(po post.Status) *PostUpdate {
	pu.mutation.SetStatus(po)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PostUpdate) SetNillableStatus(po *post.Status) *PostUpdate {
	if po != nil {
		pu.SetStatus(*po)
	}
	return pu
}

// SetCategoryID sets the "category_id" field.
func (pu *PostUpdate) SetCategoryID(x xid.ID) *PostUpdate {
	pu.mutation.SetCategoryID(x)
	return pu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCategoryID(x *xid.ID) *PostUpdate {
	if x != nil {
		pu.SetCategoryID(*x)
	}
	return pu
}

// ClearCategoryID clears the value of the "category_id" field.
func (pu *PostUpdate) ClearCategoryID() *PostUpdate {
	pu.mutation.ClearCategoryID()
	return pu
}

// SetAuthorID sets the "author" edge to the Account entity by ID.
func (pu *PostUpdate) SetAuthorID(id xid.ID) *PostUpdate {
	pu.mutation.SetAuthorID(id)
	return pu
}

// SetAuthor sets the "author" edge to the Account entity.
func (pu *PostUpdate) SetAuthor(a *Account) *PostUpdate {
	return pu.SetAuthorID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (pu *PostUpdate) SetCategory(c *Category) *PostUpdate {
	return pu.SetCategoryID(c.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pu *PostUpdate) AddTagIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.AddTagIDs(ids...)
	return pu
}

// AddTags adds the "tags" edges to the Tag entity.
func (pu *PostUpdate) AddTags(t ...*Tag) *PostUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTagIDs(ids...)
}

// SetRootID sets the "root" edge to the Post entity by ID.
func (pu *PostUpdate) SetRootID(id xid.ID) *PostUpdate {
	pu.mutation.SetRootID(id)
	return pu
}

// SetNillableRootID sets the "root" edge to the Post entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableRootID(id *xid.ID) *PostUpdate {
	if id != nil {
		pu = pu.SetRootID(*id)
	}
	return pu
}

// SetRoot sets the "root" edge to the Post entity.
func (pu *PostUpdate) SetRoot(p *Post) *PostUpdate {
	return pu.SetRootID(p.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (pu *PostUpdate) AddPostIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.AddPostIDs(ids...)
	return pu
}

// AddPosts adds the "posts" edges to the Post entity.
func (pu *PostUpdate) AddPosts(p ...*Post) *PostUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPostIDs(ids...)
}

// SetReplyToID sets the "replyTo" edge to the Post entity by ID.
func (pu *PostUpdate) SetReplyToID(id xid.ID) *PostUpdate {
	pu.mutation.SetReplyToID(id)
	return pu
}

// SetNillableReplyToID sets the "replyTo" edge to the Post entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableReplyToID(id *xid.ID) *PostUpdate {
	if id != nil {
		pu = pu.SetReplyToID(*id)
	}
	return pu
}

// SetReplyTo sets the "replyTo" edge to the Post entity.
func (pu *PostUpdate) SetReplyTo(p *Post) *PostUpdate {
	return pu.SetReplyToID(p.ID)
}

// AddReplyIDs adds the "replies" edge to the Post entity by IDs.
func (pu *PostUpdate) AddReplyIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.AddReplyIDs(ids...)
	return pu
}

// AddReplies adds the "replies" edges to the Post entity.
func (pu *PostUpdate) AddReplies(p ...*Post) *PostUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddReplyIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (pu *PostUpdate) AddReactIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.AddReactIDs(ids...)
	return pu
}

// AddReacts adds the "reacts" edges to the React entity.
func (pu *PostUpdate) AddReacts(r ...*React) *PostUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReactIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (pu *PostUpdate) AddAssetIDs(ids ...string) *PostUpdate {
	pu.mutation.AddAssetIDs(ids...)
	return pu
}

// AddAssets adds the "assets" edges to the Asset entity.
func (pu *PostUpdate) AddAssets(a ...*Asset) *PostUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAssetIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearAuthor clears the "author" edge to the Account entity.
func (pu *PostUpdate) ClearAuthor() *PostUpdate {
	pu.mutation.ClearAuthor()
	return pu
}

// ClearCategory clears the "category" edge to the Category entity.
func (pu *PostUpdate) ClearCategory() *PostUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (pu *PostUpdate) ClearTags() *PostUpdate {
	pu.mutation.ClearTags()
	return pu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (pu *PostUpdate) RemoveTagIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.RemoveTagIDs(ids...)
	return pu
}

// RemoveTags removes "tags" edges to Tag entities.
func (pu *PostUpdate) RemoveTags(t ...*Tag) *PostUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTagIDs(ids...)
}

// ClearRoot clears the "root" edge to the Post entity.
func (pu *PostUpdate) ClearRoot() *PostUpdate {
	pu.mutation.ClearRoot()
	return pu
}

// ClearPosts clears all "posts" edges to the Post entity.
func (pu *PostUpdate) ClearPosts() *PostUpdate {
	pu.mutation.ClearPosts()
	return pu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (pu *PostUpdate) RemovePostIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.RemovePostIDs(ids...)
	return pu
}

// RemovePosts removes "posts" edges to Post entities.
func (pu *PostUpdate) RemovePosts(p ...*Post) *PostUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePostIDs(ids...)
}

// ClearReplyTo clears the "replyTo" edge to the Post entity.
func (pu *PostUpdate) ClearReplyTo() *PostUpdate {
	pu.mutation.ClearReplyTo()
	return pu
}

// ClearReplies clears all "replies" edges to the Post entity.
func (pu *PostUpdate) ClearReplies() *PostUpdate {
	pu.mutation.ClearReplies()
	return pu
}

// RemoveReplyIDs removes the "replies" edge to Post entities by IDs.
func (pu *PostUpdate) RemoveReplyIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.RemoveReplyIDs(ids...)
	return pu
}

// RemoveReplies removes "replies" edges to Post entities.
func (pu *PostUpdate) RemoveReplies(p ...*Post) *PostUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveReplyIDs(ids...)
}

// ClearReacts clears all "reacts" edges to the React entity.
func (pu *PostUpdate) ClearReacts() *PostUpdate {
	pu.mutation.ClearReacts()
	return pu
}

// RemoveReactIDs removes the "reacts" edge to React entities by IDs.
func (pu *PostUpdate) RemoveReactIDs(ids ...xid.ID) *PostUpdate {
	pu.mutation.RemoveReactIDs(ids...)
	return pu
}

// RemoveReacts removes "reacts" edges to React entities.
func (pu *PostUpdate) RemoveReacts(r ...*React) *PostUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReactIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (pu *PostUpdate) ClearAssets() *PostUpdate {
	pu.mutation.ClearAssets()
	return pu
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (pu *PostUpdate) RemoveAssetIDs(ids ...string) *PostUpdate {
	pu.mutation.RemoveAssetIDs(ids...)
	return pu
}

// RemoveAssets removes "assets" edges to Asset entities.
func (pu *PostUpdate) RemoveAssets(a ...*Asset) *PostUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAssetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks[int, PostMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Status(); ok {
		if err := post.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Post.status": %w`, err)}
		}
	}
	if _, ok := pu.mutation.AuthorID(); pu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Post.author"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(post.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(post.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.First(); ok {
		_spec.SetField(post.FieldFirst, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if pu.mutation.TitleCleared() {
		_spec.ClearField(post.FieldTitle, field.TypeString)
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.SetField(post.FieldSlug, field.TypeString, value)
	}
	if pu.mutation.SlugCleared() {
		_spec.ClearField(post.FieldSlug, field.TypeString)
	}
	if value, ok := pu.mutation.Pinned(); ok {
		_spec.SetField(post.FieldPinned, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Body(); ok {
		_spec.SetField(post.FieldBody, field.TypeString, value)
	}
	if value, ok := pu.mutation.Short(); ok {
		_spec.SetField(post.FieldShort, field.TypeString, value)
	}
	if value, ok := pu.mutation.Metadata(); ok {
		_spec.SetField(post.FieldMetadata, field.TypeJSON, value)
	}
	if pu.mutation.MetadataCleared() {
		_spec.ClearField(post.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeEnum, value)
	}
	if pu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.AuthorTable,
			Columns: []string{post.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.AuthorTable,
			Columns: []string{post.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.CategoryTable,
			Columns: []string{post.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.CategoryTable,
			Columns: []string{post.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.RootTable,
			Columns: []string{post.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.RootTable,
			Columns: []string{post.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !pu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReplyToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.ReplyToTable,
			Columns: []string{post.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.ReplyToTable,
			Columns: []string{post.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !pu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReactsIDs(); len(nodes) > 0 && !pu.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.AssetsTable,
			Columns: []string{post.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !pu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.AssetsTable,
			Columns: []string{post.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.AssetsTable,
			Columns: []string{post.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PostUpdateOne) SetDeletedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDeletedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PostUpdateOne) ClearDeletedAt() *PostUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetFirst sets the "first" field.
func (puo *PostUpdateOne) SetFirst(b bool) *PostUpdateOne {
	puo.mutation.SetFirst(b)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTitle(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// ClearTitle clears the value of the "title" field.
func (puo *PostUpdateOne) ClearTitle() *PostUpdateOne {
	puo.mutation.ClearTitle()
	return puo
}

// SetSlug sets the "slug" field.
func (puo *PostUpdateOne) SetSlug(s string) *PostUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableSlug(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetSlug(*s)
	}
	return puo
}

// ClearSlug clears the value of the "slug" field.
func (puo *PostUpdateOne) ClearSlug() *PostUpdateOne {
	puo.mutation.ClearSlug()
	return puo
}

// SetPinned sets the "pinned" field.
func (puo *PostUpdateOne) SetPinned(b bool) *PostUpdateOne {
	puo.mutation.SetPinned(b)
	return puo
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillablePinned(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetPinned(*b)
	}
	return puo
}

// SetRootPostID sets the "root_post_id" field.
func (puo *PostUpdateOne) SetRootPostID(x xid.ID) *PostUpdateOne {
	puo.mutation.SetRootPostID(x)
	return puo
}

// SetNillableRootPostID sets the "root_post_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableRootPostID(x *xid.ID) *PostUpdateOne {
	if x != nil {
		puo.SetRootPostID(*x)
	}
	return puo
}

// ClearRootPostID clears the value of the "root_post_id" field.
func (puo *PostUpdateOne) ClearRootPostID() *PostUpdateOne {
	puo.mutation.ClearRootPostID()
	return puo
}

// SetReplyToPostID sets the "reply_to_post_id" field.
func (puo *PostUpdateOne) SetReplyToPostID(x xid.ID) *PostUpdateOne {
	puo.mutation.SetReplyToPostID(x)
	return puo
}

// SetNillableReplyToPostID sets the "reply_to_post_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableReplyToPostID(x *xid.ID) *PostUpdateOne {
	if x != nil {
		puo.SetReplyToPostID(*x)
	}
	return puo
}

// ClearReplyToPostID clears the value of the "reply_to_post_id" field.
func (puo *PostUpdateOne) ClearReplyToPostID() *PostUpdateOne {
	puo.mutation.ClearReplyToPostID()
	return puo
}

// SetBody sets the "body" field.
func (puo *PostUpdateOne) SetBody(s string) *PostUpdateOne {
	puo.mutation.SetBody(s)
	return puo
}

// SetShort sets the "short" field.
func (puo *PostUpdateOne) SetShort(s string) *PostUpdateOne {
	puo.mutation.SetShort(s)
	return puo
}

// SetMetadata sets the "metadata" field.
func (puo *PostUpdateOne) SetMetadata(m map[string]interface{}) *PostUpdateOne {
	puo.mutation.SetMetadata(m)
	return puo
}

// ClearMetadata clears the value of the "metadata" field.
func (puo *PostUpdateOne) ClearMetadata() *PostUpdateOne {
	puo.mutation.ClearMetadata()
	return puo
}

// SetStatus sets the "status" field.
func (puo *PostUpdateOne) SetStatus(po post.Status) *PostUpdateOne {
	puo.mutation.SetStatus(po)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableStatus(po *post.Status) *PostUpdateOne {
	if po != nil {
		puo.SetStatus(*po)
	}
	return puo
}

// SetCategoryID sets the "category_id" field.
func (puo *PostUpdateOne) SetCategoryID(x xid.ID) *PostUpdateOne {
	puo.mutation.SetCategoryID(x)
	return puo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCategoryID(x *xid.ID) *PostUpdateOne {
	if x != nil {
		puo.SetCategoryID(*x)
	}
	return puo
}

// ClearCategoryID clears the value of the "category_id" field.
func (puo *PostUpdateOne) ClearCategoryID() *PostUpdateOne {
	puo.mutation.ClearCategoryID()
	return puo
}

// SetAuthorID sets the "author" edge to the Account entity by ID.
func (puo *PostUpdateOne) SetAuthorID(id xid.ID) *PostUpdateOne {
	puo.mutation.SetAuthorID(id)
	return puo
}

// SetAuthor sets the "author" edge to the Account entity.
func (puo *PostUpdateOne) SetAuthor(a *Account) *PostUpdateOne {
	return puo.SetAuthorID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (puo *PostUpdateOne) SetCategory(c *Category) *PostUpdateOne {
	return puo.SetCategoryID(c.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (puo *PostUpdateOne) AddTagIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.AddTagIDs(ids...)
	return puo
}

// AddTags adds the "tags" edges to the Tag entity.
func (puo *PostUpdateOne) AddTags(t ...*Tag) *PostUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTagIDs(ids...)
}

// SetRootID sets the "root" edge to the Post entity by ID.
func (puo *PostUpdateOne) SetRootID(id xid.ID) *PostUpdateOne {
	puo.mutation.SetRootID(id)
	return puo
}

// SetNillableRootID sets the "root" edge to the Post entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableRootID(id *xid.ID) *PostUpdateOne {
	if id != nil {
		puo = puo.SetRootID(*id)
	}
	return puo
}

// SetRoot sets the "root" edge to the Post entity.
func (puo *PostUpdateOne) SetRoot(p *Post) *PostUpdateOne {
	return puo.SetRootID(p.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (puo *PostUpdateOne) AddPostIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.AddPostIDs(ids...)
	return puo
}

// AddPosts adds the "posts" edges to the Post entity.
func (puo *PostUpdateOne) AddPosts(p ...*Post) *PostUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPostIDs(ids...)
}

// SetReplyToID sets the "replyTo" edge to the Post entity by ID.
func (puo *PostUpdateOne) SetReplyToID(id xid.ID) *PostUpdateOne {
	puo.mutation.SetReplyToID(id)
	return puo
}

// SetNillableReplyToID sets the "replyTo" edge to the Post entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableReplyToID(id *xid.ID) *PostUpdateOne {
	if id != nil {
		puo = puo.SetReplyToID(*id)
	}
	return puo
}

// SetReplyTo sets the "replyTo" edge to the Post entity.
func (puo *PostUpdateOne) SetReplyTo(p *Post) *PostUpdateOne {
	return puo.SetReplyToID(p.ID)
}

// AddReplyIDs adds the "replies" edge to the Post entity by IDs.
func (puo *PostUpdateOne) AddReplyIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.AddReplyIDs(ids...)
	return puo
}

// AddReplies adds the "replies" edges to the Post entity.
func (puo *PostUpdateOne) AddReplies(p ...*Post) *PostUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddReplyIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (puo *PostUpdateOne) AddReactIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.AddReactIDs(ids...)
	return puo
}

// AddReacts adds the "reacts" edges to the React entity.
func (puo *PostUpdateOne) AddReacts(r ...*React) *PostUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReactIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (puo *PostUpdateOne) AddAssetIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddAssetIDs(ids...)
	return puo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (puo *PostUpdateOne) AddAssets(a ...*Asset) *PostUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAssetIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearAuthor clears the "author" edge to the Account entity.
func (puo *PostUpdateOne) ClearAuthor() *PostUpdateOne {
	puo.mutation.ClearAuthor()
	return puo
}

// ClearCategory clears the "category" edge to the Category entity.
func (puo *PostUpdateOne) ClearCategory() *PostUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (puo *PostUpdateOne) ClearTags() *PostUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (puo *PostUpdateOne) RemoveTagIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.RemoveTagIDs(ids...)
	return puo
}

// RemoveTags removes "tags" edges to Tag entities.
func (puo *PostUpdateOne) RemoveTags(t ...*Tag) *PostUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTagIDs(ids...)
}

// ClearRoot clears the "root" edge to the Post entity.
func (puo *PostUpdateOne) ClearRoot() *PostUpdateOne {
	puo.mutation.ClearRoot()
	return puo
}

// ClearPosts clears all "posts" edges to the Post entity.
func (puo *PostUpdateOne) ClearPosts() *PostUpdateOne {
	puo.mutation.ClearPosts()
	return puo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (puo *PostUpdateOne) RemovePostIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.RemovePostIDs(ids...)
	return puo
}

// RemovePosts removes "posts" edges to Post entities.
func (puo *PostUpdateOne) RemovePosts(p ...*Post) *PostUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePostIDs(ids...)
}

// ClearReplyTo clears the "replyTo" edge to the Post entity.
func (puo *PostUpdateOne) ClearReplyTo() *PostUpdateOne {
	puo.mutation.ClearReplyTo()
	return puo
}

// ClearReplies clears all "replies" edges to the Post entity.
func (puo *PostUpdateOne) ClearReplies() *PostUpdateOne {
	puo.mutation.ClearReplies()
	return puo
}

// RemoveReplyIDs removes the "replies" edge to Post entities by IDs.
func (puo *PostUpdateOne) RemoveReplyIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.RemoveReplyIDs(ids...)
	return puo
}

// RemoveReplies removes "replies" edges to Post entities.
func (puo *PostUpdateOne) RemoveReplies(p ...*Post) *PostUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveReplyIDs(ids...)
}

// ClearReacts clears all "reacts" edges to the React entity.
func (puo *PostUpdateOne) ClearReacts() *PostUpdateOne {
	puo.mutation.ClearReacts()
	return puo
}

// RemoveReactIDs removes the "reacts" edge to React entities by IDs.
func (puo *PostUpdateOne) RemoveReactIDs(ids ...xid.ID) *PostUpdateOne {
	puo.mutation.RemoveReactIDs(ids...)
	return puo
}

// RemoveReacts removes "reacts" edges to React entities.
func (puo *PostUpdateOne) RemoveReacts(r ...*React) *PostUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReactIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (puo *PostUpdateOne) ClearAssets() *PostUpdateOne {
	puo.mutation.ClearAssets()
	return puo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (puo *PostUpdateOne) RemoveAssetIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemoveAssetIDs(ids...)
	return puo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (puo *PostUpdateOne) RemoveAssets(a ...*Asset) *PostUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAssetIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks[*Post, PostMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Status(); ok {
		if err := post.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Post.status": %w`, err)}
		}
	}
	if _, ok := puo.mutation.AuthorID(); puo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Post.author"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(post.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(post.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.First(); ok {
		_spec.SetField(post.FieldFirst, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if puo.mutation.TitleCleared() {
		_spec.ClearField(post.FieldTitle, field.TypeString)
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.SetField(post.FieldSlug, field.TypeString, value)
	}
	if puo.mutation.SlugCleared() {
		_spec.ClearField(post.FieldSlug, field.TypeString)
	}
	if value, ok := puo.mutation.Pinned(); ok {
		_spec.SetField(post.FieldPinned, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Body(); ok {
		_spec.SetField(post.FieldBody, field.TypeString, value)
	}
	if value, ok := puo.mutation.Short(); ok {
		_spec.SetField(post.FieldShort, field.TypeString, value)
	}
	if value, ok := puo.mutation.Metadata(); ok {
		_spec.SetField(post.FieldMetadata, field.TypeJSON, value)
	}
	if puo.mutation.MetadataCleared() {
		_spec.ClearField(post.FieldMetadata, field.TypeJSON)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeEnum, value)
	}
	if puo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.AuthorTable,
			Columns: []string{post.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.AuthorTable,
			Columns: []string{post.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.CategoryTable,
			Columns: []string{post.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.CategoryTable,
			Columns: []string{post.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.RootTable,
			Columns: []string{post.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.RootTable,
			Columns: []string{post.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !puo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReplyToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.ReplyToTable,
			Columns: []string{post.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.ReplyToTable,
			Columns: []string{post.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !puo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReactsIDs(); len(nodes) > 0 && !puo.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.AssetsTable,
			Columns: []string{post.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !puo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.AssetsTable,
			Columns: []string{post.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.AssetsTable,
			Columns: []string{post.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
