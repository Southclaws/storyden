// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/accountroles"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/role"
	"github.com/rs/xid"
)

// AccountRolesQuery is the builder for querying AccountRoles entities.
type AccountRolesQuery struct {
	config
	ctx         *QueryContext
	order       []accountroles.OrderOption
	inters      []Interceptor
	predicates  []predicate.AccountRoles
	withAccount *AccountQuery
	withRole    *RoleQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountRolesQuery builder.
func (arq *AccountRolesQuery) Where(ps ...predicate.AccountRoles) *AccountRolesQuery {
	arq.predicates = append(arq.predicates, ps...)
	return arq
}

// Limit the number of records to be returned by this query.
func (arq *AccountRolesQuery) Limit(limit int) *AccountRolesQuery {
	arq.ctx.Limit = &limit
	return arq
}

// Offset to start from.
func (arq *AccountRolesQuery) Offset(offset int) *AccountRolesQuery {
	arq.ctx.Offset = &offset
	return arq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (arq *AccountRolesQuery) Unique(unique bool) *AccountRolesQuery {
	arq.ctx.Unique = &unique
	return arq
}

// Order specifies how the records should be ordered.
func (arq *AccountRolesQuery) Order(o ...accountroles.OrderOption) *AccountRolesQuery {
	arq.order = append(arq.order, o...)
	return arq
}

// QueryAccount chains the current query on the "account" edge.
func (arq *AccountRolesQuery) QueryAccount() *AccountQuery {
	query := (&AccountClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountroles.Table, accountroles.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountroles.AccountTable, accountroles.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRole chains the current query on the "role" edge.
func (arq *AccountRolesQuery) QueryRole() *RoleQuery {
	query := (&RoleClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountroles.Table, accountroles.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountroles.RoleTable, accountroles.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AccountRoles entity from the query.
// Returns a *NotFoundError when no AccountRoles was found.
func (arq *AccountRolesQuery) First(ctx context.Context) (*AccountRoles, error) {
	nodes, err := arq.Limit(1).All(setContextOp(ctx, arq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accountroles.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (arq *AccountRolesQuery) FirstX(ctx context.Context) *AccountRoles {
	node, err := arq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AccountRoles ID from the query.
// Returns a *NotFoundError when no AccountRoles ID was found.
func (arq *AccountRolesQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = arq.Limit(1).IDs(setContextOp(ctx, arq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accountroles.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (arq *AccountRolesQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := arq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AccountRoles entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AccountRoles entity is found.
// Returns a *NotFoundError when no AccountRoles entities are found.
func (arq *AccountRolesQuery) Only(ctx context.Context) (*AccountRoles, error) {
	nodes, err := arq.Limit(2).All(setContextOp(ctx, arq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accountroles.Label}
	default:
		return nil, &NotSingularError{accountroles.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (arq *AccountRolesQuery) OnlyX(ctx context.Context) *AccountRoles {
	node, err := arq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AccountRoles ID in the query.
// Returns a *NotSingularError when more than one AccountRoles ID is found.
// Returns a *NotFoundError when no entities are found.
func (arq *AccountRolesQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = arq.Limit(2).IDs(setContextOp(ctx, arq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accountroles.Label}
	default:
		err = &NotSingularError{accountroles.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (arq *AccountRolesQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := arq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountRolesSlice.
func (arq *AccountRolesQuery) All(ctx context.Context) ([]*AccountRoles, error) {
	ctx = setContextOp(ctx, arq.ctx, "All")
	if err := arq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AccountRoles, *AccountRolesQuery]()
	return withInterceptors[[]*AccountRoles](ctx, arq, qr, arq.inters)
}

// AllX is like All, but panics if an error occurs.
func (arq *AccountRolesQuery) AllX(ctx context.Context) []*AccountRoles {
	nodes, err := arq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AccountRoles IDs.
func (arq *AccountRolesQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if arq.ctx.Unique == nil && arq.path != nil {
		arq.Unique(true)
	}
	ctx = setContextOp(ctx, arq.ctx, "IDs")
	if err = arq.Select(accountroles.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (arq *AccountRolesQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := arq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (arq *AccountRolesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, arq.ctx, "Count")
	if err := arq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, arq, querierCount[*AccountRolesQuery](), arq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (arq *AccountRolesQuery) CountX(ctx context.Context) int {
	count, err := arq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (arq *AccountRolesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, arq.ctx, "Exist")
	switch _, err := arq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (arq *AccountRolesQuery) ExistX(ctx context.Context) bool {
	exist, err := arq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountRolesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (arq *AccountRolesQuery) Clone() *AccountRolesQuery {
	if arq == nil {
		return nil
	}
	return &AccountRolesQuery{
		config:      arq.config,
		ctx:         arq.ctx.Clone(),
		order:       append([]accountroles.OrderOption{}, arq.order...),
		inters:      append([]Interceptor{}, arq.inters...),
		predicates:  append([]predicate.AccountRoles{}, arq.predicates...),
		withAccount: arq.withAccount.Clone(),
		withRole:    arq.withRole.Clone(),
		// clone intermediate query.
		sql:  arq.sql.Clone(),
		path: arq.path,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AccountRolesQuery) WithAccount(opts ...func(*AccountQuery)) *AccountRolesQuery {
	query := (&AccountClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withAccount = query
	return arq
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AccountRolesQuery) WithRole(opts ...func(*RoleQuery)) *AccountRolesQuery {
	query := (&RoleClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withRole = query
	return arq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AccountRoles.Query().
//		GroupBy(accountroles.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (arq *AccountRolesQuery) GroupBy(field string, fields ...string) *AccountRolesGroupBy {
	arq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AccountRolesGroupBy{build: arq}
	grbuild.flds = &arq.ctx.Fields
	grbuild.label = accountroles.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AccountRoles.Query().
//		Select(accountroles.FieldCreatedAt).
//		Scan(ctx, &v)
func (arq *AccountRolesQuery) Select(fields ...string) *AccountRolesSelect {
	arq.ctx.Fields = append(arq.ctx.Fields, fields...)
	sbuild := &AccountRolesSelect{AccountRolesQuery: arq}
	sbuild.label = accountroles.Label
	sbuild.flds, sbuild.scan = &arq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AccountRolesSelect configured with the given aggregations.
func (arq *AccountRolesQuery) Aggregate(fns ...AggregateFunc) *AccountRolesSelect {
	return arq.Select().Aggregate(fns...)
}

func (arq *AccountRolesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range arq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, arq); err != nil {
				return err
			}
		}
	}
	for _, f := range arq.ctx.Fields {
		if !accountroles.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if arq.path != nil {
		prev, err := arq.path(ctx)
		if err != nil {
			return err
		}
		arq.sql = prev
	}
	return nil
}

func (arq *AccountRolesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AccountRoles, error) {
	var (
		nodes       = []*AccountRoles{}
		_spec       = arq.querySpec()
		loadedTypes = [2]bool{
			arq.withAccount != nil,
			arq.withRole != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AccountRoles).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AccountRoles{config: arq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(arq.modifiers) > 0 {
		_spec.Modifiers = arq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, arq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := arq.withAccount; query != nil {
		if err := arq.loadAccount(ctx, query, nodes, nil,
			func(n *AccountRoles, e *Account) { n.Edges.Account = e }); err != nil {
			return nil, err
		}
	}
	if query := arq.withRole; query != nil {
		if err := arq.loadRole(ctx, query, nodes, nil,
			func(n *AccountRoles, e *Role) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (arq *AccountRolesQuery) loadAccount(ctx context.Context, query *AccountQuery, nodes []*AccountRoles, init func(*AccountRoles), assign func(*AccountRoles, *Account)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*AccountRoles)
	for i := range nodes {
		fk := nodes[i].AccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(account.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (arq *AccountRolesQuery) loadRole(ctx context.Context, query *RoleQuery, nodes []*AccountRoles, init func(*AccountRoles), assign func(*AccountRoles, *Role)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*AccountRoles)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (arq *AccountRolesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := arq.querySpec()
	if len(arq.modifiers) > 0 {
		_spec.Modifiers = arq.modifiers
	}
	_spec.Node.Columns = arq.ctx.Fields
	if len(arq.ctx.Fields) > 0 {
		_spec.Unique = arq.ctx.Unique != nil && *arq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, arq.driver, _spec)
}

func (arq *AccountRolesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(accountroles.Table, accountroles.Columns, sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString))
	_spec.From = arq.sql
	if unique := arq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if arq.path != nil {
		_spec.Unique = true
	}
	if fields := arq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountroles.FieldID)
		for i := range fields {
			if fields[i] != accountroles.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if arq.withAccount != nil {
			_spec.Node.AddColumnOnce(accountroles.FieldAccountID)
		}
		if arq.withRole != nil {
			_spec.Node.AddColumnOnce(accountroles.FieldRoleID)
		}
	}
	if ps := arq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := arq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := arq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := arq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (arq *AccountRolesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(arq.driver.Dialect())
	t1 := builder.Table(accountroles.Table)
	columns := arq.ctx.Fields
	if len(columns) == 0 {
		columns = accountroles.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if arq.sql != nil {
		selector = arq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if arq.ctx.Unique != nil && *arq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range arq.modifiers {
		m(selector)
	}
	for _, p := range arq.predicates {
		p(selector)
	}
	for _, p := range arq.order {
		p(selector)
	}
	if offset := arq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := arq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (arq *AccountRolesQuery) Modify(modifiers ...func(s *sql.Selector)) *AccountRolesSelect {
	arq.modifiers = append(arq.modifiers, modifiers...)
	return arq.Select()
}

// AccountRolesGroupBy is the group-by builder for AccountRoles entities.
type AccountRolesGroupBy struct {
	selector
	build *AccountRolesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (argb *AccountRolesGroupBy) Aggregate(fns ...AggregateFunc) *AccountRolesGroupBy {
	argb.fns = append(argb.fns, fns...)
	return argb
}

// Scan applies the selector query and scans the result into the given value.
func (argb *AccountRolesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, argb.build.ctx, "GroupBy")
	if err := argb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountRolesQuery, *AccountRolesGroupBy](ctx, argb.build, argb, argb.build.inters, v)
}

func (argb *AccountRolesGroupBy) sqlScan(ctx context.Context, root *AccountRolesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(argb.fns))
	for _, fn := range argb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*argb.flds)+len(argb.fns))
		for _, f := range *argb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*argb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := argb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AccountRolesSelect is the builder for selecting fields of AccountRoles entities.
type AccountRolesSelect struct {
	*AccountRolesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ars *AccountRolesSelect) Aggregate(fns ...AggregateFunc) *AccountRolesSelect {
	ars.fns = append(ars.fns, fns...)
	return ars
}

// Scan applies the selector query and scans the result into the given value.
func (ars *AccountRolesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ars.ctx, "Select")
	if err := ars.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountRolesQuery, *AccountRolesSelect](ctx, ars.AccountRolesQuery, ars, ars.inters, v)
}

func (ars *AccountRolesSelect) sqlScan(ctx context.Context, root *AccountRolesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ars.fns))
	for _, fn := range ars.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ars.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ars *AccountRolesSelect) Modify(modifiers ...func(s *sql.Selector)) *AccountRolesSelect {
	ars.modifiers = append(ars.modifiers, modifiers...)
	return ars
}
