// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/cluster"
	"github.com/rs/xid"
)

// Cluster is the model entity for the Cluster schema.
type Cluster struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL *string `json:"image_url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ParentClusterID holds the value of the "parent_cluster_id" field.
	ParentClusterID xid.ID `json:"parent_cluster_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID xid.ID `json:"account_id,omitempty"`
	// Properties holds the value of the "properties" field.
	Properties any `json:"properties,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClusterQuery when eager-loading is set.
	Edges ClusterEdges `json:"edges"`
}

// ClusterEdges holds the relations/edges for other nodes in the graph.
type ClusterEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Account `json:"owner,omitempty"`
	// A many-to-many recursive self reference. The parent cluster, if any.
	Parent *Cluster `json:"parent,omitempty"`
	// Clusters holds the value of the clusters edge.
	Clusters []*Cluster `json:"clusters,omitempty"`
	// Items holds the value of the items edge.
	Items []*Item `json:"items,omitempty"`
	// Assets holds the value of the assets edge.
	Assets []*Asset `json:"assets,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClusterEdges) OwnerOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClusterEdges) ParentOrErr() (*Cluster, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cluster.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ClustersOrErr returns the Clusters value or an error if the edge
// was not loaded in eager-loading.
func (e ClusterEdges) ClustersOrErr() ([]*Cluster, error) {
	if e.loadedTypes[2] {
		return e.Clusters, nil
	}
	return nil, &NotLoadedError{edge: "clusters"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ClusterEdges) ItemsOrErr() ([]*Item, error) {
	if e.loadedTypes[3] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// AssetsOrErr returns the Assets value or an error if the edge
// was not loaded in eager-loading.
func (e ClusterEdges) AssetsOrErr() ([]*Asset, error) {
	if e.loadedTypes[4] {
		return e.Assets, nil
	}
	return nil, &NotLoadedError{edge: "assets"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ClusterEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[5] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cluster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cluster.FieldProperties:
			values[i] = new([]byte)
		case cluster.FieldName, cluster.FieldSlug, cluster.FieldImageURL, cluster.FieldDescription:
			values[i] = new(sql.NullString)
		case cluster.FieldCreatedAt, cluster.FieldUpdatedAt, cluster.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case cluster.FieldID, cluster.FieldParentClusterID, cluster.FieldAccountID:
			values[i] = new(xid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cluster", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cluster fields.
func (c *Cluster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cluster.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cluster.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cluster.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case cluster.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case cluster.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cluster.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				c.Slug = value.String
			}
		case cluster.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				c.ImageURL = new(string)
				*c.ImageURL = value.String
			}
		case cluster.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case cluster.FieldParentClusterID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_cluster_id", values[i])
			} else if value != nil {
				c.ParentClusterID = *value
			}
		case cluster.FieldAccountID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				c.AccountID = *value
			}
		case cluster.FieldProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Properties); err != nil {
					return fmt.Errorf("unmarshal field properties: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Cluster entity.
func (c *Cluster) QueryOwner() *AccountQuery {
	return NewClusterClient(c.config).QueryOwner(c)
}

// QueryParent queries the "parent" edge of the Cluster entity.
func (c *Cluster) QueryParent() *ClusterQuery {
	return NewClusterClient(c.config).QueryParent(c)
}

// QueryClusters queries the "clusters" edge of the Cluster entity.
func (c *Cluster) QueryClusters() *ClusterQuery {
	return NewClusterClient(c.config).QueryClusters(c)
}

// QueryItems queries the "items" edge of the Cluster entity.
func (c *Cluster) QueryItems() *ItemQuery {
	return NewClusterClient(c.config).QueryItems(c)
}

// QueryAssets queries the "assets" edge of the Cluster entity.
func (c *Cluster) QueryAssets() *AssetQuery {
	return NewClusterClient(c.config).QueryAssets(c)
}

// QueryTags queries the "tags" edge of the Cluster entity.
func (c *Cluster) QueryTags() *TagQuery {
	return NewClusterClient(c.config).QueryTags(c)
}

// Update returns a builder for updating this Cluster.
// Note that you need to call Cluster.Unwrap() before calling this method if this Cluster
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cluster) Update() *ClusterUpdateOne {
	return NewClusterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cluster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cluster) Unwrap() *Cluster {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cluster is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cluster) String() string {
	var builder strings.Builder
	builder.WriteString("Cluster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(c.Slug)
	builder.WriteString(", ")
	if v := c.ImageURL; v != nil {
		builder.WriteString("image_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("parent_cluster_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ParentClusterID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AccountID))
	builder.WriteString(", ")
	builder.WriteString("properties=")
	builder.WriteString(fmt.Sprintf("%v", c.Properties))
	builder.WriteByte(')')
	return builder.String()
}

// Clusters is a parsable slice of Cluster.
type Clusters []*Cluster
