// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/link"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/rs/xid"
)

// Node is the model entity for the Node schema.
type Node struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// IndexedAt holds the value of the "indexed_at" field.
	IndexedAt *time.Time `json:"indexed_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Content holds the value of the "content" field.
	Content *string `json:"content,omitempty"`
	// ParentNodeID holds the value of the "parent_node_id" field.
	ParentNodeID xid.ID `json:"parent_node_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID xid.ID `json:"account_id,omitempty"`
	// PrimaryAssetID holds the value of the "primary_asset_id" field.
	PrimaryAssetID *xid.ID `json:"primary_asset_id,omitempty"`
	// LinkID holds the value of the "link_id" field.
	LinkID xid.ID `json:"link_id,omitempty"`
	// Visibility holds the value of the "visibility" field.
	Visibility node.Visibility `json:"visibility,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodeQuery when eager-loading is set.
	Edges        NodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NodeEdges holds the relations/edges for other nodes in the graph.
type NodeEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Account `json:"owner,omitempty"`
	// A many-to-many recursive self reference. The parent node, if any.
	Parent *Node `json:"parent,omitempty"`
	// Nodes holds the value of the nodes edge.
	Nodes []*Node `json:"nodes,omitempty"`
	// PrimaryImage holds the value of the primary_image edge.
	PrimaryImage *Asset `json:"primary_image,omitempty"`
	// Assets holds the value of the assets edge.
	Assets []*Asset `json:"assets,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Link holds the value of the link edge.
	Link *Link `json:"link,omitempty"`
	// ContentLinks holds the value of the content_links edge.
	ContentLinks []*Link `json:"content_links,omitempty"`
	// Collections holds the value of the collections edge.
	Collections []*Collection `json:"collections,omitempty"`
	// NodeTags holds the value of the node_tags edge.
	NodeTags []*TagNode `json:"node_tags,omitempty"`
	// CollectionNodes holds the value of the collection_nodes edge.
	CollectionNodes []*CollectionNode `json:"collection_nodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) OwnerOrErr() (*Account, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: account.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) ParentOrErr() (*Node, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// NodesOrErr returns the Nodes value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) NodesOrErr() ([]*Node, error) {
	if e.loadedTypes[2] {
		return e.Nodes, nil
	}
	return nil, &NotLoadedError{edge: "nodes"}
}

// PrimaryImageOrErr returns the PrimaryImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) PrimaryImageOrErr() (*Asset, error) {
	if e.PrimaryImage != nil {
		return e.PrimaryImage, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "primary_image"}
}

// AssetsOrErr returns the Assets value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) AssetsOrErr() ([]*Asset, error) {
	if e.loadedTypes[4] {
		return e.Assets, nil
	}
	return nil, &NotLoadedError{edge: "assets"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[5] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// LinkOrErr returns the Link value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) LinkOrErr() (*Link, error) {
	if e.Link != nil {
		return e.Link, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: link.Label}
	}
	return nil, &NotLoadedError{edge: "link"}
}

// ContentLinksOrErr returns the ContentLinks value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) ContentLinksOrErr() ([]*Link, error) {
	if e.loadedTypes[7] {
		return e.ContentLinks, nil
	}
	return nil, &NotLoadedError{edge: "content_links"}
}

// CollectionsOrErr returns the Collections value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) CollectionsOrErr() ([]*Collection, error) {
	if e.loadedTypes[8] {
		return e.Collections, nil
	}
	return nil, &NotLoadedError{edge: "collections"}
}

// NodeTagsOrErr returns the NodeTags value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) NodeTagsOrErr() ([]*TagNode, error) {
	if e.loadedTypes[9] {
		return e.NodeTags, nil
	}
	return nil, &NotLoadedError{edge: "node_tags"}
}

// CollectionNodesOrErr returns the CollectionNodes value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) CollectionNodesOrErr() ([]*CollectionNode, error) {
	if e.loadedTypes[10] {
		return e.CollectionNodes, nil
	}
	return nil, &NotLoadedError{edge: "collection_nodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Node) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case node.FieldPrimaryAssetID:
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case node.FieldMetadata:
			values[i] = new([]byte)
		case node.FieldName, node.FieldSlug, node.FieldDescription, node.FieldContent, node.FieldVisibility:
			values[i] = new(sql.NullString)
		case node.FieldCreatedAt, node.FieldUpdatedAt, node.FieldDeletedAt, node.FieldIndexedAt:
			values[i] = new(sql.NullTime)
		case node.FieldID, node.FieldParentNodeID, node.FieldAccountID, node.FieldLinkID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Node fields.
func (n *Node) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case node.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case node.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case node.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case node.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = new(time.Time)
				*n.DeletedAt = value.Time
			}
		case node.FieldIndexedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field indexed_at", values[i])
			} else if value.Valid {
				n.IndexedAt = new(time.Time)
				*n.IndexedAt = value.Time
			}
		case node.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case node.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				n.Slug = value.String
			}
		case node.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				n.Description = new(string)
				*n.Description = value.String
			}
		case node.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				n.Content = new(string)
				*n.Content = value.String
			}
		case node.FieldParentNodeID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_node_id", values[i])
			} else if value != nil {
				n.ParentNodeID = *value
			}
		case node.FieldAccountID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				n.AccountID = *value
			}
		case node.FieldPrimaryAssetID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field primary_asset_id", values[i])
			} else if value.Valid {
				n.PrimaryAssetID = new(xid.ID)
				*n.PrimaryAssetID = *value.S.(*xid.ID)
			}
		case node.FieldLinkID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field link_id", values[i])
			} else if value != nil {
				n.LinkID = *value
			}
		case node.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				n.Visibility = node.Visibility(value.String)
			}
		case node.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Node.
// This includes values selected through modifiers, order, etc.
func (n *Node) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Node entity.
func (n *Node) QueryOwner() *AccountQuery {
	return NewNodeClient(n.config).QueryOwner(n)
}

// QueryParent queries the "parent" edge of the Node entity.
func (n *Node) QueryParent() *NodeQuery {
	return NewNodeClient(n.config).QueryParent(n)
}

// QueryNodes queries the "nodes" edge of the Node entity.
func (n *Node) QueryNodes() *NodeQuery {
	return NewNodeClient(n.config).QueryNodes(n)
}

// QueryPrimaryImage queries the "primary_image" edge of the Node entity.
func (n *Node) QueryPrimaryImage() *AssetQuery {
	return NewNodeClient(n.config).QueryPrimaryImage(n)
}

// QueryAssets queries the "assets" edge of the Node entity.
func (n *Node) QueryAssets() *AssetQuery {
	return NewNodeClient(n.config).QueryAssets(n)
}

// QueryTags queries the "tags" edge of the Node entity.
func (n *Node) QueryTags() *TagQuery {
	return NewNodeClient(n.config).QueryTags(n)
}

// QueryLink queries the "link" edge of the Node entity.
func (n *Node) QueryLink() *LinkQuery {
	return NewNodeClient(n.config).QueryLink(n)
}

// QueryContentLinks queries the "content_links" edge of the Node entity.
func (n *Node) QueryContentLinks() *LinkQuery {
	return NewNodeClient(n.config).QueryContentLinks(n)
}

// QueryCollections queries the "collections" edge of the Node entity.
func (n *Node) QueryCollections() *CollectionQuery {
	return NewNodeClient(n.config).QueryCollections(n)
}

// QueryNodeTags queries the "node_tags" edge of the Node entity.
func (n *Node) QueryNodeTags() *TagNodeQuery {
	return NewNodeClient(n.config).QueryNodeTags(n)
}

// QueryCollectionNodes queries the "collection_nodes" edge of the Node entity.
func (n *Node) QueryCollectionNodes() *CollectionNodeQuery {
	return NewNodeClient(n.config).QueryCollectionNodes(n)
}

// Update returns a builder for updating this Node.
// Note that you need to call Node.Unwrap() before calling this method if this Node
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Node) Update() *NodeUpdateOne {
	return NewNodeClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Node entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Node) Unwrap() *Node {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Node is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Node) String() string {
	var builder strings.Builder
	builder.WriteString("Node(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := n.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := n.IndexedAt; v != nil {
		builder.WriteString("indexed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(n.Slug)
	builder.WriteString(", ")
	if v := n.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := n.Content; v != nil {
		builder.WriteString("content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("parent_node_id=")
	builder.WriteString(fmt.Sprintf("%v", n.ParentNodeID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", n.AccountID))
	builder.WriteString(", ")
	if v := n.PrimaryAssetID; v != nil {
		builder.WriteString("primary_asset_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("link_id=")
	builder.WriteString(fmt.Sprintf("%v", n.LinkID))
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(fmt.Sprintf("%v", n.Visibility))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", n.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Nodes is a parsable slice of Node.
type Nodes []*Node
