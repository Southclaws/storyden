// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagnode"
	"github.com/Southclaws/storyden/internal/ent/tagpost"
	"github.com/rs/xid"
)

// TagUpdate is the builder for updating Tag entities.
type TagUpdate struct {
	config
	hooks     []Hook
	mutation  *TagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TagUpdate builder.
func (tu *TagUpdate) Where(ps ...predicate.Tag) *TagUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (tu *TagUpdate) AddPostIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.AddPostIDs(ids...)
	return tu
}

// AddPosts adds the "posts" edges to the Post entity.
func (tu *TagUpdate) AddPosts(p ...*Post) *TagUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPostIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (tu *TagUpdate) AddNodeIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.AddNodeIDs(ids...)
	return tu
}

// AddNodes adds the "nodes" edges to the Node entity.
func (tu *TagUpdate) AddNodes(n ...*Node) *TagUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return tu.AddNodeIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (tu *TagUpdate) AddAccountIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.AddAccountIDs(ids...)
	return tu
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (tu *TagUpdate) AddAccounts(a ...*Account) *TagUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddAccountIDs(ids...)
}

// AddPostTagIDs adds the "post_tags" edge to the TagPost entity by IDs.
func (tu *TagUpdate) AddPostTagIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.AddPostTagIDs(ids...)
	return tu
}

// AddPostTags adds the "post_tags" edges to the TagPost entity.
func (tu *TagUpdate) AddPostTags(t ...*TagPost) *TagUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddPostTagIDs(ids...)
}

// AddNodeTagIDs adds the "node_tags" edge to the TagNode entity by IDs.
func (tu *TagUpdate) AddNodeTagIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.AddNodeTagIDs(ids...)
	return tu
}

// AddNodeTags adds the "node_tags" edges to the TagNode entity.
func (tu *TagUpdate) AddNodeTags(t ...*TagNode) *TagUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddNodeTagIDs(ids...)
}

// Mutation returns the TagMutation object of the builder.
func (tu *TagUpdate) Mutation() *TagMutation {
	return tu.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (tu *TagUpdate) ClearPosts() *TagUpdate {
	tu.mutation.ClearPosts()
	return tu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (tu *TagUpdate) RemovePostIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.RemovePostIDs(ids...)
	return tu
}

// RemovePosts removes "posts" edges to Post entities.
func (tu *TagUpdate) RemovePosts(p ...*Post) *TagUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePostIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (tu *TagUpdate) ClearNodes() *TagUpdate {
	tu.mutation.ClearNodes()
	return tu
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (tu *TagUpdate) RemoveNodeIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.RemoveNodeIDs(ids...)
	return tu
}

// RemoveNodes removes "nodes" edges to Node entities.
func (tu *TagUpdate) RemoveNodes(n ...*Node) *TagUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return tu.RemoveNodeIDs(ids...)
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (tu *TagUpdate) ClearAccounts() *TagUpdate {
	tu.mutation.ClearAccounts()
	return tu
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (tu *TagUpdate) RemoveAccountIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.RemoveAccountIDs(ids...)
	return tu
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (tu *TagUpdate) RemoveAccounts(a ...*Account) *TagUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveAccountIDs(ids...)
}

// ClearPostTags clears all "post_tags" edges to the TagPost entity.
func (tu *TagUpdate) ClearPostTags() *TagUpdate {
	tu.mutation.ClearPostTags()
	return tu
}

// RemovePostTagIDs removes the "post_tags" edge to TagPost entities by IDs.
func (tu *TagUpdate) RemovePostTagIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.RemovePostTagIDs(ids...)
	return tu
}

// RemovePostTags removes "post_tags" edges to TagPost entities.
func (tu *TagUpdate) RemovePostTags(t ...*TagPost) *TagUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemovePostTagIDs(ids...)
}

// ClearNodeTags clears all "node_tags" edges to the TagNode entity.
func (tu *TagUpdate) ClearNodeTags() *TagUpdate {
	tu.mutation.ClearNodeTags()
	return tu
}

// RemoveNodeTagIDs removes the "node_tags" edge to TagNode entities by IDs.
func (tu *TagUpdate) RemoveNodeTagIDs(ids ...xid.ID) *TagUpdate {
	tu.mutation.RemoveNodeTagIDs(ids...)
	return tu
}

// RemoveNodeTags removes "node_tags" edges to TagNode entities.
func (tu *TagUpdate) RemoveNodeTags(t ...*TagNode) *TagUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveNodeTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TagUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TagUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TagUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TagUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tag.Table, tag.Columns, sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.PostsTable,
			Columns: tag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		createE := &TagPostCreate{config: tu.config, mutation: newTagPostMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !tu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.PostsTable,
			Columns: tag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagPostCreate{config: tu.config, mutation: newTagPostMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.PostsTable,
			Columns: tag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagPostCreate{config: tu.config, mutation: newTagPostMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.NodesTable,
			Columns: tag.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		createE := &TagNodeCreate{config: tu.config, mutation: newTagNodeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedNodesIDs(); len(nodes) > 0 && !tu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.NodesTable,
			Columns: tag.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagNodeCreate{config: tu.config, mutation: newTagNodeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.NodesTable,
			Columns: tag.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagNodeCreate{config: tu.config, mutation: newTagNodeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.AccountsTable,
			Columns: tag.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !tu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.AccountsTable,
			Columns: tag.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.AccountsTable,
			Columns: tag.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PostTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.PostTagsTable,
			Columns: []string{tag.PostTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPostTagsIDs(); len(nodes) > 0 && !tu.mutation.PostTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.PostTagsTable,
			Columns: []string{tag.PostTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PostTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.PostTagsTable,
			Columns: []string{tag.PostTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.NodeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.NodeTagsTable,
			Columns: []string{tag.NodeTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedNodeTagsIDs(); len(nodes) > 0 && !tu.mutation.NodeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.NodeTagsTable,
			Columns: []string{tag.NodeTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.NodeTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.NodeTagsTable,
			Columns: []string{tag.NodeTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TagUpdateOne is the builder for updating a single Tag entity.
type TagUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (tuo *TagUpdateOne) AddPostIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.AddPostIDs(ids...)
	return tuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (tuo *TagUpdateOne) AddPosts(p ...*Post) *TagUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPostIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (tuo *TagUpdateOne) AddNodeIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.AddNodeIDs(ids...)
	return tuo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (tuo *TagUpdateOne) AddNodes(n ...*Node) *TagUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return tuo.AddNodeIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (tuo *TagUpdateOne) AddAccountIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.AddAccountIDs(ids...)
	return tuo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (tuo *TagUpdateOne) AddAccounts(a ...*Account) *TagUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddAccountIDs(ids...)
}

// AddPostTagIDs adds the "post_tags" edge to the TagPost entity by IDs.
func (tuo *TagUpdateOne) AddPostTagIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.AddPostTagIDs(ids...)
	return tuo
}

// AddPostTags adds the "post_tags" edges to the TagPost entity.
func (tuo *TagUpdateOne) AddPostTags(t ...*TagPost) *TagUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddPostTagIDs(ids...)
}

// AddNodeTagIDs adds the "node_tags" edge to the TagNode entity by IDs.
func (tuo *TagUpdateOne) AddNodeTagIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.AddNodeTagIDs(ids...)
	return tuo
}

// AddNodeTags adds the "node_tags" edges to the TagNode entity.
func (tuo *TagUpdateOne) AddNodeTags(t ...*TagNode) *TagUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddNodeTagIDs(ids...)
}

// Mutation returns the TagMutation object of the builder.
func (tuo *TagUpdateOne) Mutation() *TagMutation {
	return tuo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (tuo *TagUpdateOne) ClearPosts() *TagUpdateOne {
	tuo.mutation.ClearPosts()
	return tuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (tuo *TagUpdateOne) RemovePostIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.RemovePostIDs(ids...)
	return tuo
}

// RemovePosts removes "posts" edges to Post entities.
func (tuo *TagUpdateOne) RemovePosts(p ...*Post) *TagUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePostIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (tuo *TagUpdateOne) ClearNodes() *TagUpdateOne {
	tuo.mutation.ClearNodes()
	return tuo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (tuo *TagUpdateOne) RemoveNodeIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.RemoveNodeIDs(ids...)
	return tuo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (tuo *TagUpdateOne) RemoveNodes(n ...*Node) *TagUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return tuo.RemoveNodeIDs(ids...)
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (tuo *TagUpdateOne) ClearAccounts() *TagUpdateOne {
	tuo.mutation.ClearAccounts()
	return tuo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (tuo *TagUpdateOne) RemoveAccountIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.RemoveAccountIDs(ids...)
	return tuo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (tuo *TagUpdateOne) RemoveAccounts(a ...*Account) *TagUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveAccountIDs(ids...)
}

// ClearPostTags clears all "post_tags" edges to the TagPost entity.
func (tuo *TagUpdateOne) ClearPostTags() *TagUpdateOne {
	tuo.mutation.ClearPostTags()
	return tuo
}

// RemovePostTagIDs removes the "post_tags" edge to TagPost entities by IDs.
func (tuo *TagUpdateOne) RemovePostTagIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.RemovePostTagIDs(ids...)
	return tuo
}

// RemovePostTags removes "post_tags" edges to TagPost entities.
func (tuo *TagUpdateOne) RemovePostTags(t ...*TagPost) *TagUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemovePostTagIDs(ids...)
}

// ClearNodeTags clears all "node_tags" edges to the TagNode entity.
func (tuo *TagUpdateOne) ClearNodeTags() *TagUpdateOne {
	tuo.mutation.ClearNodeTags()
	return tuo
}

// RemoveNodeTagIDs removes the "node_tags" edge to TagNode entities by IDs.
func (tuo *TagUpdateOne) RemoveNodeTagIDs(ids ...xid.ID) *TagUpdateOne {
	tuo.mutation.RemoveNodeTagIDs(ids...)
	return tuo
}

// RemoveNodeTags removes "node_tags" edges to TagNode entities.
func (tuo *TagUpdateOne) RemoveNodeTags(t ...*TagNode) *TagUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveNodeTagIDs(ids...)
}

// Where appends a list predicates to the TagUpdate builder.
func (tuo *TagUpdateOne) Where(ps ...predicate.Tag) *TagUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TagUpdateOne) Select(field string, fields ...string) *TagUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tag entity.
func (tuo *TagUpdateOne) Save(ctx context.Context) (*Tag, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TagUpdateOne) SaveX(ctx context.Context) *Tag {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TagUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TagUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TagUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TagUpdateOne) sqlSave(ctx context.Context) (_node *Tag, err error) {
	_spec := sqlgraph.NewUpdateSpec(tag.Table, tag.Columns, sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tag.FieldID)
		for _, f := range fields {
			if !tag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.PostsTable,
			Columns: tag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		createE := &TagPostCreate{config: tuo.config, mutation: newTagPostMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !tuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.PostsTable,
			Columns: tag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagPostCreate{config: tuo.config, mutation: newTagPostMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.PostsTable,
			Columns: tag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagPostCreate{config: tuo.config, mutation: newTagPostMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.NodesTable,
			Columns: tag.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		createE := &TagNodeCreate{config: tuo.config, mutation: newTagNodeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !tuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.NodesTable,
			Columns: tag.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagNodeCreate{config: tuo.config, mutation: newTagNodeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.NodesTable,
			Columns: tag.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagNodeCreate{config: tuo.config, mutation: newTagNodeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.AccountsTable,
			Columns: tag.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !tuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.AccountsTable,
			Columns: tag.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.AccountsTable,
			Columns: tag.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PostTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.PostTagsTable,
			Columns: []string{tag.PostTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPostTagsIDs(); len(nodes) > 0 && !tuo.mutation.PostTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.PostTagsTable,
			Columns: []string{tag.PostTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PostTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.PostTagsTable,
			Columns: []string{tag.PostTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.NodeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.NodeTagsTable,
			Columns: []string{tag.NodeTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedNodeTagsIDs(); len(nodes) > 0 && !tuo.mutation.NodeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.NodeTagsTable,
			Columns: []string{tag.NodeTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.NodeTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.NodeTagsTable,
			Columns: []string{tag.NodeTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Tag{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
