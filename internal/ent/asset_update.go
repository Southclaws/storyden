// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/event"
	"github.com/Southclaws/storyden/internal/ent/link"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssetUpdate) SetUpdatedAt(t time.Time) *AssetUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetFilename sets the "filename" field.
func (au *AssetUpdate) SetFilename(s string) *AssetUpdate {
	au.mutation.SetFilename(s)
	return au
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (au *AssetUpdate) SetNillableFilename(s *string) *AssetUpdate {
	if s != nil {
		au.SetFilename(*s)
	}
	return au
}

// SetSize sets the "size" field.
func (au *AssetUpdate) SetSize(i int) *AssetUpdate {
	au.mutation.ResetSize()
	au.mutation.SetSize(i)
	return au
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (au *AssetUpdate) SetNillableSize(i *int) *AssetUpdate {
	if i != nil {
		au.SetSize(*i)
	}
	return au
}

// AddSize adds i to the "size" field.
func (au *AssetUpdate) AddSize(i int) *AssetUpdate {
	au.mutation.AddSize(i)
	return au
}

// SetMimeType sets the "mime_type" field.
func (au *AssetUpdate) SetMimeType(s string) *AssetUpdate {
	au.mutation.SetMimeType(s)
	return au
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (au *AssetUpdate) SetNillableMimeType(s *string) *AssetUpdate {
	if s != nil {
		au.SetMimeType(*s)
	}
	return au
}

// SetMetadata sets the "metadata" field.
func (au *AssetUpdate) SetMetadata(m map[string]interface{}) *AssetUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *AssetUpdate) ClearMetadata() *AssetUpdate {
	au.mutation.ClearMetadata()
	return au
}

// SetAccountID sets the "account_id" field.
func (au *AssetUpdate) SetAccountID(x xid.ID) *AssetUpdate {
	au.mutation.SetAccountID(x)
	return au
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableAccountID(x *xid.ID) *AssetUpdate {
	if x != nil {
		au.SetAccountID(*x)
	}
	return au
}

// SetParentAssetID sets the "parent_asset_id" field.
func (au *AssetUpdate) SetParentAssetID(x xid.ID) *AssetUpdate {
	au.mutation.SetParentAssetID(x)
	return au
}

// SetNillableParentAssetID sets the "parent_asset_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableParentAssetID(x *xid.ID) *AssetUpdate {
	if x != nil {
		au.SetParentAssetID(*x)
	}
	return au
}

// ClearParentAssetID clears the value of the "parent_asset_id" field.
func (au *AssetUpdate) ClearParentAssetID() *AssetUpdate {
	au.mutation.ClearParentAssetID()
	return au
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (au *AssetUpdate) AddPostIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.AddPostIDs(ids...)
	return au
}

// AddPosts adds the "posts" edges to the Post entity.
func (au *AssetUpdate) AddPosts(p ...*Post) *AssetUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPostIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (au *AssetUpdate) AddNodeIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.AddNodeIDs(ids...)
	return au
}

// AddNodes adds the "nodes" edges to the Node entity.
func (au *AssetUpdate) AddNodes(n ...*Node) *AssetUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNodeIDs(ids...)
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (au *AssetUpdate) AddLinkIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.AddLinkIDs(ids...)
	return au
}

// AddLinks adds the "links" edges to the Link entity.
func (au *AssetUpdate) AddLinks(l ...*Link) *AssetUpdate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.AddLinkIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the Account entity by ID.
func (au *AssetUpdate) SetOwnerID(id xid.ID) *AssetUpdate {
	au.mutation.SetOwnerID(id)
	return au
}

// SetOwner sets the "owner" edge to the Account entity.
func (au *AssetUpdate) SetOwner(a *Account) *AssetUpdate {
	return au.SetOwnerID(a.ID)
}

// SetParentID sets the "parent" edge to the Asset entity by ID.
func (au *AssetUpdate) SetParentID(id xid.ID) *AssetUpdate {
	au.mutation.SetParentID(id)
	return au
}

// SetNillableParentID sets the "parent" edge to the Asset entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillableParentID(id *xid.ID) *AssetUpdate {
	if id != nil {
		au = au.SetParentID(*id)
	}
	return au
}

// SetParent sets the "parent" edge to the Asset entity.
func (au *AssetUpdate) SetParent(a *Asset) *AssetUpdate {
	return au.SetParentID(a.ID)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (au *AssetUpdate) AddAssetIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.AddAssetIDs(ids...)
	return au
}

// AddAssets adds the "assets" edges to the Asset entity.
func (au *AssetUpdate) AddAssets(a ...*Asset) *AssetUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAssetIDs(ids...)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (au *AssetUpdate) AddEventIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.AddEventIDs(ids...)
	return au
}

// AddEvent adds the "event" edges to the Event entity.
func (au *AssetUpdate) AddEvent(e ...*Event) *AssetUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (au *AssetUpdate) ClearPosts() *AssetUpdate {
	au.mutation.ClearPosts()
	return au
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (au *AssetUpdate) RemovePostIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.RemovePostIDs(ids...)
	return au
}

// RemovePosts removes "posts" edges to Post entities.
func (au *AssetUpdate) RemovePosts(p ...*Post) *AssetUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePostIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (au *AssetUpdate) ClearNodes() *AssetUpdate {
	au.mutation.ClearNodes()
	return au
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (au *AssetUpdate) RemoveNodeIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.RemoveNodeIDs(ids...)
	return au
}

// RemoveNodes removes "nodes" edges to Node entities.
func (au *AssetUpdate) RemoveNodes(n ...*Node) *AssetUpdate {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNodeIDs(ids...)
}

// ClearLinks clears all "links" edges to the Link entity.
func (au *AssetUpdate) ClearLinks() *AssetUpdate {
	au.mutation.ClearLinks()
	return au
}

// RemoveLinkIDs removes the "links" edge to Link entities by IDs.
func (au *AssetUpdate) RemoveLinkIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.RemoveLinkIDs(ids...)
	return au
}

// RemoveLinks removes "links" edges to Link entities.
func (au *AssetUpdate) RemoveLinks(l ...*Link) *AssetUpdate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.RemoveLinkIDs(ids...)
}

// ClearOwner clears the "owner" edge to the Account entity.
func (au *AssetUpdate) ClearOwner() *AssetUpdate {
	au.mutation.ClearOwner()
	return au
}

// ClearParent clears the "parent" edge to the Asset entity.
func (au *AssetUpdate) ClearParent() *AssetUpdate {
	au.mutation.ClearParent()
	return au
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (au *AssetUpdate) ClearAssets() *AssetUpdate {
	au.mutation.ClearAssets()
	return au
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (au *AssetUpdate) RemoveAssetIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.RemoveAssetIDs(ids...)
	return au
}

// RemoveAssets removes "assets" edges to Asset entities.
func (au *AssetUpdate) RemoveAssets(a ...*Asset) *AssetUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAssetIDs(ids...)
}

// ClearEvent clears all "event" edges to the Event entity.
func (au *AssetUpdate) ClearEvent() *AssetUpdate {
	au.mutation.ClearEvent()
	return au
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (au *AssetUpdate) RemoveEventIDs(ids ...xid.ID) *AssetUpdate {
	au.mutation.RemoveEventIDs(ids...)
	return au
}

// RemoveEvent removes "event" edges to Event entities.
func (au *AssetUpdate) RemoveEvent(e ...*Event) *AssetUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssetUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := asset.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AssetUpdate) check() error {
	if au.mutation.OwnerCleared() && len(au.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Asset.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AssetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Filename(); ok {
		_spec.SetField(asset.FieldFilename, field.TypeString, value)
	}
	if value, ok := au.mutation.Size(); ok {
		_spec.SetField(asset.FieldSize, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedSize(); ok {
		_spec.AddField(asset.FieldSize, field.TypeInt, value)
	}
	if value, ok := au.mutation.MimeType(); ok {
		_spec.SetField(asset.FieldMimeType, field.TypeString, value)
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(asset.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(asset.FieldMetadata, field.TypeJSON)
	}
	if au.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.PostsTable,
			Columns: asset.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPostsIDs(); len(nodes) > 0 && !au.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.PostsTable,
			Columns: asset.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.PostsTable,
			Columns: asset.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.NodesTable,
			Columns: asset.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNodesIDs(); len(nodes) > 0 && !au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.NodesTable,
			Columns: asset.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.NodesTable,
			Columns: asset.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.LinksTable,
			Columns: asset.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLinksIDs(); len(nodes) > 0 && !au.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.LinksTable,
			Columns: asset.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.LinksTable,
			Columns: asset.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetsTable,
			Columns: []string{asset.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !au.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetsTable,
			Columns: []string{asset.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetsTable,
			Columns: []string{asset.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EventTable,
			Columns: []string{asset.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEventIDs(); len(nodes) > 0 && !au.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EventTable,
			Columns: []string{asset.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EventTable,
			Columns: []string{asset.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssetUpdateOne) SetUpdatedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetFilename sets the "filename" field.
func (auo *AssetUpdateOne) SetFilename(s string) *AssetUpdateOne {
	auo.mutation.SetFilename(s)
	return auo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableFilename(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetFilename(*s)
	}
	return auo
}

// SetSize sets the "size" field.
func (auo *AssetUpdateOne) SetSize(i int) *AssetUpdateOne {
	auo.mutation.ResetSize()
	auo.mutation.SetSize(i)
	return auo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableSize(i *int) *AssetUpdateOne {
	if i != nil {
		auo.SetSize(*i)
	}
	return auo
}

// AddSize adds i to the "size" field.
func (auo *AssetUpdateOne) AddSize(i int) *AssetUpdateOne {
	auo.mutation.AddSize(i)
	return auo
}

// SetMimeType sets the "mime_type" field.
func (auo *AssetUpdateOne) SetMimeType(s string) *AssetUpdateOne {
	auo.mutation.SetMimeType(s)
	return auo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableMimeType(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetMimeType(*s)
	}
	return auo
}

// SetMetadata sets the "metadata" field.
func (auo *AssetUpdateOne) SetMetadata(m map[string]interface{}) *AssetUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *AssetUpdateOne) ClearMetadata() *AssetUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// SetAccountID sets the "account_id" field.
func (auo *AssetUpdateOne) SetAccountID(x xid.ID) *AssetUpdateOne {
	auo.mutation.SetAccountID(x)
	return auo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableAccountID(x *xid.ID) *AssetUpdateOne {
	if x != nil {
		auo.SetAccountID(*x)
	}
	return auo
}

// SetParentAssetID sets the "parent_asset_id" field.
func (auo *AssetUpdateOne) SetParentAssetID(x xid.ID) *AssetUpdateOne {
	auo.mutation.SetParentAssetID(x)
	return auo
}

// SetNillableParentAssetID sets the "parent_asset_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableParentAssetID(x *xid.ID) *AssetUpdateOne {
	if x != nil {
		auo.SetParentAssetID(*x)
	}
	return auo
}

// ClearParentAssetID clears the value of the "parent_asset_id" field.
func (auo *AssetUpdateOne) ClearParentAssetID() *AssetUpdateOne {
	auo.mutation.ClearParentAssetID()
	return auo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (auo *AssetUpdateOne) AddPostIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.AddPostIDs(ids...)
	return auo
}

// AddPosts adds the "posts" edges to the Post entity.
func (auo *AssetUpdateOne) AddPosts(p ...*Post) *AssetUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPostIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (auo *AssetUpdateOne) AddNodeIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.AddNodeIDs(ids...)
	return auo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (auo *AssetUpdateOne) AddNodes(n ...*Node) *AssetUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNodeIDs(ids...)
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (auo *AssetUpdateOne) AddLinkIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.AddLinkIDs(ids...)
	return auo
}

// AddLinks adds the "links" edges to the Link entity.
func (auo *AssetUpdateOne) AddLinks(l ...*Link) *AssetUpdateOne {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.AddLinkIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the Account entity by ID.
func (auo *AssetUpdateOne) SetOwnerID(id xid.ID) *AssetUpdateOne {
	auo.mutation.SetOwnerID(id)
	return auo
}

// SetOwner sets the "owner" edge to the Account entity.
func (auo *AssetUpdateOne) SetOwner(a *Account) *AssetUpdateOne {
	return auo.SetOwnerID(a.ID)
}

// SetParentID sets the "parent" edge to the Asset entity by ID.
func (auo *AssetUpdateOne) SetParentID(id xid.ID) *AssetUpdateOne {
	auo.mutation.SetParentID(id)
	return auo
}

// SetNillableParentID sets the "parent" edge to the Asset entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableParentID(id *xid.ID) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetParentID(*id)
	}
	return auo
}

// SetParent sets the "parent" edge to the Asset entity.
func (auo *AssetUpdateOne) SetParent(a *Asset) *AssetUpdateOne {
	return auo.SetParentID(a.ID)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (auo *AssetUpdateOne) AddAssetIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.AddAssetIDs(ids...)
	return auo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (auo *AssetUpdateOne) AddAssets(a ...*Asset) *AssetUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAssetIDs(ids...)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (auo *AssetUpdateOne) AddEventIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.AddEventIDs(ids...)
	return auo
}

// AddEvent adds the "event" edges to the Event entity.
func (auo *AssetUpdateOne) AddEvent(e ...*Event) *AssetUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (auo *AssetUpdateOne) ClearPosts() *AssetUpdateOne {
	auo.mutation.ClearPosts()
	return auo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (auo *AssetUpdateOne) RemovePostIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.RemovePostIDs(ids...)
	return auo
}

// RemovePosts removes "posts" edges to Post entities.
func (auo *AssetUpdateOne) RemovePosts(p ...*Post) *AssetUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePostIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (auo *AssetUpdateOne) ClearNodes() *AssetUpdateOne {
	auo.mutation.ClearNodes()
	return auo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (auo *AssetUpdateOne) RemoveNodeIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.RemoveNodeIDs(ids...)
	return auo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (auo *AssetUpdateOne) RemoveNodes(n ...*Node) *AssetUpdateOne {
	ids := make([]xid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNodeIDs(ids...)
}

// ClearLinks clears all "links" edges to the Link entity.
func (auo *AssetUpdateOne) ClearLinks() *AssetUpdateOne {
	auo.mutation.ClearLinks()
	return auo
}

// RemoveLinkIDs removes the "links" edge to Link entities by IDs.
func (auo *AssetUpdateOne) RemoveLinkIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.RemoveLinkIDs(ids...)
	return auo
}

// RemoveLinks removes "links" edges to Link entities.
func (auo *AssetUpdateOne) RemoveLinks(l ...*Link) *AssetUpdateOne {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.RemoveLinkIDs(ids...)
}

// ClearOwner clears the "owner" edge to the Account entity.
func (auo *AssetUpdateOne) ClearOwner() *AssetUpdateOne {
	auo.mutation.ClearOwner()
	return auo
}

// ClearParent clears the "parent" edge to the Asset entity.
func (auo *AssetUpdateOne) ClearParent() *AssetUpdateOne {
	auo.mutation.ClearParent()
	return auo
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (auo *AssetUpdateOne) ClearAssets() *AssetUpdateOne {
	auo.mutation.ClearAssets()
	return auo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (auo *AssetUpdateOne) RemoveAssetIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.RemoveAssetIDs(ids...)
	return auo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (auo *AssetUpdateOne) RemoveAssets(a ...*Asset) *AssetUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAssetIDs(ids...)
}

// ClearEvent clears all "event" edges to the Event entity.
func (auo *AssetUpdateOne) ClearEvent() *AssetUpdateOne {
	auo.mutation.ClearEvent()
	return auo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (auo *AssetUpdateOne) RemoveEventIDs(ids ...xid.ID) *AssetUpdateOne {
	auo.mutation.RemoveEventIDs(ids...)
	return auo
}

// RemoveEvent removes "event" edges to Event entities.
func (auo *AssetUpdateOne) RemoveEvent(e ...*Event) *AssetUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the AssetUpdate builder.
func (auo *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssetUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := asset.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AssetUpdateOne) check() error {
	if auo.mutation.OwnerCleared() && len(auo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Asset.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AssetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Filename(); ok {
		_spec.SetField(asset.FieldFilename, field.TypeString, value)
	}
	if value, ok := auo.mutation.Size(); ok {
		_spec.SetField(asset.FieldSize, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedSize(); ok {
		_spec.AddField(asset.FieldSize, field.TypeInt, value)
	}
	if value, ok := auo.mutation.MimeType(); ok {
		_spec.SetField(asset.FieldMimeType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(asset.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(asset.FieldMetadata, field.TypeJSON)
	}
	if auo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.PostsTable,
			Columns: asset.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !auo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.PostsTable,
			Columns: asset.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.PostsTable,
			Columns: asset.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.NodesTable,
			Columns: asset.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.NodesTable,
			Columns: asset.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.NodesTable,
			Columns: asset.NodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.LinksTable,
			Columns: asset.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLinksIDs(); len(nodes) > 0 && !auo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.LinksTable,
			Columns: asset.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.LinksTable,
			Columns: asset.LinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetsTable,
			Columns: []string{asset.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !auo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetsTable,
			Columns: []string{asset.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.AssetsTable,
			Columns: []string{asset.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EventTable,
			Columns: []string{asset.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEventIDs(); len(nodes) > 0 && !auo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EventTable,
			Columns: []string{asset.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EventTable,
			Columns: []string{asset.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
