// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagnode"
	"github.com/rs/xid"
)

// TagNodeQuery is the builder for querying TagNode entities.
type TagNodeQuery struct {
	config
	ctx        *QueryContext
	order      []tagnode.OrderOption
	inters     []Interceptor
	predicates []predicate.TagNode
	withTag    *TagQuery
	withNode   *NodeQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TagNodeQuery builder.
func (tnq *TagNodeQuery) Where(ps ...predicate.TagNode) *TagNodeQuery {
	tnq.predicates = append(tnq.predicates, ps...)
	return tnq
}

// Limit the number of records to be returned by this query.
func (tnq *TagNodeQuery) Limit(limit int) *TagNodeQuery {
	tnq.ctx.Limit = &limit
	return tnq
}

// Offset to start from.
func (tnq *TagNodeQuery) Offset(offset int) *TagNodeQuery {
	tnq.ctx.Offset = &offset
	return tnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tnq *TagNodeQuery) Unique(unique bool) *TagNodeQuery {
	tnq.ctx.Unique = &unique
	return tnq
}

// Order specifies how the records should be ordered.
func (tnq *TagNodeQuery) Order(o ...tagnode.OrderOption) *TagNodeQuery {
	tnq.order = append(tnq.order, o...)
	return tnq
}

// QueryTag chains the current query on the "tag" edge.
func (tnq *TagNodeQuery) QueryTag() *TagQuery {
	query := (&TagClient{config: tnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tagnode.Table, tagnode.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tagnode.TagTable, tagnode.TagColumn),
		)
		fromU = sqlgraph.SetNeighbors(tnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNode chains the current query on the "node" edge.
func (tnq *TagNodeQuery) QueryNode() *NodeQuery {
	query := (&NodeClient{config: tnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tagnode.Table, tagnode.FieldID, selector),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tagnode.NodeTable, tagnode.NodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(tnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TagNode entity from the query.
// Returns a *NotFoundError when no TagNode was found.
func (tnq *TagNodeQuery) First(ctx context.Context) (*TagNode, error) {
	nodes, err := tnq.Limit(1).All(setContextOp(ctx, tnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tagnode.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tnq *TagNodeQuery) FirstX(ctx context.Context) *TagNode {
	node, err := tnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TagNode ID from the query.
// Returns a *NotFoundError when no TagNode ID was found.
func (tnq *TagNodeQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tnq.Limit(1).IDs(setContextOp(ctx, tnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tagnode.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tnq *TagNodeQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := tnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TagNode entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TagNode entity is found.
// Returns a *NotFoundError when no TagNode entities are found.
func (tnq *TagNodeQuery) Only(ctx context.Context) (*TagNode, error) {
	nodes, err := tnq.Limit(2).All(setContextOp(ctx, tnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tagnode.Label}
	default:
		return nil, &NotSingularError{tagnode.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tnq *TagNodeQuery) OnlyX(ctx context.Context) *TagNode {
	node, err := tnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TagNode ID in the query.
// Returns a *NotSingularError when more than one TagNode ID is found.
// Returns a *NotFoundError when no entities are found.
func (tnq *TagNodeQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tnq.Limit(2).IDs(setContextOp(ctx, tnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tagnode.Label}
	default:
		err = &NotSingularError{tagnode.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tnq *TagNodeQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := tnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TagNodes.
func (tnq *TagNodeQuery) All(ctx context.Context) ([]*TagNode, error) {
	ctx = setContextOp(ctx, tnq.ctx, ent.OpQueryAll)
	if err := tnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TagNode, *TagNodeQuery]()
	return withInterceptors[[]*TagNode](ctx, tnq, qr, tnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tnq *TagNodeQuery) AllX(ctx context.Context) []*TagNode {
	nodes, err := tnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TagNode IDs.
func (tnq *TagNodeQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if tnq.ctx.Unique == nil && tnq.path != nil {
		tnq.Unique(true)
	}
	ctx = setContextOp(ctx, tnq.ctx, ent.OpQueryIDs)
	if err = tnq.Select(tagnode.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tnq *TagNodeQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := tnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tnq *TagNodeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tnq.ctx, ent.OpQueryCount)
	if err := tnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tnq, querierCount[*TagNodeQuery](), tnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tnq *TagNodeQuery) CountX(ctx context.Context) int {
	count, err := tnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tnq *TagNodeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tnq.ctx, ent.OpQueryExist)
	switch _, err := tnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tnq *TagNodeQuery) ExistX(ctx context.Context) bool {
	exist, err := tnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TagNodeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tnq *TagNodeQuery) Clone() *TagNodeQuery {
	if tnq == nil {
		return nil
	}
	return &TagNodeQuery{
		config:     tnq.config,
		ctx:        tnq.ctx.Clone(),
		order:      append([]tagnode.OrderOption{}, tnq.order...),
		inters:     append([]Interceptor{}, tnq.inters...),
		predicates: append([]predicate.TagNode{}, tnq.predicates...),
		withTag:    tnq.withTag.Clone(),
		withNode:   tnq.withNode.Clone(),
		// clone intermediate query.
		sql:       tnq.sql.Clone(),
		path:      tnq.path,
		modifiers: append([]func(*sql.Selector){}, tnq.modifiers...),
	}
}

// WithTag tells the query-builder to eager-load the nodes that are connected to
// the "tag" edge. The optional arguments are used to configure the query builder of the edge.
func (tnq *TagNodeQuery) WithTag(opts ...func(*TagQuery)) *TagNodeQuery {
	query := (&TagClient{config: tnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tnq.withTag = query
	return tnq
}

// WithNode tells the query-builder to eager-load the nodes that are connected to
// the "node" edge. The optional arguments are used to configure the query builder of the edge.
func (tnq *TagNodeQuery) WithNode(opts ...func(*NodeQuery)) *TagNodeQuery {
	query := (&NodeClient{config: tnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tnq.withNode = query
	return tnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TagID xid.ID `json:"tag_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TagNode.Query().
//		GroupBy(tagnode.FieldTagID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tnq *TagNodeQuery) GroupBy(field string, fields ...string) *TagNodeGroupBy {
	tnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TagNodeGroupBy{build: tnq}
	grbuild.flds = &tnq.ctx.Fields
	grbuild.label = tagnode.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TagID xid.ID `json:"tag_id,omitempty"`
//	}
//
//	client.TagNode.Query().
//		Select(tagnode.FieldTagID).
//		Scan(ctx, &v)
func (tnq *TagNodeQuery) Select(fields ...string) *TagNodeSelect {
	tnq.ctx.Fields = append(tnq.ctx.Fields, fields...)
	sbuild := &TagNodeSelect{TagNodeQuery: tnq}
	sbuild.label = tagnode.Label
	sbuild.flds, sbuild.scan = &tnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TagNodeSelect configured with the given aggregations.
func (tnq *TagNodeQuery) Aggregate(fns ...AggregateFunc) *TagNodeSelect {
	return tnq.Select().Aggregate(fns...)
}

func (tnq *TagNodeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tnq); err != nil {
				return err
			}
		}
	}
	for _, f := range tnq.ctx.Fields {
		if !tagnode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tnq.path != nil {
		prev, err := tnq.path(ctx)
		if err != nil {
			return err
		}
		tnq.sql = prev
	}
	return nil
}

func (tnq *TagNodeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TagNode, error) {
	var (
		nodes       = []*TagNode{}
		_spec       = tnq.querySpec()
		loadedTypes = [2]bool{
			tnq.withTag != nil,
			tnq.withNode != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TagNode).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TagNode{config: tnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tnq.modifiers) > 0 {
		_spec.Modifiers = tnq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tnq.withTag; query != nil {
		if err := tnq.loadTag(ctx, query, nodes, nil,
			func(n *TagNode, e *Tag) { n.Edges.Tag = e }); err != nil {
			return nil, err
		}
	}
	if query := tnq.withNode; query != nil {
		if err := tnq.loadNode(ctx, query, nodes, nil,
			func(n *TagNode, e *Node) { n.Edges.Node = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tnq *TagNodeQuery) loadTag(ctx context.Context, query *TagQuery, nodes []*TagNode, init func(*TagNode), assign func(*TagNode, *Tag)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TagNode)
	for i := range nodes {
		fk := nodes[i].TagID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tag.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tag_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tnq *TagNodeQuery) loadNode(ctx context.Context, query *NodeQuery, nodes []*TagNode, init func(*TagNode), assign func(*TagNode, *Node)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TagNode)
	for i := range nodes {
		fk := nodes[i].NodeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(node.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "node_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tnq *TagNodeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tnq.querySpec()
	if len(tnq.modifiers) > 0 {
		_spec.Modifiers = tnq.modifiers
	}
	_spec.Node.Columns = tnq.ctx.Fields
	if len(tnq.ctx.Fields) > 0 {
		_spec.Unique = tnq.ctx.Unique != nil && *tnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tnq.driver, _spec)
}

func (tnq *TagNodeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tagnode.Table, tagnode.Columns, sqlgraph.NewFieldSpec(tagnode.FieldID, field.TypeString))
	_spec.From = tnq.sql
	if unique := tnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tnq.path != nil {
		_spec.Unique = true
	}
	if fields := tnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tagnode.FieldID)
		for i := range fields {
			if fields[i] != tagnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tnq.withTag != nil {
			_spec.Node.AddColumnOnce(tagnode.FieldTagID)
		}
		if tnq.withNode != nil {
			_spec.Node.AddColumnOnce(tagnode.FieldNodeID)
		}
	}
	if ps := tnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tnq *TagNodeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tnq.driver.Dialect())
	t1 := builder.Table(tagnode.Table)
	columns := tnq.ctx.Fields
	if len(columns) == 0 {
		columns = tagnode.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tnq.sql != nil {
		selector = tnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tnq.ctx.Unique != nil && *tnq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tnq.modifiers {
		m(selector)
	}
	for _, p := range tnq.predicates {
		p(selector)
	}
	for _, p := range tnq.order {
		p(selector)
	}
	if offset := tnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tnq *TagNodeQuery) Modify(modifiers ...func(s *sql.Selector)) *TagNodeSelect {
	tnq.modifiers = append(tnq.modifiers, modifiers...)
	return tnq.Select()
}

// TagNodeGroupBy is the group-by builder for TagNode entities.
type TagNodeGroupBy struct {
	selector
	build *TagNodeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tngb *TagNodeGroupBy) Aggregate(fns ...AggregateFunc) *TagNodeGroupBy {
	tngb.fns = append(tngb.fns, fns...)
	return tngb
}

// Scan applies the selector query and scans the result into the given value.
func (tngb *TagNodeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tngb.build.ctx, ent.OpQueryGroupBy)
	if err := tngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TagNodeQuery, *TagNodeGroupBy](ctx, tngb.build, tngb, tngb.build.inters, v)
}

func (tngb *TagNodeGroupBy) sqlScan(ctx context.Context, root *TagNodeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tngb.fns))
	for _, fn := range tngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tngb.flds)+len(tngb.fns))
		for _, f := range *tngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TagNodeSelect is the builder for selecting fields of TagNode entities.
type TagNodeSelect struct {
	*TagNodeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tns *TagNodeSelect) Aggregate(fns ...AggregateFunc) *TagNodeSelect {
	tns.fns = append(tns.fns, fns...)
	return tns
}

// Scan applies the selector query and scans the result into the given value.
func (tns *TagNodeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tns.ctx, ent.OpQuerySelect)
	if err := tns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TagNodeQuery, *TagNodeSelect](ctx, tns.TagNodeQuery, tns, tns.inters, v)
}

func (tns *TagNodeSelect) sqlScan(ctx context.Context, root *TagNodeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tns.fns))
	for _, fn := range tns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tns *TagNodeSelect) Modify(modifiers ...func(s *sql.Selector)) *TagNodeSelect {
	tns.modifiers = append(tns.modifiers, modifiers...)
	return tns
}
