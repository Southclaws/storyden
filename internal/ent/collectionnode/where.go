// Code generated by ent, DO NOT EDIT.

package collectionnode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldCreatedAt, v))
}

// CollectionID applies equality check predicate on the "collection_id" field. It's identical to CollectionIDEQ.
func CollectionID(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldCollectionID, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldNodeID, v))
}

// MembershipType applies equality check predicate on the "membership_type" field. It's identical to MembershipTypeEQ.
func MembershipType(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldMembershipType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLTE(FieldCreatedAt, v))
}

// CollectionIDEQ applies the EQ predicate on the "collection_id" field.
func CollectionIDEQ(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldCollectionID, v))
}

// CollectionIDNEQ applies the NEQ predicate on the "collection_id" field.
func CollectionIDNEQ(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNEQ(FieldCollectionID, v))
}

// CollectionIDIn applies the In predicate on the "collection_id" field.
func CollectionIDIn(vs ...xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldIn(FieldCollectionID, vs...))
}

// CollectionIDNotIn applies the NotIn predicate on the "collection_id" field.
func CollectionIDNotIn(vs ...xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNotIn(FieldCollectionID, vs...))
}

// CollectionIDGT applies the GT predicate on the "collection_id" field.
func CollectionIDGT(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGT(FieldCollectionID, v))
}

// CollectionIDGTE applies the GTE predicate on the "collection_id" field.
func CollectionIDGTE(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGTE(FieldCollectionID, v))
}

// CollectionIDLT applies the LT predicate on the "collection_id" field.
func CollectionIDLT(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLT(FieldCollectionID, v))
}

// CollectionIDLTE applies the LTE predicate on the "collection_id" field.
func CollectionIDLTE(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLTE(FieldCollectionID, v))
}

// CollectionIDContains applies the Contains predicate on the "collection_id" field.
func CollectionIDContains(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldContains(FieldCollectionID, vc))
}

// CollectionIDHasPrefix applies the HasPrefix predicate on the "collection_id" field.
func CollectionIDHasPrefix(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldHasPrefix(FieldCollectionID, vc))
}

// CollectionIDHasSuffix applies the HasSuffix predicate on the "collection_id" field.
func CollectionIDHasSuffix(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldHasSuffix(FieldCollectionID, vc))
}

// CollectionIDEqualFold applies the EqualFold predicate on the "collection_id" field.
func CollectionIDEqualFold(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldEqualFold(FieldCollectionID, vc))
}

// CollectionIDContainsFold applies the ContainsFold predicate on the "collection_id" field.
func CollectionIDContainsFold(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldContainsFold(FieldCollectionID, vc))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v xid.ID) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldContains(FieldNodeID, vc))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldHasPrefix(FieldNodeID, vc))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldHasSuffix(FieldNodeID, vc))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldEqualFold(FieldNodeID, vc))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v xid.ID) predicate.CollectionNode {
	vc := v.String()
	return predicate.CollectionNode(sql.FieldContainsFold(FieldNodeID, vc))
}

// MembershipTypeEQ applies the EQ predicate on the "membership_type" field.
func MembershipTypeEQ(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEQ(FieldMembershipType, v))
}

// MembershipTypeNEQ applies the NEQ predicate on the "membership_type" field.
func MembershipTypeNEQ(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNEQ(FieldMembershipType, v))
}

// MembershipTypeIn applies the In predicate on the "membership_type" field.
func MembershipTypeIn(vs ...string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldIn(FieldMembershipType, vs...))
}

// MembershipTypeNotIn applies the NotIn predicate on the "membership_type" field.
func MembershipTypeNotIn(vs ...string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldNotIn(FieldMembershipType, vs...))
}

// MembershipTypeGT applies the GT predicate on the "membership_type" field.
func MembershipTypeGT(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGT(FieldMembershipType, v))
}

// MembershipTypeGTE applies the GTE predicate on the "membership_type" field.
func MembershipTypeGTE(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldGTE(FieldMembershipType, v))
}

// MembershipTypeLT applies the LT predicate on the "membership_type" field.
func MembershipTypeLT(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLT(FieldMembershipType, v))
}

// MembershipTypeLTE applies the LTE predicate on the "membership_type" field.
func MembershipTypeLTE(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldLTE(FieldMembershipType, v))
}

// MembershipTypeContains applies the Contains predicate on the "membership_type" field.
func MembershipTypeContains(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldContains(FieldMembershipType, v))
}

// MembershipTypeHasPrefix applies the HasPrefix predicate on the "membership_type" field.
func MembershipTypeHasPrefix(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldHasPrefix(FieldMembershipType, v))
}

// MembershipTypeHasSuffix applies the HasSuffix predicate on the "membership_type" field.
func MembershipTypeHasSuffix(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldHasSuffix(FieldMembershipType, v))
}

// MembershipTypeEqualFold applies the EqualFold predicate on the "membership_type" field.
func MembershipTypeEqualFold(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldEqualFold(FieldMembershipType, v))
}

// MembershipTypeContainsFold applies the ContainsFold predicate on the "membership_type" field.
func MembershipTypeContainsFold(v string) predicate.CollectionNode {
	return predicate.CollectionNode(sql.FieldContainsFold(FieldMembershipType, v))
}

// HasCollection applies the HasEdge predicate on the "collection" edge.
func HasCollection() predicate.CollectionNode {
	return predicate.CollectionNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, CollectionColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, CollectionTable, CollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionWith applies the HasEdge predicate on the "collection" edge with a given conditions (other predicates).
func HasCollectionWith(preds ...predicate.Collection) predicate.CollectionNode {
	return predicate.CollectionNode(func(s *sql.Selector) {
		step := newCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.CollectionNode {
	return predicate.CollectionNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, NodeColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.CollectionNode {
	return predicate.CollectionNode(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CollectionNode) predicate.CollectionNode {
	return predicate.CollectionNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CollectionNode) predicate.CollectionNode {
	return predicate.CollectionNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CollectionNode) predicate.CollectionNode {
	return predicate.CollectionNode(sql.NotPredicates(p))
}
