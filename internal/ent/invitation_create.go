// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/invitation"
	"github.com/rs/xid"
)

// InvitationCreate is the builder for creating a Invitation entity.
type InvitationCreate struct {
	config
	mutation *InvitationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *InvitationCreate) SetCreatedAt(t time.Time) *InvitationCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableCreatedAt(t *time.Time) *InvitationCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InvitationCreate) SetUpdatedAt(t time.Time) *InvitationCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableUpdatedAt(t *time.Time) *InvitationCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *InvitationCreate) SetDeletedAt(t time.Time) *InvitationCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableDeletedAt(t *time.Time) *InvitationCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetMessage sets the "message" field.
func (ic *InvitationCreate) SetMessage(s string) *InvitationCreate {
	ic.mutation.SetMessage(s)
	return ic
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableMessage(s *string) *InvitationCreate {
	if s != nil {
		ic.SetMessage(*s)
	}
	return ic
}

// SetCreatorAccountID sets the "creator_account_id" field.
func (ic *InvitationCreate) SetCreatorAccountID(x xid.ID) *InvitationCreate {
	ic.mutation.SetCreatorAccountID(x)
	return ic
}

// SetID sets the "id" field.
func (ic *InvitationCreate) SetID(x xid.ID) *InvitationCreate {
	ic.mutation.SetID(x)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableID(x *xid.ID) *InvitationCreate {
	if x != nil {
		ic.SetID(*x)
	}
	return ic
}

// SetCreatorID sets the "creator" edge to the Account entity by ID.
func (ic *InvitationCreate) SetCreatorID(id xid.ID) *InvitationCreate {
	ic.mutation.SetCreatorID(id)
	return ic
}

// SetCreator sets the "creator" edge to the Account entity.
func (ic *InvitationCreate) SetCreator(a *Account) *InvitationCreate {
	return ic.SetCreatorID(a.ID)
}

// AddInvitedIDs adds the "invited" edge to the Account entity by IDs.
func (ic *InvitationCreate) AddInvitedIDs(ids ...xid.ID) *InvitationCreate {
	ic.mutation.AddInvitedIDs(ids...)
	return ic
}

// AddInvited adds the "invited" edges to the Account entity.
func (ic *InvitationCreate) AddInvited(a ...*Account) *InvitationCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ic.AddInvitedIDs(ids...)
}

// Mutation returns the InvitationMutation object of the builder.
func (ic *InvitationCreate) Mutation() *InvitationMutation {
	return ic.mutation
}

// Save creates the Invitation in the database.
func (ic *InvitationCreate) Save(ctx context.Context) (*Invitation, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvitationCreate) SaveX(ctx context.Context) *Invitation {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvitationCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvitationCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InvitationCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := invitation.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := invitation.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := invitation.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvitationCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Invitation.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Invitation.updated_at"`)}
	}
	if _, ok := ic.mutation.CreatorAccountID(); !ok {
		return &ValidationError{Name: "creator_account_id", err: errors.New(`ent: missing required field "Invitation.creator_account_id"`)}
	}
	if v, ok := ic.mutation.ID(); ok {
		if err := invitation.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Invitation.id": %w`, err)}
		}
	}
	if len(ic.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "Invitation.creator"`)}
	}
	return nil
}

func (ic *InvitationCreate) sqlSave(ctx context.Context) (*Invitation, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InvitationCreate) createSpec() (*Invitation, *sqlgraph.CreateSpec) {
	var (
		_node = &Invitation{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invitation.Table, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(invitation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(invitation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(invitation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ic.mutation.Message(); ok {
		_spec.SetField(invitation.FieldMessage, field.TypeString, value)
		_node.Message = &value
	}
	if nodes := ic.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitation.CreatorTable,
			Columns: []string{invitation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.InvitedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invitation.InvitedTable,
			Columns: []string{invitation.InvitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invitation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *InvitationCreate) OnConflict(opts ...sql.ConflictOption) *InvitationUpsertOne {
	ic.conflict = opts
	return &InvitationUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InvitationCreate) OnConflictColumns(columns ...string) *InvitationUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InvitationUpsertOne{
		create: ic,
	}
}

type (
	// InvitationUpsertOne is the builder for "upsert"-ing
	//  one Invitation node.
	InvitationUpsertOne struct {
		create *InvitationCreate
	}

	// InvitationUpsert is the "OnConflict" setter.
	InvitationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationUpsert) SetUpdatedAt(v time.Time) *InvitationUpsert {
	u.Set(invitation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateUpdatedAt() *InvitationUpsert {
	u.SetExcluded(invitation.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvitationUpsert) SetDeletedAt(v time.Time) *InvitationUpsert {
	u.Set(invitation.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateDeletedAt() *InvitationUpsert {
	u.SetExcluded(invitation.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InvitationUpsert) ClearDeletedAt() *InvitationUpsert {
	u.SetNull(invitation.FieldDeletedAt)
	return u
}

// SetMessage sets the "message" field.
func (u *InvitationUpsert) SetMessage(v string) *InvitationUpsert {
	u.Set(invitation.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateMessage() *InvitationUpsert {
	u.SetExcluded(invitation.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *InvitationUpsert) ClearMessage() *InvitationUpsert {
	u.SetNull(invitation.FieldMessage)
	return u
}

// SetCreatorAccountID sets the "creator_account_id" field.
func (u *InvitationUpsert) SetCreatorAccountID(v xid.ID) *InvitationUpsert {
	u.Set(invitation.FieldCreatorAccountID, v)
	return u
}

// UpdateCreatorAccountID sets the "creator_account_id" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateCreatorAccountID() *InvitationUpsert {
	u.SetExcluded(invitation.FieldCreatorAccountID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationUpsertOne) UpdateNewValues() *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(invitation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(invitation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invitation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InvitationUpsertOne) Ignore() *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationUpsertOne) DoNothing() *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationCreate.OnConflict
// documentation for more info.
func (u *InvitationUpsertOne) Update(set func(*InvitationUpsert)) *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationUpsertOne) SetUpdatedAt(v time.Time) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateUpdatedAt() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvitationUpsertOne) SetDeletedAt(v time.Time) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateDeletedAt() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InvitationUpsertOne) ClearDeletedAt() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMessage sets the "message" field.
func (u *InvitationUpsertOne) SetMessage(v string) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateMessage() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *InvitationUpsertOne) ClearMessage() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.ClearMessage()
	})
}

// SetCreatorAccountID sets the "creator_account_id" field.
func (u *InvitationUpsertOne) SetCreatorAccountID(v xid.ID) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetCreatorAccountID(v)
	})
}

// UpdateCreatorAccountID sets the "creator_account_id" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateCreatorAccountID() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateCreatorAccountID()
	})
}

// Exec executes the query.
func (u *InvitationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvitationUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InvitationUpsertOne.ID is not supported by MySQL driver. Use InvitationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvitationUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvitationCreateBulk is the builder for creating many Invitation entities in bulk.
type InvitationCreateBulk struct {
	config
	err      error
	builders []*InvitationCreate
	conflict []sql.ConflictOption
}

// Save creates the Invitation entities in the database.
func (icb *InvitationCreateBulk) Save(ctx context.Context) ([]*Invitation, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invitation, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvitationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvitationCreateBulk) SaveX(ctx context.Context) []*Invitation {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvitationCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvitationCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invitation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *InvitationCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvitationUpsertBulk {
	icb.conflict = opts
	return &InvitationUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InvitationCreateBulk) OnConflictColumns(columns ...string) *InvitationUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InvitationUpsertBulk{
		create: icb,
	}
}

// InvitationUpsertBulk is the builder for "upsert"-ing
// a bulk of Invitation nodes.
type InvitationUpsertBulk struct {
	create *InvitationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationUpsertBulk) UpdateNewValues() *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(invitation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(invitation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InvitationUpsertBulk) Ignore() *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationUpsertBulk) DoNothing() *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationCreateBulk.OnConflict
// documentation for more info.
func (u *InvitationUpsertBulk) Update(set func(*InvitationUpsert)) *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationUpsertBulk) SetUpdatedAt(v time.Time) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateUpdatedAt() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InvitationUpsertBulk) SetDeletedAt(v time.Time) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateDeletedAt() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InvitationUpsertBulk) ClearDeletedAt() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMessage sets the "message" field.
func (u *InvitationUpsertBulk) SetMessage(v string) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateMessage() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *InvitationUpsertBulk) ClearMessage() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.ClearMessage()
	})
}

// SetCreatorAccountID sets the "creator_account_id" field.
func (u *InvitationUpsertBulk) SetCreatorAccountID(v xid.ID) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetCreatorAccountID(v)
	})
}

// UpdateCreatorAccountID sets the "creator_account_id" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateCreatorAccountID() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateCreatorAccountID()
	})
}

// Exec executes the query.
func (u *InvitationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvitationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
