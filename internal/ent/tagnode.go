// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagnode"
	"github.com/rs/xid"
)

// TagNode is the model entity for the TagNode schema.
type TagNode struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID xid.ID `json:"tag_id,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID xid.ID `json:"node_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagNodeQuery when eager-loading is set.
	Edges        TagNodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TagNodeEdges holds the relations/edges for other nodes in the graph.
type TagNodeEdges struct {
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagNodeEdges) TagOrErr() (*Tag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagNodeEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TagNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tagnode.FieldID, tagnode.FieldTagID, tagnode.FieldNodeID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TagNode fields.
func (tn *TagNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tagnode.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tn.ID = *value
			}
		case tagnode.FieldTagID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value != nil {
				tn.TagID = *value
			}
		case tagnode.FieldNodeID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value != nil {
				tn.NodeID = *value
			}
		default:
			tn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TagNode.
// This includes values selected through modifiers, order, etc.
func (tn *TagNode) Value(name string) (ent.Value, error) {
	return tn.selectValues.Get(name)
}

// QueryTag queries the "tag" edge of the TagNode entity.
func (tn *TagNode) QueryTag() *TagQuery {
	return NewTagNodeClient(tn.config).QueryTag(tn)
}

// QueryNode queries the "node" edge of the TagNode entity.
func (tn *TagNode) QueryNode() *NodeQuery {
	return NewTagNodeClient(tn.config).QueryNode(tn)
}

// Update returns a builder for updating this TagNode.
// Note that you need to call TagNode.Unwrap() before calling this method if this TagNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (tn *TagNode) Update() *TagNodeUpdateOne {
	return NewTagNodeClient(tn.config).UpdateOne(tn)
}

// Unwrap unwraps the TagNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tn *TagNode) Unwrap() *TagNode {
	_tx, ok := tn.config.driver.(*txDriver)
	if !ok {
		panic("ent: TagNode is not a transactional entity")
	}
	tn.config.driver = _tx.drv
	return tn
}

// String implements the fmt.Stringer.
func (tn *TagNode) String() string {
	var builder strings.Builder
	builder.WriteString("TagNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tn.ID))
	builder.WriteString("tag_id=")
	builder.WriteString(fmt.Sprintf("%v", tn.TagID))
	builder.WriteString(", ")
	builder.WriteString("node_id=")
	builder.WriteString(fmt.Sprintf("%v", tn.NodeID))
	builder.WriteByte(')')
	return builder.String()
}

// TagNodes is a parsable slice of TagNode.
type TagNodes []*TagNode
