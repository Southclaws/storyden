// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/internal/ent/account"
	entplugin "github.com/Southclaws/storyden/internal/ent/plugin"
	"github.com/Southclaws/storyden/lib/plugin"
	"github.com/rs/xid"
)

// Plugin is the model entity for the Plugin schema.
type Plugin struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Manifest holds the value of the "manifest" field.
	Manifest plugin.Manifest `json:"manifest,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]interface{} `json:"config,omitempty"`
	// ActiveState holds the value of the "active_state" field.
	ActiveState string `json:"active_state,omitempty"`
	// ActiveStateChangedAt holds the value of the "active_state_changed_at" field.
	ActiveStateChangedAt time.Time `json:"active_state_changed_at,omitempty"`
	// StatusMessage holds the value of the "status_message" field.
	StatusMessage *string `json:"status_message,omitempty"`
	// StatusDetails holds the value of the "status_details" field.
	StatusDetails map[string]interface{} `json:"status_details,omitempty"`
	// AddedBy holds the value of the "added_by" field.
	AddedBy xid.ID `json:"added_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PluginQuery when eager-loading is set.
	Edges        PluginEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PluginEdges holds the relations/edges for other nodes in the graph.
type PluginEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PluginEdges) AccountOrErr() (*Account, error) {
	if e.Account != nil {
		return e.Account, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: account.Label}
	}
	return nil, &NotLoadedError{edge: "account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plugin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entplugin.FieldManifest, entplugin.FieldConfig, entplugin.FieldStatusDetails:
			values[i] = new([]byte)
		case entplugin.FieldPath, entplugin.FieldActiveState, entplugin.FieldStatusMessage:
			values[i] = new(sql.NullString)
		case entplugin.FieldCreatedAt, entplugin.FieldUpdatedAt, entplugin.FieldActiveStateChangedAt:
			values[i] = new(sql.NullTime)
		case entplugin.FieldID, entplugin.FieldAddedBy:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plugin fields.
func (_m *Plugin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entplugin.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case entplugin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case entplugin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case entplugin.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				_m.Path = value.String
			}
		case entplugin.FieldManifest:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manifest", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Manifest); err != nil {
					return fmt.Errorf("unmarshal field manifest: %w", err)
				}
			}
		case entplugin.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case entplugin.FieldActiveState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_state", values[i])
			} else if value.Valid {
				_m.ActiveState = value.String
			}
		case entplugin.FieldActiveStateChangedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field active_state_changed_at", values[i])
			} else if value.Valid {
				_m.ActiveStateChangedAt = value.Time
			}
		case entplugin.FieldStatusMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_message", values[i])
			} else if value.Valid {
				_m.StatusMessage = new(string)
				*_m.StatusMessage = value.String
			}
		case entplugin.FieldStatusDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field status_details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.StatusDetails); err != nil {
					return fmt.Errorf("unmarshal field status_details: %w", err)
				}
			}
		case entplugin.FieldAddedBy:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field added_by", values[i])
			} else if value != nil {
				_m.AddedBy = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plugin.
// This includes values selected through modifiers, order, etc.
func (_m *Plugin) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAccount queries the "account" edge of the Plugin entity.
func (_m *Plugin) QueryAccount() *AccountQuery {
	return NewPluginClient(_m.config).QueryAccount(_m)
}

// Update returns a builder for updating this Plugin.
// Note that you need to call Plugin.Unwrap() before calling this method if this Plugin
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Plugin) Update() *PluginUpdateOne {
	return NewPluginClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Plugin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Plugin) Unwrap() *Plugin {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plugin is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Plugin) String() string {
	var builder strings.Builder
	builder.WriteString("Plugin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(_m.Path)
	builder.WriteString(", ")
	builder.WriteString("manifest=")
	builder.WriteString(fmt.Sprintf("%v", _m.Manifest))
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", _m.Config))
	builder.WriteString(", ")
	builder.WriteString("active_state=")
	builder.WriteString(_m.ActiveState)
	builder.WriteString(", ")
	builder.WriteString("active_state_changed_at=")
	builder.WriteString(_m.ActiveStateChangedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.StatusMessage; v != nil {
		builder.WriteString("status_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status_details=")
	builder.WriteString(fmt.Sprintf("%v", _m.StatusDetails))
	builder.WriteString(", ")
	builder.WriteString("added_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.AddedBy))
	builder.WriteByte(')')
	return builder.String()
}

// Plugins is a parsable slice of Plugin.
type Plugins []*Plugin
