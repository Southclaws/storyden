// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/node"
	"github.com/Southclaws/storyden/internal/ent/property"
	"github.com/Southclaws/storyden/internal/ent/propertyschemafield"
	"github.com/rs/xid"
)

// PropertyCreate is the builder for creating a Property entity.
type PropertyCreate struct {
	config
	mutation *PropertyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PropertyCreate) SetCreatedAt(t time.Time) *PropertyCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PropertyCreate) SetNillableCreatedAt(t *time.Time) *PropertyCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetNodeID sets the "node_id" field.
func (pc *PropertyCreate) SetNodeID(x xid.ID) *PropertyCreate {
	pc.mutation.SetNodeID(x)
	return pc
}

// SetFieldID sets the "field_id" field.
func (pc *PropertyCreate) SetFieldID(x xid.ID) *PropertyCreate {
	pc.mutation.SetFieldID(x)
	return pc
}

// SetValue sets the "value" field.
func (pc *PropertyCreate) SetValue(s string) *PropertyCreate {
	pc.mutation.SetValue(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PropertyCreate) SetID(x xid.ID) *PropertyCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PropertyCreate) SetNillableID(x *xid.ID) *PropertyCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// SetNode sets the "node" edge to the Node entity.
func (pc *PropertyCreate) SetNode(n *Node) *PropertyCreate {
	return pc.SetNodeID(n.ID)
}

// SetSchemaID sets the "schema" edge to the PropertySchemaField entity by ID.
func (pc *PropertyCreate) SetSchemaID(id xid.ID) *PropertyCreate {
	pc.mutation.SetSchemaID(id)
	return pc
}

// SetSchema sets the "schema" edge to the PropertySchemaField entity.
func (pc *PropertyCreate) SetSchema(p *PropertySchemaField) *PropertyCreate {
	return pc.SetSchemaID(p.ID)
}

// Mutation returns the PropertyMutation object of the builder.
func (pc *PropertyCreate) Mutation() *PropertyMutation {
	return pc.mutation
}

// Save creates the Property in the database.
func (pc *PropertyCreate) Save(ctx context.Context) (*Property, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PropertyCreate) SaveX(ctx context.Context) *Property {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PropertyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PropertyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PropertyCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := property.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := property.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PropertyCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Property.created_at"`)}
	}
	if _, ok := pc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "Property.node_id"`)}
	}
	if _, ok := pc.mutation.FieldID(); !ok {
		return &ValidationError{Name: "field_id", err: errors.New(`ent: missing required field "Property.field_id"`)}
	}
	if _, ok := pc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Property.value"`)}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := property.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Property.id": %w`, err)}
		}
	}
	if len(pc.mutation.NodeIDs()) == 0 {
		return &ValidationError{Name: "node", err: errors.New(`ent: missing required edge "Property.node"`)}
	}
	if len(pc.mutation.SchemaIDs()) == 0 {
		return &ValidationError{Name: "schema", err: errors.New(`ent: missing required edge "Property.schema"`)}
	}
	return nil
}

func (pc *PropertyCreate) sqlSave(ctx context.Context) (*Property, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PropertyCreate) createSpec() (*Property, *sqlgraph.CreateSpec) {
	var (
		_node = &Property{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(property.Table, sqlgraph.NewFieldSpec(property.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(property.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.Value(); ok {
		_spec.SetField(property.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := pc.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   property.NodeTable,
			Columns: []string{property.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SchemaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   property.SchemaTable,
			Columns: []string{property.SchemaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(propertyschemafield.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FieldID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Property.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PropertyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PropertyCreate) OnConflict(opts ...sql.ConflictOption) *PropertyUpsertOne {
	pc.conflict = opts
	return &PropertyUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Property.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PropertyCreate) OnConflictColumns(columns ...string) *PropertyUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PropertyUpsertOne{
		create: pc,
	}
}

type (
	// PropertyUpsertOne is the builder for "upsert"-ing
	//  one Property node.
	PropertyUpsertOne struct {
		create *PropertyCreate
	}

	// PropertyUpsert is the "OnConflict" setter.
	PropertyUpsert struct {
		*sql.UpdateSet
	}
)

// SetNodeID sets the "node_id" field.
func (u *PropertyUpsert) SetNodeID(v xid.ID) *PropertyUpsert {
	u.Set(property.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *PropertyUpsert) UpdateNodeID() *PropertyUpsert {
	u.SetExcluded(property.FieldNodeID)
	return u
}

// SetFieldID sets the "field_id" field.
func (u *PropertyUpsert) SetFieldID(v xid.ID) *PropertyUpsert {
	u.Set(property.FieldFieldID, v)
	return u
}

// UpdateFieldID sets the "field_id" field to the value that was provided on create.
func (u *PropertyUpsert) UpdateFieldID() *PropertyUpsert {
	u.SetExcluded(property.FieldFieldID)
	return u
}

// SetValue sets the "value" field.
func (u *PropertyUpsert) SetValue(v string) *PropertyUpsert {
	u.Set(property.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PropertyUpsert) UpdateValue() *PropertyUpsert {
	u.SetExcluded(property.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Property.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(property.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PropertyUpsertOne) UpdateNewValues() *PropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(property.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(property.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Property.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PropertyUpsertOne) Ignore() *PropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PropertyUpsertOne) DoNothing() *PropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PropertyCreate.OnConflict
// documentation for more info.
func (u *PropertyUpsertOne) Update(set func(*PropertyUpsert)) *PropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PropertyUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *PropertyUpsertOne) SetNodeID(v xid.ID) *PropertyUpsertOne {
	return u.Update(func(s *PropertyUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *PropertyUpsertOne) UpdateNodeID() *PropertyUpsertOne {
	return u.Update(func(s *PropertyUpsert) {
		s.UpdateNodeID()
	})
}

// SetFieldID sets the "field_id" field.
func (u *PropertyUpsertOne) SetFieldID(v xid.ID) *PropertyUpsertOne {
	return u.Update(func(s *PropertyUpsert) {
		s.SetFieldID(v)
	})
}

// UpdateFieldID sets the "field_id" field to the value that was provided on create.
func (u *PropertyUpsertOne) UpdateFieldID() *PropertyUpsertOne {
	return u.Update(func(s *PropertyUpsert) {
		s.UpdateFieldID()
	})
}

// SetValue sets the "value" field.
func (u *PropertyUpsertOne) SetValue(v string) *PropertyUpsertOne {
	return u.Update(func(s *PropertyUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PropertyUpsertOne) UpdateValue() *PropertyUpsertOne {
	return u.Update(func(s *PropertyUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *PropertyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PropertyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PropertyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PropertyUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PropertyUpsertOne.ID is not supported by MySQL driver. Use PropertyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PropertyUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PropertyCreateBulk is the builder for creating many Property entities in bulk.
type PropertyCreateBulk struct {
	config
	err      error
	builders []*PropertyCreate
	conflict []sql.ConflictOption
}

// Save creates the Property entities in the database.
func (pcb *PropertyCreateBulk) Save(ctx context.Context) ([]*Property, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Property, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PropertyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PropertyCreateBulk) SaveX(ctx context.Context) []*Property {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PropertyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PropertyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Property.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PropertyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PropertyCreateBulk) OnConflict(opts ...sql.ConflictOption) *PropertyUpsertBulk {
	pcb.conflict = opts
	return &PropertyUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Property.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PropertyCreateBulk) OnConflictColumns(columns ...string) *PropertyUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PropertyUpsertBulk{
		create: pcb,
	}
}

// PropertyUpsertBulk is the builder for "upsert"-ing
// a bulk of Property nodes.
type PropertyUpsertBulk struct {
	create *PropertyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Property.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(property.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PropertyUpsertBulk) UpdateNewValues() *PropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(property.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(property.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Property.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PropertyUpsertBulk) Ignore() *PropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PropertyUpsertBulk) DoNothing() *PropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PropertyCreateBulk.OnConflict
// documentation for more info.
func (u *PropertyUpsertBulk) Update(set func(*PropertyUpsert)) *PropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PropertyUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *PropertyUpsertBulk) SetNodeID(v xid.ID) *PropertyUpsertBulk {
	return u.Update(func(s *PropertyUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *PropertyUpsertBulk) UpdateNodeID() *PropertyUpsertBulk {
	return u.Update(func(s *PropertyUpsert) {
		s.UpdateNodeID()
	})
}

// SetFieldID sets the "field_id" field.
func (u *PropertyUpsertBulk) SetFieldID(v xid.ID) *PropertyUpsertBulk {
	return u.Update(func(s *PropertyUpsert) {
		s.SetFieldID(v)
	})
}

// UpdateFieldID sets the "field_id" field to the value that was provided on create.
func (u *PropertyUpsertBulk) UpdateFieldID() *PropertyUpsertBulk {
	return u.Update(func(s *PropertyUpsert) {
		s.UpdateFieldID()
	})
}

// SetValue sets the "value" field.
func (u *PropertyUpsertBulk) SetValue(v string) *PropertyUpsertBulk {
	return u.Update(func(s *PropertyUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PropertyUpsertBulk) UpdateValue() *PropertyUpsertBulk {
	return u.Update(func(s *PropertyUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *PropertyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PropertyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PropertyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PropertyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
