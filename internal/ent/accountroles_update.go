// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/accountroles"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/Southclaws/storyden/internal/ent/role"
	"github.com/rs/xid"
)

// AccountRolesUpdate is the builder for updating AccountRoles entities.
type AccountRolesUpdate struct {
	config
	hooks     []Hook
	mutation  *AccountRolesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AccountRolesUpdate builder.
func (_u *AccountRolesUpdate) Where(ps ...predicate.AccountRoles) *AccountRolesUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAccountID sets the "account_id" field.
func (_u *AccountRolesUpdate) SetAccountID(v xid.ID) *AccountRolesUpdate {
	_u.mutation.SetAccountID(v)
	return _u
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (_u *AccountRolesUpdate) SetNillableAccountID(v *xid.ID) *AccountRolesUpdate {
	if v != nil {
		_u.SetAccountID(*v)
	}
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *AccountRolesUpdate) SetRoleID(v xid.ID) *AccountRolesUpdate {
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *AccountRolesUpdate) SetNillableRoleID(v *xid.ID) *AccountRolesUpdate {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *AccountRolesUpdate) SetBadge(v bool) *AccountRolesUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (_u *AccountRolesUpdate) SetNillableBadge(v *bool) *AccountRolesUpdate {
	if v != nil {
		_u.SetBadge(*v)
	}
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *AccountRolesUpdate) ClearBadge() *AccountRolesUpdate {
	_u.mutation.ClearBadge()
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *AccountRolesUpdate) SetAccount(v *Account) *AccountRolesUpdate {
	return _u.SetAccountID(v.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (_u *AccountRolesUpdate) SetRole(v *Role) *AccountRolesUpdate {
	return _u.SetRoleID(v.ID)
}

// Mutation returns the AccountRolesMutation object of the builder.
func (_u *AccountRolesUpdate) Mutation() *AccountRolesMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *AccountRolesUpdate) ClearAccount() *AccountRolesUpdate {
	_u.mutation.ClearAccount()
	return _u
}

// ClearRole clears the "role" edge to the Role entity.
func (_u *AccountRolesUpdate) ClearRole() *AccountRolesUpdate {
	_u.mutation.ClearRole()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AccountRolesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AccountRolesUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AccountRolesUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AccountRolesUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AccountRolesUpdate) check() error {
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountRoles.account"`)
	}
	if _u.mutation.RoleCleared() && len(_u.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountRoles.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AccountRolesUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountRolesUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AccountRolesUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountroles.Table, accountroles.Columns, sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(accountroles.FieldBadge, field.TypeBool, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(accountroles.FieldBadge, field.TypeBool)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.AccountTable,
			Columns: []string{accountroles.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.AccountTable,
			Columns: []string{accountroles.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.RoleTable,
			Columns: []string{accountroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.RoleTable,
			Columns: []string{accountroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AccountRolesUpdateOne is the builder for updating a single AccountRoles entity.
type AccountRolesUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AccountRolesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAccountID sets the "account_id" field.
func (_u *AccountRolesUpdateOne) SetAccountID(v xid.ID) *AccountRolesUpdateOne {
	_u.mutation.SetAccountID(v)
	return _u
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (_u *AccountRolesUpdateOne) SetNillableAccountID(v *xid.ID) *AccountRolesUpdateOne {
	if v != nil {
		_u.SetAccountID(*v)
	}
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *AccountRolesUpdateOne) SetRoleID(v xid.ID) *AccountRolesUpdateOne {
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *AccountRolesUpdateOne) SetNillableRoleID(v *xid.ID) *AccountRolesUpdateOne {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *AccountRolesUpdateOne) SetBadge(v bool) *AccountRolesUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (_u *AccountRolesUpdateOne) SetNillableBadge(v *bool) *AccountRolesUpdateOne {
	if v != nil {
		_u.SetBadge(*v)
	}
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *AccountRolesUpdateOne) ClearBadge() *AccountRolesUpdateOne {
	_u.mutation.ClearBadge()
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *AccountRolesUpdateOne) SetAccount(v *Account) *AccountRolesUpdateOne {
	return _u.SetAccountID(v.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (_u *AccountRolesUpdateOne) SetRole(v *Role) *AccountRolesUpdateOne {
	return _u.SetRoleID(v.ID)
}

// Mutation returns the AccountRolesMutation object of the builder.
func (_u *AccountRolesUpdateOne) Mutation() *AccountRolesMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *AccountRolesUpdateOne) ClearAccount() *AccountRolesUpdateOne {
	_u.mutation.ClearAccount()
	return _u
}

// ClearRole clears the "role" edge to the Role entity.
func (_u *AccountRolesUpdateOne) ClearRole() *AccountRolesUpdateOne {
	_u.mutation.ClearRole()
	return _u
}

// Where appends a list predicates to the AccountRolesUpdate builder.
func (_u *AccountRolesUpdateOne) Where(ps ...predicate.AccountRoles) *AccountRolesUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AccountRolesUpdateOne) Select(field string, fields ...string) *AccountRolesUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AccountRoles entity.
func (_u *AccountRolesUpdateOne) Save(ctx context.Context) (*AccountRoles, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AccountRolesUpdateOne) SaveX(ctx context.Context) *AccountRoles {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AccountRolesUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AccountRolesUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AccountRolesUpdateOne) check() error {
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountRoles.account"`)
	}
	if _u.mutation.RoleCleared() && len(_u.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccountRoles.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AccountRolesUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AccountRolesUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AccountRolesUpdateOne) sqlSave(ctx context.Context) (_node *AccountRoles, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountroles.Table, accountroles.Columns, sqlgraph.NewFieldSpec(accountroles.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountRoles.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountroles.FieldID)
		for _, f := range fields {
			if !accountroles.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountroles.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(accountroles.FieldBadge, field.TypeBool, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(accountroles.FieldBadge, field.TypeBool)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.AccountTable,
			Columns: []string{accountroles.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.AccountTable,
			Columns: []string{accountroles.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.RoleTable,
			Columns: []string{accountroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountroles.RoleTable,
			Columns: []string{accountroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AccountRoles{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
