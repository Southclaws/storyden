// Code generated by ent, DO NOT EDIT.

package email

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldCreatedAt, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v xid.ID) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldAccountID, v))
}

// EmailAddress applies equality check predicate on the "email_address" field. It's identical to EmailAddressEQ.
func EmailAddress(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldEmailAddress, v))
}

// VerificationCode applies equality check predicate on the "verification_code" field. It's identical to VerificationCodeEQ.
func VerificationCode(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldVerificationCode, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldVerified, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldCreatedAt, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v xid.ID) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v xid.ID) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...xid.ID) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...xid.ID) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v xid.ID) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v xid.ID) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v xid.ID) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v xid.ID) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v xid.ID) predicate.Email {
	vc := v.String()
	return predicate.Email(sql.FieldContains(FieldAccountID, vc))
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v xid.ID) predicate.Email {
	vc := v.String()
	return predicate.Email(sql.FieldHasPrefix(FieldAccountID, vc))
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v xid.ID) predicate.Email {
	vc := v.String()
	return predicate.Email(sql.FieldHasSuffix(FieldAccountID, vc))
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.Email {
	return predicate.Email(sql.FieldIsNull(FieldAccountID))
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.Email {
	return predicate.Email(sql.FieldNotNull(FieldAccountID))
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v xid.ID) predicate.Email {
	vc := v.String()
	return predicate.Email(sql.FieldEqualFold(FieldAccountID, vc))
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v xid.ID) predicate.Email {
	vc := v.String()
	return predicate.Email(sql.FieldContainsFold(FieldAccountID, vc))
}

// EmailAddressEQ applies the EQ predicate on the "email_address" field.
func EmailAddressEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldEmailAddress, v))
}

// EmailAddressNEQ applies the NEQ predicate on the "email_address" field.
func EmailAddressNEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldEmailAddress, v))
}

// EmailAddressIn applies the In predicate on the "email_address" field.
func EmailAddressIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldEmailAddress, vs...))
}

// EmailAddressNotIn applies the NotIn predicate on the "email_address" field.
func EmailAddressNotIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldEmailAddress, vs...))
}

// EmailAddressGT applies the GT predicate on the "email_address" field.
func EmailAddressGT(v string) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldEmailAddress, v))
}

// EmailAddressGTE applies the GTE predicate on the "email_address" field.
func EmailAddressGTE(v string) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldEmailAddress, v))
}

// EmailAddressLT applies the LT predicate on the "email_address" field.
func EmailAddressLT(v string) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldEmailAddress, v))
}

// EmailAddressLTE applies the LTE predicate on the "email_address" field.
func EmailAddressLTE(v string) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldEmailAddress, v))
}

// EmailAddressContains applies the Contains predicate on the "email_address" field.
func EmailAddressContains(v string) predicate.Email {
	return predicate.Email(sql.FieldContains(FieldEmailAddress, v))
}

// EmailAddressHasPrefix applies the HasPrefix predicate on the "email_address" field.
func EmailAddressHasPrefix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasPrefix(FieldEmailAddress, v))
}

// EmailAddressHasSuffix applies the HasSuffix predicate on the "email_address" field.
func EmailAddressHasSuffix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasSuffix(FieldEmailAddress, v))
}

// EmailAddressEqualFold applies the EqualFold predicate on the "email_address" field.
func EmailAddressEqualFold(v string) predicate.Email {
	return predicate.Email(sql.FieldEqualFold(FieldEmailAddress, v))
}

// EmailAddressContainsFold applies the ContainsFold predicate on the "email_address" field.
func EmailAddressContainsFold(v string) predicate.Email {
	return predicate.Email(sql.FieldContainsFold(FieldEmailAddress, v))
}

// VerificationCodeEQ applies the EQ predicate on the "verification_code" field.
func VerificationCodeEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldVerificationCode, v))
}

// VerificationCodeNEQ applies the NEQ predicate on the "verification_code" field.
func VerificationCodeNEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldVerificationCode, v))
}

// VerificationCodeIn applies the In predicate on the "verification_code" field.
func VerificationCodeIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldVerificationCode, vs...))
}

// VerificationCodeNotIn applies the NotIn predicate on the "verification_code" field.
func VerificationCodeNotIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldVerificationCode, vs...))
}

// VerificationCodeGT applies the GT predicate on the "verification_code" field.
func VerificationCodeGT(v string) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldVerificationCode, v))
}

// VerificationCodeGTE applies the GTE predicate on the "verification_code" field.
func VerificationCodeGTE(v string) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldVerificationCode, v))
}

// VerificationCodeLT applies the LT predicate on the "verification_code" field.
func VerificationCodeLT(v string) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldVerificationCode, v))
}

// VerificationCodeLTE applies the LTE predicate on the "verification_code" field.
func VerificationCodeLTE(v string) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldVerificationCode, v))
}

// VerificationCodeContains applies the Contains predicate on the "verification_code" field.
func VerificationCodeContains(v string) predicate.Email {
	return predicate.Email(sql.FieldContains(FieldVerificationCode, v))
}

// VerificationCodeHasPrefix applies the HasPrefix predicate on the "verification_code" field.
func VerificationCodeHasPrefix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasPrefix(FieldVerificationCode, v))
}

// VerificationCodeHasSuffix applies the HasSuffix predicate on the "verification_code" field.
func VerificationCodeHasSuffix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasSuffix(FieldVerificationCode, v))
}

// VerificationCodeEqualFold applies the EqualFold predicate on the "verification_code" field.
func VerificationCodeEqualFold(v string) predicate.Email {
	return predicate.Email(sql.FieldEqualFold(FieldVerificationCode, v))
}

// VerificationCodeContainsFold applies the ContainsFold predicate on the "verification_code" field.
func VerificationCodeContainsFold(v string) predicate.Email {
	return predicate.Email(sql.FieldContainsFold(FieldVerificationCode, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldVerified, v))
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.Email {
	return predicate.Email(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.Account) predicate.Email {
	return predicate.Email(func(s *sql.Selector) {
		step := newAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Email) predicate.Email {
	return predicate.Email(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Email) predicate.Email {
	return predicate.Email(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Email) predicate.Email {
	return predicate.Email(sql.NotPredicates(p))
}
