// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Southclaws/storyden/internal/ent/account"
	"github.com/Southclaws/storyden/internal/ent/asset"
	"github.com/Southclaws/storyden/internal/ent/category"
	"github.com/Southclaws/storyden/internal/ent/collection"
	"github.com/Southclaws/storyden/internal/ent/event"
	"github.com/Southclaws/storyden/internal/ent/likepost"
	"github.com/Southclaws/storyden/internal/ent/link"
	"github.com/Southclaws/storyden/internal/ent/mentionprofile"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/react"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagpost"
	"github.com/rs/xid"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	mutation *PostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PostCreate) SetCreatedAt(t time.Time) *PostCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PostCreate) SetNillableCreatedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PostCreate) SetUpdatedAt(t time.Time) *PostCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PostCreate) SetDeletedAt(t time.Time) *PostCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PostCreate) SetNillableDeletedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetIndexedAt sets the "indexed_at" field.
func (pc *PostCreate) SetIndexedAt(t time.Time) *PostCreate {
	pc.mutation.SetIndexedAt(t)
	return pc
}

// SetNillableIndexedAt sets the "indexed_at" field if the given value is not nil.
func (pc *PostCreate) SetNillableIndexedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetIndexedAt(*t)
	}
	return pc
}

// SetFirst sets the "first" field.
func (pc *PostCreate) SetFirst(b bool) *PostCreate {
	pc.mutation.SetFirst(b)
	return pc
}

// SetTitle sets the "title" field.
func (pc *PostCreate) SetTitle(s string) *PostCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *PostCreate) SetNillableTitle(s *string) *PostCreate {
	if s != nil {
		pc.SetTitle(*s)
	}
	return pc
}

// SetSlug sets the "slug" field.
func (pc *PostCreate) SetSlug(s string) *PostCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pc *PostCreate) SetNillableSlug(s *string) *PostCreate {
	if s != nil {
		pc.SetSlug(*s)
	}
	return pc
}

// SetPinned sets the "pinned" field.
func (pc *PostCreate) SetPinned(b bool) *PostCreate {
	pc.mutation.SetPinned(b)
	return pc
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (pc *PostCreate) SetNillablePinned(b *bool) *PostCreate {
	if b != nil {
		pc.SetPinned(*b)
	}
	return pc
}

// SetRootPostID sets the "root_post_id" field.
func (pc *PostCreate) SetRootPostID(x xid.ID) *PostCreate {
	pc.mutation.SetRootPostID(x)
	return pc
}

// SetNillableRootPostID sets the "root_post_id" field if the given value is not nil.
func (pc *PostCreate) SetNillableRootPostID(x *xid.ID) *PostCreate {
	if x != nil {
		pc.SetRootPostID(*x)
	}
	return pc
}

// SetReplyToPostID sets the "reply_to_post_id" field.
func (pc *PostCreate) SetReplyToPostID(x xid.ID) *PostCreate {
	pc.mutation.SetReplyToPostID(x)
	return pc
}

// SetNillableReplyToPostID sets the "reply_to_post_id" field if the given value is not nil.
func (pc *PostCreate) SetNillableReplyToPostID(x *xid.ID) *PostCreate {
	if x != nil {
		pc.SetReplyToPostID(*x)
	}
	return pc
}

// SetBody sets the "body" field.
func (pc *PostCreate) SetBody(s string) *PostCreate {
	pc.mutation.SetBody(s)
	return pc
}

// SetShort sets the "short" field.
func (pc *PostCreate) SetShort(s string) *PostCreate {
	pc.mutation.SetShort(s)
	return pc
}

// SetMetadata sets the "metadata" field.
func (pc *PostCreate) SetMetadata(m map[string]interface{}) *PostCreate {
	pc.mutation.SetMetadata(m)
	return pc
}

// SetVisibility sets the "visibility" field.
func (pc *PostCreate) SetVisibility(po post.Visibility) *PostCreate {
	pc.mutation.SetVisibility(po)
	return pc
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (pc *PostCreate) SetNillableVisibility(po *post.Visibility) *PostCreate {
	if po != nil {
		pc.SetVisibility(*po)
	}
	return pc
}

// SetAccountPosts sets the "account_posts" field.
func (pc *PostCreate) SetAccountPosts(x xid.ID) *PostCreate {
	pc.mutation.SetAccountPosts(x)
	return pc
}

// SetCategoryID sets the "category_id" field.
func (pc *PostCreate) SetCategoryID(x xid.ID) *PostCreate {
	pc.mutation.SetCategoryID(x)
	return pc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (pc *PostCreate) SetNillableCategoryID(x *xid.ID) *PostCreate {
	if x != nil {
		pc.SetCategoryID(*x)
	}
	return pc
}

// SetLinkID sets the "link_id" field.
func (pc *PostCreate) SetLinkID(x xid.ID) *PostCreate {
	pc.mutation.SetLinkID(x)
	return pc
}

// SetNillableLinkID sets the "link_id" field if the given value is not nil.
func (pc *PostCreate) SetNillableLinkID(x *xid.ID) *PostCreate {
	if x != nil {
		pc.SetLinkID(*x)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PostCreate) SetID(x xid.ID) *PostCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PostCreate) SetNillableID(x *xid.ID) *PostCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// SetAuthorID sets the "author" edge to the Account entity by ID.
func (pc *PostCreate) SetAuthorID(id xid.ID) *PostCreate {
	pc.mutation.SetAuthorID(id)
	return pc
}

// SetAuthor sets the "author" edge to the Account entity.
func (pc *PostCreate) SetAuthor(a *Account) *PostCreate {
	return pc.SetAuthorID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (pc *PostCreate) SetCategory(c *Category) *PostCreate {
	return pc.SetCategoryID(c.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pc *PostCreate) AddTagIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddTagIDs(ids...)
	return pc
}

// AddTags adds the "tags" edges to the Tag entity.
func (pc *PostCreate) AddTags(t ...*Tag) *PostCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTagIDs(ids...)
}

// SetRootID sets the "root" edge to the Post entity by ID.
func (pc *PostCreate) SetRootID(id xid.ID) *PostCreate {
	pc.mutation.SetRootID(id)
	return pc
}

// SetNillableRootID sets the "root" edge to the Post entity by ID if the given value is not nil.
func (pc *PostCreate) SetNillableRootID(id *xid.ID) *PostCreate {
	if id != nil {
		pc = pc.SetRootID(*id)
	}
	return pc
}

// SetRoot sets the "root" edge to the Post entity.
func (pc *PostCreate) SetRoot(p *Post) *PostCreate {
	return pc.SetRootID(p.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (pc *PostCreate) AddPostIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddPostIDs(ids...)
	return pc
}

// AddPosts adds the "posts" edges to the Post entity.
func (pc *PostCreate) AddPosts(p ...*Post) *PostCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPostIDs(ids...)
}

// SetReplyToID sets the "replyTo" edge to the Post entity by ID.
func (pc *PostCreate) SetReplyToID(id xid.ID) *PostCreate {
	pc.mutation.SetReplyToID(id)
	return pc
}

// SetNillableReplyToID sets the "replyTo" edge to the Post entity by ID if the given value is not nil.
func (pc *PostCreate) SetNillableReplyToID(id *xid.ID) *PostCreate {
	if id != nil {
		pc = pc.SetReplyToID(*id)
	}
	return pc
}

// SetReplyTo sets the "replyTo" edge to the Post entity.
func (pc *PostCreate) SetReplyTo(p *Post) *PostCreate {
	return pc.SetReplyToID(p.ID)
}

// AddReplyIDs adds the "replies" edge to the Post entity by IDs.
func (pc *PostCreate) AddReplyIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddReplyIDs(ids...)
	return pc
}

// AddReplies adds the "replies" edges to the Post entity.
func (pc *PostCreate) AddReplies(p ...*Post) *PostCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddReplyIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (pc *PostCreate) AddReactIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddReactIDs(ids...)
	return pc
}

// AddReacts adds the "reacts" edges to the React entity.
func (pc *PostCreate) AddReacts(r ...*React) *PostCreate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReactIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the LikePost entity by IDs.
func (pc *PostCreate) AddLikeIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddLikeIDs(ids...)
	return pc
}

// AddLikes adds the "likes" edges to the LikePost entity.
func (pc *PostCreate) AddLikes(l ...*LikePost) *PostCreate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pc.AddLikeIDs(ids...)
}

// AddMentionIDs adds the "mentions" edge to the MentionProfile entity by IDs.
func (pc *PostCreate) AddMentionIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddMentionIDs(ids...)
	return pc
}

// AddMentions adds the "mentions" edges to the MentionProfile entity.
func (pc *PostCreate) AddMentions(m ...*MentionProfile) *PostCreate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pc.AddMentionIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (pc *PostCreate) AddAssetIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddAssetIDs(ids...)
	return pc
}

// AddAssets adds the "assets" edges to the Asset entity.
func (pc *PostCreate) AddAssets(a ...*Asset) *PostCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAssetIDs(ids...)
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (pc *PostCreate) AddCollectionIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddCollectionIDs(ids...)
	return pc
}

// AddCollections adds the "collections" edges to the Collection entity.
func (pc *PostCreate) AddCollections(c ...*Collection) *PostCreate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCollectionIDs(ids...)
}

// SetLink sets the "link" edge to the Link entity.
func (pc *PostCreate) SetLink(l *Link) *PostCreate {
	return pc.SetLinkID(l.ID)
}

// AddContentLinkIDs adds the "content_links" edge to the Link entity by IDs.
func (pc *PostCreate) AddContentLinkIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddContentLinkIDs(ids...)
	return pc
}

// AddContentLinks adds the "content_links" edges to the Link entity.
func (pc *PostCreate) AddContentLinks(l ...*Link) *PostCreate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pc.AddContentLinkIDs(ids...)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (pc *PostCreate) AddEventIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddEventIDs(ids...)
	return pc
}

// AddEvent adds the "event" edges to the Event entity.
func (pc *PostCreate) AddEvent(e ...*Event) *PostCreate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pc.AddEventIDs(ids...)
}

// AddPostTagIDs adds the "post_tags" edge to the TagPost entity by IDs.
func (pc *PostCreate) AddPostTagIDs(ids ...xid.ID) *PostCreate {
	pc.mutation.AddPostTagIDs(ids...)
	return pc
}

// AddPostTags adds the "post_tags" edges to the TagPost entity.
func (pc *PostCreate) AddPostTags(t ...*TagPost) *PostCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddPostTagIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pc *PostCreate) Mutation() *PostMutation {
	return pc.mutation
}

// Save creates the Post in the database.
func (pc *PostCreate) Save(ctx context.Context) (*Post, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PostCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PostCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PostCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := post.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.Pinned(); !ok {
		v := post.DefaultPinned
		pc.mutation.SetPinned(v)
	}
	if _, ok := pc.mutation.Visibility(); !ok {
		v := post.DefaultVisibility
		pc.mutation.SetVisibility(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := post.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PostCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Post.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Post.updated_at"`)}
	}
	if _, ok := pc.mutation.First(); !ok {
		return &ValidationError{Name: "first", err: errors.New(`ent: missing required field "Post.first"`)}
	}
	if _, ok := pc.mutation.Pinned(); !ok {
		return &ValidationError{Name: "pinned", err: errors.New(`ent: missing required field "Post.pinned"`)}
	}
	if _, ok := pc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Post.body"`)}
	}
	if _, ok := pc.mutation.Short(); !ok {
		return &ValidationError{Name: "short", err: errors.New(`ent: missing required field "Post.short"`)}
	}
	if _, ok := pc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "Post.visibility"`)}
	}
	if v, ok := pc.mutation.Visibility(); ok {
		if err := post.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Post.visibility": %w`, err)}
		}
	}
	if _, ok := pc.mutation.AccountPosts(); !ok {
		return &ValidationError{Name: "account_posts", err: errors.New(`ent: missing required field "Post.account_posts"`)}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := post.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Post.id": %w`, err)}
		}
	}
	if len(pc.mutation.AuthorIDs()) == 0 {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "Post.author"`)}
	}
	return nil
}

func (pc *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PostCreate) createSpec() (*Post, *sqlgraph.CreateSpec) {
	var (
		_node = &Post{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(post.Table, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(post.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.IndexedAt(); ok {
		_spec.SetField(post.FieldIndexedAt, field.TypeTime, value)
		_node.IndexedAt = &value
	}
	if value, ok := pc.mutation.First(); ok {
		_spec.SetField(post.FieldFirst, field.TypeBool, value)
		_node.First = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(post.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pc.mutation.Pinned(); ok {
		_spec.SetField(post.FieldPinned, field.TypeBool, value)
		_node.Pinned = value
	}
	if value, ok := pc.mutation.Body(); ok {
		_spec.SetField(post.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := pc.mutation.Short(); ok {
		_spec.SetField(post.FieldShort, field.TypeString, value)
		_node.Short = value
	}
	if value, ok := pc.mutation.Metadata(); ok {
		_spec.SetField(post.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := pc.mutation.Visibility(); ok {
		_spec.SetField(post.FieldVisibility, field.TypeEnum, value)
		_node.Visibility = value
	}
	if nodes := pc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.AuthorTable,
			Columns: []string{post.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountPosts = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.CategoryTable,
			Columns: []string{post.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TagPostCreate{config: pc.config, mutation: newTagPostMutation(pc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.RootTable,
			Columns: []string{post.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RootPostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostsTable,
			Columns: []string{post.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.ReplyToTable,
			Columns: []string{post.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReplyToPostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ReactsTable,
			Columns: []string{post.ReactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.LikesTable,
			Columns: []string{post.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likepost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MentionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MentionsTable,
			Columns: []string{post.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentionprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.AssetsTable,
			Columns: post.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.CollectionsTable,
			Columns: post.CollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.LinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.LinkTable,
			Columns: []string{post.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LinkID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ContentLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.ContentLinksTable,
			Columns: post.ContentLinksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.EventTable,
			Columns: []string{post.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PostTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.PostTagsTable,
			Columns: []string{post.PostTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagpost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PostCreate) OnConflict(opts ...sql.ConflictOption) *PostUpsertOne {
	pc.conflict = opts
	return &PostUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PostCreate) OnConflictColumns(columns ...string) *PostUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertOne{
		create: pc,
	}
}

type (
	// PostUpsertOne is the builder for "upsert"-ing
	//  one Post node.
	PostUpsertOne struct {
		create *PostCreate
	}

	// PostUpsert is the "OnConflict" setter.
	PostUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PostUpsert) SetUpdatedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostUpsert) UpdateUpdatedAt() *PostUpsert {
	u.SetExcluded(post.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostUpsert) SetDeletedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostUpsert) UpdateDeletedAt() *PostUpsert {
	u.SetExcluded(post.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostUpsert) ClearDeletedAt() *PostUpsert {
	u.SetNull(post.FieldDeletedAt)
	return u
}

// SetIndexedAt sets the "indexed_at" field.
func (u *PostUpsert) SetIndexedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldIndexedAt, v)
	return u
}

// UpdateIndexedAt sets the "indexed_at" field to the value that was provided on create.
func (u *PostUpsert) UpdateIndexedAt() *PostUpsert {
	u.SetExcluded(post.FieldIndexedAt)
	return u
}

// ClearIndexedAt clears the value of the "indexed_at" field.
func (u *PostUpsert) ClearIndexedAt() *PostUpsert {
	u.SetNull(post.FieldIndexedAt)
	return u
}

// SetFirst sets the "first" field.
func (u *PostUpsert) SetFirst(v bool) *PostUpsert {
	u.Set(post.FieldFirst, v)
	return u
}

// UpdateFirst sets the "first" field to the value that was provided on create.
func (u *PostUpsert) UpdateFirst() *PostUpsert {
	u.SetExcluded(post.FieldFirst)
	return u
}

// SetTitle sets the "title" field.
func (u *PostUpsert) SetTitle(v string) *PostUpsert {
	u.Set(post.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsert) UpdateTitle() *PostUpsert {
	u.SetExcluded(post.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsert) ClearTitle() *PostUpsert {
	u.SetNull(post.FieldTitle)
	return u
}

// SetSlug sets the "slug" field.
func (u *PostUpsert) SetSlug(v string) *PostUpsert {
	u.Set(post.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsert) UpdateSlug() *PostUpsert {
	u.SetExcluded(post.FieldSlug)
	return u
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsert) ClearSlug() *PostUpsert {
	u.SetNull(post.FieldSlug)
	return u
}

// SetPinned sets the "pinned" field.
func (u *PostUpsert) SetPinned(v bool) *PostUpsert {
	u.Set(post.FieldPinned, v)
	return u
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *PostUpsert) UpdatePinned() *PostUpsert {
	u.SetExcluded(post.FieldPinned)
	return u
}

// SetRootPostID sets the "root_post_id" field.
func (u *PostUpsert) SetRootPostID(v xid.ID) *PostUpsert {
	u.Set(post.FieldRootPostID, v)
	return u
}

// UpdateRootPostID sets the "root_post_id" field to the value that was provided on create.
func (u *PostUpsert) UpdateRootPostID() *PostUpsert {
	u.SetExcluded(post.FieldRootPostID)
	return u
}

// ClearRootPostID clears the value of the "root_post_id" field.
func (u *PostUpsert) ClearRootPostID() *PostUpsert {
	u.SetNull(post.FieldRootPostID)
	return u
}

// SetReplyToPostID sets the "reply_to_post_id" field.
func (u *PostUpsert) SetReplyToPostID(v xid.ID) *PostUpsert {
	u.Set(post.FieldReplyToPostID, v)
	return u
}

// UpdateReplyToPostID sets the "reply_to_post_id" field to the value that was provided on create.
func (u *PostUpsert) UpdateReplyToPostID() *PostUpsert {
	u.SetExcluded(post.FieldReplyToPostID)
	return u
}

// ClearReplyToPostID clears the value of the "reply_to_post_id" field.
func (u *PostUpsert) ClearReplyToPostID() *PostUpsert {
	u.SetNull(post.FieldReplyToPostID)
	return u
}

// SetBody sets the "body" field.
func (u *PostUpsert) SetBody(v string) *PostUpsert {
	u.Set(post.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostUpsert) UpdateBody() *PostUpsert {
	u.SetExcluded(post.FieldBody)
	return u
}

// SetShort sets the "short" field.
func (u *PostUpsert) SetShort(v string) *PostUpsert {
	u.Set(post.FieldShort, v)
	return u
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *PostUpsert) UpdateShort() *PostUpsert {
	u.SetExcluded(post.FieldShort)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *PostUpsert) SetMetadata(v map[string]interface{}) *PostUpsert {
	u.Set(post.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PostUpsert) UpdateMetadata() *PostUpsert {
	u.SetExcluded(post.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PostUpsert) ClearMetadata() *PostUpsert {
	u.SetNull(post.FieldMetadata)
	return u
}

// SetVisibility sets the "visibility" field.
func (u *PostUpsert) SetVisibility(v post.Visibility) *PostUpsert {
	u.Set(post.FieldVisibility, v)
	return u
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *PostUpsert) UpdateVisibility() *PostUpsert {
	u.SetExcluded(post.FieldVisibility)
	return u
}

// SetAccountPosts sets the "account_posts" field.
func (u *PostUpsert) SetAccountPosts(v xid.ID) *PostUpsert {
	u.Set(post.FieldAccountPosts, v)
	return u
}

// UpdateAccountPosts sets the "account_posts" field to the value that was provided on create.
func (u *PostUpsert) UpdateAccountPosts() *PostUpsert {
	u.SetExcluded(post.FieldAccountPosts)
	return u
}

// SetCategoryID sets the "category_id" field.
func (u *PostUpsert) SetCategoryID(v xid.ID) *PostUpsert {
	u.Set(post.FieldCategoryID, v)
	return u
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *PostUpsert) UpdateCategoryID() *PostUpsert {
	u.SetExcluded(post.FieldCategoryID)
	return u
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *PostUpsert) ClearCategoryID() *PostUpsert {
	u.SetNull(post.FieldCategoryID)
	return u
}

// SetLinkID sets the "link_id" field.
func (u *PostUpsert) SetLinkID(v xid.ID) *PostUpsert {
	u.Set(post.FieldLinkID, v)
	return u
}

// UpdateLinkID sets the "link_id" field to the value that was provided on create.
func (u *PostUpsert) UpdateLinkID() *PostUpsert {
	u.SetExcluded(post.FieldLinkID)
	return u
}

// ClearLinkID clears the value of the "link_id" field.
func (u *PostUpsert) ClearLinkID() *PostUpsert {
	u.SetNull(post.FieldLinkID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(post.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostUpsertOne) UpdateNewValues() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(post.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(post.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PostUpsertOne) Ignore() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertOne) DoNothing() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreate.OnConflict
// documentation for more info.
func (u *PostUpsertOne) Update(set func(*PostUpsert)) *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostUpsertOne) SetUpdatedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateUpdatedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostUpsertOne) SetDeletedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateDeletedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostUpsertOne) ClearDeletedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIndexedAt sets the "indexed_at" field.
func (u *PostUpsertOne) SetIndexedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetIndexedAt(v)
	})
}

// UpdateIndexedAt sets the "indexed_at" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateIndexedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateIndexedAt()
	})
}

// ClearIndexedAt clears the value of the "indexed_at" field.
func (u *PostUpsertOne) ClearIndexedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearIndexedAt()
	})
}

// SetFirst sets the "first" field.
func (u *PostUpsertOne) SetFirst(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetFirst(v)
	})
}

// UpdateFirst sets the "first" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateFirst() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFirst()
	})
}

// SetTitle sets the "title" field.
func (u *PostUpsertOne) SetTitle(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateTitle() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsertOne) ClearTitle() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearTitle()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertOne) SetSlug(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateSlug() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsertOne) ClearSlug() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearSlug()
	})
}

// SetPinned sets the "pinned" field.
func (u *PostUpsertOne) SetPinned(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetPinned(v)
	})
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *PostUpsertOne) UpdatePinned() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdatePinned()
	})
}

// SetRootPostID sets the "root_post_id" field.
func (u *PostUpsertOne) SetRootPostID(v xid.ID) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetRootPostID(v)
	})
}

// UpdateRootPostID sets the "root_post_id" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateRootPostID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRootPostID()
	})
}

// ClearRootPostID clears the value of the "root_post_id" field.
func (u *PostUpsertOne) ClearRootPostID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearRootPostID()
	})
}

// SetReplyToPostID sets the "reply_to_post_id" field.
func (u *PostUpsertOne) SetReplyToPostID(v xid.ID) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetReplyToPostID(v)
	})
}

// UpdateReplyToPostID sets the "reply_to_post_id" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateReplyToPostID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateReplyToPostID()
	})
}

// ClearReplyToPostID clears the value of the "reply_to_post_id" field.
func (u *PostUpsertOne) ClearReplyToPostID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearReplyToPostID()
	})
}

// SetBody sets the "body" field.
func (u *PostUpsertOne) SetBody(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateBody() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateBody()
	})
}

// SetShort sets the "short" field.
func (u *PostUpsertOne) SetShort(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateShort() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateShort()
	})
}

// SetMetadata sets the "metadata" field.
func (u *PostUpsertOne) SetMetadata(v map[string]interface{}) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateMetadata() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PostUpsertOne) ClearMetadata() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearMetadata()
	})
}

// SetVisibility sets the "visibility" field.
func (u *PostUpsertOne) SetVisibility(v post.Visibility) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateVisibility() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateVisibility()
	})
}

// SetAccountPosts sets the "account_posts" field.
func (u *PostUpsertOne) SetAccountPosts(v xid.ID) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetAccountPosts(v)
	})
}

// UpdateAccountPosts sets the "account_posts" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateAccountPosts() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateAccountPosts()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *PostUpsertOne) SetCategoryID(v xid.ID) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateCategoryID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *PostUpsertOne) ClearCategoryID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearCategoryID()
	})
}

// SetLinkID sets the "link_id" field.
func (u *PostUpsertOne) SetLinkID(v xid.ID) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetLinkID(v)
	})
}

// UpdateLinkID sets the "link_id" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateLinkID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateLinkID()
	})
}

// ClearLinkID clears the value of the "link_id" field.
func (u *PostUpsertOne) ClearLinkID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearLinkID()
	})
}

// Exec executes the query.
func (u *PostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PostUpsertOne.ID is not supported by MySQL driver. Use PostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostCreateBulk is the builder for creating many Post entities in bulk.
type PostCreateBulk struct {
	config
	err      error
	builders []*PostCreate
	conflict []sql.ConflictOption
}

// Save creates the Post entities in the database.
func (pcb *PostCreateBulk) Save(ctx context.Context) ([]*Post, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Post, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PostCreateBulk) SaveX(ctx context.Context) []*Post {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PostCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PostCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PostCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostUpsertBulk {
	pcb.conflict = opts
	return &PostUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PostCreateBulk) OnConflictColumns(columns ...string) *PostUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertBulk{
		create: pcb,
	}
}

// PostUpsertBulk is the builder for "upsert"-ing
// a bulk of Post nodes.
type PostUpsertBulk struct {
	create *PostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(post.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostUpsertBulk) UpdateNewValues() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(post.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(post.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PostUpsertBulk) Ignore() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertBulk) DoNothing() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreateBulk.OnConflict
// documentation for more info.
func (u *PostUpsertBulk) Update(set func(*PostUpsert)) *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostUpsertBulk) SetUpdatedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateUpdatedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostUpsertBulk) SetDeletedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateDeletedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostUpsertBulk) ClearDeletedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIndexedAt sets the "indexed_at" field.
func (u *PostUpsertBulk) SetIndexedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetIndexedAt(v)
	})
}

// UpdateIndexedAt sets the "indexed_at" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateIndexedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateIndexedAt()
	})
}

// ClearIndexedAt clears the value of the "indexed_at" field.
func (u *PostUpsertBulk) ClearIndexedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearIndexedAt()
	})
}

// SetFirst sets the "first" field.
func (u *PostUpsertBulk) SetFirst(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetFirst(v)
	})
}

// UpdateFirst sets the "first" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateFirst() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFirst()
	})
}

// SetTitle sets the "title" field.
func (u *PostUpsertBulk) SetTitle(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateTitle() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsertBulk) ClearTitle() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearTitle()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertBulk) SetSlug(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateSlug() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsertBulk) ClearSlug() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearSlug()
	})
}

// SetPinned sets the "pinned" field.
func (u *PostUpsertBulk) SetPinned(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetPinned(v)
	})
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdatePinned() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdatePinned()
	})
}

// SetRootPostID sets the "root_post_id" field.
func (u *PostUpsertBulk) SetRootPostID(v xid.ID) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetRootPostID(v)
	})
}

// UpdateRootPostID sets the "root_post_id" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateRootPostID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRootPostID()
	})
}

// ClearRootPostID clears the value of the "root_post_id" field.
func (u *PostUpsertBulk) ClearRootPostID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearRootPostID()
	})
}

// SetReplyToPostID sets the "reply_to_post_id" field.
func (u *PostUpsertBulk) SetReplyToPostID(v xid.ID) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetReplyToPostID(v)
	})
}

// UpdateReplyToPostID sets the "reply_to_post_id" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateReplyToPostID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateReplyToPostID()
	})
}

// ClearReplyToPostID clears the value of the "reply_to_post_id" field.
func (u *PostUpsertBulk) ClearReplyToPostID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearReplyToPostID()
	})
}

// SetBody sets the "body" field.
func (u *PostUpsertBulk) SetBody(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateBody() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateBody()
	})
}

// SetShort sets the "short" field.
func (u *PostUpsertBulk) SetShort(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateShort() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateShort()
	})
}

// SetMetadata sets the "metadata" field.
func (u *PostUpsertBulk) SetMetadata(v map[string]interface{}) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateMetadata() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PostUpsertBulk) ClearMetadata() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearMetadata()
	})
}

// SetVisibility sets the "visibility" field.
func (u *PostUpsertBulk) SetVisibility(v post.Visibility) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateVisibility() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateVisibility()
	})
}

// SetAccountPosts sets the "account_posts" field.
func (u *PostUpsertBulk) SetAccountPosts(v xid.ID) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetAccountPosts(v)
	})
}

// UpdateAccountPosts sets the "account_posts" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateAccountPosts() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateAccountPosts()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *PostUpsertBulk) SetCategoryID(v xid.ID) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateCategoryID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *PostUpsertBulk) ClearCategoryID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearCategoryID()
	})
}

// SetLinkID sets the "link_id" field.
func (u *PostUpsertBulk) SetLinkID(v xid.ID) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetLinkID(v)
	})
}

// UpdateLinkID sets the "link_id" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateLinkID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateLinkID()
	})
}

// ClearLinkID clears the value of the "link_id" field.
func (u *PostUpsertBulk) ClearLinkID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearLinkID()
	})
}

// Exec executes the query.
func (u *PostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
