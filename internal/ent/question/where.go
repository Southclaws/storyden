// Code generated by ent, DO NOT EDIT.

package question

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// IndexedAt applies equality check predicate on the "indexed_at" field. It's identical to IndexedAtEQ.
func IndexedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldIndexedAt, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldSlug, v))
}

// Query applies equality check predicate on the "query" field. It's identical to QueryEQ.
func Query(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuery, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldResult, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldAccountID, v))
}

// ParentQuestionID applies equality check predicate on the "parent_question_id" field. It's identical to ParentQuestionIDEQ.
func ParentQuestionID(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldParentQuestionID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldCreatedAt, v))
}

// IndexedAtEQ applies the EQ predicate on the "indexed_at" field.
func IndexedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldIndexedAt, v))
}

// IndexedAtNEQ applies the NEQ predicate on the "indexed_at" field.
func IndexedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldIndexedAt, v))
}

// IndexedAtIn applies the In predicate on the "indexed_at" field.
func IndexedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldIndexedAt, vs...))
}

// IndexedAtNotIn applies the NotIn predicate on the "indexed_at" field.
func IndexedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldIndexedAt, vs...))
}

// IndexedAtGT applies the GT predicate on the "indexed_at" field.
func IndexedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldIndexedAt, v))
}

// IndexedAtGTE applies the GTE predicate on the "indexed_at" field.
func IndexedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldIndexedAt, v))
}

// IndexedAtLT applies the LT predicate on the "indexed_at" field.
func IndexedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldIndexedAt, v))
}

// IndexedAtLTE applies the LTE predicate on the "indexed_at" field.
func IndexedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldIndexedAt, v))
}

// IndexedAtIsNil applies the IsNil predicate on the "indexed_at" field.
func IndexedAtIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldIndexedAt))
}

// IndexedAtNotNil applies the NotNil predicate on the "indexed_at" field.
func IndexedAtNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldIndexedAt))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldSlug, v))
}

// QueryEQ applies the EQ predicate on the "query" field.
func QueryEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuery, v))
}

// QueryNEQ applies the NEQ predicate on the "query" field.
func QueryNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuery, v))
}

// QueryIn applies the In predicate on the "query" field.
func QueryIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuery, vs...))
}

// QueryNotIn applies the NotIn predicate on the "query" field.
func QueryNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuery, vs...))
}

// QueryGT applies the GT predicate on the "query" field.
func QueryGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldQuery, v))
}

// QueryGTE applies the GTE predicate on the "query" field.
func QueryGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldQuery, v))
}

// QueryLT applies the LT predicate on the "query" field.
func QueryLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldQuery, v))
}

// QueryLTE applies the LTE predicate on the "query" field.
func QueryLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldQuery, v))
}

// QueryContains applies the Contains predicate on the "query" field.
func QueryContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldQuery, v))
}

// QueryHasPrefix applies the HasPrefix predicate on the "query" field.
func QueryHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldQuery, v))
}

// QueryHasSuffix applies the HasSuffix predicate on the "query" field.
func QueryHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldQuery, v))
}

// QueryEqualFold applies the EqualFold predicate on the "query" field.
func QueryEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldQuery, v))
}

// QueryContainsFold applies the ContainsFold predicate on the "query" field.
func QueryContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldQuery, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldResult, v))
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldResult, v))
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldResult, v))
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldResult, v))
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldResult, v))
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldResult, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldMetadata))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...xid.ID) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...xid.ID) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldContains(FieldAccountID, vc))
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldHasPrefix(FieldAccountID, vc))
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldHasSuffix(FieldAccountID, vc))
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldAccountID))
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldAccountID))
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldEqualFold(FieldAccountID, vc))
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldContainsFold(FieldAccountID, vc))
}

// ParentQuestionIDEQ applies the EQ predicate on the "parent_question_id" field.
func ParentQuestionIDEQ(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldParentQuestionID, v))
}

// ParentQuestionIDNEQ applies the NEQ predicate on the "parent_question_id" field.
func ParentQuestionIDNEQ(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldParentQuestionID, v))
}

// ParentQuestionIDIn applies the In predicate on the "parent_question_id" field.
func ParentQuestionIDIn(vs ...xid.ID) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldParentQuestionID, vs...))
}

// ParentQuestionIDNotIn applies the NotIn predicate on the "parent_question_id" field.
func ParentQuestionIDNotIn(vs ...xid.ID) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldParentQuestionID, vs...))
}

// ParentQuestionIDGT applies the GT predicate on the "parent_question_id" field.
func ParentQuestionIDGT(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldParentQuestionID, v))
}

// ParentQuestionIDGTE applies the GTE predicate on the "parent_question_id" field.
func ParentQuestionIDGTE(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldParentQuestionID, v))
}

// ParentQuestionIDLT applies the LT predicate on the "parent_question_id" field.
func ParentQuestionIDLT(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldParentQuestionID, v))
}

// ParentQuestionIDLTE applies the LTE predicate on the "parent_question_id" field.
func ParentQuestionIDLTE(v xid.ID) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldParentQuestionID, v))
}

// ParentQuestionIDContains applies the Contains predicate on the "parent_question_id" field.
func ParentQuestionIDContains(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldContains(FieldParentQuestionID, vc))
}

// ParentQuestionIDHasPrefix applies the HasPrefix predicate on the "parent_question_id" field.
func ParentQuestionIDHasPrefix(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldHasPrefix(FieldParentQuestionID, vc))
}

// ParentQuestionIDHasSuffix applies the HasSuffix predicate on the "parent_question_id" field.
func ParentQuestionIDHasSuffix(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldHasSuffix(FieldParentQuestionID, vc))
}

// ParentQuestionIDIsNil applies the IsNil predicate on the "parent_question_id" field.
func ParentQuestionIDIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldParentQuestionID))
}

// ParentQuestionIDNotNil applies the NotNil predicate on the "parent_question_id" field.
func ParentQuestionIDNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldParentQuestionID))
}

// ParentQuestionIDEqualFold applies the EqualFold predicate on the "parent_question_id" field.
func ParentQuestionIDEqualFold(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldEqualFold(FieldParentQuestionID, vc))
}

// ParentQuestionIDContainsFold applies the ContainsFold predicate on the "parent_question_id" field.
func ParentQuestionIDContainsFold(v xid.ID) predicate.Question {
	vc := v.String()
	return predicate.Question(sql.FieldContainsFold(FieldParentQuestionID, vc))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.Account) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Question) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentQuestion applies the HasEdge predicate on the "parent_question" edge.
func HasParentQuestion() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParentQuestionTable, ParentQuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentQuestionWith applies the HasEdge predicate on the "parent_question" edge with a given conditions (other predicates).
func HasParentQuestionWith(preds ...predicate.Question) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newParentQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(sql.NotPredicates(p))
}
