// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/internal/ent/post"
	"github.com/Southclaws/storyden/internal/ent/tag"
	"github.com/Southclaws/storyden/internal/ent/tagpost"
	"github.com/rs/xid"
)

// TagPost is the model entity for the TagPost schema.
type TagPost struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID xid.ID `json:"tag_id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID xid.ID `json:"post_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagPostQuery when eager-loading is set.
	Edges        TagPostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TagPostEdges holds the relations/edges for other nodes in the graph.
type TagPostEdges struct {
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagPostEdges) TagOrErr() (*Tag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagPostEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TagPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tagpost.FieldID, tagpost.FieldTagID, tagpost.FieldPostID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TagPost fields.
func (tp *TagPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tagpost.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tp.ID = *value
			}
		case tagpost.FieldTagID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value != nil {
				tp.TagID = *value
			}
		case tagpost.FieldPostID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value != nil {
				tp.PostID = *value
			}
		default:
			tp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TagPost.
// This includes values selected through modifiers, order, etc.
func (tp *TagPost) Value(name string) (ent.Value, error) {
	return tp.selectValues.Get(name)
}

// QueryTag queries the "tag" edge of the TagPost entity.
func (tp *TagPost) QueryTag() *TagQuery {
	return NewTagPostClient(tp.config).QueryTag(tp)
}

// QueryPost queries the "post" edge of the TagPost entity.
func (tp *TagPost) QueryPost() *PostQuery {
	return NewTagPostClient(tp.config).QueryPost(tp)
}

// Update returns a builder for updating this TagPost.
// Note that you need to call TagPost.Unwrap() before calling this method if this TagPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TagPost) Update() *TagPostUpdateOne {
	return NewTagPostClient(tp.config).UpdateOne(tp)
}

// Unwrap unwraps the TagPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TagPost) Unwrap() *TagPost {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TagPost is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TagPost) String() string {
	var builder strings.Builder
	builder.WriteString("TagPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tp.ID))
	builder.WriteString("tag_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.TagID))
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.PostID))
	builder.WriteByte(')')
	return builder.String()
}

// TagPosts is a parsable slice of TagPost.
type TagPosts []*TagPost
