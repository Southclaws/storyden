// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Southclaws/storyden/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldSlug, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndTime, v))
}

// ParticipationPolicy applies equality check predicate on the "participation_policy" field. It's identical to ParticipationPolicyEQ.
func ParticipationPolicy(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldParticipationPolicy, v))
}

// LocationType applies equality check predicate on the "location_type" field. It's identical to LocationTypeEQ.
func LocationType(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationType, v))
}

// LocationName applies equality check predicate on the "location_name" field. It's identical to LocationNameEQ.
func LocationName(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationName, v))
}

// LocationAddress applies equality check predicate on the "location_address" field. It's identical to LocationAddressEQ.
func LocationAddress(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationAddress, v))
}

// LocationLatitude applies equality check predicate on the "location_latitude" field. It's identical to LocationLatitudeEQ.
func LocationLatitude(v float64) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationLatitude, v))
}

// LocationLongitude applies equality check predicate on the "location_longitude" field. It's identical to LocationLongitudeEQ.
func LocationLongitude(v float64) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationLongitude, v))
}

// LocationURL applies equality check predicate on the "location_url" field. It's identical to LocationURLEQ.
func LocationURL(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationURL, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCapacity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldSlug, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldDescription, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEndTime, v))
}

// ParticipationPolicyEQ applies the EQ predicate on the "participation_policy" field.
func ParticipationPolicyEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldParticipationPolicy, v))
}

// ParticipationPolicyNEQ applies the NEQ predicate on the "participation_policy" field.
func ParticipationPolicyNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldParticipationPolicy, v))
}

// ParticipationPolicyIn applies the In predicate on the "participation_policy" field.
func ParticipationPolicyIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldParticipationPolicy, vs...))
}

// ParticipationPolicyNotIn applies the NotIn predicate on the "participation_policy" field.
func ParticipationPolicyNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldParticipationPolicy, vs...))
}

// ParticipationPolicyGT applies the GT predicate on the "participation_policy" field.
func ParticipationPolicyGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldParticipationPolicy, v))
}

// ParticipationPolicyGTE applies the GTE predicate on the "participation_policy" field.
func ParticipationPolicyGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldParticipationPolicy, v))
}

// ParticipationPolicyLT applies the LT predicate on the "participation_policy" field.
func ParticipationPolicyLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldParticipationPolicy, v))
}

// ParticipationPolicyLTE applies the LTE predicate on the "participation_policy" field.
func ParticipationPolicyLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldParticipationPolicy, v))
}

// ParticipationPolicyContains applies the Contains predicate on the "participation_policy" field.
func ParticipationPolicyContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldParticipationPolicy, v))
}

// ParticipationPolicyHasPrefix applies the HasPrefix predicate on the "participation_policy" field.
func ParticipationPolicyHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldParticipationPolicy, v))
}

// ParticipationPolicyHasSuffix applies the HasSuffix predicate on the "participation_policy" field.
func ParticipationPolicyHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldParticipationPolicy, v))
}

// ParticipationPolicyEqualFold applies the EqualFold predicate on the "participation_policy" field.
func ParticipationPolicyEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldParticipationPolicy, v))
}

// ParticipationPolicyContainsFold applies the ContainsFold predicate on the "participation_policy" field.
func ParticipationPolicyContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldParticipationPolicy, v))
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v Visibility) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldVisibility, v))
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v Visibility) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldVisibility, v))
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...Visibility) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldVisibility, vs...))
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...Visibility) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldVisibility, vs...))
}

// LocationTypeEQ applies the EQ predicate on the "location_type" field.
func LocationTypeEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationType, v))
}

// LocationTypeNEQ applies the NEQ predicate on the "location_type" field.
func LocationTypeNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocationType, v))
}

// LocationTypeIn applies the In predicate on the "location_type" field.
func LocationTypeIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocationType, vs...))
}

// LocationTypeNotIn applies the NotIn predicate on the "location_type" field.
func LocationTypeNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocationType, vs...))
}

// LocationTypeGT applies the GT predicate on the "location_type" field.
func LocationTypeGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldLocationType, v))
}

// LocationTypeGTE applies the GTE predicate on the "location_type" field.
func LocationTypeGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldLocationType, v))
}

// LocationTypeLT applies the LT predicate on the "location_type" field.
func LocationTypeLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldLocationType, v))
}

// LocationTypeLTE applies the LTE predicate on the "location_type" field.
func LocationTypeLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldLocationType, v))
}

// LocationTypeContains applies the Contains predicate on the "location_type" field.
func LocationTypeContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldLocationType, v))
}

// LocationTypeHasPrefix applies the HasPrefix predicate on the "location_type" field.
func LocationTypeHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldLocationType, v))
}

// LocationTypeHasSuffix applies the HasSuffix predicate on the "location_type" field.
func LocationTypeHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldLocationType, v))
}

// LocationTypeIsNil applies the IsNil predicate on the "location_type" field.
func LocationTypeIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldLocationType))
}

// LocationTypeNotNil applies the NotNil predicate on the "location_type" field.
func LocationTypeNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldLocationType))
}

// LocationTypeEqualFold applies the EqualFold predicate on the "location_type" field.
func LocationTypeEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldLocationType, v))
}

// LocationTypeContainsFold applies the ContainsFold predicate on the "location_type" field.
func LocationTypeContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldLocationType, v))
}

// LocationNameEQ applies the EQ predicate on the "location_name" field.
func LocationNameEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationName, v))
}

// LocationNameNEQ applies the NEQ predicate on the "location_name" field.
func LocationNameNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocationName, v))
}

// LocationNameIn applies the In predicate on the "location_name" field.
func LocationNameIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocationName, vs...))
}

// LocationNameNotIn applies the NotIn predicate on the "location_name" field.
func LocationNameNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocationName, vs...))
}

// LocationNameGT applies the GT predicate on the "location_name" field.
func LocationNameGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldLocationName, v))
}

// LocationNameGTE applies the GTE predicate on the "location_name" field.
func LocationNameGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldLocationName, v))
}

// LocationNameLT applies the LT predicate on the "location_name" field.
func LocationNameLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldLocationName, v))
}

// LocationNameLTE applies the LTE predicate on the "location_name" field.
func LocationNameLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldLocationName, v))
}

// LocationNameContains applies the Contains predicate on the "location_name" field.
func LocationNameContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldLocationName, v))
}

// LocationNameHasPrefix applies the HasPrefix predicate on the "location_name" field.
func LocationNameHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldLocationName, v))
}

// LocationNameHasSuffix applies the HasSuffix predicate on the "location_name" field.
func LocationNameHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldLocationName, v))
}

// LocationNameIsNil applies the IsNil predicate on the "location_name" field.
func LocationNameIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldLocationName))
}

// LocationNameNotNil applies the NotNil predicate on the "location_name" field.
func LocationNameNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldLocationName))
}

// LocationNameEqualFold applies the EqualFold predicate on the "location_name" field.
func LocationNameEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldLocationName, v))
}

// LocationNameContainsFold applies the ContainsFold predicate on the "location_name" field.
func LocationNameContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldLocationName, v))
}

// LocationAddressEQ applies the EQ predicate on the "location_address" field.
func LocationAddressEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationAddress, v))
}

// LocationAddressNEQ applies the NEQ predicate on the "location_address" field.
func LocationAddressNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocationAddress, v))
}

// LocationAddressIn applies the In predicate on the "location_address" field.
func LocationAddressIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocationAddress, vs...))
}

// LocationAddressNotIn applies the NotIn predicate on the "location_address" field.
func LocationAddressNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocationAddress, vs...))
}

// LocationAddressGT applies the GT predicate on the "location_address" field.
func LocationAddressGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldLocationAddress, v))
}

// LocationAddressGTE applies the GTE predicate on the "location_address" field.
func LocationAddressGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldLocationAddress, v))
}

// LocationAddressLT applies the LT predicate on the "location_address" field.
func LocationAddressLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldLocationAddress, v))
}

// LocationAddressLTE applies the LTE predicate on the "location_address" field.
func LocationAddressLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldLocationAddress, v))
}

// LocationAddressContains applies the Contains predicate on the "location_address" field.
func LocationAddressContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldLocationAddress, v))
}

// LocationAddressHasPrefix applies the HasPrefix predicate on the "location_address" field.
func LocationAddressHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldLocationAddress, v))
}

// LocationAddressHasSuffix applies the HasSuffix predicate on the "location_address" field.
func LocationAddressHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldLocationAddress, v))
}

// LocationAddressIsNil applies the IsNil predicate on the "location_address" field.
func LocationAddressIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldLocationAddress))
}

// LocationAddressNotNil applies the NotNil predicate on the "location_address" field.
func LocationAddressNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldLocationAddress))
}

// LocationAddressEqualFold applies the EqualFold predicate on the "location_address" field.
func LocationAddressEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldLocationAddress, v))
}

// LocationAddressContainsFold applies the ContainsFold predicate on the "location_address" field.
func LocationAddressContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldLocationAddress, v))
}

// LocationLatitudeEQ applies the EQ predicate on the "location_latitude" field.
func LocationLatitudeEQ(v float64) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationLatitude, v))
}

// LocationLatitudeNEQ applies the NEQ predicate on the "location_latitude" field.
func LocationLatitudeNEQ(v float64) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocationLatitude, v))
}

// LocationLatitudeIn applies the In predicate on the "location_latitude" field.
func LocationLatitudeIn(vs ...float64) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocationLatitude, vs...))
}

// LocationLatitudeNotIn applies the NotIn predicate on the "location_latitude" field.
func LocationLatitudeNotIn(vs ...float64) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocationLatitude, vs...))
}

// LocationLatitudeGT applies the GT predicate on the "location_latitude" field.
func LocationLatitudeGT(v float64) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldLocationLatitude, v))
}

// LocationLatitudeGTE applies the GTE predicate on the "location_latitude" field.
func LocationLatitudeGTE(v float64) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldLocationLatitude, v))
}

// LocationLatitudeLT applies the LT predicate on the "location_latitude" field.
func LocationLatitudeLT(v float64) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldLocationLatitude, v))
}

// LocationLatitudeLTE applies the LTE predicate on the "location_latitude" field.
func LocationLatitudeLTE(v float64) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldLocationLatitude, v))
}

// LocationLatitudeIsNil applies the IsNil predicate on the "location_latitude" field.
func LocationLatitudeIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldLocationLatitude))
}

// LocationLatitudeNotNil applies the NotNil predicate on the "location_latitude" field.
func LocationLatitudeNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldLocationLatitude))
}

// LocationLongitudeEQ applies the EQ predicate on the "location_longitude" field.
func LocationLongitudeEQ(v float64) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationLongitude, v))
}

// LocationLongitudeNEQ applies the NEQ predicate on the "location_longitude" field.
func LocationLongitudeNEQ(v float64) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocationLongitude, v))
}

// LocationLongitudeIn applies the In predicate on the "location_longitude" field.
func LocationLongitudeIn(vs ...float64) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocationLongitude, vs...))
}

// LocationLongitudeNotIn applies the NotIn predicate on the "location_longitude" field.
func LocationLongitudeNotIn(vs ...float64) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocationLongitude, vs...))
}

// LocationLongitudeGT applies the GT predicate on the "location_longitude" field.
func LocationLongitudeGT(v float64) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldLocationLongitude, v))
}

// LocationLongitudeGTE applies the GTE predicate on the "location_longitude" field.
func LocationLongitudeGTE(v float64) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldLocationLongitude, v))
}

// LocationLongitudeLT applies the LT predicate on the "location_longitude" field.
func LocationLongitudeLT(v float64) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldLocationLongitude, v))
}

// LocationLongitudeLTE applies the LTE predicate on the "location_longitude" field.
func LocationLongitudeLTE(v float64) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldLocationLongitude, v))
}

// LocationLongitudeIsNil applies the IsNil predicate on the "location_longitude" field.
func LocationLongitudeIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldLocationLongitude))
}

// LocationLongitudeNotNil applies the NotNil predicate on the "location_longitude" field.
func LocationLongitudeNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldLocationLongitude))
}

// LocationURLEQ applies the EQ predicate on the "location_url" field.
func LocationURLEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationURL, v))
}

// LocationURLNEQ applies the NEQ predicate on the "location_url" field.
func LocationURLNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocationURL, v))
}

// LocationURLIn applies the In predicate on the "location_url" field.
func LocationURLIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocationURL, vs...))
}

// LocationURLNotIn applies the NotIn predicate on the "location_url" field.
func LocationURLNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocationURL, vs...))
}

// LocationURLGT applies the GT predicate on the "location_url" field.
func LocationURLGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldLocationURL, v))
}

// LocationURLGTE applies the GTE predicate on the "location_url" field.
func LocationURLGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldLocationURL, v))
}

// LocationURLLT applies the LT predicate on the "location_url" field.
func LocationURLLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldLocationURL, v))
}

// LocationURLLTE applies the LTE predicate on the "location_url" field.
func LocationURLLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldLocationURL, v))
}

// LocationURLContains applies the Contains predicate on the "location_url" field.
func LocationURLContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldLocationURL, v))
}

// LocationURLHasPrefix applies the HasPrefix predicate on the "location_url" field.
func LocationURLHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldLocationURL, v))
}

// LocationURLHasSuffix applies the HasSuffix predicate on the "location_url" field.
func LocationURLHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldLocationURL, v))
}

// LocationURLIsNil applies the IsNil predicate on the "location_url" field.
func LocationURLIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldLocationURL))
}

// LocationURLNotNil applies the NotNil predicate on the "location_url" field.
func LocationURLNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldLocationURL))
}

// LocationURLEqualFold applies the EqualFold predicate on the "location_url" field.
func LocationURLEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldLocationURL, v))
}

// LocationURLContainsFold applies the ContainsFold predicate on the "location_url" field.
func LocationURLContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldLocationURL, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCapacity, v))
}

// CapacityIsNil applies the IsNil predicate on the "capacity" field.
func CapacityIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldCapacity))
}

// CapacityNotNil applies the NotNil predicate on the "capacity" field.
func CapacityNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldCapacity))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldMetadata))
}

// HasParticipants applies the HasEdge predicate on the "participants" edge.
func HasParticipants() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipantsTable, ParticipantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantsWith applies the HasEdge predicate on the "participants" edge with a given conditions (other predicates).
func HasParticipantsWith(preds ...predicate.EventParticipant) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newParticipantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThread applies the HasEdge predicate on the "thread" edge.
func HasThread() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ThreadTable, ThreadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreadWith applies the HasEdge predicate on the "thread" edge with a given conditions (other predicates).
func HasThreadWith(preds ...predicate.Post) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newThreadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryImage applies the HasEdge predicate on the "primary_image" edge.
func HasPrimaryImage() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryImageTable, PrimaryImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryImageWith applies the HasEdge predicate on the "primary_image" edge with a given conditions (other predicates).
func HasPrimaryImageWith(preds ...predicate.Asset) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newPrimaryImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}
