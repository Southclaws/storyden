// Code generated by ent, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Southclaws/storyden/internal/infrastructure/db/model/account"
	"github.com/Southclaws/storyden/internal/infrastructure/db/model/subscription"
	"github.com/rs/xid"
)

// Subscription is the model entity for the Subscription schema.
type Subscription struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// RefersType holds the value of the "refers_type" field.
	RefersType string `json:"refers_type,omitempty"`
	// RefersTo holds the value of the "refers_to" field.
	RefersTo string `json:"refers_to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionQuery when eager-loading is set.
	Edges                 SubscriptionEdges `json:"edges"`
	account_subscriptions *xid.ID
	subscription_account  *xid.ID
}

// SubscriptionEdges holds the relations/edges for other nodes in the graph.
type SubscriptionEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[1] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscription.FieldRefersType, subscription.FieldRefersTo:
			values[i] = new(sql.NullString)
		case subscription.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case subscription.FieldID:
			values[i] = new(xid.ID)
		case subscription.ForeignKeys[0]: // account_subscriptions
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case subscription.ForeignKeys[1]: // subscription_account
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Subscription", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscription fields.
func (s *Subscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscription.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case subscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subscription.FieldRefersType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refers_type", values[i])
			} else if value.Valid {
				s.RefersType = value.String
			}
		case subscription.FieldRefersTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refers_to", values[i])
			} else if value.Valid {
				s.RefersTo = value.String
			}
		case subscription.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field account_subscriptions", values[i])
			} else if value.Valid {
				s.account_subscriptions = new(xid.ID)
				*s.account_subscriptions = *value.S.(*xid.ID)
			}
		case subscription.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_account", values[i])
			} else if value.Valid {
				s.subscription_account = new(xid.ID)
				*s.subscription_account = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the Subscription entity.
func (s *Subscription) QueryAccount() *AccountQuery {
	return (&SubscriptionClient{config: s.config}).QueryAccount(s)
}

// QueryNotifications queries the "notifications" edge of the Subscription entity.
func (s *Subscription) QueryNotifications() *NotificationQuery {
	return (&SubscriptionClient{config: s.config}).QueryNotifications(s)
}

// Update returns a builder for updating this Subscription.
// Note that you need to call Subscription.Unwrap() before calling this method if this Subscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscription) Update() *SubscriptionUpdateOne {
	return (&SubscriptionClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Subscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscription) Unwrap() *Subscription {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("model: Subscription is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscription) String() string {
	var builder strings.Builder
	builder.WriteString("Subscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("refers_type=")
	builder.WriteString(s.RefersType)
	builder.WriteString(", ")
	builder.WriteString("refers_to=")
	builder.WriteString(s.RefersTo)
	builder.WriteByte(')')
	return builder.String()
}

// Subscriptions is a parsable slice of Subscription.
type Subscriptions []*Subscription

func (s Subscriptions) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
