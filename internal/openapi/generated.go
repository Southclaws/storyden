// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes  = "browser.Scopes"
	WebauthnScopes = "webauthn.Scopes"
)

// Defines values for AttestationConveyancePreference.
const (
	Direct     AttestationConveyancePreference = "direct"
	Enterprise AttestationConveyancePreference = "enterprise"
	Indirect   AttestationConveyancePreference = "indirect"
	None       AttestationConveyancePreference = "none"
)

// Defines values for AuthenticatorAttachment.
const (
	CrossPlatform AuthenticatorAttachment = "cross-platform"
	Platform      AuthenticatorAttachment = "platform"
)

// Defines values for PublicKeyCredentialDescriptorTransports.
const (
	Ble      PublicKeyCredentialDescriptorTransports = "ble"
	Cable    PublicKeyCredentialDescriptorTransports = "cable"
	Hybrid   PublicKeyCredentialDescriptorTransports = "hybrid"
	Internal PublicKeyCredentialDescriptorTransports = "internal"
	Nfc      PublicKeyCredentialDescriptorTransports = "nfc"
	Usb      PublicKeyCredentialDescriptorTransports = "usb"
)

// Defines values for PublicKeyCredentialDescriptorType.
const (
	PublicKeyCredentialDescriptorTypePublicKey PublicKeyCredentialDescriptorType = "public-key"
)

// Defines values for PublicKeyCredentialRequestOptionsUserVerification.
const (
	PublicKeyCredentialRequestOptionsUserVerificationDiscouraged PublicKeyCredentialRequestOptionsUserVerification = "discouraged"
	PublicKeyCredentialRequestOptionsUserVerificationPreferred   PublicKeyCredentialRequestOptionsUserVerification = "preferred"
	PublicKeyCredentialRequestOptionsUserVerificationRequired    PublicKeyCredentialRequestOptionsUserVerification = "required"
)

// Defines values for PublicKeyCredentialType.
const (
	PublicKeyCredentialTypePublicKey PublicKeyCredentialType = "public-key"
)

// Defines values for ResidentKeyRequirement.
const (
	ResidentKeyRequirementDiscouraged ResidentKeyRequirement = "discouraged"
	ResidentKeyRequirementPreferred   ResidentKeyRequirement = "preferred"
	ResidentKeyRequirementRequired    ResidentKeyRequirement = "required"
)

// Defines values for UserVerificationRequirement.
const (
	Discouraged UserVerificationRequirement = "discouraged"
	Preferred   UserVerificationRequirement = "preferred"
	Required    UserVerificationRequirement = "required"
)

// APIError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type APIError struct {
	// Error The internal error, not intended for end-user display.
	Error string `json:"error"`

	// Message A human-readable message intended for end-user display.
	Message *string `json:"message,omitempty"`

	// Metadata Any additional metadata related to the error.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Suggested A suggested action for the user.
	Suggested *string `json:"suggested,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Bio *string `json:"bio,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccountHandle The unique @ handle of an account.
type AccountHandle = string

// AccountMutableProps defines model for AccountMutableProps.
type AccountMutableProps struct {
	Bio *string `json:"bio,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`
}

// AccountName The account owners display name.
type AccountName = string

// AttestationConveyancePreference https://www.w3.org/TR/webauthn-2/#enum-attestation-convey
type AttestationConveyancePreference string

// AuthPair defines model for AuthPair.
type AuthPair struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthProvider defines model for AuthProvider.
type AuthProvider struct {
	// Link The hyperlink to render for the user.
	Link string `json:"link"`

	// LogoUrl The logo to display for the provider.
	LogoUrl string `json:"logo_url"`

	// Name The human-readable name of the provider.
	Name string `json:"name"`

	// Provider The slug name of the provider.
	Provider string `json:"provider"`
}

// AuthProviderList defines model for AuthProviderList.
type AuthProviderList = []AuthProvider

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// AuthenticationExtensionsClientInputs https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs
type AuthenticationExtensionsClientInputs map[string]interface{}

// AuthenticatorAttachment https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment
type AuthenticatorAttachment string

// AuthenticatorResponse https://www.w3.org/TR/webauthn-2/#authenticatorresponse
type AuthenticatorResponse struct {
	AttestationObject *string   `json:"attestationObject,omitempty"`
	AuthenticatorData *string   `json:"authenticatorData,omitempty"`
	ClientDataJSON    string    `json:"clientDataJSON"`
	Signature         *string   `json:"signature,omitempty"`
	Transports        *[]string `json:"transports,omitempty"`
	UserHandle        *string   `json:"userHandle,omitempty"`
}

// AuthenticatorSelectionCriteria https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria
type AuthenticatorSelectionCriteria struct {
	// AuthenticatorAttachment https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment
	AuthenticatorAttachment AuthenticatorAttachment `json:"authenticatorAttachment"`
	RequireResidentKey      *bool                   `json:"requireResidentKey,omitempty"`

	// ResidentKey https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement
	ResidentKey ResidentKeyRequirement `json:"residentKey"`

	// UserVerification https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement
	UserVerification *UserVerificationRequirement `json:"userVerification,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      string      `json:"name"`
	PostCount int         `json:"postCount"`
	Sort      int         `json:"sort"`
}

// CategoryAdditional defines model for CategoryAdditional.
type CategoryAdditional struct {
	PostCount int `json:"postCount"`
}

// CategoryCommon defines model for CategoryCommon.
type CategoryCommon struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Sort        int     `json:"sort"`
}

// CategoryList defines model for CategoryList.
type CategoryList struct {
	Categories []Category `json:"categories"`
}

// CategoryMetadata defines model for CategoryMetadata.
type CategoryMetadata struct {
	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// CategoryReference defines model for CategoryReference.
type CategoryReference struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id   *Identifier `json:"id,omitempty"`
	Name string      `json:"name"`
	Sort int         `json:"sort"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CredentialRequestOptions https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension
type CredentialRequestOptions struct {
	// PublicKey https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
	PublicKey PublicKeyCredentialRequestOptions `json:"publicKey"`
}

// Identifier A unique identifier for this resource.
type Identifier = string

// Metadata Arbitrary metadata for the resource.
type Metadata map[string]interface{}

// OAuthCallback defines model for OAuthCallback.
type OAuthCallback struct {
	Code  string `json:"code"`
	State string `json:"state"`
}

// Post defines model for Post.
type Post struct {
	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostBodyMarkdown The body text of a post within a thread.
type PostBodyMarkdown = string

// PostCommonProps defines model for PostCommonProps.
type PostCommonProps struct {
	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`
}

// PostInitialProps defines model for PostInitialProps.
type PostInitialProps struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`
}

// PostMetadata defines model for PostMetadata.
type PostMetadata = CommonProperties

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Name The account owners display name.
	Name AccountName `json:"name"`
}

// PublicKeyCredential https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type PublicKeyCredential struct {
	AuthenticatorAttachment *string                 `json:"authenticatorAttachment,omitempty"`
	ClientExtensionResults  *map[string]interface{} `json:"clientExtensionResults,omitempty"`
	Id                      string                  `json:"id"`
	RawId                   string                  `json:"rawId"`

	// Response https://www.w3.org/TR/webauthn-2/#authenticatorresponse
	Response AuthenticatorResponse `json:"response"`
	Type     string                `json:"type"`
}

// PublicKeyCredentialCreationOptions https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions
type PublicKeyCredentialCreationOptions struct {
	// Attestation https://www.w3.org/TR/webauthn-2/#enum-attestation-convey
	Attestation *AttestationConveyancePreference `json:"attestation,omitempty"`

	// AuthenticatorSelection https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria
	AuthenticatorSelection *AuthenticatorSelectionCriteria `json:"authenticatorSelection,omitempty"`
	Challenge              string                          `json:"challenge"`
	ExcludeCredentials     []PublicKeyCredentialDescriptor `json:"excludeCredentials"`

	// Extensions https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs
	Extensions       *AuthenticationExtensionsClientInputs `json:"extensions,omitempty"`
	PubKeyCredParams []PublicKeyCredentialParameters       `json:"pubKeyCredParams"`

	// Rp https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity
	Rp      PublicKeyCredentialRpEntity `json:"rp"`
	Timeout *int                        `json:"timeout,omitempty"`

	// User https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
	User PublicKeyCredentialUserEntity `json:"user"`
}

// PublicKeyCredentialDescriptor https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor
type PublicKeyCredentialDescriptor struct {
	Id         string                                     `json:"id"`
	Transports *[]PublicKeyCredentialDescriptorTransports `json:"transports,omitempty"`
	Type       PublicKeyCredentialDescriptorType          `json:"type"`
}

// PublicKeyCredentialDescriptorTransports defines model for PublicKeyCredentialDescriptor.Transports.
type PublicKeyCredentialDescriptorTransports string

// PublicKeyCredentialDescriptorType defines model for PublicKeyCredentialDescriptor.Type.
type PublicKeyCredentialDescriptorType string

// PublicKeyCredentialParameters https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters
type PublicKeyCredentialParameters struct {
	Alg float32 `json:"alg"`

	// Type https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
	Type PublicKeyCredentialType `json:"type"`
}

// PublicKeyCredentialRequestOptions https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
type PublicKeyCredentialRequestOptions struct {
	AllowCredentials *[]PublicKeyCredentialDescriptor                   `json:"allowCredentials,omitempty"`
	Challenge        string                                             `json:"challenge"`
	RpId             *string                                            `json:"rpId,omitempty"`
	Timeout          *int                                               `json:"timeout,omitempty"`
	UserVerification *PublicKeyCredentialRequestOptionsUserVerification `json:"userVerification,omitempty"`
}

// PublicKeyCredentialRequestOptionsUserVerification defines model for PublicKeyCredentialRequestOptions.UserVerification.
type PublicKeyCredentialRequestOptionsUserVerification string

// PublicKeyCredentialRpEntity https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity
type PublicKeyCredentialRpEntity struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PublicKeyCredentialType https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
type PublicKeyCredentialType string

// PublicKeyCredentialUserEntity https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
type PublicKeyCredentialUserEntity struct {
	DisplayName string `json:"displayName"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}

// PublicProfile defines model for PublicProfile.
type PublicProfile struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt string  `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Image *string    `json:"image,omitempty"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// ResidentKeyRequirement https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement
type ResidentKeyRequirement string

// Tag A tag which can link profiles or threads via interests.
type Tag struct {
	Colour *string `json:"colour,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Name The name of a tag.
	Name TagName `json:"name"`
}

// TagList A list of tags.
type TagList = []Tag

// TagListIDs A list of tags.
type TagListIDs = []Identifier

// TagName The name of a tag.
type TagName = string

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   ProfileReference  `json:"author"`
	Category CategoryReference `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// PostCount The number of posts under this thread.
	PostCount *int   `json:"post_count,omitempty"`
	Posts     []Post `json:"posts"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadList defines model for ThreadList.
type ThreadList = []ThreadReference

// ThreadMark A thread's ID and optional slug separated by a dash = it's unique mark.
// This allows endpoints to respond to varying forms of a thread's ID.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
//
//	as the identifier for that thread.
type ThreadMark = string

// ThreadMutableProps defines model for ThreadMutableProps.
type ThreadMutableProps struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Tags A list of tags.
	Tags TagList `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`
}

// ThreadReference defines model for ThreadReference.
type ThreadReference struct {
	// Author A minimal reference to an account.
	Author   ProfileReference  `json:"author"`
	Category CategoryReference `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// PostCount The number of posts under this thread.
	PostCount *int `json:"post_count,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadTitle The title of a thread.
type ThreadTitle = string

// UserVerificationRequirement https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement
type UserVerificationRequirement string

// WebAuthnPublicKeyCreationOptions https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension
type WebAuthnPublicKeyCreationOptions struct {
	// PublicKey https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions
	PublicKey PublicKeyCredentialCreationOptions `json:"publicKey"`
}

// AccountHandleParam The unique @ handle of an account.
type AccountHandleParam = AccountHandle

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// ThreadMarkParam A thread's ID and optional slug separated by a dash = it's unique mark.
// This allows endpoints to respond to varying forms of a thread's ID.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
//
//	as the identifier for that thread.
type ThreadMarkParam = ThreadMark

// AccountGetOK defines model for AccountGetOK.
type AccountGetOK = Account

// AccountUpdateOK defines model for AccountUpdateOK.
type AccountUpdateOK = Account

// AuthProviderListOK defines model for AuthProviderListOK.
type AuthProviderListOK struct {
	Providers AuthProviderList `json:"providers"`
}

// AuthSuccessOK defines model for AuthSuccessOK.
type AuthSuccessOK = AuthSuccess

// CategoriesListOK defines model for CategoriesListOK.
type CategoriesListOK = CategoryList

// InternalServerError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type InternalServerError = APIError

// PostsCreateOK A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostsCreateOK = Post

// ProfilesGetOK defines model for ProfilesGetOK.
type ProfilesGetOK = PublicProfile

// ThreadsCreateOK defines model for ThreadsCreateOK.
type ThreadsCreateOK = Thread

// ThreadsGet defines model for ThreadsGet.
type ThreadsGet = Thread

// ThreadsListOK defines model for ThreadsListOK.
type ThreadsListOK struct {
	Threads ThreadList `json:"threads"`
}

// WebAuthnGetAssertionOK https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension
type WebAuthnGetAssertionOK = CredentialRequestOptions

// WebAuthnRequestCredentialOK https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension
type WebAuthnRequestCredentialOK = WebAuthnPublicKeyCreationOptions

// AccountUpdate defines model for AccountUpdate.
type AccountUpdate = AccountMutableProps

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthPair

// OAuthProviderCallback defines model for OAuthProviderCallback.
type OAuthProviderCallback = OAuthCallback

// PostsCreate defines model for PostsCreate.
type PostsCreate = PostInitialProps

// ThreadsCreate defines model for ThreadsCreate.
type ThreadsCreate = ThreadMutableProps

// WebAuthnMakeAssertion https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type WebAuthnMakeAssertion = PublicKeyCredential

// WebAuthnMakeCredential https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type WebAuthnMakeCredential = PublicKeyCredential

// ThreadsListParams defines parameters for ThreadsList.
type ThreadsListParams struct {
	// Author Show only results creeated by this user.
	Author *AccountHandle `form:"author,omitempty" json:"author,omitempty"`

	// Tags Show only results with these tags
	Tags *TagListIDs `form:"tags,omitempty" json:"tags,omitempty"`
}

// AccountUpdateJSONRequestBody defines body for AccountUpdate for application/json ContentType.
type AccountUpdateJSONRequestBody = AccountMutableProps

// OAuthProviderCallbackJSONRequestBody defines body for OAuthProviderCallback for application/json ContentType.
type OAuthProviderCallbackJSONRequestBody = OAuthCallback

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthPair

// AuthPasswordSigninFormdataRequestBody defines body for AuthPasswordSignin for application/x-www-form-urlencoded ContentType.
type AuthPasswordSigninFormdataRequestBody = AuthPair

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthPair

// AuthPasswordSignupFormdataRequestBody defines body for AuthPasswordSignup for application/x-www-form-urlencoded ContentType.
type AuthPasswordSignupFormdataRequestBody = AuthPair

// WebAuthnMakeAssertionJSONRequestBody defines body for WebAuthnMakeAssertion for application/json ContentType.
type WebAuthnMakeAssertionJSONRequestBody = PublicKeyCredential

// WebAuthnMakeCredentialJSONRequestBody defines body for WebAuthnMakeCredential for application/json ContentType.
type WebAuthnMakeCredentialJSONRequestBody = PublicKeyCredential

// ThreadsCreateJSONRequestBody defines body for ThreadsCreate for application/json ContentType.
type ThreadsCreateJSONRequestBody = ThreadMutableProps

// ThreadsCreateFormdataRequestBody defines body for ThreadsCreate for application/x-www-form-urlencoded ContentType.
type ThreadsCreateFormdataRequestBody = ThreadMutableProps

// PostsCreateJSONRequestBody defines body for PostsCreate for application/json ContentType.
type PostsCreateJSONRequestBody = PostInitialProps

// PostsCreateFormdataRequestBody defines body for PostsCreate for application/x-www-form-urlencoded ContentType.
type PostsCreateFormdataRequestBody = PostInitialProps

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSpec request
	GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountGet request
	AccountGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountUpdate request with any body
	AccountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountUpdate(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountSetAvatar request with any body
	AccountSetAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountGetAvatar request
	AccountGetAvatar(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthProviderList request
	AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthProviderLogout request
	AuthProviderLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OAuthProviderCallback request with any body
	OAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSignin request with any body
	AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSigninWithFormdataBody(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSignup request with any body
	AuthPasswordSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignup(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignupWithFormdataBody(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeAssertion request with any body
	WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnGetAssertion request
	WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeCredential request with any body
	WebAuthnMakeCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeCredential(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnRequestCredential request
	WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesList request
	CategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesGet request
	ProfilesGet(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadsList request
	ThreadsList(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadsCreate request with any body
	ThreadsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadsCreate(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadsCreateWithFormdataBody(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadsGet request
	ThreadsGet(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostsCreate request with any body
	PostsCreateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostsCreate(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostsCreateWithFormdataBody(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountUpdate(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountSetAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountSetAvatarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountGetAvatar(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountGetAvatarRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthProviderListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthProviderLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthProviderLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOAuthProviderCallbackRequestWithBody(c.Server, oauthProvider, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOAuthProviderCallbackRequest(c.Server, oauthProvider, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSigninWithFormdataBody(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignup(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignupWithFormdataBody(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnGetAssertionRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredential(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnRequestCredentialRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesGet(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesGetRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsList(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsCreate(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsCreateWithFormdataBody(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsGet(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsGetRequest(c.Server, threadMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostsCreateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostsCreateRequestWithBody(c.Server, threadMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostsCreate(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostsCreateRequest(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostsCreateWithFormdataBody(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostsCreateRequestWithFormdataBody(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSpecRequest generates requests for GetSpec
func NewGetSpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountGetRequest generates requests for AccountGet
func NewAccountGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountUpdateRequest calls the generic AccountUpdate builder with application/json body
func NewAccountUpdateRequest(server string, body AccountUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountUpdateRequestWithBody generates requests for AccountUpdate with any type of body
func NewAccountUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountSetAvatarRequestWithBody generates requests for AccountSetAvatar with any type of body
func NewAccountSetAvatarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/self/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountGetAvatarRequest generates requests for AccountGetAvatar
func NewAccountGetAvatarRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/avatar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthProviderListRequest generates requests for AuthProviderList
func NewAuthProviderListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthProviderLogoutRequest generates requests for AuthProviderLogout
func NewAuthProviderLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOAuthProviderCallbackRequest calls the generic OAuthProviderCallback builder with application/json body
func NewOAuthProviderCallbackRequest(server string, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOAuthProviderCallbackRequestWithBody(server, oauthProvider, "application/json", bodyReader)
}

// NewOAuthProviderCallbackRequestWithBody generates requests for OAuthProviderCallback with any type of body
func NewOAuthProviderCallbackRequestWithBody(server string, oauthProvider OAuthProvider, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, oauthProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/oauth/%s/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSigninRequest calls the generic AuthPasswordSignin builder with application/json body
func NewAuthPasswordSigninRequest(server string, body AuthPasswordSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordSigninRequestWithFormdataBody calls the generic AuthPasswordSignin builder with application/x-www-form-urlencoded body
func NewAuthPasswordSigninRequestWithFormdataBody(server string, body AuthPasswordSigninFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAuthPasswordSigninRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAuthPasswordSigninRequestWithBody generates requests for AuthPasswordSignin with any type of body
func NewAuthPasswordSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/password/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSignupRequest calls the generic AuthPasswordSignup builder with application/json body
func NewAuthPasswordSignupRequest(server string, body AuthPasswordSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSignupRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordSignupRequestWithFormdataBody calls the generic AuthPasswordSignup builder with application/x-www-form-urlencoded body
func NewAuthPasswordSignupRequestWithFormdataBody(server string, body AuthPasswordSignupFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAuthPasswordSignupRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAuthPasswordSignupRequestWithBody generates requests for AuthPasswordSignup with any type of body
func NewAuthPasswordSignupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/password/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnMakeAssertionRequest calls the generic WebAuthnMakeAssertion builder with application/json body
func NewWebAuthnMakeAssertionRequest(server string, body WebAuthnMakeAssertionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeAssertionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebAuthnMakeAssertionRequestWithBody generates requests for WebAuthnMakeAssertion with any type of body
func NewWebAuthnMakeAssertionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/assert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnGetAssertionRequest generates requests for WebAuthnGetAssertion
func NewWebAuthnGetAssertionRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/assert/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebAuthnMakeCredentialRequest calls the generic WebAuthnMakeCredential builder with application/json body
func NewWebAuthnMakeCredentialRequest(server string, body WebAuthnMakeCredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeCredentialRequestWithBody(server, "application/json", bodyReader)
}

// NewWebAuthnMakeCredentialRequestWithBody generates requests for WebAuthnMakeCredential with any type of body
func NewWebAuthnMakeCredentialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/make")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnRequestCredentialRequest generates requests for WebAuthnRequestCredential
func NewWebAuthnRequestCredentialRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/make/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoriesListRequest generates requests for CategoriesList
func NewCategoriesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesGetRequest generates requests for ProfilesGet
func NewProfilesGetRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadsListRequest generates requests for ThreadsList
func NewThreadsListRequest(server string, params *ThreadsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Author != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadsCreateRequest calls the generic ThreadsCreate builder with application/json body
func NewThreadsCreateRequest(server string, body ThreadsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreadsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewThreadsCreateRequestWithFormdataBody calls the generic ThreadsCreate builder with application/x-www-form-urlencoded body
func NewThreadsCreateRequestWithFormdataBody(server string, body ThreadsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewThreadsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewThreadsCreateRequestWithBody generates requests for ThreadsCreate with any type of body
func NewThreadsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThreadsGetRequest generates requests for ThreadsGet
func NewThreadsGetRequest(server string, threadMark ThreadMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostsCreateRequest calls the generic PostsCreate builder with application/json body
func NewPostsCreateRequest(server string, threadMark ThreadMarkParam, body PostsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostsCreateRequestWithBody(server, threadMark, "application/json", bodyReader)
}

// NewPostsCreateRequestWithFormdataBody calls the generic PostsCreate builder with application/x-www-form-urlencoded body
func NewPostsCreateRequestWithFormdataBody(server string, threadMark ThreadMarkParam, body PostsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostsCreateRequestWithBody(server, threadMark, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostsCreateRequestWithBody generates requests for PostsCreate with any type of body
func NewPostsCreateRequestWithBody(server string, threadMark ThreadMarkParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s/posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSpec request
	GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error)

	// AccountGet request
	AccountGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountGetResponse, error)

	// AccountUpdate request with any body
	AccountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error)

	AccountUpdateWithResponse(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error)

	// AccountSetAvatar request with any body
	AccountSetAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountSetAvatarResponse, error)

	// AccountGetAvatar request
	AccountGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AccountGetAvatarResponse, error)

	// AuthProviderList request
	AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error)

	// AuthProviderLogout request
	AuthProviderLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderLogoutResponse, error)

	// OAuthProviderCallback request with any body
	OAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error)

	OAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error)

	// AuthPasswordSignin request with any body
	AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	AuthPasswordSigninWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	// AuthPasswordSignup request with any body
	AuthPasswordSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	AuthPasswordSignupWithResponse(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	AuthPasswordSignupWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	// WebAuthnMakeAssertion request with any body
	WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	// WebAuthnGetAssertion request
	WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error)

	// WebAuthnMakeCredential request with any body
	WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	WebAuthnMakeCredentialWithResponse(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	// WebAuthnRequestCredential request
	WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error)

	// CategoriesList request
	CategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoriesListResponse, error)

	// ProfilesGet request
	ProfilesGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfilesGetResponse, error)

	// ThreadsList request
	ThreadsListWithResponse(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*ThreadsListResponse, error)

	// ThreadsCreate request with any body
	ThreadsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error)

	ThreadsCreateWithResponse(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error)

	ThreadsCreateWithFormdataBodyWithResponse(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error)

	// ThreadsGet request
	ThreadsGetWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadsGetResponse, error)

	// PostsCreate request with any body
	PostsCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error)

	PostsCreateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error)

	PostsCreateWithFormdataBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountSetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountSetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountSetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountGetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountGetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountGetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthProviderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Providers AuthProviderList `json:"providers"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r AuthProviderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthProviderLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthProviderLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OAuthProviderCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r OAuthProviderCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OAuthProviderCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnGetAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRequestOptions
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnGetAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnGetAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnRequestCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebAuthnPublicKeyCreationOptions
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnRequestCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnRequestCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryList
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CategoriesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicProfile
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ProfilesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Threads ThreadList `json:"threads"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Post
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSpecWithResponse request returning *GetSpecResponse
func (c *ClientWithResponses) GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error) {
	rsp, err := c.GetSpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpecResponse(rsp)
}

// AccountGetWithResponse request returning *AccountGetResponse
func (c *ClientWithResponses) AccountGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountGetResponse, error) {
	rsp, err := c.AccountGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountGetResponse(rsp)
}

// AccountUpdateWithBodyWithResponse request with arbitrary body returning *AccountUpdateResponse
func (c *ClientWithResponses) AccountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error) {
	rsp, err := c.AccountUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountUpdateWithResponse(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error) {
	rsp, err := c.AccountUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountUpdateResponse(rsp)
}

// AccountSetAvatarWithBodyWithResponse request with arbitrary body returning *AccountSetAvatarResponse
func (c *ClientWithResponses) AccountSetAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountSetAvatarResponse, error) {
	rsp, err := c.AccountSetAvatarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountSetAvatarResponse(rsp)
}

// AccountGetAvatarWithResponse request returning *AccountGetAvatarResponse
func (c *ClientWithResponses) AccountGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AccountGetAvatarResponse, error) {
	rsp, err := c.AccountGetAvatar(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountGetAvatarResponse(rsp)
}

// AuthProviderListWithResponse request returning *AuthProviderListResponse
func (c *ClientWithResponses) AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error) {
	rsp, err := c.AuthProviderList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthProviderListResponse(rsp)
}

// AuthProviderLogoutWithResponse request returning *AuthProviderLogoutResponse
func (c *ClientWithResponses) AuthProviderLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderLogoutResponse, error) {
	rsp, err := c.AuthProviderLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthProviderLogoutResponse(rsp)
}

// OAuthProviderCallbackWithBodyWithResponse request with arbitrary body returning *OAuthProviderCallbackResponse
func (c *ClientWithResponses) OAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error) {
	rsp, err := c.OAuthProviderCallbackWithBody(ctx, oauthProvider, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOAuthProviderCallbackResponse(rsp)
}

func (c *ClientWithResponses) OAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error) {
	rsp, err := c.OAuthProviderCallback(ctx, oauthProvider, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOAuthProviderCallbackResponse(rsp)
}

// AuthPasswordSigninWithBodyWithResponse request with arbitrary body returning *AuthPasswordSigninResponse
func (c *ClientWithResponses) AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSigninWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSigninWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

// AuthPasswordSignupWithBodyWithResponse request with arbitrary body returning *AuthPasswordSignupResponse
func (c *ClientWithResponses) AuthPasswordSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSignupWithResponse(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSignupWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignupWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

// WebAuthnMakeAssertionWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeAssertionResponse
func (c *ClientWithResponses) WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

// WebAuthnGetAssertionWithResponse request returning *WebAuthnGetAssertionResponse
func (c *ClientWithResponses) WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error) {
	rsp, err := c.WebAuthnGetAssertion(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnGetAssertionResponse(rsp)
}

// WebAuthnMakeCredentialWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeCredentialResponse
func (c *ClientWithResponses) WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredentialWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeCredentialWithResponse(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredential(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

// WebAuthnRequestCredentialWithResponse request returning *WebAuthnRequestCredentialResponse
func (c *ClientWithResponses) WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error) {
	rsp, err := c.WebAuthnRequestCredential(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnRequestCredentialResponse(rsp)
}

// CategoriesListWithResponse request returning *CategoriesListResponse
func (c *ClientWithResponses) CategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoriesListResponse, error) {
	rsp, err := c.CategoriesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesListResponse(rsp)
}

// ProfilesGetWithResponse request returning *ProfilesGetResponse
func (c *ClientWithResponses) ProfilesGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfilesGetResponse, error) {
	rsp, err := c.ProfilesGet(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesGetResponse(rsp)
}

// ThreadsListWithResponse request returning *ThreadsListResponse
func (c *ClientWithResponses) ThreadsListWithResponse(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*ThreadsListResponse, error) {
	rsp, err := c.ThreadsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsListResponse(rsp)
}

// ThreadsCreateWithBodyWithResponse request with arbitrary body returning *ThreadsCreateResponse
func (c *ClientWithResponses) ThreadsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error) {
	rsp, err := c.ThreadsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsCreateResponse(rsp)
}

func (c *ClientWithResponses) ThreadsCreateWithResponse(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error) {
	rsp, err := c.ThreadsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsCreateResponse(rsp)
}

func (c *ClientWithResponses) ThreadsCreateWithFormdataBodyWithResponse(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error) {
	rsp, err := c.ThreadsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsCreateResponse(rsp)
}

// ThreadsGetWithResponse request returning *ThreadsGetResponse
func (c *ClientWithResponses) ThreadsGetWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadsGetResponse, error) {
	rsp, err := c.ThreadsGet(ctx, threadMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsGetResponse(rsp)
}

// PostsCreateWithBodyWithResponse request with arbitrary body returning *PostsCreateResponse
func (c *ClientWithResponses) PostsCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error) {
	rsp, err := c.PostsCreateWithBody(ctx, threadMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostsCreateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error) {
	rsp, err := c.PostsCreate(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostsCreateWithFormdataBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error) {
	rsp, err := c.PostsCreateWithFormdataBody(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostsCreateResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetSpecResponse parses an HTTP response from a GetSpecWithResponse call
func ParseGetSpecResponse(rsp *http.Response) (*GetSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountGetResponse parses an HTTP response from a AccountGetWithResponse call
func ParseAccountGetResponse(rsp *http.Response) (*AccountGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountUpdateResponse parses an HTTP response from a AccountUpdateWithResponse call
func ParseAccountUpdateResponse(rsp *http.Response) (*AccountUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountSetAvatarResponse parses an HTTP response from a AccountSetAvatarWithResponse call
func ParseAccountSetAvatarResponse(rsp *http.Response) (*AccountSetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountSetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountGetAvatarResponse parses an HTTP response from a AccountGetAvatarWithResponse call
func ParseAccountGetAvatarResponse(rsp *http.Response) (*AccountGetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountGetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthProviderListResponse parses an HTTP response from a AuthProviderListWithResponse call
func ParseAuthProviderListResponse(rsp *http.Response) (*AuthProviderListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthProviderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Providers AuthProviderList `json:"providers"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthProviderLogoutResponse parses an HTTP response from a AuthProviderLogoutWithResponse call
func ParseAuthProviderLogoutResponse(rsp *http.Response) (*AuthProviderLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthProviderLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOAuthProviderCallbackResponse parses an HTTP response from a OAuthProviderCallbackWithResponse call
func ParseOAuthProviderCallbackResponse(rsp *http.Response) (*OAuthProviderCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OAuthProviderCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSigninResponse parses an HTTP response from a AuthPasswordSigninWithResponse call
func ParseAuthPasswordSigninResponse(rsp *http.Response) (*AuthPasswordSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSignupResponse parses an HTTP response from a AuthPasswordSignupWithResponse call
func ParseAuthPasswordSignupResponse(rsp *http.Response) (*AuthPasswordSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeAssertionResponse parses an HTTP response from a WebAuthnMakeAssertionWithResponse call
func ParseWebAuthnMakeAssertionResponse(rsp *http.Response) (*WebAuthnMakeAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnGetAssertionResponse parses an HTTP response from a WebAuthnGetAssertionWithResponse call
func ParseWebAuthnGetAssertionResponse(rsp *http.Response) (*WebAuthnGetAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnGetAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRequestOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeCredentialResponse parses an HTTP response from a WebAuthnMakeCredentialWithResponse call
func ParseWebAuthnMakeCredentialResponse(rsp *http.Response) (*WebAuthnMakeCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnRequestCredentialResponse parses an HTTP response from a WebAuthnRequestCredentialWithResponse call
func ParseWebAuthnRequestCredentialResponse(rsp *http.Response) (*WebAuthnRequestCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnRequestCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebAuthnPublicKeyCreationOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoriesListResponse parses an HTTP response from a CategoriesListWithResponse call
func ParseCategoriesListResponse(rsp *http.Response) (*CategoriesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfilesGetResponse parses an HTTP response from a ProfilesGetWithResponse call
func ParseProfilesGetResponse(rsp *http.Response) (*ProfilesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadsListResponse parses an HTTP response from a ThreadsListWithResponse call
func ParseThreadsListResponse(rsp *http.Response) (*ThreadsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Threads ThreadList `json:"threads"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadsCreateResponse parses an HTTP response from a ThreadsCreateWithResponse call
func ParseThreadsCreateResponse(rsp *http.Response) (*ThreadsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadsGetResponse parses an HTTP response from a ThreadsGetWithResponse call
func ParseThreadsGetResponse(rsp *http.Response) (*ThreadsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostsCreateResponse parses an HTTP response from a PostsCreateWithResponse call
func ParsePostsCreateResponse(rsp *http.Response) (*PostsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Post
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error

	// (GET /v1/accounts)
	AccountGet(ctx echo.Context) error

	// (PATCH /v1/accounts)
	AccountUpdate(ctx echo.Context) error

	// (POST /v1/accounts/self/avatar)
	AccountSetAvatar(ctx echo.Context) error

	// (GET /v1/accounts/{account_handle}/avatar)
	AccountGetAvatar(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /v1/auth)
	AuthProviderList(ctx echo.Context) error

	// (GET /v1/auth/logout)
	AuthProviderLogout(ctx echo.Context) error

	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	OAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error

	// (POST /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx echo.Context) error

	// (GET /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandleParam) error

	// (POST /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx echo.Context) error

	// (GET /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /v1/categories)
	CategoriesList(ctx echo.Context) error

	// (GET /v1/profiles/{account_handle})
	ProfilesGet(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /v1/threads)
	ThreadsList(ctx echo.Context, params ThreadsListParams) error

	// (POST /v1/threads)
	ThreadsCreate(ctx echo.Context) error
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_mark})
	ThreadsGet(ctx echo.Context, threadMark ThreadMarkParam) error

	// (POST /v1/threads/{thread_mark}/posts)
	PostsCreate(ctx echo.Context, threadMark ThreadMarkParam) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountGet(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountGet(ctx)
	return err
}

// AccountUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AccountUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountUpdate(ctx)
	return err
}

// AccountSetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountSetAvatar(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountSetAvatar(ctx)
	return err
}

// AccountGetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountGetAvatar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountGetAvatar(ctx, accountHandle)
	return err
}

// AuthProviderList converts echo context to params.
func (w *ServerInterfaceWrapper) AuthProviderList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthProviderList(ctx)
	return err
}

// AuthProviderLogout converts echo context to params.
func (w *ServerInterfaceWrapper) AuthProviderLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthProviderLogout(ctx)
	return err
}

// OAuthProviderCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthProviderCallback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "oauth_provider" -------------
	var oauthProvider OAuthProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, ctx.Param("oauth_provider"), &oauthProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter oauth_provider: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OAuthProviderCallback(ctx, oauthProvider)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// WebAuthnMakeAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeAssertion(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeAssertion(ctx)
	return err
}

// WebAuthnGetAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnGetAssertion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnGetAssertion(ctx, accountHandle)
	return err
}

// WebAuthnMakeCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeCredential(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeCredential(ctx)
	return err
}

// WebAuthnRequestCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnRequestCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnRequestCredential(ctx, accountHandle)
	return err
}

// CategoriesList converts echo context to params.
func (w *ServerInterfaceWrapper) CategoriesList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CategoriesList(ctx)
	return err
}

// ProfilesGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfilesGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfilesGet(ctx, accountHandle)
	return err
}

// ThreadsList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ThreadsListParams
	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsList(ctx, params)
	return err
}

// ThreadsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsCreate(ctx)
	return err
}

// ThreadsGet converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsGet(ctx, threadMark)
	return err
}

// PostsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostsCreate(ctx, threadMark)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts", wrapper.AccountGet)
	router.PATCH(baseURL+"/v1/accounts", wrapper.AccountUpdate)
	router.POST(baseURL+"/v1/accounts/self/avatar", wrapper.AccountSetAvatar)
	router.GET(baseURL+"/v1/accounts/:account_handle/avatar", wrapper.AccountGetAvatar)
	router.GET(baseURL+"/v1/auth", wrapper.AuthProviderList)
	router.GET(baseURL+"/v1/auth/logout", wrapper.AuthProviderLogout)
	router.POST(baseURL+"/v1/auth/oauth/:oauth_provider/callback", wrapper.OAuthProviderCallback)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.POST(baseURL+"/v1/auth/webauthn/assert", wrapper.WebAuthnMakeAssertion)
	router.GET(baseURL+"/v1/auth/webauthn/assert/:account_handle", wrapper.WebAuthnGetAssertion)
	router.POST(baseURL+"/v1/auth/webauthn/make", wrapper.WebAuthnMakeCredential)
	router.GET(baseURL+"/v1/auth/webauthn/make/:account_handle", wrapper.WebAuthnRequestCredential)
	router.GET(baseURL+"/v1/categories", wrapper.CategoriesList)
	router.GET(baseURL+"/v1/profiles/:account_handle", wrapper.ProfilesGet)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadsList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadsCreate)
	router.GET(baseURL+"/v1/threads/:thread_mark", wrapper.ThreadsGet)
	router.POST(baseURL+"/v1/threads/:thread_mark/posts", wrapper.PostsCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountGetAvatarImagepngResponse struct {
	Body io.Reader

	ContentLength int64
}

type AccountGetOKJSONResponse Account

type AccountUpdateOKJSONResponse Account

type AuthProviderListOKJSONResponse struct {
	Providers AuthProviderList `json:"providers"`
}

type AuthSuccessOKResponseHeaders struct {
	SetCookie string
}
type AuthSuccessOKJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessOKResponseHeaders
}

type BadRequestResponse struct {
}

type CategoriesListOKJSONResponse CategoryList

type InternalServerErrorJSONResponse APIError

type NotFoundResponse struct {
}

type PostsCreateOKJSONResponse Post

type ProfilesGetOKJSONResponse PublicProfile

type ThreadsCreateOKJSONResponse Thread

type ThreadsGetJSONResponse Thread

type ThreadsListOKJSONResponse struct {
	Threads ThreadList `json:"threads"`
}

type UnauthorisedResponse struct {
}

type WebAuthnGetAssertionOKResponseHeaders struct {
	SetCookie string
}
type WebAuthnGetAssertionOKJSONResponse struct {
	Body CredentialRequestOptions

	Headers WebAuthnGetAssertionOKResponseHeaders
}

type WebAuthnRequestCredentialOKResponseHeaders struct {
	SetCookie string
}
type WebAuthnRequestCredentialOKJSONResponse struct {
	Body WebAuthnPublicKeyCreationOptions

	Headers WebAuthnRequestCredentialOKResponseHeaders
}

type GetSpecRequestObject struct {
}

type GetSpecResponseObject interface {
	VisitGetSpecResponse(w http.ResponseWriter) error
}

type GetSpec200TextResponse string

func (response GetSpec200TextResponse) VisitGetSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AccountGetRequestObject struct {
}

type AccountGetResponseObject interface {
	VisitAccountGetResponse(w http.ResponseWriter) error
}

type AccountGet200JSONResponse struct{ AccountGetOKJSONResponse }

func (response AccountGet200JSONResponse) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountGet401Response = UnauthorisedResponse

func (response AccountGet401Response) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountGet404Response = NotFoundResponse

func (response AccountGet404Response) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountGetdefaultJSONResponse) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountUpdateRequestObject struct {
	Body *AccountUpdateJSONRequestBody
}

type AccountUpdateResponseObject interface {
	VisitAccountUpdateResponse(w http.ResponseWriter) error
}

type AccountUpdate200JSONResponse struct{ AccountUpdateOKJSONResponse }

func (response AccountUpdate200JSONResponse) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountUpdate401Response = UnauthorisedResponse

func (response AccountUpdate401Response) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountUpdate404Response = NotFoundResponse

func (response AccountUpdate404Response) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountUpdatedefaultJSONResponse) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountSetAvatarRequestObject struct {
	Body io.Reader
}

type AccountSetAvatarResponseObject interface {
	VisitAccountSetAvatarResponse(w http.ResponseWriter) error
}

type AccountSetAvatar200Response struct {
}

func (response AccountSetAvatar200Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AccountSetAvatar401Response = UnauthorisedResponse

func (response AccountSetAvatar401Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountSetAvatar404Response = NotFoundResponse

func (response AccountSetAvatar404Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountSetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountSetAvatardefaultJSONResponse) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountGetAvatarRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type AccountGetAvatarResponseObject interface {
	VisitAccountGetAvatarResponse(w http.ResponseWriter) error
}

type AccountGetAvatar200ImagepngResponse struct {
	AccountGetAvatarImagepngResponse
}

func (response AccountGetAvatar200ImagepngResponse) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AccountGetAvatar401Response = UnauthorisedResponse

func (response AccountGetAvatar401Response) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountGetAvatar404Response = NotFoundResponse

func (response AccountGetAvatar404Response) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountGetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountGetAvatardefaultJSONResponse) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthProviderListRequestObject struct {
}

type AuthProviderListResponseObject interface {
	VisitAuthProviderListResponse(w http.ResponseWriter) error
}

type AuthProviderList200JSONResponse struct{ AuthProviderListOKJSONResponse }

func (response AuthProviderList200JSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthProviderList400Response = BadRequestResponse

func (response AuthProviderList400Response) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthProviderListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthProviderListdefaultJSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthProviderLogoutRequestObject struct {
}

type AuthProviderLogoutResponseObject interface {
	VisitAuthProviderLogoutResponse(w http.ResponseWriter) error
}

type AuthProviderLogout200ResponseHeaders struct {
	SetCookie string
}

type AuthProviderLogout200Response struct {
	Headers AuthProviderLogout200ResponseHeaders
}

func (response AuthProviderLogout200Response) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type AuthProviderLogout400Response = BadRequestResponse

func (response AuthProviderLogout400Response) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthProviderLogoutdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthProviderLogoutdefaultJSONResponse) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthProviderCallbackRequestObject struct {
	OauthProvider OAuthProvider `json:"oauth_provider"`
	Body          *OAuthProviderCallbackJSONRequestBody
}

type OAuthProviderCallbackResponseObject interface {
	VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error
}

type OAuthProviderCallback200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response OAuthProviderCallback200JSONResponse) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthProviderCallback401Response = UnauthorisedResponse

func (response OAuthProviderCallback401Response) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type OAuthProviderCallback404Response = NotFoundResponse

func (response OAuthProviderCallback404Response) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type OAuthProviderCallbackdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response OAuthProviderCallbackdefaultJSONResponse) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSigninRequestObject struct {
	JSONBody     *AuthPasswordSigninJSONRequestBody
	FormdataBody *AuthPasswordSigninFormdataRequestBody
}

type AuthPasswordSigninResponseObject interface {
	VisitAuthPasswordSigninResponse(w http.ResponseWriter) error
}

type AuthPasswordSignin200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordSignin200JSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignin401Response = UnauthorisedResponse

func (response AuthPasswordSignin401Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordSignin404Response = NotFoundResponse

func (response AuthPasswordSignin404Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignindefaultJSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignupRequestObject struct {
	JSONBody     *AuthPasswordSignupJSONRequestBody
	FormdataBody *AuthPasswordSignupFormdataRequestBody
}

type AuthPasswordSignupResponseObject interface {
	VisitAuthPasswordSignupResponse(w http.ResponseWriter) error
}

type AuthPasswordSignup200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordSignup200JSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignup400Response = BadRequestResponse

func (response AuthPasswordSignup400Response) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignupdefaultJSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertionRequestObject struct {
	Body *WebAuthnMakeAssertionJSONRequestBody
}

type WebAuthnMakeAssertionResponseObject interface {
	VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnMakeAssertion200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response WebAuthnMakeAssertion200JSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertion401Response = UnauthorisedResponse

func (response WebAuthnMakeAssertion401Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnMakeAssertion404Response = NotFoundResponse

func (response WebAuthnMakeAssertion404Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnMakeAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeAssertiondefaultJSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertionRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type WebAuthnGetAssertionResponseObject interface {
	VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnGetAssertion200JSONResponse struct {
	WebAuthnGetAssertionOKJSONResponse
}

func (response WebAuthnGetAssertion200JSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertion401Response = UnauthorisedResponse

func (response WebAuthnGetAssertion401Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnGetAssertion404Response = NotFoundResponse

func (response WebAuthnGetAssertion404Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnGetAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnGetAssertiondefaultJSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredentialRequestObject struct {
	Body *WebAuthnMakeCredentialJSONRequestBody
}

type WebAuthnMakeCredentialResponseObject interface {
	VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnMakeCredential200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response WebAuthnMakeCredential200JSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredential400Response = BadRequestResponse

func (response WebAuthnMakeCredential400Response) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnMakeCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeCredentialdefaultJSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredentialRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type WebAuthnRequestCredentialResponseObject interface {
	VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnRequestCredential200JSONResponse struct {
	WebAuthnRequestCredentialOKJSONResponse
}

func (response WebAuthnRequestCredential200JSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredential400Response = BadRequestResponse

func (response WebAuthnRequestCredential400Response) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnRequestCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnRequestCredentialdefaultJSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoriesListRequestObject struct {
}

type CategoriesListResponseObject interface {
	VisitCategoriesListResponse(w http.ResponseWriter) error
}

type CategoriesList200JSONResponse struct{ CategoriesListOKJSONResponse }

func (response CategoriesList200JSONResponse) VisitCategoriesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoriesListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoriesListdefaultJSONResponse) VisitCategoriesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfilesGetRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type ProfilesGetResponseObject interface {
	VisitProfilesGetResponse(w http.ResponseWriter) error
}

type ProfilesGet200JSONResponse struct{ ProfilesGetOKJSONResponse }

func (response ProfilesGet200JSONResponse) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfilesGet401Response = UnauthorisedResponse

func (response ProfilesGet401Response) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfilesGet404Response = NotFoundResponse

func (response ProfilesGet404Response) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfilesGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfilesGetdefaultJSONResponse) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsListRequestObject struct {
	Params ThreadsListParams
}

type ThreadsListResponseObject interface {
	VisitThreadsListResponse(w http.ResponseWriter) error
}

type ThreadsList200JSONResponse struct{ ThreadsListOKJSONResponse }

func (response ThreadsList200JSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsList401Response = UnauthorisedResponse

func (response ThreadsList401Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsList404Response = NotFoundResponse

func (response ThreadsList404Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsListdefaultJSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsCreateRequestObject struct {
	JSONBody     *ThreadsCreateJSONRequestBody
	FormdataBody *ThreadsCreateFormdataRequestBody
}

type ThreadsCreateResponseObject interface {
	VisitThreadsCreateResponse(w http.ResponseWriter) error
}

type ThreadsCreate200JSONResponse struct{ ThreadsCreateOKJSONResponse }

func (response ThreadsCreate200JSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsCreate401Response = UnauthorisedResponse

func (response ThreadsCreate401Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsCreate404Response = NotFoundResponse

func (response ThreadsCreate404Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsCreatedefaultJSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsGetRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
}

type ThreadsGetResponseObject interface {
	VisitThreadsGetResponse(w http.ResponseWriter) error
}

type ThreadsGet200JSONResponse struct{ ThreadsGetJSONResponse }

func (response ThreadsGet200JSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsGet401Response = UnauthorisedResponse

func (response ThreadsGet401Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsGet404Response = NotFoundResponse

func (response ThreadsGet404Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsGetdefaultJSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostsCreateRequestObject struct {
	ThreadMark   ThreadMarkParam `json:"thread_mark"`
	JSONBody     *PostsCreateJSONRequestBody
	FormdataBody *PostsCreateFormdataRequestBody
}

type PostsCreateResponseObject interface {
	VisitPostsCreateResponse(w http.ResponseWriter) error
}

type PostsCreate200JSONResponse struct{ PostsCreateOKJSONResponse }

func (response PostsCreate200JSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostsCreate401Response = UnauthorisedResponse

func (response PostsCreate401Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostsCreate404Response = NotFoundResponse

func (response PostsCreate404Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostsCreatedefaultJSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200TextResponse string

func (response GetVersion200TextResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) (GetSpecResponseObject, error)

	// (GET /v1/accounts)
	AccountGet(ctx context.Context, request AccountGetRequestObject) (AccountGetResponseObject, error)

	// (PATCH /v1/accounts)
	AccountUpdate(ctx context.Context, request AccountUpdateRequestObject) (AccountUpdateResponseObject, error)

	// (POST /v1/accounts/self/avatar)
	AccountSetAvatar(ctx context.Context, request AccountSetAvatarRequestObject) (AccountSetAvatarResponseObject, error)

	// (GET /v1/accounts/{account_handle}/avatar)
	AccountGetAvatar(ctx context.Context, request AccountGetAvatarRequestObject) (AccountGetAvatarResponseObject, error)

	// (GET /v1/auth)
	AuthProviderList(ctx context.Context, request AuthProviderListRequestObject) (AuthProviderListResponseObject, error)

	// (GET /v1/auth/logout)
	AuthProviderLogout(ctx context.Context, request AuthProviderLogoutRequestObject) (AuthProviderLogoutResponseObject, error)

	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	OAuthProviderCallback(ctx context.Context, request OAuthProviderCallbackRequestObject) (OAuthProviderCallbackResponseObject, error)

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) (AuthPasswordSigninResponseObject, error)

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) (AuthPasswordSignupResponseObject, error)

	// (POST /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx context.Context, request WebAuthnMakeAssertionRequestObject) (WebAuthnMakeAssertionResponseObject, error)

	// (GET /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx context.Context, request WebAuthnGetAssertionRequestObject) (WebAuthnGetAssertionResponseObject, error)

	// (POST /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx context.Context, request WebAuthnMakeCredentialRequestObject) (WebAuthnMakeCredentialResponseObject, error)

	// (GET /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx context.Context, request WebAuthnRequestCredentialRequestObject) (WebAuthnRequestCredentialResponseObject, error)

	// (GET /v1/categories)
	CategoriesList(ctx context.Context, request CategoriesListRequestObject) (CategoriesListResponseObject, error)

	// (GET /v1/profiles/{account_handle})
	ProfilesGet(ctx context.Context, request ProfilesGetRequestObject) (ProfilesGetResponseObject, error)

	// (GET /v1/threads)
	ThreadsList(ctx context.Context, request ThreadsListRequestObject) (ThreadsListResponseObject, error)

	// (POST /v1/threads)
	ThreadsCreate(ctx context.Context, request ThreadsCreateRequestObject) (ThreadsCreateResponseObject, error)
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_mark})
	ThreadsGet(ctx context.Context, request ThreadsGetRequestObject) (ThreadsGetResponseObject, error)

	// (POST /v1/threads/{thread_mark}/posts)
	PostsCreate(ctx context.Context, request PostsCreateRequestObject) (PostsCreateResponseObject, error)
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSpecResponseObject); ok {
		return validResponse.VisitGetSpecResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountGet operation middleware
func (sh *strictHandler) AccountGet(ctx echo.Context) error {
	var request AccountGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountGet(ctx.Request().Context(), request.(AccountGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountGetResponseObject); ok {
		return validResponse.VisitAccountGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountUpdate operation middleware
func (sh *strictHandler) AccountUpdate(ctx echo.Context) error {
	var request AccountUpdateRequestObject

	var body AccountUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountUpdate(ctx.Request().Context(), request.(AccountUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountUpdateResponseObject); ok {
		return validResponse.VisitAccountUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountSetAvatar operation middleware
func (sh *strictHandler) AccountSetAvatar(ctx echo.Context) error {
	var request AccountSetAvatarRequestObject

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountSetAvatar(ctx.Request().Context(), request.(AccountSetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountSetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountSetAvatarResponseObject); ok {
		return validResponse.VisitAccountSetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountGetAvatar operation middleware
func (sh *strictHandler) AccountGetAvatar(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request AccountGetAvatarRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountGetAvatar(ctx.Request().Context(), request.(AccountGetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountGetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountGetAvatarResponseObject); ok {
		return validResponse.VisitAccountGetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthProviderList operation middleware
func (sh *strictHandler) AuthProviderList(ctx echo.Context) error {
	var request AuthProviderListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthProviderList(ctx.Request().Context(), request.(AuthProviderListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthProviderList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthProviderListResponseObject); ok {
		return validResponse.VisitAuthProviderListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthProviderLogout operation middleware
func (sh *strictHandler) AuthProviderLogout(ctx echo.Context) error {
	var request AuthProviderLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthProviderLogout(ctx.Request().Context(), request.(AuthProviderLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthProviderLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthProviderLogoutResponseObject); ok {
		return validResponse.VisitAuthProviderLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// OAuthProviderCallback operation middleware
func (sh *strictHandler) OAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error {
	var request OAuthProviderCallbackRequestObject

	request.OauthProvider = oauthProvider

	var body OAuthProviderCallbackJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthProviderCallback(ctx.Request().Context(), request.(OAuthProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthProviderCallbackResponseObject); ok {
		return validResponse.VisitOAuthProviderCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSigninResponseObject); ok {
		return validResponse.VisitAuthPasswordSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSignupResponseObject); ok {
		return validResponse.VisitAuthPasswordSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeAssertion operation middleware
func (sh *strictHandler) WebAuthnMakeAssertion(ctx echo.Context) error {
	var request WebAuthnMakeAssertionRequestObject

	var body WebAuthnMakeAssertionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeAssertion(ctx.Request().Context(), request.(WebAuthnMakeAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnMakeAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnGetAssertion operation middleware
func (sh *strictHandler) WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request WebAuthnGetAssertionRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnGetAssertion(ctx.Request().Context(), request.(WebAuthnGetAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnGetAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnGetAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnGetAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeCredential operation middleware
func (sh *strictHandler) WebAuthnMakeCredential(ctx echo.Context) error {
	var request WebAuthnMakeCredentialRequestObject

	var body WebAuthnMakeCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeCredential(ctx.Request().Context(), request.(WebAuthnMakeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnMakeCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnRequestCredential operation middleware
func (sh *strictHandler) WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request WebAuthnRequestCredentialRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnRequestCredential(ctx.Request().Context(), request.(WebAuthnRequestCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnRequestCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnRequestCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnRequestCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CategoriesList operation middleware
func (sh *strictHandler) CategoriesList(ctx echo.Context) error {
	var request CategoriesListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoriesList(ctx.Request().Context(), request.(CategoriesListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoriesList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoriesListResponseObject); ok {
		return validResponse.VisitCategoriesListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ProfilesGet operation middleware
func (sh *strictHandler) ProfilesGet(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request ProfilesGetRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfilesGet(ctx.Request().Context(), request.(ProfilesGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfilesGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfilesGetResponseObject); ok {
		return validResponse.VisitProfilesGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsList operation middleware
func (sh *strictHandler) ThreadsList(ctx echo.Context, params ThreadsListParams) error {
	var request ThreadsListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsList(ctx.Request().Context(), request.(ThreadsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsListResponseObject); ok {
		return validResponse.VisitThreadsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsCreate operation middleware
func (sh *strictHandler) ThreadsCreate(ctx echo.Context) error {
	var request ThreadsCreateRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ThreadsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body ThreadsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsCreate(ctx.Request().Context(), request.(ThreadsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsCreateResponseObject); ok {
		return validResponse.VisitThreadsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsGet operation middleware
func (sh *strictHandler) ThreadsGet(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request ThreadsGetRequestObject

	request.ThreadMark = threadMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsGet(ctx.Request().Context(), request.(ThreadsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsGetResponseObject); ok {
		return validResponse.VisitThreadsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostsCreate operation middleware
func (sh *strictHandler) PostsCreate(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request PostsCreateRequestObject

	request.ThreadMark = threadMark
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body PostsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body PostsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostsCreate(ctx.Request().Context(), request.(PostsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostsCreateResponseObject); ok {
		return validResponse.VisitPostsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		return validResponse.VisitGetVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9XXPbOJJ/Bce5qqnaoqRkPu7BVVe1jjOT8WYTu2xn9yFyxRDZkjAmAQ4AWta59N+v",
	"8EWCJChRspJM5u5pJibQDXQ3Gv2F1lOUsLxgFKgU0clTVGCOc5DA9b9Ok4SVVP6GaZrBpfqk/pqCSDgp",
	"JGE0OnFj0FIPGkdxBI84LzKITiLBSrlMMrwSURwRNbrAchnFEcW5+o7N3E9mbhRHHP4oCYc0OpG8hDgS",
	"yRJyrJD+J4d5dBJ9N6nXOzFfxaSxzGiziaOL01IuLzl7ICnw7ppvloBIClSSOQGO5owjTJGe9AMq7DQk",
	"ymSJsEDTSK6IlMCnUXN79s/hvTFcyuUnB2zr3uS60NSSnNCFXv/NkgNO32F+30N1MwCVlPxRAsI0RQXw",
	"HCu6eDsbh5cm9eRPOeb3B9O8XmG0UStWUEDIVywl4MvONcjTByyx5kLCqAQq1f/ioshIgtV2JiyRIEdC",
	"cjBbrVcwZzzHMjqJZoRivo7iDq0UbovqQ5FiCVvw/C4U7Z72k6p3pcSzDC45K4TDp4QLC7FiPD0eOg2U",
	"cM1/H8zjaLVajRQlRiXPgCYshfQguJ2TcYazbIaT+6NtQkOvoBqMl0xIccbhmLxRMM8pkQRnjjFHJVoA",
	"/iZuHUGzJYRRwYREKyKXhCKMzOEaR9UpPvbe7clriuVRdx/EoHD8G2aKwfQdvodTIYAbUhyLqeUsI8lb",
	"WJ9x0CoMZwG83sfPjVirNVEwKhoq7U2PSiM5XsCkoIu9dVhbtC7eRrVaewPy4u2xtdpOrEaZflHEnmL6",
	"JxH7brrgrFACaVjl7l0xSD16WCN3mZkr8aMH6bbiHJv9DsmOrVyXSQJCHJOCNdQe1HG0BOx2fQ1ydMbY",
	"PYEmitAN+gqnV+YC75oar3CK7O2u9naGJSwYJyAOYNK27VnAa8uFHtKeUwmc4uwa+APwXzhn/HgEvjw3",
	"AAPYHV5kECM7MI7eM/krK2naJdx7JtFcf2regkekmYIaWq01D/XNlGikqTJnlejMyyxb6+vpkrM5yUAc",
	"V8EYZWph9/OxcTceEb2Bu4Umlhz+Bf0G5BfBD4hQcxsQRhGesVJWBoO24YkUmmfCX92zdaFBIIatPKgD",
	"HYQhGlABQGyOcJbZrZndfKDKIWKcCAiclerr/4A+Lu7GV3etMzSOqWuqi96qvQu9kKPrVbcNi6VGe8S9",
	"OBy+FaPhfJY9bZyDaCwipzG7YQHk/VvLA0WghiJCk6xMCV0gjJZljilSQqJMTZSDEHhh/FlM11PKIdO6",
	"KweJUywxmnOWI7kEdyOZoUKwhBglB/yBJCDGUxrFrXMA4ZWac2m1ux4TI8qk/htNIdXhAaDpqBTAUUpE",
	"keH1uGvGxZFdfogYeqOjzkYPwWEooWUmTYnCYJwUt1HjxbcWQNeoHl2T09FXMk1UvXsPrTvlcSTKxQKE",
	"DB3dU1R9RDjR7Fa7UfDUbgK7aGkXw5fbAFZnM6q9ZtnFPDr5uONcszxn1KPGJm5rwxlhAcmOIxuD2i/U",
	"FEdackDI3eoVL4xudWGYQYjeq6Gbzea2SbIqYEbSbYT7rdpTV+Rt6OjvNnBnj6iNyDXjXNd+GK9JuDh6",
	"HC3YqEPNUPDk5C/Bin5qv7ewurS2VEVsRYELd76RQt6k9CvMKZ6t0VsACqHjfyolCKnV+xmjD7DGNIFL",
	"DnPgQJMA+qWUhTiZTFar1Xj145jxxeTmarKCmbpv6eiHyXdAy3yEa7ijRAPWClR9U/KWEq72qv4ggRfq",
	"EtehxervlFHwJNFbsAs/dbhfhym1cg4Ejf8uJOPrFKhadogakt0Dbc4uXFxul9bx0DtAwZPUCiQ395AR",
	"eh9m+XJdAFeflW7lSsnzXWoxjjK2YJ9KnoVBqq8KmhMfB855qEGQtFcoW1eSGqiUwE6IxdawusjKxVBY",
	"PZ62C1R79IgNpW8DYQItShLyvTz9qD7GmHO8bjntIWENB+qbEtUrQUrUjHH3y6MEKpRddpYRoPKcFqXR",
	"WMNv891nOiWJTGE+wg3cUOFONG6iceuDvm3VjJ9KiZNlbk3VQxRMazGM4wpkQ9EUGZbKRYriKOFMiFH1",
	"hz7lUkG8sqG6Q5bYWJqL+QVMSE9NXhhShe6vBrTX1ljrjDI8UJ//cX3xPjhEkAXFsuQQ/Co5pqJg3IhP",
	"dQa641qCrtRPbRlsl+nWIm93Sco1ZKBtwDNOJHCCD+FGQHoZFw5yYiGH2NMvtLs0Q2haTYsrEPq+eAtr",
	"j2YzxjLA1IxrDNiGzYN1ZaA7ZIox/wJO5va87oL0oTW+Aa7FyD7SNJce4q+Ly+1hhdsZ75yvoqzwIROM",
	"+T54+GmlMaPNtpV747qBYibkmXMyLARlSC6Ady+oauw2bHYTHUw4zQkNS0/CMlby4OFtnJ2n/vu9qzsY",
	"H7Ine9Pq0dt25a7a5p6SKhg8+BquxKmjmdqqp4a9bWHvPIc4dGdvW8t5bQMGDXuH48q3r7/QGQjuue3e",
	"dhliopunMmydSZKDDZ8IVvIE0AqLOiQa18mqFEsYqeEhEzCFDPbGIthcjuzM4aj2Y2Ic5UQkgRgFnxHJ",
	"MV8jeJQcIx38UN4FpDpz21htMABS6nzYnlu2k4butmtPxh5D/TUEhaMvpnnADSwSSUdJBdAG25gBOKrs",
	"yMAVXLgo5AFJ104stqV+K9Ch7Z833Ml2iMpGO1pFP3JJRIPttR+ZJD9nNP1BvBQ//dfPP+BUlj+/8Nn4",
	"SNLBwZB3h8XsKpmto5/W49sqqc0ajK6GYGnPhSFtlcJ2qTTDYgMnxAidkxqsJ9XowTryUl/ATgcKrSTb",
	"nKawClZkKH/U5FbQqRmQ4zXiUGRr5VRjyuQSuPlC6JQqOtuZszUSBSRkviZ0oRlwp+d9kuwOWequx6hV",
	"VUaoGjql3tgHnJWA8lJINIPGKhVQgXOHchx2ytT+X7F0/Q7z+5StaFgXzVi6RhIeTRqmpzzFl/Xv0Lu1",
	"HjalU3qjzgQRCKNP6k+f6qmfbN0YModAQqr2+LfcLuZvjUXXctVmWtcw0pmfnfrCZBTrq3gTR2qnQ1Kk",
	"DZrZIPqueZ5QRo6De9oT/rHRS43dXvvOTaPmqBsv/ca227fLhj48MK4fhN0WkcBFkBNKcpyhKmRqDr8f",
	"+G4S/dBg9J52yyGB6I6xUKUFNLQgiQKlTgfYB2SOExgV97WJsJ833hMMqYJjVyDKTPrhjHoLwVBcHHG8",
	"Ou/54gWGBocBqmhS5Rc8DTHXzCo8nHb2QF60U7d7sQaa0RNjLt3DumZSYsFbQ257gGsnuXakItqBsCo0",
	"tBcfugElJS1LnGVAF2FDBh6TrEy9QsHhzmmAJa8t/VkwaFyHVPfYVX8YeBMrK9fi16Xfz1r7ZV3NH1g7",
	"Lw6x0YtfqCTSuO8kB1YGowwmmHUA/A8CuMPQOmC8iCxYXwKC/A6QceAJ9Nj9jMhl4OylFeDAsevRaT0R",
	"Xhcsn5kUsK1dUGp/nmgSzRSFsPm8XM94IzPRHxh2eq4KxutdjO4bHleP9tNfe/PR22XzuISun7CE9Fu2",
	"8ChNy3zmJ4P2ltYbNa2HFArVbXjvz3fQt+y/6awHaZCx1RfRjtv1NC96LuydeqUdJK/T1CJhJccLSPWu",
	"1V3EIfUfuewU5HrNAwW50ohHZmMBGuxwbdETCg4HfIcf1Bt7NA5N+wX2ptA2037bNE1wVd49cVy6K/nq",
	"pbxNvb/vC7o/izPagLTs8RH188lV2X6J+qhGZPloJTs57lEOX6euKuBFNUOw9bJCXLkCnASyJJCz38kW",
	"eXlOiqInm/iM8+rygfew5jXEVjnQAXo2jm7wIuSSS7xAqyVJlijBFOmamcKWpiMd8NRFxOiBYFSRv+un",
	"b8mhfQ5f/AYv+v3wXvfbCWuACpmtm5Z4oXc36EZWFA3cuxbN+WtxNExNCgUQ9le/uWogrDAGS4ps0fxg",
	"NWbG+6HAUFp3D8OGGQWyNR8pidRaQWTlQv1nybjSCAWhVIu+De3FkaKr+qCXELs85lqfDpwEVcdtRYS9",
	"Spq6dOhypn6nGzp6+uv3Ap2/1pXUxmjEmSnjEqBsaQk6Ao5RisUS/Tci8nvh8ik55vdjGzPWZqVAQNOC",
	"ESqFKXwTBaO6vvgBcx0+nzOeCysONfbxlE7pr4wjG5WO0YI8gBe9r7J056/RXSg5c6c3oCPuevF3khWj",
	"ly9GOXsgIEYGzF2Mrm1NIVqRLEMlTYELqabOmMWgV3gypUE0oyBYjTu8rClFWGi4neQTlo1w//bkUxBx",
	"KyM1UqqYPEI6uocZno0SLGBUJaeGJasCjz+PFohOvFKSPVK6e4av9fkbbjWYcz3opN3ooX2KwYb47fGv",
	"9hq8B1oH95gG3OHplKHs6ZZFHMAlqzc7SunfS9CJOC//RgQyo01OjQjkVurdJl45jc5bVS8HAheSdvur",
	"hKBRAgZwnR5T/72g2dolZ7ueqNXmW25YPUJ54Qa4zsQtsUBLnJqXLAWwwjTNGKTvjX0Z0PLmMgo9zVAf",
	"0ANwYZ/h1GT9XniZQqWQSgGKwAWHBwIr+4Smhwxe2lhdhwHMH67+ieacAE2ztblOjI2n6MChMM9eKq2u",
	"SXP+ekr1QvTlQkEIrVcF4xLPSEbkeuCanAbYZvn4r4aqZdTsH15OWemPUFWIzKBJ9Wbm9TfIMoZWjGfp",
	"f+ysBznEALHHIGSF2CMbMEbiHjvBS5qZR1wgUM4sSbe/bpyVckpTBsI+rdKzK84LPw1u6YQ+CJiXmZZM",
	"Uz+vrIcM8wVMqWKkMGiNc8A4Mvl7QWSJzZlbLYGiNStRyuj3ElGA1NzvZZbpCiAlTZUyvhnARnwAE+No",
	"W5mmxjfHZaZucN+ROtR7K4V+n1whO7ILt/Ox4fOLjVpJqs9WbdR9Jjm83EjpPUhKTuT6WmGwZhFnK5v1",
	"0F13EvOisuq7456zjAQItaFaWHBBFKJNHDnC7AZSkbAX2kbHUebMPTW1wQkLqPnWqPNEtLKTtZbM0Onl",
	"uT6Ls5Jk+vVmwvK8pESuUcq1re5K9bVTabVitdwojuwtFJ1ELxU6VgDFBYlOoh/HL8YvFW+xXGpCTuy3",
	"sXsJuwAZfF8PJ/pEL4ACx5JxW8ooEEZ3OS4+GsG91WGDOU7gaXOHyNzcxkQgARJJNqV37de3d+PxGAmG",
	"zr/P0e+lkKgUastFhpWSchcmZStzISmR1JPP0+gkegPyuoAkanUP+eHFi9abXwVoomHueHUbekLviWB0",
	"8vE2jkSZ51gZb2oBmiwXBVDFth/HL2wBk92j8kj+cX3xfuwui5OPpnDyVoGdPLyc2HII0Ut8h8PX+a48",
	"LSk5ByqzNfISwPp1aFVj0aRY3emkh2iho12NmzQapWzi6KcXL3dParxH15N+2j2pavagWWL19q5JoZYV",
	"m01N+YrWtxt9BpJl4H28Lv08OsVtyyy/fde6f0Neh69JE8DmGWyrOs1805xrnZuJgGw+wVWboIKFon4f",
	"iozp1g/IjKz4uR8X6x5rhzOyhtHDy1ATj78Ou56arQg3Hut61V+XbVbJDlN1Fcv8nos97n89ZBLoyWiy",
	"GIdrzZrx3whDmxffFvaWctnLwiuQnMADIFz5hc3nktXTVTGuo4aiLHRBBsJoDis0pSu81qFO/8jGxrsX",
	"RHkIyD1J1sN0dbZ2a50pPUY3SyKm1AVOkYQsU/BNTZx1mxV4lODCOMJEmTgcEFA8yyANWSGdd7IHyUi3",
	"J5dm+ICpXkupz8hyxeAGuycZW9jagR6u5+wBkLGqheGTVYjaqNU0H2+npsEwUE0e3Dvma1B5C111P9PJ",
	"U7Ot6WaS+A8NgpfcNVlQHbjTdbbwSAylXU8EHXvB+k28ThTpXqb2xHT5EG5fua8ObbaHdUngva7N8EI2",
	"hx6yulvcN6+Fu6Lj2DkRZEGNs/MFRMXv0nptEB9iHvm9Xv+fvTvZWxb97L2CBRESOML6lc5x2FoWfxq2",
	"/olvRRcsmmDdTa2fR2dM2SzW1ayDcgi7LmwmJN84qL3Gbrhf7AHsCgP6v3ocn7wo4cfbzV6c73g6vZbS",
	"tcTcxHgc9T0hsC3T2yq6XwT8Rn5fz+fpaSv4F1TKFdtzfA8DjnvFY66VtOEgmq1NRNV061NKu1YJ24+7",
	"977omefdb8r8V1DUh51excZnnd0GXwvOFD0Ufz3nB/vcDbiUvd0sv/6BDjXY/BPfyc2+Gf0RpjoykWWo",
	"noSYfTFMJHSPYbND80F+f6fJ8+cjjN/mw5HHlX8OF3hDLZOyc9WjSrrPX3fp4/U9/nqC22y+/K1fQI5h",
	"NQu9psMDxbtqFtzml9cHucuvlt5bshViNFNqTb8gVRoNXAmjTvu55ns6ufpHCbokwv0ejaugOPB3Z3Yv",
	"x1WaCEC2SiO0DvtpYMfputh3c5gsNhtNf+uyWDWrtpVgAaPH/XKHMmi8+lLXh6GK4vtlZkGZtD/tcYCF",
	"0wSweQbbqhbq315CpmZVU2tMnryfKNqu9LfUHLnfbyJSmBKeGJmNx6Y0iEi0wmJKXYN8LNAKMuXqeppp",
	"W4lSwETyOsrve7W0f/PpWWdZLeBbPcjNQoYdLfO38SfaV9Im1bOBAYqjr69Ky9jwfv3oOBKxp6LxF3CQ",
	"mmn+csW3p2QMTy3jXQlSj0a5WUJVLGurhKtKRyVYughDix2pO9xyyAALMJVRSGmUWo2Y+lsOBQcB1HRL",
	"cPPeEKmLqIguCl72lBL9yy75q1cTCTaXK8xrAhmIoRqitsNbFcYZf9eUKIbsN0X/325uLlFVseWeSRCB",
	"UpaUOVBpf1lgBrqGK1cmGKTOJbqb4ILcoSktsM2zYlo5uQKxUgqSWtYRgWaKcXqofg4y0/2KH0nVEn9K",
	"51yTOEVkXmeBiUC8pFQ5zUQRAtMUZ4wCylkKhpG6jXOkVhN5Pn63ho2OZqUgutg5YwuSICHL+XxcG4Oa",
	"qF3bstlPomoJJsZNczYw84MA7gJ2jeEuf96dctlwrPxJleXfneR+cKVy8LxpntfXnfgr42Xu+wON3y0M",
	"rs+/AXBV7OZpZbdcrQw2t5v/DQAA//+r9xHO+XIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
