// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes  = "browser.Scopes"
	WebauthnScopes = "webauthn.Scopes"
)

// Defines values for AttestationConveyancePreference.
const (
	Direct     AttestationConveyancePreference = "direct"
	Enterprise AttestationConveyancePreference = "enterprise"
	Indirect   AttestationConveyancePreference = "indirect"
	None       AttestationConveyancePreference = "none"
)

// Defines values for AuthenticatorAttachment.
const (
	CrossPlatform AuthenticatorAttachment = "cross-platform"
	Platform      AuthenticatorAttachment = "platform"
)

// Defines values for ContentKind.
const (
	ContentKindPost   ContentKind = "post"
	ContentKindThread ContentKind = "thread"
)

// Defines values for OnboardingStatus.
const (
	Complete             OnboardingStatus = "complete"
	RequiresCategory     OnboardingStatus = "requires_category"
	RequiresFirstAccount OnboardingStatus = "requires_first_account"
	RequiresFirstPost    OnboardingStatus = "requires_first_post"
	RequiresMoreAccounts OnboardingStatus = "requires_more_accounts"
)

// Defines values for PublicKeyCredentialDescriptorTransports.
const (
	Ble      PublicKeyCredentialDescriptorTransports = "ble"
	Cable    PublicKeyCredentialDescriptorTransports = "cable"
	Hybrid   PublicKeyCredentialDescriptorTransports = "hybrid"
	Internal PublicKeyCredentialDescriptorTransports = "internal"
	Nfc      PublicKeyCredentialDescriptorTransports = "nfc"
	Usb      PublicKeyCredentialDescriptorTransports = "usb"
)

// Defines values for PublicKeyCredentialRequestOptionsUserVerification.
const (
	PublicKeyCredentialRequestOptionsUserVerificationDiscouraged PublicKeyCredentialRequestOptionsUserVerification = "discouraged"
	PublicKeyCredentialRequestOptionsUserVerificationPreferred   PublicKeyCredentialRequestOptionsUserVerification = "preferred"
	PublicKeyCredentialRequestOptionsUserVerificationRequired    PublicKeyCredentialRequestOptionsUserVerification = "required"
)

// Defines values for PublicKeyCredentialType.
const (
	PublicKey PublicKeyCredentialType = "public-key"
)

// Defines values for ResidentKeyRequirement.
const (
	ResidentKeyRequirementDiscouraged ResidentKeyRequirement = "discouraged"
	ResidentKeyRequirementPreferred   ResidentKeyRequirement = "preferred"
	ResidentKeyRequirementRequired    ResidentKeyRequirement = "required"
)

// Defines values for ThreadStatus.
const (
	Draft     ThreadStatus = "draft"
	Published ThreadStatus = "published"
)

// Defines values for UserVerificationRequirement.
const (
	Discouraged UserVerificationRequirement = "discouraged"
	Preferred   UserVerificationRequirement = "preferred"
	Required    UserVerificationRequirement = "required"
)

// Defines values for IconSize.
const (
	IconSizeN120x120 IconSize = "120x120"
	IconSizeN152x152 IconSize = "152x152"
	IconSizeN167x167 IconSize = "167x167"
	IconSizeN180x180 IconSize = "180x180"
	IconSizeN32x32   IconSize = "32x32"
	IconSizeN512x512 IconSize = "512x512"
)

// Defines values for IconGetParamsIconSize.
const (
	IconGetParamsIconSizeN120x120 IconGetParamsIconSize = "120x120"
	IconGetParamsIconSizeN152x152 IconGetParamsIconSize = "152x152"
	IconGetParamsIconSizeN167x167 IconGetParamsIconSize = "167x167"
	IconGetParamsIconSizeN180x180 IconGetParamsIconSize = "180x180"
	IconGetParamsIconSizeN32x32   IconGetParamsIconSize = "32x32"
	IconGetParamsIconSizeN512x512 IconGetParamsIconSize = "512x512"
)

// APIError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type APIError struct {
	// Error The internal error, not intended for end-user display.
	Error string `json:"error"`

	// Message A human-readable message intended for end-user display.
	Message *string `json:"message,omitempty"`

	// Metadata Any additional metadata related to the error.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Suggested A suggested action for the user.
	Suggested *string `json:"suggested,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Admin bool    `json:"admin"`
	Bio   *string `json:"bio,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name AccountName `json:"name"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccountAuthMethod defines model for AccountAuthMethod.
type AccountAuthMethod struct {
	// Active True if the account is using this auth method.
	Active bool `json:"active"`

	// Link The hyperlink to render for the user.
	Link string `json:"link"`

	// LogoUrl The logo to display for the provider.
	LogoUrl string `json:"logo_url"`

	// Name The human-readable name of the provider.
	Name string `json:"name"`

	// Provider The slug name of the provider.
	Provider string `json:"provider"`
}

// AccountAuthMethodList defines model for AccountAuthMethodList.
type AccountAuthMethodList = []AccountAuthMethod

// AccountAuthMethodProps defines model for AccountAuthMethodProps.
type AccountAuthMethodProps struct {
	// Active True if the account is using this auth method.
	Active bool `json:"active"`
}

// AccountAuthMethods defines model for AccountAuthMethods.
type AccountAuthMethods struct {
	AuthMethods AccountAuthMethodList `json:"auth_methods"`
}

// AccountCommonProps defines model for AccountCommonProps.
type AccountCommonProps struct {
	Admin bool    `json:"admin"`
	Bio   *string `json:"bio,omitempty"`

	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Name The account owners display name.
	Name AccountName `json:"name"`
}

// AccountHandle The unique @ handle of an account.
type AccountHandle = string

// AccountMutableProps defines model for AccountMutableProps.
type AccountMutableProps struct {
	Bio *string `json:"bio,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Interests A list of tags IDs.
	Interests *TagListIDs `json:"interests,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`
}

// AccountName The account owners display name.
type AccountName = string

// AdminSettingsMutableProps defines model for AdminSettingsMutableProps.
type AdminSettingsMutableProps struct {
	AccentColour *string `json:"accent_colour,omitempty"`
	Description  *string `json:"description,omitempty"`
	Title        *string `json:"title,omitempty"`
}

// AdminSettingsProps Storyden installation and administration settings.
type AdminSettingsProps struct {
	AccentColour string `json:"accent_colour"`
	Description  string `json:"description"`
	Title        string `json:"title"`
}

// Asset defines model for Asset.
type Asset struct {
	Height float32 `json:"height"`

	// Id A unique identifier for this resource.
	Id       AssetID `json:"id"`
	MimeType string  `json:"mime_type"`
	Url      string  `json:"url"`
	Width    float32 `json:"width"`
}

// AssetID A unique identifier for this resource.
type AssetID = Identifier

// AssetList defines model for AssetList.
type AssetList = []Asset

// AssetURL The URL of an asset uploaded to the platform.
type AssetURL = string

// AttestationConveyancePreference https://www.w3.org/TR/webauthn-2/#enum-attestation-convey
type AttestationConveyancePreference string

// AuthPair defines model for AuthPair.
type AuthPair struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthProvider defines model for AuthProvider.
type AuthProvider struct {
	// Link The hyperlink to render for the user.
	Link string `json:"link"`

	// LogoUrl The logo to display for the provider.
	LogoUrl string `json:"logo_url"`

	// Name The human-readable name of the provider.
	Name string `json:"name"`

	// Provider The slug name of the provider.
	Provider string `json:"provider"`
}

// AuthProviderList defines model for AuthProviderList.
type AuthProviderList = []AuthProvider

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// AuthenticationExtensionsClientInputs https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs
type AuthenticationExtensionsClientInputs map[string]interface{}

// AuthenticatorAttachment https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment
type AuthenticatorAttachment string

// AuthenticatorResponse https://www.w3.org/TR/webauthn-2/#authenticatorresponse
type AuthenticatorResponse struct {
	AttestationObject *string   `json:"attestationObject,omitempty"`
	AuthenticatorData *string   `json:"authenticatorData,omitempty"`
	ClientDataJSON    string    `json:"clientDataJSON"`
	Signature         *string   `json:"signature,omitempty"`
	Transports        *[]string `json:"transports,omitempty"`
	UserHandle        *string   `json:"userHandle,omitempty"`
}

// AuthenticatorSelectionCriteria https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria
type AuthenticatorSelectionCriteria struct {
	// AuthenticatorAttachment https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment
	AuthenticatorAttachment AuthenticatorAttachment `json:"authenticatorAttachment"`
	RequireResidentKey      *bool                   `json:"requireResidentKey,omitempty"`

	// ResidentKey https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement
	ResidentKey ResidentKeyRequirement `json:"residentKey"`

	// UserVerification https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement
	UserVerification *UserVerificationRequirement `json:"userVerification,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Admin  bool   `json:"admin"`
	Colour string `json:"colour"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	Description string     `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name A category's user-facing name.
	Name      CategoryName `json:"name"`
	PostCount int          `json:"postCount"`

	// Slug A category's URL-safe slug.
	Slug CategorySlug `json:"slug"`
	Sort int          `json:"sort"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CategoryAdditional defines model for CategoryAdditional.
type CategoryAdditional struct {
	PostCount int `json:"postCount"`
}

// CategoryCommonProps defines model for CategoryCommonProps.
type CategoryCommonProps struct {
	Admin       bool   `json:"admin"`
	Colour      string `json:"colour"`
	Description string `json:"description"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Name A category's user-facing name.
	Name CategoryName `json:"name"`

	// Slug A category's URL-safe slug.
	Slug CategorySlug `json:"slug"`
	Sort int          `json:"sort"`
}

// CategoryIdentifierList defines model for CategoryIdentifierList.
type CategoryIdentifierList = []Identifier

// CategoryInitialProps defines model for CategoryInitialProps.
type CategoryInitialProps struct {
	Admin       bool   `json:"admin"`
	Colour      string `json:"colour"`
	Description string `json:"description"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Name A category's user-facing name.
	Name CategoryName `json:"name"`

	// Slug A category's URL-safe slug.
	Slug *CategorySlug `json:"slug,omitempty"`
}

// CategoryList defines model for CategoryList.
type CategoryList struct {
	Categories []Category `json:"categories"`
}

// CategoryMutableProps defines model for CategoryMutableProps.
type CategoryMutableProps struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Name A category's user-facing name.
	Name *CategoryName `json:"name,omitempty"`

	// Slug A category's URL-safe slug.
	Slug *CategorySlug `json:"slug,omitempty"`
}

// CategoryName A category's user-facing name.
type CategoryName = string

// CategoryReference defines model for CategoryReference.
type CategoryReference struct {
	Admin  bool   `json:"admin"`
	Colour string `json:"colour"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	Description string     `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name A category's user-facing name.
	Name CategoryName `json:"name"`

	// Slug A category's URL-safe slug.
	Slug CategorySlug `json:"slug"`
	Sort int          `json:"sort"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CategorySlug A category's URL-safe slug.
type CategorySlug = string

// CategorySlugList A list of category names.
type CategorySlugList = []CategorySlug

// Cluster defines model for Cluster.
type Cluster struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time         `json:"deletedAt,omitempty"`
	Description ClusterDescription `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL `json:"image_url,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name ClusterName             `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties Properties `json:"properties"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ClusterSlug `json:"slug"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ClusterCommonProps The main properties of a cluster.
type ClusterCommonProps struct {
	Description ClusterDescription `json:"description"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL   `json:"image_url,omitempty"`
	Name     ClusterName `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties Properties `json:"properties"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ClusterSlug `json:"slug"`
}

// ClusterDescription defines model for ClusterDescription.
type ClusterDescription = string

// ClusterInitialProps defines model for ClusterInitialProps.
type ClusterInitialProps struct {
	Description ClusterDescription `json:"description"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL   `json:"image_url,omitempty"`
	Name     ClusterName `json:"name"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties *Properties `json:"properties,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ClusterSlug `json:"slug"`
}

// ClusterItem An item is an arbitrary object used for indexing any kind of structured
// data for the purposes of archival, search, documentation, products, etc.
// Items are similar to posts in terms of data model but are semantically
// different when it comes to purpose.
//
// If you were to use Storyden to run a community for a video game for
// example, items could be used to represent actual items from the game
// which allows members to search for them as  well as reference them in
// posts and other content.
type ClusterItem = Item

// ClusterItemList A list of items within the context of belonging to a cluster. Different
// from an ItemList because we do not need to include the parent cluster
// information inside each item since it's already available.
type ClusterItemList = []ClusterItem

// ClusterList defines model for ClusterList.
type ClusterList = []Cluster

// ClusterMutableProps Note: Properties are replace-all and are not merged with existing.
type ClusterMutableProps struct {
	Description *ClusterDescription `json:"description,omitempty"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL    `json:"image_url,omitempty"`
	Name     *ClusterName `json:"name,omitempty"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties *Properties `json:"properties,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug *ClusterSlug `json:"slug,omitempty"`
}

// ClusterName defines model for ClusterName.
type ClusterName = string

// ClusterSlug A URL-safe slug for uniquely identifying resources.
type ClusterSlug = Slug

// ClusterWithItems defines model for ClusterWithItems.
type ClusterWithItems struct {
	Clusters ClusterList `json:"clusters"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time         `json:"deletedAt,omitempty"`
	Description ClusterDescription `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL `json:"image_url,omitempty"`

	// Items A list of items within the context of belonging to a cluster. Different
	// from an ItemList because we do not need to include the parent cluster
	// information inside each item since it's already available.
	Items ClusterItemList `json:"items"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name ClusterName             `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties Properties `json:"properties"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ClusterSlug `json:"slug"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Collection defines model for Collection.
type Collection struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	Description string     `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name string                  `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CollectionCommonProps A reference to the collection
type CollectionCommonProps struct {
	Description string `json:"description"`
	Name        string `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`
}

// CollectionInitialProps defines model for CollectionInitialProps.
type CollectionInitialProps struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CollectionItem defines model for CollectionItem.
type CollectionItem struct {
	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Short A short version of the thread's body text for use in previews.
	Short string `json:"short"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CollectionItemCommonProps defines model for CollectionItemCommonProps.
type CollectionItemCommonProps struct {
	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Short A short version of the thread's body text for use in previews.
	Short string `json:"short"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Title The title of the thread.
	Title string `json:"title"`
}

// CollectionItemList defines model for CollectionItemList.
type CollectionItemList = []CollectionItem

// CollectionList defines model for CollectionList.
type CollectionList = []Collection

// CollectionMutableProps defines model for CollectionMutableProps.
type CollectionMutableProps struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// CollectionWithItems defines model for CollectionWithItems.
type CollectionWithItems struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	Description string     `json:"description"`

	// Id A unique identifier for this resource.
	Id    Identifier         `json:"id"`
	Items CollectionItemList `json:"items"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name string                  `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ContentKind defines model for ContentKind.
type ContentKind string

// ContentKinds defines model for ContentKinds.
type ContentKinds = []ContentKind

// CredentialRequestOptions https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension
type CredentialRequestOptions struct {
	// PublicKey https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
	PublicKey PublicKeyCredentialRequestOptions `json:"publicKey"`
}

// Identifier A unique identifier for this resource.
type Identifier = string

// Info Basic public information about the Storyden installation.
type Info struct {
	AccentColour string `json:"accent_colour"`
	Description  string `json:"description"`

	// OnboardingStatus Derived from data state, indicates what stage in the onboarding process
	// the Storyden installation is in for directing first-time setup steps.
	OnboardingStatus OnboardingStatus `json:"onboarding_status"`
	Title            string           `json:"title"`
}

// Item defines model for Item.
type Item struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time      `json:"deletedAt,omitempty"`
	Description ItemDescription `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL `json:"image_url,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name ItemName                `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties Properties `json:"properties"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ItemSlug `json:"slug"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ItemCommonProps The main properties for an item.
type ItemCommonProps struct {
	Description ItemDescription `json:"description"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL `json:"image_url,omitempty"`
	Name     ItemName  `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties Properties `json:"properties"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ItemSlug `json:"slug"`
}

// ItemDescription defines model for ItemDescription.
type ItemDescription = string

// ItemInitialProps defines model for ItemInitialProps.
type ItemInitialProps struct {
	Description ItemDescription `json:"description"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL `json:"image_url,omitempty"`
	Name     ItemName  `json:"name"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties *Properties `json:"properties,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ItemSlug `json:"slug"`
}

// ItemList A list of items where each item includes all the information about its
// parent cluster too. For use with APIs that want to provide a list of
// items that may be part of different clusters.
type ItemList = []ItemWithParents

// ItemMutableProps Note: Properties are replace-all and are not merged with existing.
type ItemMutableProps struct {
	Description *ItemDescription `json:"description,omitempty"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL `json:"image_url,omitempty"`
	Name     *ItemName `json:"name,omitempty"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties *Properties `json:"properties,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug *ItemSlug `json:"slug,omitempty"`
}

// ItemName defines model for ItemName.
type ItemName = string

// ItemSlug A URL-safe slug for uniquely identifying resources.
type ItemSlug = Slug

// ItemWithParents defines model for ItemWithParents.
type ItemWithParents struct {
	Clusters *ClusterList `json:"clusters,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time      `json:"deletedAt,omitempty"`
	Description ItemDescription `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ImageUrl The URL of an asset uploaded to the platform.
	ImageUrl *AssetURL `json:"image_url,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name ItemName                `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Properties Arbitrary JSON object that can express any additional data for a
	// resource object. This is intended for client implementations to use for
	// extending objects with arbitrary information to satisfy product needs.
	//
	// For example, if you were building a book database, you could use the
	// Properties of a cluster to specify publisher information such as date of
	// founding, headquarters, size, etc. and then use the Properties of the
	// items in that cluster to specify book information such as release date,
	// number of pages, etc.
	Properties Properties `json:"properties"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug ItemSlug `json:"slug"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Metadata Arbitrary metadata for the resource.
type Metadata map[string]interface{}

// OAuthCallback defines model for OAuthCallback.
type OAuthCallback struct {
	Code  string `json:"code"`
	State string `json:"state"`
}

// OnboardingStatus Derived from data state, indicates what stage in the onboarding process
// the Storyden installation is in for directing first-time setup steps.
type OnboardingStatus string

// PhoneRequestCodeProps The phone number request payload.
type PhoneRequestCodeProps struct {
	// Identifier The desired username to link to the phone number.
	Identifier string `json:"identifier"`

	// PhoneNumber The phone number to receive the one-time code on.
	PhoneNumber string `json:"phone_number"`
}

// PhoneSubmitCodeProps The Phone submit code payload.
type PhoneSubmitCodeProps struct {
	Code string `json:"code"`
}

// PostCommonProps defines model for PostCommonProps.
type PostCommonProps struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body PostContent `json:"body"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// RootId A unique identifier for this resource.
	RootId Identifier `json:"root_id"`

	// RootSlug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	RootSlug ThreadMark `json:"root_slug"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// PostContent The body text of a post within a thread. The type is either a string or
// an object, depending on what was used during creation. Strings can be
// used for basic plain text or markdown content and objects are used for
// more complex types such as Slate.js editor documents.
type PostContent = string

// PostInitialProps defines model for PostInitialProps.
type PostInitialProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body PostContent `json:"body"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// PostMetadata defines model for PostMetadata.
type PostMetadata = CommonProperties

// PostMutableProps defines model for PostMutableProps.
type PostMutableProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body *PostContent `json:"body,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// PostProps defines model for PostProps.
type PostProps struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body PostContent `json:"body"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// RootId A unique identifier for this resource.
	RootId Identifier `json:"root_id"`

	// RootSlug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	RootSlug ThreadMark `json:"root_slug"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// PostReactProps Reactions are currently just simple strings but they may improve later.
type PostReactProps struct {
	Emoji *string `json:"emoji,omitempty"`
}

// PostSearchResults defines model for PostSearchResults.
type PostSearchResults struct {
	Count   float32     `json:"count"`
	Results []PostProps `json:"results"`
}

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	Admin bool `json:"admin"`

	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Name The account owners display name.
	Name AccountName `json:"name"`
}

// Properties Arbitrary JSON object that can express any additional data for a
// resource object. This is intended for client implementations to use for
// extending objects with arbitrary information to satisfy product needs.
//
// For example, if you were building a book database, you could use the
// Properties of a cluster to specify publisher information such as date of
// founding, headquarters, size, etc. and then use the Properties of the
// items in that cluster to specify book information such as release date,
// number of pages, etc.
type Properties = any

// PublicKeyCredential https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type PublicKeyCredential struct {
	AuthenticatorAttachment *string                 `json:"authenticatorAttachment,omitempty"`
	ClientExtensionResults  *map[string]interface{} `json:"clientExtensionResults,omitempty"`
	Id                      string                  `json:"id"`
	RawId                   string                  `json:"rawId"`

	// Response https://www.w3.org/TR/webauthn-2/#authenticatorresponse
	Response AuthenticatorResponse `json:"response"`
	Type     string                `json:"type"`
}

// PublicKeyCredentialCreationOptions https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions
type PublicKeyCredentialCreationOptions struct {
	// Attestation https://www.w3.org/TR/webauthn-2/#enum-attestation-convey
	Attestation *AttestationConveyancePreference `json:"attestation,omitempty"`

	// AuthenticatorSelection https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria
	AuthenticatorSelection *AuthenticatorSelectionCriteria `json:"authenticatorSelection,omitempty"`
	Challenge              string                          `json:"challenge"`
	ExcludeCredentials     []PublicKeyCredentialDescriptor `json:"excludeCredentials"`

	// Extensions https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs
	Extensions       *AuthenticationExtensionsClientInputs `json:"extensions,omitempty"`
	PubKeyCredParams []PublicKeyCredentialParameters       `json:"pubKeyCredParams"`

	// Rp https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity
	Rp      PublicKeyCredentialRpEntity `json:"rp"`
	Timeout *int                        `json:"timeout,omitempty"`

	// User https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
	User PublicKeyCredentialUserEntity `json:"user"`
}

// PublicKeyCredentialDescriptor https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor
type PublicKeyCredentialDescriptor struct {
	Id         string                                     `json:"id"`
	Transports *[]PublicKeyCredentialDescriptorTransports `json:"transports,omitempty"`

	// Type https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
	Type PublicKeyCredentialType `json:"type"`
}

// PublicKeyCredentialDescriptorTransports defines model for PublicKeyCredentialDescriptor.Transports.
type PublicKeyCredentialDescriptorTransports string

// PublicKeyCredentialParameters https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters
type PublicKeyCredentialParameters struct {
	Alg float32 `json:"alg"`

	// Type https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
	Type PublicKeyCredentialType `json:"type"`
}

// PublicKeyCredentialRequestOptions https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
type PublicKeyCredentialRequestOptions struct {
	AllowCredentials *[]PublicKeyCredentialDescriptor                   `json:"allowCredentials,omitempty"`
	Challenge        string                                             `json:"challenge"`
	RpId             *string                                            `json:"rpId,omitempty"`
	Timeout          *int                                               `json:"timeout,omitempty"`
	UserVerification *PublicKeyCredentialRequestOptionsUserVerification `json:"userVerification,omitempty"`
}

// PublicKeyCredentialRequestOptionsUserVerification defines model for PublicKeyCredentialRequestOptions.UserVerification.
type PublicKeyCredentialRequestOptionsUserVerification string

// PublicKeyCredentialRpEntity https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity
type PublicKeyCredentialRpEntity struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PublicKeyCredentialType https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
type PublicKeyCredentialType string

// PublicKeyCredentialUserEntity https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
type PublicKeyCredentialUserEntity struct {
	DisplayName string `json:"displayName"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}

// PublicProfile defines model for PublicProfile.
type PublicProfile struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt string  `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Image *string    `json:"image,omitempty"`

	// Interests A list of tags.
	Interests TagList `json:"interests"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name AccountName `json:"name"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// ReactList A list of reactions this post has had from people.
type ReactList = []React

// ResidentKeyRequirement https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement
type ResidentKeyRequirement string

// Slug A URL-safe slug for uniquely identifying resources.
type Slug = string

// Tag A tag which can link profiles or threads via interests.
type Tag struct {
	Colour *string `json:"colour,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Name The name of a tag.
	Name TagName `json:"name"`
}

// TagList A list of tags.
type TagList = []Tag

// TagListIDs A list of tags IDs.
type TagListIDs = []Identifier

// TagName The name of a tag.
type TagName = string

// Thread defines model for Thread.
type Thread struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author      ProfileReference  `json:"author"`
	Category    CategoryReference `json:"category"`
	Collections CollectionList    `json:"collections"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// PostCount The number of posts under this thread.
	PostCount *int        `json:"post_count,omitempty"`
	Posts     []PostProps `json:"posts"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// ThreadInitialProps defines model for ThreadInitialProps.
type ThreadInitialProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body PostContent `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Status A thread can be in a draft state while the owner makes changes to the content. Once they are happy with it, they can publish the thread.
	Status ThreadStatus `json:"status"`

	// Tags A list of tags IDs.
	Tags *TagListIDs `json:"tags,omitempty"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// ThreadList defines model for ThreadList.
type ThreadList = []ThreadReference

// ThreadMark A thread's ID and optional slug separated by a dash = it's unique mark.
// This allows endpoints to respond to varying forms of a thread's ID.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
//
//	as the identifier for that thread.
type ThreadMark = string

// ThreadMutableProps defines model for ThreadMutableProps.
type ThreadMutableProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body *PostContent `json:"body,omitempty"`

	// Category A unique identifier for this resource.
	Category *Identifier `json:"category,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Status A thread can be in a draft state while the owner makes changes to the content. Once they are happy with it, they can publish the thread.
	Status *ThreadStatus `json:"status,omitempty"`

	// Tags A list of tags IDs.
	Tags *TagListIDs `json:"tags,omitempty"`

	// Title The title of a thread.
	Title *ThreadTitle `json:"title,omitempty"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// ThreadReference defines model for ThreadReference.
type ThreadReference struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author      ProfileReference  `json:"author"`
	Category    CategoryReference `json:"category"`
	Collections CollectionList    `json:"collections"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// PostCount The number of posts under this thread.
	PostCount *int `json:"post_count,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// ThreadStatus A thread can be in a draft state while the owner makes changes to the content. Once they are happy with it, they can publish the thread.
type ThreadStatus string

// ThreadTitle The title of a thread.
type ThreadTitle = string

// URL A web address
type URL = string

// UserVerificationRequirement https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement
type UserVerificationRequirement string

// WebAuthnPublicKeyCreationOptions https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension
type WebAuthnPublicKeyCreationOptions struct {
	// PublicKey https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions
	PublicKey PublicKeyCredentialCreationOptions `json:"publicKey"`
}

// AccountHandleParam The unique @ handle of an account.
type AccountHandleParam = AccountHandle

// AssetPath defines model for AssetPath.
type AssetPath = string

// CategoryIDParam A unique identifier for this resource.
type CategoryIDParam = Identifier

// ClusterSlugChildParam A unique identifier for this resource.
type ClusterSlugChildParam = Identifier

// ClusterSlugParam A unique identifier for this resource.
type ClusterSlugParam = Identifier

// CollectionIDParam A unique identifier for this resource.
type CollectionIDParam = Identifier

// ContentLength defines model for ContentLength.
type ContentLength = float32

// IconSize defines model for IconSize.
type IconSize string

// ItemSlugParam A unique identifier for this resource.
type ItemSlugParam = Identifier

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// PostIDParam A unique identifier for this resource.
type PostIDParam = Identifier

// SearchQuery defines model for SearchQuery.
type SearchQuery = string

// ThreadMarkParam A thread's ID and optional slug separated by a dash = it's unique mark.
// This allows endpoints to respond to varying forms of a thread's ID.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
//
//	as the identifier for that thread.
type ThreadMarkParam = ThreadMark

// AccountAuthProviderListOK defines model for AccountAuthProviderListOK.
type AccountAuthProviderListOK = AccountAuthMethods

// AccountGetOK defines model for AccountGetOK.
type AccountGetOK = Account

// AccountUpdateOK defines model for AccountUpdateOK.
type AccountUpdateOK = Account

// AdminSettingsUpdateOK Storyden installation and administration settings.
type AdminSettingsUpdateOK = AdminSettingsProps

// AssetUploadOK defines model for AssetUploadOK.
type AssetUploadOK = Asset

// AuthProviderListOK defines model for AuthProviderListOK.
type AuthProviderListOK struct {
	Providers AuthProviderList `json:"providers"`
}

// AuthSuccessOK defines model for AuthSuccessOK.
type AuthSuccessOK = AuthSuccess

// CategoryCreateOK defines model for CategoryCreateOK.
type CategoryCreateOK = Category

// CategoryListOK defines model for CategoryListOK.
type CategoryListOK = CategoryList

// CategoryUpdateOK defines model for CategoryUpdateOK.
type CategoryUpdateOK = Category

// ClusterAddChildOK A cluster is a group of items and other clusters. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Clusters
// can be referenced in content posts and they also have their own content.
type ClusterAddChildOK = Cluster

// ClusterAddItemOK A cluster is a group of items and other clusters. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Clusters
// can be referenced in content posts and they also have their own content.
type ClusterAddItemOK = Cluster

// ClusterCreateOK A cluster is a group of items and other clusters. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Clusters
// can be referenced in content posts and they also have their own content.
type ClusterCreateOK = Cluster

// ClusterGetOK The full properties of a cluster including all items and maybe child
// clusters (depending on what the endpoint is configured or queried to do)
// for rendering a single cluster on a view.
type ClusterGetOK = ClusterWithItems

// ClusterListOK defines model for ClusterListOK.
type ClusterListOK struct {
	Clusters ClusterList `json:"clusters"`
}

// ClusterRemoveChildOK A cluster is a group of items and other clusters. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Clusters
// can be referenced in content posts and they also have their own content.
type ClusterRemoveChildOK = Cluster

// ClusterRemoveItemOK A cluster is a group of items and other clusters. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Clusters
// can be referenced in content posts and they also have their own content.
type ClusterRemoveItemOK = Cluster

// ClusterUpdateOK A cluster is a group of items and other clusters. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Clusters
// can be referenced in content posts and they also have their own content.
type ClusterUpdateOK = Cluster

// CollectionAddPostOK A collection is a group of threads owned by a user. It allows users to
// curate their own lists of content from the site. Collections can only
// contain root level posts (threads) with titles and slugs to link to.
type CollectionAddPostOK = Collection

// CollectionCreateOK A collection is a group of threads owned by a user. It allows users to
// curate their own lists of content from the site. Collections can only
// contain root level posts (threads) with titles and slugs to link to.
type CollectionCreateOK = Collection

// CollectionGetOK The full properties of a collection, for rendering a single collection
// somewhere where you can afford to show all the items in the collection.
type CollectionGetOK = CollectionWithItems

// CollectionListOK defines model for CollectionListOK.
type CollectionListOK struct {
	Collections CollectionList `json:"collections"`
}

// CollectionRemovePostOK A collection is a group of threads owned by a user. It allows users to
// curate their own lists of content from the site. Collections can only
// contain root level posts (threads) with titles and slugs to link to.
type CollectionRemovePostOK = Collection

// CollectionUpdateOK A collection is a group of threads owned by a user. It allows users to
// curate their own lists of content from the site. Collections can only
// contain root level posts (threads) with titles and slugs to link to.
type CollectionUpdateOK = Collection

// GetInfoOK Basic public information about the Storyden installation.
type GetInfoOK = Info

// InternalServerError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type InternalServerError = APIError

// ItemCreateOK An item is an arbitrary object used for indexing any kind of structured
// data for the purposes of archival, search, documentation, products, etc.
// Items are similar to posts in terms of data model but are semantically
// different when it comes to purpose.
//
// If you were to use Storyden to run a community for a video game for
// example, items could be used to represent actual items from the game
// which allows members to search for them as  well as reference them in
// posts and other content.
type ItemCreateOK = Item

// ItemGetOK Represents an item with the parent cluster information included. Used by
// schemas that only want a single item along with its cluster information.
type ItemGetOK = ItemWithParents

// ItemListOK defines model for ItemListOK.
type ItemListOK struct {
	// Items A list of items where each item includes all the information about its
	// parent cluster too. For use with APIs that want to provide a list of
	// items that may be part of different clusters.
	Items ItemList `json:"items"`
}

// ItemUpdateOK An item is an arbitrary object used for indexing any kind of structured
// data for the purposes of archival, search, documentation, products, etc.
// Items are similar to posts in terms of data model but are semantically
// different when it comes to purpose.
//
// If you were to use Storyden to run a community for a video game for
// example, items could be used to represent actual items from the game
// which allows members to search for them as  well as reference them in
// posts and other content.
type ItemUpdateOK = Item

// PostCreateOK A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostCreateOK = PostProps

// PostReactAddOK defines model for PostReactAddOK.
type PostReactAddOK = React

// PostSearchOK defines model for PostSearchOK.
type PostSearchOK = PostSearchResults

// PostUpdateOK A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostUpdateOK = PostProps

// ProfileGetOK defines model for ProfileGetOK.
type ProfileGetOK = PublicProfile

// ThreadCreateOK defines model for ThreadCreateOK.
type ThreadCreateOK = Thread

// ThreadGet defines model for ThreadGet.
type ThreadGet = Thread

// ThreadListOK defines model for ThreadListOK.
type ThreadListOK struct {
	Threads ThreadList `json:"threads"`
}

// ThreadUpdateOK defines model for ThreadUpdateOK.
type ThreadUpdateOK = Thread

// WebAuthnGetAssertionOK https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension
type WebAuthnGetAssertionOK = CredentialRequestOptions

// WebAuthnRequestCredentialOK https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension
type WebAuthnRequestCredentialOK = WebAuthnPublicKeyCreationOptions

// AccountUpdate defines model for AccountUpdate.
type AccountUpdate = AccountMutableProps

// AdminSettingsUpdate defines model for AdminSettingsUpdate.
type AdminSettingsUpdate = AdminSettingsMutableProps

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthPair

// CategoryCreate defines model for CategoryCreate.
type CategoryCreate = CategoryInitialProps

// CategoryUpdate defines model for CategoryUpdate.
type CategoryUpdate = CategoryMutableProps

// CategoryUpdateOrder defines model for CategoryUpdateOrder.
type CategoryUpdateOrder = CategoryIdentifierList

// ClusterCreate defines model for ClusterCreate.
type ClusterCreate = ClusterInitialProps

// ClusterUpdate Note: Properties are replace-all and are not merged with existing.
type ClusterUpdate = ClusterMutableProps

// CollectionCreate defines model for CollectionCreate.
type CollectionCreate = CollectionInitialProps

// CollectionUpdate defines model for CollectionUpdate.
type CollectionUpdate = CollectionMutableProps

// ItemCreate defines model for ItemCreate.
type ItemCreate = ItemInitialProps

// ItemUpdate Note: Properties are replace-all and are not merged with existing.
type ItemUpdate = ItemMutableProps

// OAuthProviderCallback defines model for OAuthProviderCallback.
type OAuthProviderCallback = OAuthCallback

// PhoneRequestCode The phone number request payload.
type PhoneRequestCode = PhoneRequestCodeProps

// PhoneSubmitCode The Phone submit code payload.
type PhoneSubmitCode = PhoneSubmitCodeProps

// PostCreate defines model for PostCreate.
type PostCreate = PostInitialProps

// PostReactAdd Reactions are currently just simple strings but they may improve later.
type PostReactAdd = PostReactProps

// PostUpdate defines model for PostUpdate.
type PostUpdate = PostMutableProps

// ThreadCreate defines model for ThreadCreate.
type ThreadCreate = ThreadInitialProps

// ThreadUpdate defines model for ThreadUpdate.
type ThreadUpdate = ThreadMutableProps

// WebAuthnMakeAssertion https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type WebAuthnMakeAssertion = PublicKeyCredential

// WebAuthnMakeCredential https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type WebAuthnMakeCredential = PublicKeyCredential

// AccountSetAvatarParams defines parameters for AccountSetAvatar.
type AccountSetAvatarParams struct {
	// ContentLength Body content length in bytes.
	ContentLength ContentLength `json:"Content-Length"`
}

// AssetUploadParams defines parameters for AssetUpload.
type AssetUploadParams struct {
	// ContentLength Body content length in bytes.
	ContentLength ContentLength `json:"Content-Length"`
}

// ClusterListParams defines parameters for ClusterList.
type ClusterListParams struct {
	// ClusterId List this cluster and all child clusters.
	ClusterId *Identifier `form:"cluster_id,omitempty" json:"cluster_id,omitempty"`
}

// IconUploadParams defines parameters for IconUpload.
type IconUploadParams struct {
	// ContentLength Body content length in bytes.
	ContentLength ContentLength `json:"Content-Length"`
}

// IconGetParamsIconSize defines parameters for IconGet.
type IconGetParamsIconSize string

// ItemListParams defines parameters for ItemList.
type ItemListParams struct {
	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`
}

// PostSearchParams defines parameters for PostSearch.
type PostSearchParams struct {
	// Body A text query to search for in post content.
	Body *string `form:"body,omitempty" json:"body,omitempty"`

	// Author Show only results created by this account.
	Author *AccountHandle `form:"author,omitempty" json:"author,omitempty"`

	// Kind Posts, threads or both.
	Kind *ContentKinds `form:"kind,omitempty" json:"kind,omitempty"`
}

// ThreadListParams defines parameters for ThreadList.
type ThreadListParams struct {
	// Author Show only results creeated by this user.
	Author *AccountHandle `form:"author,omitempty" json:"author,omitempty"`

	// Tags Show only results with these tags
	Tags *TagListIDs `form:"tags,omitempty" json:"tags,omitempty"`

	// Categories Show only results with these categories
	Categories *CategorySlugList `form:"categories,omitempty" json:"categories,omitempty"`
}

// AccountUpdateJSONRequestBody defines body for AccountUpdate for application/json ContentType.
type AccountUpdateJSONRequestBody = AccountMutableProps

// AdminSettingsUpdateJSONRequestBody defines body for AdminSettingsUpdate for application/json ContentType.
type AdminSettingsUpdateJSONRequestBody = AdminSettingsMutableProps

// OAuthProviderCallbackJSONRequestBody defines body for OAuthProviderCallback for application/json ContentType.
type OAuthProviderCallbackJSONRequestBody = OAuthCallback

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthPair

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthPair

// PhoneRequestCodeJSONRequestBody defines body for PhoneRequestCode for application/json ContentType.
type PhoneRequestCodeJSONRequestBody = PhoneRequestCodeProps

// PhoneSubmitCodeJSONRequestBody defines body for PhoneSubmitCode for application/json ContentType.
type PhoneSubmitCodeJSONRequestBody = PhoneSubmitCodeProps

// WebAuthnMakeAssertionJSONRequestBody defines body for WebAuthnMakeAssertion for application/json ContentType.
type WebAuthnMakeAssertionJSONRequestBody = PublicKeyCredential

// WebAuthnMakeCredentialJSONRequestBody defines body for WebAuthnMakeCredential for application/json ContentType.
type WebAuthnMakeCredentialJSONRequestBody = PublicKeyCredential

// CategoryUpdateOrderJSONRequestBody defines body for CategoryUpdateOrder for application/json ContentType.
type CategoryUpdateOrderJSONRequestBody = CategoryIdentifierList

// CategoryCreateJSONRequestBody defines body for CategoryCreate for application/json ContentType.
type CategoryCreateJSONRequestBody = CategoryInitialProps

// CategoryUpdateJSONRequestBody defines body for CategoryUpdate for application/json ContentType.
type CategoryUpdateJSONRequestBody = CategoryMutableProps

// ClusterCreateJSONRequestBody defines body for ClusterCreate for application/json ContentType.
type ClusterCreateJSONRequestBody = ClusterInitialProps

// ClusterUpdateJSONRequestBody defines body for ClusterUpdate for application/json ContentType.
type ClusterUpdateJSONRequestBody = ClusterMutableProps

// CollectionCreateJSONRequestBody defines body for CollectionCreate for application/json ContentType.
type CollectionCreateJSONRequestBody = CollectionInitialProps

// CollectionUpdateJSONRequestBody defines body for CollectionUpdate for application/json ContentType.
type CollectionUpdateJSONRequestBody = CollectionMutableProps

// ItemCreateJSONRequestBody defines body for ItemCreate for application/json ContentType.
type ItemCreateJSONRequestBody = ItemInitialProps

// ItemUpdateJSONRequestBody defines body for ItemUpdate for application/json ContentType.
type ItemUpdateJSONRequestBody = ItemMutableProps

// PostUpdateJSONRequestBody defines body for PostUpdate for application/json ContentType.
type PostUpdateJSONRequestBody = PostMutableProps

// PostReactAddJSONRequestBody defines body for PostReactAdd for application/json ContentType.
type PostReactAddJSONRequestBody = PostReactProps

// ThreadCreateJSONRequestBody defines body for ThreadCreate for application/json ContentType.
type ThreadCreateJSONRequestBody = ThreadInitialProps

// ThreadUpdateJSONRequestBody defines body for ThreadUpdate for application/json ContentType.
type ThreadUpdateJSONRequestBody = ThreadMutableProps

// PostCreateJSONRequestBody defines body for PostCreate for application/json ContentType.
type PostCreateJSONRequestBody = PostInitialProps

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSpec request
	GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountGet request
	AccountGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountUpdate request with any body
	AccountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountUpdate(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountAuthProviderList request
	AccountAuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountSetAvatar request with any body
	AccountSetAvatarWithBody(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountGetAvatar request
	AccountGetAvatar(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminSettingsUpdate request with any body
	AdminSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminSettingsUpdate(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssetUpload request with any body
	AssetUploadWithBody(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssetGet request
	AssetGet(ctx context.Context, id AssetPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthProviderList request
	AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthProviderLogout request
	AuthProviderLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OAuthProviderCallback request with any body
	OAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSignin request with any body
	AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSignup request with any body
	AuthPasswordSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignup(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PhoneRequestCode request with any body
	PhoneRequestCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PhoneRequestCode(ctx context.Context, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PhoneSubmitCode request with any body
	PhoneSubmitCodeWithBody(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PhoneSubmitCode(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeAssertion request with any body
	WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnGetAssertion request
	WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeCredential request with any body
	WebAuthnMakeCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeCredential(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnRequestCredential request
	WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryList request
	CategoryList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryUpdateOrder request with any body
	CategoryUpdateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoryUpdateOrder(ctx context.Context, body CategoryUpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryCreate request with any body
	CategoryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoryCreate(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryUpdate request with any body
	CategoryUpdateWithBody(ctx context.Context, categoryId CategoryIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoryUpdate(ctx context.Context, categoryId CategoryIDParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterList request
	ClusterList(ctx context.Context, params *ClusterListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterCreate request with any body
	ClusterCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterCreate(ctx context.Context, body ClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterGet request
	ClusterGet(ctx context.Context, clusterSlug ClusterSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterUpdate request with any body
	ClusterUpdateWithBody(ctx context.Context, clusterSlug ClusterSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterUpdate(ctx context.Context, clusterSlug ClusterSlugParam, body ClusterUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterRemoveCluster request
	ClusterRemoveCluster(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterAddCluster request
	ClusterAddCluster(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterRemoveItem request
	ClusterRemoveItem(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterAddItem request
	ClusterAddItem(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionList request
	CollectionList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionCreate request with any body
	CollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionCreate(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionGet request
	CollectionGet(ctx context.Context, collectionId CollectionIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionUpdate request with any body
	CollectionUpdateWithBody(ctx context.Context, collectionId CollectionIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionUpdate(ctx context.Context, collectionId CollectionIDParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionRemovePost request
	CollectionRemovePost(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionAddPost request
	CollectionAddPost(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInfo request
	GetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IconUpload request with any body
	IconUploadWithBody(ctx context.Context, params *IconUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IconGet request
	IconGet(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemList request
	ItemList(ctx context.Context, params *ItemListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemCreate request with any body
	ItemCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ItemCreate(ctx context.Context, body ItemCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemGet request
	ItemGet(ctx context.Context, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemUpdate request with any body
	ItemUpdateWithBody(ctx context.Context, itemSlug ItemSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ItemUpdate(ctx context.Context, itemSlug ItemSlugParam, body ItemUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearch request
	PostSearch(ctx context.Context, params *PostSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDelete request
	PostDelete(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdate request with any body
	PostUpdateWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdate(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReactAdd request with any body
	PostReactAddWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReactAdd(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGet request
	ProfileGet(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadList request
	ThreadList(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadCreate request with any body
	ThreadCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadCreate(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadDelete request
	ThreadDelete(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadGet request
	ThreadGet(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadUpdate request with any body
	ThreadUpdateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadUpdate(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreate request with any body
	PostCreateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreate(ctx context.Context, threadMark ThreadMarkParam, body PostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountUpdate(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountAuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountAuthProviderListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountSetAvatarWithBody(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountSetAvatarRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountGetAvatar(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountGetAvatarRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminSettingsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminSettingsUpdate(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminSettingsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssetUploadWithBody(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssetUploadRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssetGet(ctx context.Context, id AssetPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssetGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthProviderListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthProviderLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthProviderLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOAuthProviderCallbackRequestWithBody(c.Server, oauthProvider, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOAuthProviderCallbackRequest(c.Server, oauthProvider, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignup(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneRequestCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneRequestCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneRequestCode(ctx context.Context, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneRequestCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneSubmitCodeWithBody(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneSubmitCodeRequestWithBody(c.Server, accountHandle, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneSubmitCode(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneSubmitCodeRequest(c.Server, accountHandle, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnGetAssertionRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredential(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnRequestCredentialRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdateOrder(ctx context.Context, body CategoryUpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryCreate(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdateWithBody(ctx context.Context, categoryId CategoryIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdateRequestWithBody(c.Server, categoryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdate(ctx context.Context, categoryId CategoryIDParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdateRequest(c.Server, categoryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterList(ctx context.Context, params *ClusterListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterCreate(ctx context.Context, body ClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterGet(ctx context.Context, clusterSlug ClusterSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterGetRequest(c.Server, clusterSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterUpdateWithBody(ctx context.Context, clusterSlug ClusterSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterUpdateRequestWithBody(c.Server, clusterSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterUpdate(ctx context.Context, clusterSlug ClusterSlugParam, body ClusterUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterUpdateRequest(c.Server, clusterSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterRemoveCluster(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterRemoveClusterRequest(c.Server, clusterSlug, clusterSlugChild)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterAddCluster(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterAddClusterRequest(c.Server, clusterSlug, clusterSlugChild)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterRemoveItem(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterRemoveItemRequest(c.Server, clusterSlug, itemSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterAddItem(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterAddItemRequest(c.Server, clusterSlug, itemSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionCreate(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionGet(ctx context.Context, collectionId CollectionIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionGetRequest(c.Server, collectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionUpdateWithBody(ctx context.Context, collectionId CollectionIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionUpdateRequestWithBody(c.Server, collectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionUpdate(ctx context.Context, collectionId CollectionIDParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionUpdateRequest(c.Server, collectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionRemovePost(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionRemovePostRequest(c.Server, collectionId, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionAddPost(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionAddPostRequest(c.Server, collectionId, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IconUploadWithBody(ctx context.Context, params *IconUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIconUploadRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IconGet(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIconGetRequest(c.Server, iconSize)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemList(ctx context.Context, params *ItemListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemCreate(ctx context.Context, body ItemCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemGet(ctx context.Context, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemGetRequest(c.Server, itemSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemUpdateWithBody(ctx context.Context, itemSlug ItemSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemUpdateRequestWithBody(c.Server, itemSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemUpdate(ctx context.Context, itemSlug ItemSlugParam, body ItemUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemUpdateRequest(c.Server, itemSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearch(ctx context.Context, params *PostSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDelete(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdate(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReactAddWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReactAddRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReactAdd(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReactAddRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGet(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGetRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadList(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadCreate(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadDelete(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadDeleteRequest(c.Server, threadMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadGet(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadGetRequest(c.Server, threadMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadUpdateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadUpdateRequestWithBody(c.Server, threadMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadUpdate(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadUpdateRequest(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateRequestWithBody(c.Server, threadMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreate(ctx context.Context, threadMark ThreadMarkParam, body PostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateRequest(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSpecRequest generates requests for GetSpec
func NewGetSpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountGetRequest generates requests for AccountGet
func NewAccountGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountUpdateRequest calls the generic AccountUpdate builder with application/json body
func NewAccountUpdateRequest(server string, body AccountUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountUpdateRequestWithBody generates requests for AccountUpdate with any type of body
func NewAccountUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountAuthProviderListRequest generates requests for AccountAuthProviderList
func NewAccountAuthProviderListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/self/auth-methods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountSetAvatarRequestWithBody generates requests for AccountSetAvatar with any type of body
func NewAccountSetAvatarRequestWithBody(server string, params *AccountSetAvatarParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/self/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, params.ContentLength)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Length", headerParam0)

	return req, nil
}

// NewAccountGetAvatarRequest generates requests for AccountGetAvatar
func NewAccountGetAvatarRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/avatar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminSettingsUpdateRequest calls the generic AdminSettingsUpdate builder with application/json body
func NewAdminSettingsUpdateRequest(server string, body AdminSettingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminSettingsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminSettingsUpdateRequestWithBody generates requests for AdminSettingsUpdate with any type of body
func NewAdminSettingsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssetUploadRequestWithBody generates requests for AssetUpload with any type of body
func NewAssetUploadRequestWithBody(server string, params *AssetUploadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, params.ContentLength)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Length", headerParam0)

	return req, nil
}

// NewAssetGetRequest generates requests for AssetGet
func NewAssetGetRequest(server string, id AssetPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthProviderListRequest generates requests for AuthProviderList
func NewAuthProviderListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthProviderLogoutRequest generates requests for AuthProviderLogout
func NewAuthProviderLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOAuthProviderCallbackRequest calls the generic OAuthProviderCallback builder with application/json body
func NewOAuthProviderCallbackRequest(server string, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOAuthProviderCallbackRequestWithBody(server, oauthProvider, "application/json", bodyReader)
}

// NewOAuthProviderCallbackRequestWithBody generates requests for OAuthProviderCallback with any type of body
func NewOAuthProviderCallbackRequestWithBody(server string, oauthProvider OAuthProvider, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, oauthProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/oauth/%s/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSigninRequest calls the generic AuthPasswordSignin builder with application/json body
func NewAuthPasswordSigninRequest(server string, body AuthPasswordSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordSigninRequestWithBody generates requests for AuthPasswordSignin with any type of body
func NewAuthPasswordSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/password/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSignupRequest calls the generic AuthPasswordSignup builder with application/json body
func NewAuthPasswordSignupRequest(server string, body AuthPasswordSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSignupRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordSignupRequestWithBody generates requests for AuthPasswordSignup with any type of body
func NewAuthPasswordSignupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/password/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPhoneRequestCodeRequest calls the generic PhoneRequestCode builder with application/json body
func NewPhoneRequestCodeRequest(server string, body PhoneRequestCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPhoneRequestCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewPhoneRequestCodeRequestWithBody generates requests for PhoneRequestCode with any type of body
func NewPhoneRequestCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/phone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPhoneSubmitCodeRequest calls the generic PhoneSubmitCode builder with application/json body
func NewPhoneSubmitCodeRequest(server string, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPhoneSubmitCodeRequestWithBody(server, accountHandle, "application/json", bodyReader)
}

// NewPhoneSubmitCodeRequestWithBody generates requests for PhoneSubmitCode with any type of body
func NewPhoneSubmitCodeRequestWithBody(server string, accountHandle AccountHandleParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/phone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnMakeAssertionRequest calls the generic WebAuthnMakeAssertion builder with application/json body
func NewWebAuthnMakeAssertionRequest(server string, body WebAuthnMakeAssertionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeAssertionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebAuthnMakeAssertionRequestWithBody generates requests for WebAuthnMakeAssertion with any type of body
func NewWebAuthnMakeAssertionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/assert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnGetAssertionRequest generates requests for WebAuthnGetAssertion
func NewWebAuthnGetAssertionRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/assert/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebAuthnMakeCredentialRequest calls the generic WebAuthnMakeCredential builder with application/json body
func NewWebAuthnMakeCredentialRequest(server string, body WebAuthnMakeCredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeCredentialRequestWithBody(server, "application/json", bodyReader)
}

// NewWebAuthnMakeCredentialRequestWithBody generates requests for WebAuthnMakeCredential with any type of body
func NewWebAuthnMakeCredentialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/make")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnRequestCredentialRequest generates requests for WebAuthnRequestCredential
func NewWebAuthnRequestCredentialRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/make/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoryListRequest generates requests for CategoryList
func NewCategoryListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoryUpdateOrderRequest calls the generic CategoryUpdateOrder builder with application/json body
func NewCategoryUpdateOrderRequest(server string, body CategoryUpdateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoryUpdateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCategoryUpdateOrderRequestWithBody generates requests for CategoryUpdateOrder with any type of body
func NewCategoryUpdateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoryCreateRequest calls the generic CategoryCreate builder with application/json body
func NewCategoryCreateRequest(server string, body CategoryCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoryCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCategoryCreateRequestWithBody generates requests for CategoryCreate with any type of body
func NewCategoryCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoryUpdateRequest calls the generic CategoryUpdate builder with application/json body
func NewCategoryUpdateRequest(server string, categoryId CategoryIDParam, body CategoryUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoryUpdateRequestWithBody(server, categoryId, "application/json", bodyReader)
}

// NewCategoryUpdateRequestWithBody generates requests for CategoryUpdate with any type of body
func NewCategoryUpdateRequestWithBody(server string, categoryId CategoryIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_id", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterListRequest generates requests for ClusterList
func NewClusterListRequest(server string, params *ClusterListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster_id", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterCreateRequest calls the generic ClusterCreate builder with application/json body
func NewClusterCreateRequest(server string, body ClusterCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewClusterCreateRequestWithBody generates requests for ClusterCreate with any type of body
func NewClusterCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterGetRequest generates requests for ClusterGet
func NewClusterGetRequest(server string, clusterSlug ClusterSlugParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, clusterSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterUpdateRequest calls the generic ClusterUpdate builder with application/json body
func NewClusterUpdateRequest(server string, clusterSlug ClusterSlugParam, body ClusterUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterUpdateRequestWithBody(server, clusterSlug, "application/json", bodyReader)
}

// NewClusterUpdateRequestWithBody generates requests for ClusterUpdate with any type of body
func NewClusterUpdateRequestWithBody(server string, clusterSlug ClusterSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, clusterSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterRemoveClusterRequest generates requests for ClusterRemoveCluster
func NewClusterRemoveClusterRequest(server string, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, clusterSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug_child", runtime.ParamLocationPath, clusterSlugChild)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterAddClusterRequest generates requests for ClusterAddCluster
func NewClusterAddClusterRequest(server string, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, clusterSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug_child", runtime.ParamLocationPath, clusterSlugChild)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterRemoveItemRequest generates requests for ClusterRemoveItem
func NewClusterRemoveItemRequest(server string, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, clusterSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, itemSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterAddItemRequest generates requests for ClusterAddItem
func NewClusterAddItemRequest(server string, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, clusterSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, itemSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clusters/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionListRequest generates requests for CollectionList
func NewCollectionListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionCreateRequest calls the generic CollectionCreate builder with application/json body
func NewCollectionCreateRequest(server string, body CollectionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCollectionCreateRequestWithBody generates requests for CollectionCreate with any type of body
func NewCollectionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionGetRequest generates requests for CollectionGet
func NewCollectionGetRequest(server string, collectionId CollectionIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionUpdateRequest calls the generic CollectionUpdate builder with application/json body
func NewCollectionUpdateRequest(server string, collectionId CollectionIDParam, body CollectionUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionUpdateRequestWithBody(server, collectionId, "application/json", bodyReader)
}

// NewCollectionUpdateRequestWithBody generates requests for CollectionUpdate with any type of body
func NewCollectionUpdateRequestWithBody(server string, collectionId CollectionIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionRemovePostRequest generates requests for CollectionRemovePost
func NewCollectionRemovePostRequest(server string, collectionId CollectionIDParam, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionAddPostRequest generates requests for CollectionAddPost
func NewCollectionAddPostRequest(server string, collectionId CollectionIDParam, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInfoRequest generates requests for GetInfo
func NewGetInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIconUploadRequestWithBody generates requests for IconUpload with any type of body
func NewIconUploadRequestWithBody(server string, params *IconUploadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/info/icon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, params.ContentLength)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Length", headerParam0)

	return req, nil
}

// NewIconGetRequest generates requests for IconGet
func NewIconGetRequest(server string, iconSize IconGetParamsIconSize) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "icon_size", runtime.ParamLocationPath, iconSize)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/info/icon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewItemListRequest generates requests for ItemList
func NewItemListRequest(server string, params *ItemListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewItemCreateRequest calls the generic ItemCreate builder with application/json body
func NewItemCreateRequest(server string, body ItemCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewItemCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewItemCreateRequestWithBody generates requests for ItemCreate with any type of body
func NewItemCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewItemGetRequest generates requests for ItemGet
func NewItemGetRequest(server string, itemSlug ItemSlugParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, itemSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewItemUpdateRequest calls the generic ItemUpdate builder with application/json body
func NewItemUpdateRequest(server string, itemSlug ItemSlugParam, body ItemUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewItemUpdateRequestWithBody(server, itemSlug, "application/json", bodyReader)
}

// NewItemUpdateRequestWithBody generates requests for ItemUpdate with any type of body
func NewItemUpdateRequestWithBody(server string, itemSlug ItemSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, itemSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchRequest generates requests for PostSearch
func NewPostSearchRequest(server string, params *PostSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Body != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "body", runtime.ParamLocationQuery, *params.Body); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Author != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeleteRequest generates requests for PostDelete
func NewPostDeleteRequest(server string, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateRequest calls the generic PostUpdate builder with application/json body
func NewPostUpdateRequest(server string, postId PostIDParam, body PostUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostUpdateRequestWithBody generates requests for PostUpdate with any type of body
func NewPostUpdateRequestWithBody(server string, postId PostIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReactAddRequest calls the generic PostReactAdd builder with application/json body
func NewPostReactAddRequest(server string, postId PostIDParam, body PostReactAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReactAddRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostReactAddRequestWithBody generates requests for PostReactAdd with any type of body
func NewPostReactAddRequestWithBody(server string, postId PostIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/posts/%s/reacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProfileGetRequest generates requests for ProfileGet
func NewProfileGetRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadListRequest generates requests for ThreadList
func NewThreadListRequest(server string, params *ThreadListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Author != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Categories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categories", runtime.ParamLocationQuery, *params.Categories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadCreateRequest calls the generic ThreadCreate builder with application/json body
func NewThreadCreateRequest(server string, body ThreadCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreadCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewThreadCreateRequestWithBody generates requests for ThreadCreate with any type of body
func NewThreadCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThreadDeleteRequest generates requests for ThreadDelete
func NewThreadDeleteRequest(server string, threadMark ThreadMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadGetRequest generates requests for ThreadGet
func NewThreadGetRequest(server string, threadMark ThreadMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadUpdateRequest calls the generic ThreadUpdate builder with application/json body
func NewThreadUpdateRequest(server string, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreadUpdateRequestWithBody(server, threadMark, "application/json", bodyReader)
}

// NewThreadUpdateRequestWithBody generates requests for ThreadUpdate with any type of body
func NewThreadUpdateRequestWithBody(server string, threadMark ThreadMarkParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCreateRequest calls the generic PostCreate builder with application/json body
func NewPostCreateRequest(server string, threadMark ThreadMarkParam, body PostCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreateRequestWithBody(server, threadMark, "application/json", bodyReader)
}

// NewPostCreateRequestWithBody generates requests for PostCreate with any type of body
func NewPostCreateRequestWithBody(server string, threadMark ThreadMarkParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s/posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSpec request
	GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error)

	// AccountGet request
	AccountGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountGetResponse, error)

	// AccountUpdate request with any body
	AccountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error)

	AccountUpdateWithResponse(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error)

	// AccountAuthProviderList request
	AccountAuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountAuthProviderListResponse, error)

	// AccountSetAvatar request with any body
	AccountSetAvatarWithBodyWithResponse(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountSetAvatarResponse, error)

	// AccountGetAvatar request
	AccountGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AccountGetAvatarResponse, error)

	// AdminSettingsUpdate request with any body
	AdminSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error)

	AdminSettingsUpdateWithResponse(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error)

	// AssetUpload request with any body
	AssetUploadWithBodyWithResponse(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssetUploadResponse, error)

	// AssetGet request
	AssetGetWithResponse(ctx context.Context, id AssetPath, reqEditors ...RequestEditorFn) (*AssetGetResponse, error)

	// AuthProviderList request
	AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error)

	// AuthProviderLogout request
	AuthProviderLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderLogoutResponse, error)

	// OAuthProviderCallback request with any body
	OAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error)

	OAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error)

	// AuthPasswordSignin request with any body
	AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	// AuthPasswordSignup request with any body
	AuthPasswordSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	AuthPasswordSignupWithResponse(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	// PhoneRequestCode request with any body
	PhoneRequestCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error)

	PhoneRequestCodeWithResponse(ctx context.Context, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error)

	// PhoneSubmitCode request with any body
	PhoneSubmitCodeWithBodyWithResponse(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error)

	PhoneSubmitCodeWithResponse(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error)

	// WebAuthnMakeAssertion request with any body
	WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	// WebAuthnGetAssertion request
	WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error)

	// WebAuthnMakeCredential request with any body
	WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	WebAuthnMakeCredentialWithResponse(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	// WebAuthnRequestCredential request
	WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error)

	// CategoryList request
	CategoryListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoryListResponse, error)

	// CategoryUpdateOrder request with any body
	CategoryUpdateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdateOrderResponse, error)

	CategoryUpdateOrderWithResponse(ctx context.Context, body CategoryUpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdateOrderResponse, error)

	// CategoryCreate request with any body
	CategoryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error)

	CategoryCreateWithResponse(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error)

	// CategoryUpdate request with any body
	CategoryUpdateWithBodyWithResponse(ctx context.Context, categoryId CategoryIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error)

	CategoryUpdateWithResponse(ctx context.Context, categoryId CategoryIDParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error)

	// ClusterList request
	ClusterListWithResponse(ctx context.Context, params *ClusterListParams, reqEditors ...RequestEditorFn) (*ClusterListResponse, error)

	// ClusterCreate request with any body
	ClusterCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterCreateResponse, error)

	ClusterCreateWithResponse(ctx context.Context, body ClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterCreateResponse, error)

	// ClusterGet request
	ClusterGetWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, reqEditors ...RequestEditorFn) (*ClusterGetResponse, error)

	// ClusterUpdate request with any body
	ClusterUpdateWithBodyWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterUpdateResponse, error)

	ClusterUpdateWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, body ClusterUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterUpdateResponse, error)

	// ClusterRemoveCluster request
	ClusterRemoveClusterWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*ClusterRemoveClusterResponse, error)

	// ClusterAddCluster request
	ClusterAddClusterWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*ClusterAddClusterResponse, error)

	// ClusterRemoveItem request
	ClusterRemoveItemWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*ClusterRemoveItemResponse, error)

	// ClusterAddItem request
	ClusterAddItemWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*ClusterAddItemResponse, error)

	// CollectionList request
	CollectionListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CollectionListResponse, error)

	// CollectionCreate request with any body
	CollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error)

	CollectionCreateWithResponse(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error)

	// CollectionGet request
	CollectionGetWithResponse(ctx context.Context, collectionId CollectionIDParam, reqEditors ...RequestEditorFn) (*CollectionGetResponse, error)

	// CollectionUpdate request with any body
	CollectionUpdateWithBodyWithResponse(ctx context.Context, collectionId CollectionIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error)

	CollectionUpdateWithResponse(ctx context.Context, collectionId CollectionIDParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error)

	// CollectionRemovePost request
	CollectionRemovePostWithResponse(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionRemovePostResponse, error)

	// CollectionAddPost request
	CollectionAddPostWithResponse(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionAddPostResponse, error)

	// GetInfo request
	GetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoResponse, error)

	// IconUpload request with any body
	IconUploadWithBodyWithResponse(ctx context.Context, params *IconUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IconUploadResponse, error)

	// IconGet request
	IconGetWithResponse(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*IconGetResponse, error)

	// ItemList request
	ItemListWithResponse(ctx context.Context, params *ItemListParams, reqEditors ...RequestEditorFn) (*ItemListResponse, error)

	// ItemCreate request with any body
	ItemCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemCreateResponse, error)

	ItemCreateWithResponse(ctx context.Context, body ItemCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ItemCreateResponse, error)

	// ItemGet request
	ItemGetWithResponse(ctx context.Context, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*ItemGetResponse, error)

	// ItemUpdate request with any body
	ItemUpdateWithBodyWithResponse(ctx context.Context, itemSlug ItemSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemUpdateResponse, error)

	ItemUpdateWithResponse(ctx context.Context, itemSlug ItemSlugParam, body ItemUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ItemUpdateResponse, error)

	// PostSearch request
	PostSearchWithResponse(ctx context.Context, params *PostSearchParams, reqEditors ...RequestEditorFn) (*PostSearchResponse, error)

	// PostDelete request
	PostDeleteWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*PostDeleteResponse, error)

	// PostUpdate request with any body
	PostUpdateWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error)

	PostUpdateWithResponse(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error)

	// PostReactAdd request with any body
	PostReactAddWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error)

	PostReactAddWithResponse(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error)

	// ProfileGet request
	ProfileGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileGetResponse, error)

	// ThreadList request
	ThreadListWithResponse(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*ThreadListResponse, error)

	// ThreadCreate request with any body
	ThreadCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error)

	ThreadCreateWithResponse(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error)

	// ThreadDelete request
	ThreadDeleteWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadDeleteResponse, error)

	// ThreadGet request
	ThreadGetWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadGetResponse, error)

	// ThreadUpdate request with any body
	ThreadUpdateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error)

	ThreadUpdateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error)

	// PostCreate request with any body
	PostCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateResponse, error)

	PostCreateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body PostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountAuthProviderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountAuthMethods
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountAuthProviderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountAuthProviderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountSetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountSetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountSetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountGetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountGetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountGetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminSettingsProps
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AdminSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssetUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AssetUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssetUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssetGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AssetGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssetGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthProviderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Providers AuthProviderList `json:"providers"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r AuthProviderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthProviderLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthProviderLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OAuthProviderCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r OAuthProviderCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OAuthProviderCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PhoneRequestCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PhoneRequestCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PhoneRequestCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PhoneSubmitCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PhoneSubmitCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PhoneSubmitCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnGetAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRequestOptions
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnGetAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnGetAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnRequestCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebAuthnPublicKeyCreationOptions
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnRequestCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnRequestCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryList
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CategoryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryUpdateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryList
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CategoryUpdateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryUpdateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CategoryCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CategoryUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Clusters ClusterList `json:"clusters"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterWithItems
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterRemoveClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterRemoveClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterRemoveClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterAddClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterAddClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterAddClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterRemoveItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterRemoveItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterRemoveItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterAddItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ClusterAddItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterAddItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Collections CollectionList `json:"collections"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r CollectionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CollectionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionWithItems
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CollectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CollectionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionRemovePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CollectionRemovePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionRemovePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionAddPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r CollectionAddPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionAddPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Info
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IconUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r IconUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IconUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IconGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r IconGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IconGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items A list of items where each item includes all the information about its
		// parent cluster too. For use with APIs that want to provide a list of
		// items that may be part of different clusters.
		Items ItemList `json:"items"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r ItemListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Item
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ItemCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemWithParents
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ItemGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Item
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ItemUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostSearchResults
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostProps
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReactAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *React
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostReactAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReactAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicProfile
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ProfileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Threads ThreadList `json:"threads"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostProps
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSpecWithResponse request returning *GetSpecResponse
func (c *ClientWithResponses) GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error) {
	rsp, err := c.GetSpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpecResponse(rsp)
}

// AccountGetWithResponse request returning *AccountGetResponse
func (c *ClientWithResponses) AccountGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountGetResponse, error) {
	rsp, err := c.AccountGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountGetResponse(rsp)
}

// AccountUpdateWithBodyWithResponse request with arbitrary body returning *AccountUpdateResponse
func (c *ClientWithResponses) AccountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error) {
	rsp, err := c.AccountUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountUpdateWithResponse(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error) {
	rsp, err := c.AccountUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountUpdateResponse(rsp)
}

// AccountAuthProviderListWithResponse request returning *AccountAuthProviderListResponse
func (c *ClientWithResponses) AccountAuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountAuthProviderListResponse, error) {
	rsp, err := c.AccountAuthProviderList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountAuthProviderListResponse(rsp)
}

// AccountSetAvatarWithBodyWithResponse request with arbitrary body returning *AccountSetAvatarResponse
func (c *ClientWithResponses) AccountSetAvatarWithBodyWithResponse(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountSetAvatarResponse, error) {
	rsp, err := c.AccountSetAvatarWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountSetAvatarResponse(rsp)
}

// AccountGetAvatarWithResponse request returning *AccountGetAvatarResponse
func (c *ClientWithResponses) AccountGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AccountGetAvatarResponse, error) {
	rsp, err := c.AccountGetAvatar(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountGetAvatarResponse(rsp)
}

// AdminSettingsUpdateWithBodyWithResponse request with arbitrary body returning *AdminSettingsUpdateResponse
func (c *ClientWithResponses) AdminSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error) {
	rsp, err := c.AdminSettingsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) AdminSettingsUpdateWithResponse(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error) {
	rsp, err := c.AdminSettingsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminSettingsUpdateResponse(rsp)
}

// AssetUploadWithBodyWithResponse request with arbitrary body returning *AssetUploadResponse
func (c *ClientWithResponses) AssetUploadWithBodyWithResponse(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssetUploadResponse, error) {
	rsp, err := c.AssetUploadWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssetUploadResponse(rsp)
}

// AssetGetWithResponse request returning *AssetGetResponse
func (c *ClientWithResponses) AssetGetWithResponse(ctx context.Context, id AssetPath, reqEditors ...RequestEditorFn) (*AssetGetResponse, error) {
	rsp, err := c.AssetGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssetGetResponse(rsp)
}

// AuthProviderListWithResponse request returning *AuthProviderListResponse
func (c *ClientWithResponses) AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error) {
	rsp, err := c.AuthProviderList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthProviderListResponse(rsp)
}

// AuthProviderLogoutWithResponse request returning *AuthProviderLogoutResponse
func (c *ClientWithResponses) AuthProviderLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderLogoutResponse, error) {
	rsp, err := c.AuthProviderLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthProviderLogoutResponse(rsp)
}

// OAuthProviderCallbackWithBodyWithResponse request with arbitrary body returning *OAuthProviderCallbackResponse
func (c *ClientWithResponses) OAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error) {
	rsp, err := c.OAuthProviderCallbackWithBody(ctx, oauthProvider, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOAuthProviderCallbackResponse(rsp)
}

func (c *ClientWithResponses) OAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error) {
	rsp, err := c.OAuthProviderCallback(ctx, oauthProvider, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOAuthProviderCallbackResponse(rsp)
}

// AuthPasswordSigninWithBodyWithResponse request with arbitrary body returning *AuthPasswordSigninResponse
func (c *ClientWithResponses) AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

// AuthPasswordSignupWithBodyWithResponse request with arbitrary body returning *AuthPasswordSignupResponse
func (c *ClientWithResponses) AuthPasswordSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSignupWithResponse(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

// PhoneRequestCodeWithBodyWithResponse request with arbitrary body returning *PhoneRequestCodeResponse
func (c *ClientWithResponses) PhoneRequestCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error) {
	rsp, err := c.PhoneRequestCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneRequestCodeResponse(rsp)
}

func (c *ClientWithResponses) PhoneRequestCodeWithResponse(ctx context.Context, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error) {
	rsp, err := c.PhoneRequestCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneRequestCodeResponse(rsp)
}

// PhoneSubmitCodeWithBodyWithResponse request with arbitrary body returning *PhoneSubmitCodeResponse
func (c *ClientWithResponses) PhoneSubmitCodeWithBodyWithResponse(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error) {
	rsp, err := c.PhoneSubmitCodeWithBody(ctx, accountHandle, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneSubmitCodeResponse(rsp)
}

func (c *ClientWithResponses) PhoneSubmitCodeWithResponse(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error) {
	rsp, err := c.PhoneSubmitCode(ctx, accountHandle, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneSubmitCodeResponse(rsp)
}

// WebAuthnMakeAssertionWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeAssertionResponse
func (c *ClientWithResponses) WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

// WebAuthnGetAssertionWithResponse request returning *WebAuthnGetAssertionResponse
func (c *ClientWithResponses) WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error) {
	rsp, err := c.WebAuthnGetAssertion(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnGetAssertionResponse(rsp)
}

// WebAuthnMakeCredentialWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeCredentialResponse
func (c *ClientWithResponses) WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredentialWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeCredentialWithResponse(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredential(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

// WebAuthnRequestCredentialWithResponse request returning *WebAuthnRequestCredentialResponse
func (c *ClientWithResponses) WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error) {
	rsp, err := c.WebAuthnRequestCredential(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnRequestCredentialResponse(rsp)
}

// CategoryListWithResponse request returning *CategoryListResponse
func (c *ClientWithResponses) CategoryListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoryListResponse, error) {
	rsp, err := c.CategoryList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryListResponse(rsp)
}

// CategoryUpdateOrderWithBodyWithResponse request with arbitrary body returning *CategoryUpdateOrderResponse
func (c *ClientWithResponses) CategoryUpdateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdateOrderResponse, error) {
	rsp, err := c.CategoryUpdateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdateOrderResponse(rsp)
}

func (c *ClientWithResponses) CategoryUpdateOrderWithResponse(ctx context.Context, body CategoryUpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdateOrderResponse, error) {
	rsp, err := c.CategoryUpdateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdateOrderResponse(rsp)
}

// CategoryCreateWithBodyWithResponse request with arbitrary body returning *CategoryCreateResponse
func (c *ClientWithResponses) CategoryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error) {
	rsp, err := c.CategoryCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryCreateResponse(rsp)
}

func (c *ClientWithResponses) CategoryCreateWithResponse(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error) {
	rsp, err := c.CategoryCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryCreateResponse(rsp)
}

// CategoryUpdateWithBodyWithResponse request with arbitrary body returning *CategoryUpdateResponse
func (c *ClientWithResponses) CategoryUpdateWithBodyWithResponse(ctx context.Context, categoryId CategoryIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error) {
	rsp, err := c.CategoryUpdateWithBody(ctx, categoryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdateResponse(rsp)
}

func (c *ClientWithResponses) CategoryUpdateWithResponse(ctx context.Context, categoryId CategoryIDParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error) {
	rsp, err := c.CategoryUpdate(ctx, categoryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdateResponse(rsp)
}

// ClusterListWithResponse request returning *ClusterListResponse
func (c *ClientWithResponses) ClusterListWithResponse(ctx context.Context, params *ClusterListParams, reqEditors ...RequestEditorFn) (*ClusterListResponse, error) {
	rsp, err := c.ClusterList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterListResponse(rsp)
}

// ClusterCreateWithBodyWithResponse request with arbitrary body returning *ClusterCreateResponse
func (c *ClientWithResponses) ClusterCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterCreateResponse, error) {
	rsp, err := c.ClusterCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterCreateResponse(rsp)
}

func (c *ClientWithResponses) ClusterCreateWithResponse(ctx context.Context, body ClusterCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterCreateResponse, error) {
	rsp, err := c.ClusterCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterCreateResponse(rsp)
}

// ClusterGetWithResponse request returning *ClusterGetResponse
func (c *ClientWithResponses) ClusterGetWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, reqEditors ...RequestEditorFn) (*ClusterGetResponse, error) {
	rsp, err := c.ClusterGet(ctx, clusterSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterGetResponse(rsp)
}

// ClusterUpdateWithBodyWithResponse request with arbitrary body returning *ClusterUpdateResponse
func (c *ClientWithResponses) ClusterUpdateWithBodyWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClusterUpdateResponse, error) {
	rsp, err := c.ClusterUpdateWithBody(ctx, clusterSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterUpdateResponse(rsp)
}

func (c *ClientWithResponses) ClusterUpdateWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, body ClusterUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ClusterUpdateResponse, error) {
	rsp, err := c.ClusterUpdate(ctx, clusterSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterUpdateResponse(rsp)
}

// ClusterRemoveClusterWithResponse request returning *ClusterRemoveClusterResponse
func (c *ClientWithResponses) ClusterRemoveClusterWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*ClusterRemoveClusterResponse, error) {
	rsp, err := c.ClusterRemoveCluster(ctx, clusterSlug, clusterSlugChild, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterRemoveClusterResponse(rsp)
}

// ClusterAddClusterWithResponse request returning *ClusterAddClusterResponse
func (c *ClientWithResponses) ClusterAddClusterWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam, reqEditors ...RequestEditorFn) (*ClusterAddClusterResponse, error) {
	rsp, err := c.ClusterAddCluster(ctx, clusterSlug, clusterSlugChild, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterAddClusterResponse(rsp)
}

// ClusterRemoveItemWithResponse request returning *ClusterRemoveItemResponse
func (c *ClientWithResponses) ClusterRemoveItemWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*ClusterRemoveItemResponse, error) {
	rsp, err := c.ClusterRemoveItem(ctx, clusterSlug, itemSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterRemoveItemResponse(rsp)
}

// ClusterAddItemWithResponse request returning *ClusterAddItemResponse
func (c *ClientWithResponses) ClusterAddItemWithResponse(ctx context.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*ClusterAddItemResponse, error) {
	rsp, err := c.ClusterAddItem(ctx, clusterSlug, itemSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterAddItemResponse(rsp)
}

// CollectionListWithResponse request returning *CollectionListResponse
func (c *ClientWithResponses) CollectionListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CollectionListResponse, error) {
	rsp, err := c.CollectionList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionListResponse(rsp)
}

// CollectionCreateWithBodyWithResponse request with arbitrary body returning *CollectionCreateResponse
func (c *ClientWithResponses) CollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error) {
	rsp, err := c.CollectionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionCreateResponse(rsp)
}

func (c *ClientWithResponses) CollectionCreateWithResponse(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error) {
	rsp, err := c.CollectionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionCreateResponse(rsp)
}

// CollectionGetWithResponse request returning *CollectionGetResponse
func (c *ClientWithResponses) CollectionGetWithResponse(ctx context.Context, collectionId CollectionIDParam, reqEditors ...RequestEditorFn) (*CollectionGetResponse, error) {
	rsp, err := c.CollectionGet(ctx, collectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionGetResponse(rsp)
}

// CollectionUpdateWithBodyWithResponse request with arbitrary body returning *CollectionUpdateResponse
func (c *ClientWithResponses) CollectionUpdateWithBodyWithResponse(ctx context.Context, collectionId CollectionIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error) {
	rsp, err := c.CollectionUpdateWithBody(ctx, collectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionUpdateResponse(rsp)
}

func (c *ClientWithResponses) CollectionUpdateWithResponse(ctx context.Context, collectionId CollectionIDParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error) {
	rsp, err := c.CollectionUpdate(ctx, collectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionUpdateResponse(rsp)
}

// CollectionRemovePostWithResponse request returning *CollectionRemovePostResponse
func (c *ClientWithResponses) CollectionRemovePostWithResponse(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionRemovePostResponse, error) {
	rsp, err := c.CollectionRemovePost(ctx, collectionId, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionRemovePostResponse(rsp)
}

// CollectionAddPostWithResponse request returning *CollectionAddPostResponse
func (c *ClientWithResponses) CollectionAddPostWithResponse(ctx context.Context, collectionId CollectionIDParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionAddPostResponse, error) {
	rsp, err := c.CollectionAddPost(ctx, collectionId, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionAddPostResponse(rsp)
}

// GetInfoWithResponse request returning *GetInfoResponse
func (c *ClientWithResponses) GetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoResponse, error) {
	rsp, err := c.GetInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInfoResponse(rsp)
}

// IconUploadWithBodyWithResponse request with arbitrary body returning *IconUploadResponse
func (c *ClientWithResponses) IconUploadWithBodyWithResponse(ctx context.Context, params *IconUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IconUploadResponse, error) {
	rsp, err := c.IconUploadWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIconUploadResponse(rsp)
}

// IconGetWithResponse request returning *IconGetResponse
func (c *ClientWithResponses) IconGetWithResponse(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*IconGetResponse, error) {
	rsp, err := c.IconGet(ctx, iconSize, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIconGetResponse(rsp)
}

// ItemListWithResponse request returning *ItemListResponse
func (c *ClientWithResponses) ItemListWithResponse(ctx context.Context, params *ItemListParams, reqEditors ...RequestEditorFn) (*ItemListResponse, error) {
	rsp, err := c.ItemList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemListResponse(rsp)
}

// ItemCreateWithBodyWithResponse request with arbitrary body returning *ItemCreateResponse
func (c *ClientWithResponses) ItemCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemCreateResponse, error) {
	rsp, err := c.ItemCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemCreateResponse(rsp)
}

func (c *ClientWithResponses) ItemCreateWithResponse(ctx context.Context, body ItemCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ItemCreateResponse, error) {
	rsp, err := c.ItemCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemCreateResponse(rsp)
}

// ItemGetWithResponse request returning *ItemGetResponse
func (c *ClientWithResponses) ItemGetWithResponse(ctx context.Context, itemSlug ItemSlugParam, reqEditors ...RequestEditorFn) (*ItemGetResponse, error) {
	rsp, err := c.ItemGet(ctx, itemSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemGetResponse(rsp)
}

// ItemUpdateWithBodyWithResponse request with arbitrary body returning *ItemUpdateResponse
func (c *ClientWithResponses) ItemUpdateWithBodyWithResponse(ctx context.Context, itemSlug ItemSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemUpdateResponse, error) {
	rsp, err := c.ItemUpdateWithBody(ctx, itemSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemUpdateResponse(rsp)
}

func (c *ClientWithResponses) ItemUpdateWithResponse(ctx context.Context, itemSlug ItemSlugParam, body ItemUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ItemUpdateResponse, error) {
	rsp, err := c.ItemUpdate(ctx, itemSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemUpdateResponse(rsp)
}

// PostSearchWithResponse request returning *PostSearchResponse
func (c *ClientWithResponses) PostSearchWithResponse(ctx context.Context, params *PostSearchParams, reqEditors ...RequestEditorFn) (*PostSearchResponse, error) {
	rsp, err := c.PostSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchResponse(rsp)
}

// PostDeleteWithResponse request returning *PostDeleteResponse
func (c *ClientWithResponses) PostDeleteWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*PostDeleteResponse, error) {
	rsp, err := c.PostDelete(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteResponse(rsp)
}

// PostUpdateWithBodyWithResponse request with arbitrary body returning *PostUpdateResponse
func (c *ClientWithResponses) PostUpdateWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error) {
	rsp, err := c.PostUpdateWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateWithResponse(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error) {
	rsp, err := c.PostUpdate(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateResponse(rsp)
}

// PostReactAddWithBodyWithResponse request with arbitrary body returning *PostReactAddResponse
func (c *ClientWithResponses) PostReactAddWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error) {
	rsp, err := c.PostReactAddWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReactAddResponse(rsp)
}

func (c *ClientWithResponses) PostReactAddWithResponse(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error) {
	rsp, err := c.PostReactAdd(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReactAddResponse(rsp)
}

// ProfileGetWithResponse request returning *ProfileGetResponse
func (c *ClientWithResponses) ProfileGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileGetResponse, error) {
	rsp, err := c.ProfileGet(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGetResponse(rsp)
}

// ThreadListWithResponse request returning *ThreadListResponse
func (c *ClientWithResponses) ThreadListWithResponse(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*ThreadListResponse, error) {
	rsp, err := c.ThreadList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadListResponse(rsp)
}

// ThreadCreateWithBodyWithResponse request with arbitrary body returning *ThreadCreateResponse
func (c *ClientWithResponses) ThreadCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error) {
	rsp, err := c.ThreadCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadCreateResponse(rsp)
}

func (c *ClientWithResponses) ThreadCreateWithResponse(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error) {
	rsp, err := c.ThreadCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadCreateResponse(rsp)
}

// ThreadDeleteWithResponse request returning *ThreadDeleteResponse
func (c *ClientWithResponses) ThreadDeleteWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadDeleteResponse, error) {
	rsp, err := c.ThreadDelete(ctx, threadMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadDeleteResponse(rsp)
}

// ThreadGetWithResponse request returning *ThreadGetResponse
func (c *ClientWithResponses) ThreadGetWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadGetResponse, error) {
	rsp, err := c.ThreadGet(ctx, threadMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadGetResponse(rsp)
}

// ThreadUpdateWithBodyWithResponse request with arbitrary body returning *ThreadUpdateResponse
func (c *ClientWithResponses) ThreadUpdateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error) {
	rsp, err := c.ThreadUpdateWithBody(ctx, threadMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadUpdateResponse(rsp)
}

func (c *ClientWithResponses) ThreadUpdateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error) {
	rsp, err := c.ThreadUpdate(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadUpdateResponse(rsp)
}

// PostCreateWithBodyWithResponse request with arbitrary body returning *PostCreateResponse
func (c *ClientWithResponses) PostCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateResponse, error) {
	rsp, err := c.PostCreateWithBody(ctx, threadMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateResponse(rsp)
}

func (c *ClientWithResponses) PostCreateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body PostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateResponse, error) {
	rsp, err := c.PostCreate(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetSpecResponse parses an HTTP response from a GetSpecWithResponse call
func ParseGetSpecResponse(rsp *http.Response) (*GetSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountGetResponse parses an HTTP response from a AccountGetWithResponse call
func ParseAccountGetResponse(rsp *http.Response) (*AccountGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountUpdateResponse parses an HTTP response from a AccountUpdateWithResponse call
func ParseAccountUpdateResponse(rsp *http.Response) (*AccountUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountAuthProviderListResponse parses an HTTP response from a AccountAuthProviderListWithResponse call
func ParseAccountAuthProviderListResponse(rsp *http.Response) (*AccountAuthProviderListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountAuthProviderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountAuthMethods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountSetAvatarResponse parses an HTTP response from a AccountSetAvatarWithResponse call
func ParseAccountSetAvatarResponse(rsp *http.Response) (*AccountSetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountSetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountGetAvatarResponse parses an HTTP response from a AccountGetAvatarWithResponse call
func ParseAccountGetAvatarResponse(rsp *http.Response) (*AccountGetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountGetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminSettingsUpdateResponse parses an HTTP response from a AdminSettingsUpdateWithResponse call
func ParseAdminSettingsUpdateResponse(rsp *http.Response) (*AdminSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminSettingsProps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAssetUploadResponse parses an HTTP response from a AssetUploadWithResponse call
func ParseAssetUploadResponse(rsp *http.Response) (*AssetUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssetUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAssetGetResponse parses an HTTP response from a AssetGetWithResponse call
func ParseAssetGetResponse(rsp *http.Response) (*AssetGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssetGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthProviderListResponse parses an HTTP response from a AuthProviderListWithResponse call
func ParseAuthProviderListResponse(rsp *http.Response) (*AuthProviderListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthProviderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Providers AuthProviderList `json:"providers"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthProviderLogoutResponse parses an HTTP response from a AuthProviderLogoutWithResponse call
func ParseAuthProviderLogoutResponse(rsp *http.Response) (*AuthProviderLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthProviderLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOAuthProviderCallbackResponse parses an HTTP response from a OAuthProviderCallbackWithResponse call
func ParseOAuthProviderCallbackResponse(rsp *http.Response) (*OAuthProviderCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OAuthProviderCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSigninResponse parses an HTTP response from a AuthPasswordSigninWithResponse call
func ParseAuthPasswordSigninResponse(rsp *http.Response) (*AuthPasswordSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSignupResponse parses an HTTP response from a AuthPasswordSignupWithResponse call
func ParseAuthPasswordSignupResponse(rsp *http.Response) (*AuthPasswordSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePhoneRequestCodeResponse parses an HTTP response from a PhoneRequestCodeWithResponse call
func ParsePhoneRequestCodeResponse(rsp *http.Response) (*PhoneRequestCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PhoneRequestCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePhoneSubmitCodeResponse parses an HTTP response from a PhoneSubmitCodeWithResponse call
func ParsePhoneSubmitCodeResponse(rsp *http.Response) (*PhoneSubmitCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PhoneSubmitCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeAssertionResponse parses an HTTP response from a WebAuthnMakeAssertionWithResponse call
func ParseWebAuthnMakeAssertionResponse(rsp *http.Response) (*WebAuthnMakeAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnGetAssertionResponse parses an HTTP response from a WebAuthnGetAssertionWithResponse call
func ParseWebAuthnGetAssertionResponse(rsp *http.Response) (*WebAuthnGetAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnGetAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRequestOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeCredentialResponse parses an HTTP response from a WebAuthnMakeCredentialWithResponse call
func ParseWebAuthnMakeCredentialResponse(rsp *http.Response) (*WebAuthnMakeCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnRequestCredentialResponse parses an HTTP response from a WebAuthnRequestCredentialWithResponse call
func ParseWebAuthnRequestCredentialResponse(rsp *http.Response) (*WebAuthnRequestCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnRequestCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebAuthnPublicKeyCreationOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryListResponse parses an HTTP response from a CategoryListWithResponse call
func ParseCategoryListResponse(rsp *http.Response) (*CategoryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryUpdateOrderResponse parses an HTTP response from a CategoryUpdateOrderWithResponse call
func ParseCategoryUpdateOrderResponse(rsp *http.Response) (*CategoryUpdateOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryUpdateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryCreateResponse parses an HTTP response from a CategoryCreateWithResponse call
func ParseCategoryCreateResponse(rsp *http.Response) (*CategoryCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryUpdateResponse parses an HTTP response from a CategoryUpdateWithResponse call
func ParseCategoryUpdateResponse(rsp *http.Response) (*CategoryUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterListResponse parses an HTTP response from a ClusterListWithResponse call
func ParseClusterListResponse(rsp *http.Response) (*ClusterListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Clusters ClusterList `json:"clusters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterCreateResponse parses an HTTP response from a ClusterCreateWithResponse call
func ParseClusterCreateResponse(rsp *http.Response) (*ClusterCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterGetResponse parses an HTTP response from a ClusterGetWithResponse call
func ParseClusterGetResponse(rsp *http.Response) (*ClusterGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterWithItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterUpdateResponse parses an HTTP response from a ClusterUpdateWithResponse call
func ParseClusterUpdateResponse(rsp *http.Response) (*ClusterUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterRemoveClusterResponse parses an HTTP response from a ClusterRemoveClusterWithResponse call
func ParseClusterRemoveClusterResponse(rsp *http.Response) (*ClusterRemoveClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterRemoveClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterAddClusterResponse parses an HTTP response from a ClusterAddClusterWithResponse call
func ParseClusterAddClusterResponse(rsp *http.Response) (*ClusterAddClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterAddClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterRemoveItemResponse parses an HTTP response from a ClusterRemoveItemWithResponse call
func ParseClusterRemoveItemResponse(rsp *http.Response) (*ClusterRemoveItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterRemoveItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterAddItemResponse parses an HTTP response from a ClusterAddItemWithResponse call
func ParseClusterAddItemResponse(rsp *http.Response) (*ClusterAddItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterAddItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionListResponse parses an HTTP response from a CollectionListWithResponse call
func ParseCollectionListResponse(rsp *http.Response) (*CollectionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Collections CollectionList `json:"collections"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionCreateResponse parses an HTTP response from a CollectionCreateWithResponse call
func ParseCollectionCreateResponse(rsp *http.Response) (*CollectionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionGetResponse parses an HTTP response from a CollectionGetWithResponse call
func ParseCollectionGetResponse(rsp *http.Response) (*CollectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionWithItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionUpdateResponse parses an HTTP response from a CollectionUpdateWithResponse call
func ParseCollectionUpdateResponse(rsp *http.Response) (*CollectionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionRemovePostResponse parses an HTTP response from a CollectionRemovePostWithResponse call
func ParseCollectionRemovePostResponse(rsp *http.Response) (*CollectionRemovePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionRemovePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionAddPostResponse parses an HTTP response from a CollectionAddPostWithResponse call
func ParseCollectionAddPostResponse(rsp *http.Response) (*CollectionAddPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionAddPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInfoResponse parses an HTTP response from a GetInfoWithResponse call
func ParseGetInfoResponse(rsp *http.Response) (*GetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Info
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIconUploadResponse parses an HTTP response from a IconUploadWithResponse call
func ParseIconUploadResponse(rsp *http.Response) (*IconUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IconUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIconGetResponse parses an HTTP response from a IconGetWithResponse call
func ParseIconGetResponse(rsp *http.Response) (*IconGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IconGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseItemListResponse parses an HTTP response from a ItemListWithResponse call
func ParseItemListResponse(rsp *http.Response) (*ItemListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ItemListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items A list of items where each item includes all the information about its
			// parent cluster too. For use with APIs that want to provide a list of
			// items that may be part of different clusters.
			Items ItemList `json:"items"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseItemCreateResponse parses an HTTP response from a ItemCreateWithResponse call
func ParseItemCreateResponse(rsp *http.Response) (*ItemCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ItemCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Item
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseItemGetResponse parses an HTTP response from a ItemGetWithResponse call
func ParseItemGetResponse(rsp *http.Response) (*ItemGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ItemGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemWithParents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseItemUpdateResponse parses an HTTP response from a ItemUpdateWithResponse call
func ParseItemUpdateResponse(rsp *http.Response) (*ItemUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ItemUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Item
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSearchResponse parses an HTTP response from a PostSearchWithResponse call
func ParsePostSearchResponse(rsp *http.Response) (*PostSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteResponse parses an HTTP response from a PostDeleteWithResponse call
func ParsePostDeleteResponse(rsp *http.Response) (*PostDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUpdateResponse parses an HTTP response from a PostUpdateWithResponse call
func ParsePostUpdateResponse(rsp *http.Response) (*PostUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostProps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostReactAddResponse parses an HTTP response from a PostReactAddWithResponse call
func ParsePostReactAddResponse(rsp *http.Response) (*PostReactAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReactAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest React
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfileGetResponse parses an HTTP response from a ProfileGetWithResponse call
func ParseProfileGetResponse(rsp *http.Response) (*ProfileGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadListResponse parses an HTTP response from a ThreadListWithResponse call
func ParseThreadListResponse(rsp *http.Response) (*ThreadListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Threads ThreadList `json:"threads"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadCreateResponse parses an HTTP response from a ThreadCreateWithResponse call
func ParseThreadCreateResponse(rsp *http.Response) (*ThreadCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadDeleteResponse parses an HTTP response from a ThreadDeleteWithResponse call
func ParseThreadDeleteResponse(rsp *http.Response) (*ThreadDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadGetResponse parses an HTTP response from a ThreadGetWithResponse call
func ParseThreadGetResponse(rsp *http.Response) (*ThreadGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadUpdateResponse parses an HTTP response from a ThreadUpdateWithResponse call
func ParseThreadUpdateResponse(rsp *http.Response) (*ThreadUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCreateResponse parses an HTTP response from a PostCreateWithResponse call
func ParsePostCreateResponse(rsp *http.Response) (*PostCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostProps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error

	// (GET /v1/accounts)
	AccountGet(ctx echo.Context) error

	// (PATCH /v1/accounts)
	AccountUpdate(ctx echo.Context) error

	// (GET /v1/accounts/self/auth-methods)
	AccountAuthProviderList(ctx echo.Context) error

	// (POST /v1/accounts/self/avatar)
	AccountSetAvatar(ctx echo.Context, params AccountSetAvatarParams) error

	// (GET /v1/accounts/{account_handle}/avatar)
	AccountGetAvatar(ctx echo.Context, accountHandle AccountHandleParam) error

	// (PATCH /v1/admin)
	AdminSettingsUpdate(ctx echo.Context) error

	// (POST /v1/assets)
	AssetUpload(ctx echo.Context, params AssetUploadParams) error

	// (GET /v1/assets/{id})
	AssetGet(ctx echo.Context, id AssetPath) error

	// (GET /v1/auth)
	AuthProviderList(ctx echo.Context) error

	// (GET /v1/auth/logout)
	AuthProviderLogout(ctx echo.Context) error

	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	OAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error

	// (POST /v1/auth/phone)
	PhoneRequestCode(ctx echo.Context) error

	// (PUT /v1/auth/phone/{account_handle})
	PhoneSubmitCode(ctx echo.Context, accountHandle AccountHandleParam) error

	// (POST /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx echo.Context) error

	// (GET /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandleParam) error

	// (POST /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx echo.Context) error

	// (GET /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /v1/categories)
	CategoryList(ctx echo.Context) error

	// (PATCH /v1/categories)
	CategoryUpdateOrder(ctx echo.Context) error

	// (POST /v1/categories)
	CategoryCreate(ctx echo.Context) error

	// (PATCH /v1/categories/{category_id})
	CategoryUpdate(ctx echo.Context, categoryId CategoryIDParam) error

	// (GET /v1/clusters)
	ClusterList(ctx echo.Context, params ClusterListParams) error

	// (POST /v1/clusters)
	ClusterCreate(ctx echo.Context) error

	// (GET /v1/clusters/{cluster_slug})
	ClusterGet(ctx echo.Context, clusterSlug ClusterSlugParam) error

	// (PATCH /v1/clusters/{cluster_slug})
	ClusterUpdate(ctx echo.Context, clusterSlug ClusterSlugParam) error

	// (DELETE /v1/clusters/{cluster_slug}/clusters/{cluster_slug_child})
	ClusterRemoveCluster(ctx echo.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam) error

	// (PUT /v1/clusters/{cluster_slug}/clusters/{cluster_slug_child})
	ClusterAddCluster(ctx echo.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam) error

	// (DELETE /v1/clusters/{cluster_slug}/items/{item_slug})
	ClusterRemoveItem(ctx echo.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam) error

	// (PUT /v1/clusters/{cluster_slug}/items/{item_slug})
	ClusterAddItem(ctx echo.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam) error

	// (GET /v1/collections)
	CollectionList(ctx echo.Context) error

	// (POST /v1/collections)
	CollectionCreate(ctx echo.Context) error

	// (GET /v1/collections/{collection_id})
	CollectionGet(ctx echo.Context, collectionId CollectionIDParam) error

	// (PATCH /v1/collections/{collection_id})
	CollectionUpdate(ctx echo.Context, collectionId CollectionIDParam) error

	// (DELETE /v1/collections/{collection_id}/items/{post_id})
	CollectionRemovePost(ctx echo.Context, collectionId CollectionIDParam, postId PostIDParam) error

	// (PUT /v1/collections/{collection_id}/items/{post_id})
	CollectionAddPost(ctx echo.Context, collectionId CollectionIDParam, postId PostIDParam) error

	// (GET /v1/info)
	GetInfo(ctx echo.Context) error

	// (POST /v1/info/icon)
	IconUpload(ctx echo.Context, params IconUploadParams) error

	// (GET /v1/info/icon/{icon_size})
	IconGet(ctx echo.Context, iconSize IconGetParamsIconSize) error

	// (GET /v1/items)
	ItemList(ctx echo.Context, params ItemListParams) error

	// (POST /v1/items)
	ItemCreate(ctx echo.Context) error

	// (GET /v1/items/{item_slug})
	ItemGet(ctx echo.Context, itemSlug ItemSlugParam) error

	// (PATCH /v1/items/{item_slug})
	ItemUpdate(ctx echo.Context, itemSlug ItemSlugParam) error

	// (GET /v1/posts/search)
	PostSearch(ctx echo.Context, params PostSearchParams) error

	// (DELETE /v1/posts/{post_id})
	PostDelete(ctx echo.Context, postId PostIDParam) error

	// (PATCH /v1/posts/{post_id})
	PostUpdate(ctx echo.Context, postId PostIDParam) error

	// (PUT /v1/posts/{post_id}/reacts)
	PostReactAdd(ctx echo.Context, postId PostIDParam) error

	// (GET /v1/profiles/{account_handle})
	ProfileGet(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /v1/threads)
	ThreadList(ctx echo.Context, params ThreadListParams) error

	// (POST /v1/threads)
	ThreadCreate(ctx echo.Context) error

	// (DELETE /v1/threads/{thread_mark})
	ThreadDelete(ctx echo.Context, threadMark ThreadMarkParam) error
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_mark})
	ThreadGet(ctx echo.Context, threadMark ThreadMarkParam) error

	// (PATCH /v1/threads/{thread_mark})
	ThreadUpdate(ctx echo.Context, threadMark ThreadMarkParam) error

	// (POST /v1/threads/{thread_mark}/posts)
	PostCreate(ctx echo.Context, threadMark ThreadMarkParam) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountGet(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountGet(ctx)
	return err
}

// AccountUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AccountUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountUpdate(ctx)
	return err
}

// AccountAuthProviderList converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAuthProviderList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAuthProviderList(ctx)
	return err
}

// AccountSetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountSetAvatar(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountSetAvatarParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Length" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Length")]; found {
		var ContentLength ContentLength
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Length, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, valueList[0], &ContentLength)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Length: %s", err))
		}

		params.ContentLength = ContentLength
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Length is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountSetAvatar(ctx, params)
	return err
}

// AccountGetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountGetAvatar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountGetAvatar(ctx, accountHandle)
	return err
}

// AdminSettingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AdminSettingsUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminSettingsUpdate(ctx)
	return err
}

// AssetUpload converts echo context to params.
func (w *ServerInterfaceWrapper) AssetUpload(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssetUploadParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Length" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Length")]; found {
		var ContentLength ContentLength
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Length, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, valueList[0], &ContentLength)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Length: %s", err))
		}

		params.ContentLength = ContentLength
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Length is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetUpload(ctx, params)
	return err
}

// AssetGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id AssetPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetGet(ctx, id)
	return err
}

// AuthProviderList converts echo context to params.
func (w *ServerInterfaceWrapper) AuthProviderList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthProviderList(ctx)
	return err
}

// AuthProviderLogout converts echo context to params.
func (w *ServerInterfaceWrapper) AuthProviderLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthProviderLogout(ctx)
	return err
}

// OAuthProviderCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthProviderCallback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "oauth_provider" -------------
	var oauthProvider OAuthProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, ctx.Param("oauth_provider"), &oauthProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter oauth_provider: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OAuthProviderCallback(ctx, oauthProvider)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// PhoneRequestCode converts echo context to params.
func (w *ServerInterfaceWrapper) PhoneRequestCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PhoneRequestCode(ctx)
	return err
}

// PhoneSubmitCode converts echo context to params.
func (w *ServerInterfaceWrapper) PhoneSubmitCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PhoneSubmitCode(ctx, accountHandle)
	return err
}

// WebAuthnMakeAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeAssertion(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeAssertion(ctx)
	return err
}

// WebAuthnGetAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnGetAssertion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnGetAssertion(ctx, accountHandle)
	return err
}

// WebAuthnMakeCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeCredential(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeCredential(ctx)
	return err
}

// WebAuthnRequestCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnRequestCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnRequestCredential(ctx, accountHandle)
	return err
}

// CategoryList converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CategoryList(ctx)
	return err
}

// CategoryUpdateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryUpdateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CategoryUpdateOrder(ctx)
	return err
}

// CategoryCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CategoryCreate(ctx)
	return err
}

// CategoryUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId CategoryIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CategoryUpdate(ctx, categoryId)
	return err
}

// ClusterList converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClusterListParams
	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterList(ctx, params)
	return err
}

// ClusterCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterCreate(ctx)
	return err
}

// ClusterGet converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cluster_slug" -------------
	var clusterSlug ClusterSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, ctx.Param("cluster_slug"), &clusterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterGet(ctx, clusterSlug)
	return err
}

// ClusterUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cluster_slug" -------------
	var clusterSlug ClusterSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, ctx.Param("cluster_slug"), &clusterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterUpdate(ctx, clusterSlug)
	return err
}

// ClusterRemoveCluster converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterRemoveCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cluster_slug" -------------
	var clusterSlug ClusterSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, ctx.Param("cluster_slug"), &clusterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug: %s", err))
	}

	// ------------- Path parameter "cluster_slug_child" -------------
	var clusterSlugChild ClusterSlugChildParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug_child", runtime.ParamLocationPath, ctx.Param("cluster_slug_child"), &clusterSlugChild)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug_child: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterRemoveCluster(ctx, clusterSlug, clusterSlugChild)
	return err
}

// ClusterAddCluster converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterAddCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cluster_slug" -------------
	var clusterSlug ClusterSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, ctx.Param("cluster_slug"), &clusterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug: %s", err))
	}

	// ------------- Path parameter "cluster_slug_child" -------------
	var clusterSlugChild ClusterSlugChildParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug_child", runtime.ParamLocationPath, ctx.Param("cluster_slug_child"), &clusterSlugChild)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug_child: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterAddCluster(ctx, clusterSlug, clusterSlugChild)
	return err
}

// ClusterRemoveItem converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterRemoveItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cluster_slug" -------------
	var clusterSlug ClusterSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, ctx.Param("cluster_slug"), &clusterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug: %s", err))
	}

	// ------------- Path parameter "item_slug" -------------
	var itemSlug ItemSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, ctx.Param("item_slug"), &itemSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterRemoveItem(ctx, clusterSlug, itemSlug)
	return err
}

// ClusterAddItem converts echo context to params.
func (w *ServerInterfaceWrapper) ClusterAddItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cluster_slug" -------------
	var clusterSlug ClusterSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_slug", runtime.ParamLocationPath, ctx.Param("cluster_slug"), &clusterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_slug: %s", err))
	}

	// ------------- Path parameter "item_slug" -------------
	var itemSlug ItemSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, ctx.Param("item_slug"), &itemSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClusterAddItem(ctx, clusterSlug, itemSlug)
	return err
}

// CollectionList converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CollectionList(ctx)
	return err
}

// CollectionCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CollectionCreate(ctx)
	return err
}

// CollectionGet converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_id" -------------
	var collectionId CollectionIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, ctx.Param("collection_id"), &collectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CollectionGet(ctx, collectionId)
	return err
}

// CollectionUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_id" -------------
	var collectionId CollectionIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, ctx.Param("collection_id"), &collectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CollectionUpdate(ctx, collectionId)
	return err
}

// CollectionRemovePost converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionRemovePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_id" -------------
	var collectionId CollectionIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, ctx.Param("collection_id"), &collectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_id: %s", err))
	}

	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "post_id", runtime.ParamLocationPath, ctx.Param("post_id"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CollectionRemovePost(ctx, collectionId, postId)
	return err
}

// CollectionAddPost converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionAddPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_id" -------------
	var collectionId CollectionIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, ctx.Param("collection_id"), &collectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_id: %s", err))
	}

	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "post_id", runtime.ParamLocationPath, ctx.Param("post_id"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CollectionAddPost(ctx, collectionId, postId)
	return err
}

// GetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInfo(ctx)
	return err
}

// IconUpload converts echo context to params.
func (w *ServerInterfaceWrapper) IconUpload(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params IconUploadParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Length" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Length")]; found {
		var ContentLength ContentLength
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Length, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, valueList[0], &ContentLength)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Length: %s", err))
		}

		params.ContentLength = ContentLength
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Length is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IconUpload(ctx, params)
	return err
}

// IconGet converts echo context to params.
func (w *ServerInterfaceWrapper) IconGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "icon_size" -------------
	var iconSize IconGetParamsIconSize

	err = runtime.BindStyledParameterWithLocation("simple", false, "icon_size", runtime.ParamLocationPath, ctx.Param("icon_size"), &iconSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter icon_size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IconGet(ctx, iconSize)
	return err
}

// ItemList converts echo context to params.
func (w *ServerInterfaceWrapper) ItemList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemListParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemList(ctx, params)
	return err
}

// ItemCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemCreate(ctx)
	return err
}

// ItemGet converts echo context to params.
func (w *ServerInterfaceWrapper) ItemGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_slug" -------------
	var itemSlug ItemSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, ctx.Param("item_slug"), &itemSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_slug: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemGet(ctx, itemSlug)
	return err
}

// ItemUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_slug" -------------
	var itemSlug ItemSlugParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_slug", runtime.ParamLocationPath, ctx.Param("item_slug"), &itemSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemUpdate(ctx, itemSlug)
	return err
}

// PostSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PostSearch(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSearchParams
	// ------------- Optional query parameter "body" -------------

	err = runtime.BindQueryParameter("form", true, false, "body", ctx.QueryParams(), &params.Body)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter body: %s", err))
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSearch(ctx, params)
	return err
}

// PostDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "post_id", runtime.ParamLocationPath, ctx.Param("post_id"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDelete(ctx, postId)
	return err
}

// PostUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "post_id", runtime.ParamLocationPath, ctx.Param("post_id"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUpdate(ctx, postId)
	return err
}

// PostReactAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostReactAdd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "post_id", runtime.ParamLocationPath, ctx.Param("post_id"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReactAdd(ctx, postId)
	return err
}

// ProfileGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfileGet(ctx, accountHandle)
	return err
}

// ThreadList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ThreadListParams
	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", ctx.QueryParams(), &params.Categories)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categories: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadList(ctx, params)
	return err
}

// ThreadCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadCreate(ctx)
	return err
}

// ThreadDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadDelete(ctx, threadMark)
	return err
}

// ThreadGet converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadGet(ctx, threadMark)
	return err
}

// ThreadUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadUpdate(ctx, threadMark)
	return err
}

// PostCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCreate(ctx, threadMark)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts", wrapper.AccountGet)
	router.PATCH(baseURL+"/v1/accounts", wrapper.AccountUpdate)
	router.GET(baseURL+"/v1/accounts/self/auth-methods", wrapper.AccountAuthProviderList)
	router.POST(baseURL+"/v1/accounts/self/avatar", wrapper.AccountSetAvatar)
	router.GET(baseURL+"/v1/accounts/:account_handle/avatar", wrapper.AccountGetAvatar)
	router.PATCH(baseURL+"/v1/admin", wrapper.AdminSettingsUpdate)
	router.POST(baseURL+"/v1/assets", wrapper.AssetUpload)
	router.GET(baseURL+"/v1/assets/:id", wrapper.AssetGet)
	router.GET(baseURL+"/v1/auth", wrapper.AuthProviderList)
	router.GET(baseURL+"/v1/auth/logout", wrapper.AuthProviderLogout)
	router.POST(baseURL+"/v1/auth/oauth/:oauth_provider/callback", wrapper.OAuthProviderCallback)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.POST(baseURL+"/v1/auth/phone", wrapper.PhoneRequestCode)
	router.PUT(baseURL+"/v1/auth/phone/:account_handle", wrapper.PhoneSubmitCode)
	router.POST(baseURL+"/v1/auth/webauthn/assert", wrapper.WebAuthnMakeAssertion)
	router.GET(baseURL+"/v1/auth/webauthn/assert/:account_handle", wrapper.WebAuthnGetAssertion)
	router.POST(baseURL+"/v1/auth/webauthn/make", wrapper.WebAuthnMakeCredential)
	router.GET(baseURL+"/v1/auth/webauthn/make/:account_handle", wrapper.WebAuthnRequestCredential)
	router.GET(baseURL+"/v1/categories", wrapper.CategoryList)
	router.PATCH(baseURL+"/v1/categories", wrapper.CategoryUpdateOrder)
	router.POST(baseURL+"/v1/categories", wrapper.CategoryCreate)
	router.PATCH(baseURL+"/v1/categories/:category_id", wrapper.CategoryUpdate)
	router.GET(baseURL+"/v1/clusters", wrapper.ClusterList)
	router.POST(baseURL+"/v1/clusters", wrapper.ClusterCreate)
	router.GET(baseURL+"/v1/clusters/:cluster_slug", wrapper.ClusterGet)
	router.PATCH(baseURL+"/v1/clusters/:cluster_slug", wrapper.ClusterUpdate)
	router.DELETE(baseURL+"/v1/clusters/:cluster_slug/clusters/:cluster_slug_child", wrapper.ClusterRemoveCluster)
	router.PUT(baseURL+"/v1/clusters/:cluster_slug/clusters/:cluster_slug_child", wrapper.ClusterAddCluster)
	router.DELETE(baseURL+"/v1/clusters/:cluster_slug/items/:item_slug", wrapper.ClusterRemoveItem)
	router.PUT(baseURL+"/v1/clusters/:cluster_slug/items/:item_slug", wrapper.ClusterAddItem)
	router.GET(baseURL+"/v1/collections", wrapper.CollectionList)
	router.POST(baseURL+"/v1/collections", wrapper.CollectionCreate)
	router.GET(baseURL+"/v1/collections/:collection_id", wrapper.CollectionGet)
	router.PATCH(baseURL+"/v1/collections/:collection_id", wrapper.CollectionUpdate)
	router.DELETE(baseURL+"/v1/collections/:collection_id/items/:post_id", wrapper.CollectionRemovePost)
	router.PUT(baseURL+"/v1/collections/:collection_id/items/:post_id", wrapper.CollectionAddPost)
	router.GET(baseURL+"/v1/info", wrapper.GetInfo)
	router.POST(baseURL+"/v1/info/icon", wrapper.IconUpload)
	router.GET(baseURL+"/v1/info/icon/:icon_size", wrapper.IconGet)
	router.GET(baseURL+"/v1/items", wrapper.ItemList)
	router.POST(baseURL+"/v1/items", wrapper.ItemCreate)
	router.GET(baseURL+"/v1/items/:item_slug", wrapper.ItemGet)
	router.PATCH(baseURL+"/v1/items/:item_slug", wrapper.ItemUpdate)
	router.GET(baseURL+"/v1/posts/search", wrapper.PostSearch)
	router.DELETE(baseURL+"/v1/posts/:post_id", wrapper.PostDelete)
	router.PATCH(baseURL+"/v1/posts/:post_id", wrapper.PostUpdate)
	router.PUT(baseURL+"/v1/posts/:post_id/reacts", wrapper.PostReactAdd)
	router.GET(baseURL+"/v1/profiles/:account_handle", wrapper.ProfileGet)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadCreate)
	router.DELETE(baseURL+"/v1/threads/:thread_mark", wrapper.ThreadDelete)
	router.GET(baseURL+"/v1/threads/:thread_mark", wrapper.ThreadGet)
	router.PATCH(baseURL+"/v1/threads/:thread_mark", wrapper.ThreadUpdate)
	router.POST(baseURL+"/v1/threads/:thread_mark/posts", wrapper.PostCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountAuthProviderListOKJSONResponse AccountAuthMethods

type AccountGetAvatarImagepngResponse struct {
	Body io.Reader

	ContentLength int64
}

type AccountGetOKJSONResponse Account

type AccountUpdateOKJSONResponse Account

type AdminSettingsUpdateOKJSONResponse AdminSettingsProps

type AssetGetOKAsteriskResponse struct {
	Body io.Reader

	ContentType   string
	ContentLength int64
}

type AssetUploadOKJSONResponse Asset

type AuthProviderListOKJSONResponse struct {
	Providers AuthProviderList `json:"providers"`
}

type AuthSuccessOKResponseHeaders struct {
	SetCookie string
}
type AuthSuccessOKJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessOKResponseHeaders
}

type BadRequestResponse struct {
}

type CategoryCreateOKJSONResponse Category

type CategoryListOKJSONResponse CategoryList

type CategoryUpdateOKJSONResponse Category

type ClusterAddChildOKJSONResponse Cluster

type ClusterAddItemOKJSONResponse Cluster

type ClusterCreateOKJSONResponse Cluster

type ClusterGetOKJSONResponse ClusterWithItems

type ClusterListOKJSONResponse struct {
	Clusters ClusterList `json:"clusters"`
}

type ClusterRemoveChildOKJSONResponse Cluster

type ClusterRemoveItemOKJSONResponse Cluster

type ClusterUpdateOKJSONResponse Cluster

type CollectionAddPostOKJSONResponse Collection

type CollectionCreateOKJSONResponse Collection

type CollectionGetOKJSONResponse CollectionWithItems

type CollectionListOKJSONResponse struct {
	Collections CollectionList `json:"collections"`
}

type CollectionRemovePostOKJSONResponse Collection

type CollectionUpdateOKJSONResponse Collection

type GetInfoOKJSONResponse Info

type InternalServerErrorJSONResponse APIError

type ItemCreateOKJSONResponse Item

type ItemGetOKJSONResponse ItemWithParents

type ItemListOKJSONResponse struct {
	// Items A list of items where each item includes all the information about its
	// parent cluster too. For use with APIs that want to provide a list of
	// items that may be part of different clusters.
	Items ItemList `json:"items"`
}

type ItemUpdateOKJSONResponse Item

type NotFoundResponse struct {
}

type PostCreateOKJSONResponse PostProps

type PostReactAddOKJSONResponse React

type PostSearchOKJSONResponse PostSearchResults

type PostUpdateOKJSONResponse PostProps

type ProfileGetOKJSONResponse PublicProfile

type ThreadCreateOKJSONResponse Thread

type ThreadGetJSONResponse Thread

type ThreadListOKJSONResponse struct {
	Threads ThreadList `json:"threads"`
}

type ThreadUpdateOKJSONResponse Thread

type UnauthorisedResponse struct {
}

type WebAuthnGetAssertionOKResponseHeaders struct {
	SetCookie string
}
type WebAuthnGetAssertionOKJSONResponse struct {
	Body CredentialRequestOptions

	Headers WebAuthnGetAssertionOKResponseHeaders
}

type WebAuthnRequestCredentialOKResponseHeaders struct {
	SetCookie string
}
type WebAuthnRequestCredentialOKJSONResponse struct {
	Body WebAuthnPublicKeyCreationOptions

	Headers WebAuthnRequestCredentialOKResponseHeaders
}

type GetSpecRequestObject struct {
}

type GetSpecResponseObject interface {
	VisitGetSpecResponse(w http.ResponseWriter) error
}

type GetSpec200TextResponse string

func (response GetSpec200TextResponse) VisitGetSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AccountGetRequestObject struct {
}

type AccountGetResponseObject interface {
	VisitAccountGetResponse(w http.ResponseWriter) error
}

type AccountGet200JSONResponse struct{ AccountGetOKJSONResponse }

func (response AccountGet200JSONResponse) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountGet401Response = UnauthorisedResponse

func (response AccountGet401Response) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountGet404Response = NotFoundResponse

func (response AccountGet404Response) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountGetdefaultJSONResponse) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountUpdateRequestObject struct {
	Body *AccountUpdateJSONRequestBody
}

type AccountUpdateResponseObject interface {
	VisitAccountUpdateResponse(w http.ResponseWriter) error
}

type AccountUpdate200JSONResponse struct{ AccountUpdateOKJSONResponse }

func (response AccountUpdate200JSONResponse) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountUpdate401Response = UnauthorisedResponse

func (response AccountUpdate401Response) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountUpdate404Response = NotFoundResponse

func (response AccountUpdate404Response) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountUpdatedefaultJSONResponse) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountAuthProviderListRequestObject struct {
}

type AccountAuthProviderListResponseObject interface {
	VisitAccountAuthProviderListResponse(w http.ResponseWriter) error
}

type AccountAuthProviderList200JSONResponse struct {
	AccountAuthProviderListOKJSONResponse
}

func (response AccountAuthProviderList200JSONResponse) VisitAccountAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountAuthProviderList400Response = BadRequestResponse

func (response AccountAuthProviderList400Response) VisitAccountAuthProviderListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccountAuthProviderListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountAuthProviderListdefaultJSONResponse) VisitAccountAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountSetAvatarRequestObject struct {
	Params AccountSetAvatarParams
	Body   io.Reader
}

type AccountSetAvatarResponseObject interface {
	VisitAccountSetAvatarResponse(w http.ResponseWriter) error
}

type AccountSetAvatar200Response struct {
}

func (response AccountSetAvatar200Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AccountSetAvatar401Response = UnauthorisedResponse

func (response AccountSetAvatar401Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountSetAvatar404Response = NotFoundResponse

func (response AccountSetAvatar404Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountSetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountSetAvatardefaultJSONResponse) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountGetAvatarRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type AccountGetAvatarResponseObject interface {
	VisitAccountGetAvatarResponse(w http.ResponseWriter) error
}

type AccountGetAvatar200ImagepngResponse struct {
	AccountGetAvatarImagepngResponse
}

func (response AccountGetAvatar200ImagepngResponse) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AccountGetAvatar401Response = UnauthorisedResponse

func (response AccountGetAvatar401Response) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountGetAvatar404Response = NotFoundResponse

func (response AccountGetAvatar404Response) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountGetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountGetAvatardefaultJSONResponse) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminSettingsUpdateRequestObject struct {
	Body *AdminSettingsUpdateJSONRequestBody
}

type AdminSettingsUpdateResponseObject interface {
	VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error
}

type AdminSettingsUpdate200JSONResponse struct {
	AdminSettingsUpdateOKJSONResponse
}

func (response AdminSettingsUpdate200JSONResponse) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminSettingsUpdate400Response = BadRequestResponse

func (response AdminSettingsUpdate400Response) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminSettingsUpdate401Response = UnauthorisedResponse

func (response AdminSettingsUpdate401Response) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminSettingsUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AdminSettingsUpdatedefaultJSONResponse) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AssetUploadRequestObject struct {
	Params AssetUploadParams
	Body   io.Reader
}

type AssetUploadResponseObject interface {
	VisitAssetUploadResponse(w http.ResponseWriter) error
}

type AssetUpload200JSONResponse struct{ AssetUploadOKJSONResponse }

func (response AssetUpload200JSONResponse) VisitAssetUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetUpload401Response = UnauthorisedResponse

func (response AssetUpload401Response) VisitAssetUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetUploaddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AssetUploaddefaultJSONResponse) VisitAssetUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AssetGetRequestObject struct {
	Id AssetPath `json:"id"`
}

type AssetGetResponseObject interface {
	VisitAssetGetResponse(w http.ResponseWriter) error
}

type AssetGet200AsteriskResponse struct{ AssetGetOKAsteriskResponse }

func (response AssetGet200AsteriskResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AssetGet401Response = UnauthorisedResponse

func (response AssetGet401Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetGet404Response = NotFoundResponse

func (response AssetGet404Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AssetGetdefaultJSONResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthProviderListRequestObject struct {
}

type AuthProviderListResponseObject interface {
	VisitAuthProviderListResponse(w http.ResponseWriter) error
}

type AuthProviderList200JSONResponse struct{ AuthProviderListOKJSONResponse }

func (response AuthProviderList200JSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthProviderList400Response = BadRequestResponse

func (response AuthProviderList400Response) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthProviderListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthProviderListdefaultJSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthProviderLogoutRequestObject struct {
}

type AuthProviderLogoutResponseObject interface {
	VisitAuthProviderLogoutResponse(w http.ResponseWriter) error
}

type AuthProviderLogout200ResponseHeaders struct {
	SetCookie string
}

type AuthProviderLogout200Response struct {
	Headers AuthProviderLogout200ResponseHeaders
}

func (response AuthProviderLogout200Response) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type AuthProviderLogout400Response = BadRequestResponse

func (response AuthProviderLogout400Response) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthProviderLogoutdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthProviderLogoutdefaultJSONResponse) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthProviderCallbackRequestObject struct {
	OauthProvider OAuthProvider `json:"oauth_provider"`
	Body          *OAuthProviderCallbackJSONRequestBody
}

type OAuthProviderCallbackResponseObject interface {
	VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error
}

type OAuthProviderCallback200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response OAuthProviderCallback200JSONResponse) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthProviderCallback401Response = UnauthorisedResponse

func (response OAuthProviderCallback401Response) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type OAuthProviderCallback404Response = NotFoundResponse

func (response OAuthProviderCallback404Response) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type OAuthProviderCallbackdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response OAuthProviderCallbackdefaultJSONResponse) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSigninRequestObject struct {
	Body *AuthPasswordSigninJSONRequestBody
}

type AuthPasswordSigninResponseObject interface {
	VisitAuthPasswordSigninResponse(w http.ResponseWriter) error
}

type AuthPasswordSignin200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordSignin200JSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignin401Response = UnauthorisedResponse

func (response AuthPasswordSignin401Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordSignin404Response = NotFoundResponse

func (response AuthPasswordSignin404Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignindefaultJSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignupRequestObject struct {
	Body *AuthPasswordSignupJSONRequestBody
}

type AuthPasswordSignupResponseObject interface {
	VisitAuthPasswordSignupResponse(w http.ResponseWriter) error
}

type AuthPasswordSignup200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordSignup200JSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignup400Response = BadRequestResponse

func (response AuthPasswordSignup400Response) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignupdefaultJSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneRequestCodeRequestObject struct {
	Body *PhoneRequestCodeJSONRequestBody
}

type PhoneRequestCodeResponseObject interface {
	VisitPhoneRequestCodeResponse(w http.ResponseWriter) error
}

type PhoneRequestCode200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response PhoneRequestCode200JSONResponse) VisitPhoneRequestCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneRequestCode400Response = BadRequestResponse

func (response PhoneRequestCode400Response) VisitPhoneRequestCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PhoneRequestCodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PhoneRequestCodedefaultJSONResponse) VisitPhoneRequestCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneSubmitCodeRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	Body          *PhoneSubmitCodeJSONRequestBody
}

type PhoneSubmitCodeResponseObject interface {
	VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error
}

type PhoneSubmitCode200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response PhoneSubmitCode200JSONResponse) VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneSubmitCode400Response = BadRequestResponse

func (response PhoneSubmitCode400Response) VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PhoneSubmitCodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PhoneSubmitCodedefaultJSONResponse) VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertionRequestObject struct {
	Body *WebAuthnMakeAssertionJSONRequestBody
}

type WebAuthnMakeAssertionResponseObject interface {
	VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnMakeAssertion200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response WebAuthnMakeAssertion200JSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertion401Response = UnauthorisedResponse

func (response WebAuthnMakeAssertion401Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnMakeAssertion404Response = NotFoundResponse

func (response WebAuthnMakeAssertion404Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnMakeAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeAssertiondefaultJSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertionRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type WebAuthnGetAssertionResponseObject interface {
	VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnGetAssertion200JSONResponse struct {
	WebAuthnGetAssertionOKJSONResponse
}

func (response WebAuthnGetAssertion200JSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertion401Response = UnauthorisedResponse

func (response WebAuthnGetAssertion401Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnGetAssertion404Response = NotFoundResponse

func (response WebAuthnGetAssertion404Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnGetAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnGetAssertiondefaultJSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredentialRequestObject struct {
	Body *WebAuthnMakeCredentialJSONRequestBody
}

type WebAuthnMakeCredentialResponseObject interface {
	VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnMakeCredential200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response WebAuthnMakeCredential200JSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredential400Response = BadRequestResponse

func (response WebAuthnMakeCredential400Response) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnMakeCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeCredentialdefaultJSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredentialRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type WebAuthnRequestCredentialResponseObject interface {
	VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnRequestCredential200JSONResponse struct {
	WebAuthnRequestCredentialOKJSONResponse
}

func (response WebAuthnRequestCredential200JSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredential400Response = BadRequestResponse

func (response WebAuthnRequestCredential400Response) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnRequestCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnRequestCredentialdefaultJSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryListRequestObject struct {
}

type CategoryListResponseObject interface {
	VisitCategoryListResponse(w http.ResponseWriter) error
}

type CategoryList200JSONResponse struct{ CategoryListOKJSONResponse }

func (response CategoryList200JSONResponse) VisitCategoryListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryListdefaultJSONResponse) VisitCategoryListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryUpdateOrderRequestObject struct {
	Body *CategoryUpdateOrderJSONRequestBody
}

type CategoryUpdateOrderResponseObject interface {
	VisitCategoryUpdateOrderResponse(w http.ResponseWriter) error
}

type CategoryUpdateOrder200JSONResponse struct{ CategoryListOKJSONResponse }

func (response CategoryUpdateOrder200JSONResponse) VisitCategoryUpdateOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryUpdateOrderdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryUpdateOrderdefaultJSONResponse) VisitCategoryUpdateOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryCreateRequestObject struct {
	Body *CategoryCreateJSONRequestBody
}

type CategoryCreateResponseObject interface {
	VisitCategoryCreateResponse(w http.ResponseWriter) error
}

type CategoryCreate200JSONResponse struct{ CategoryCreateOKJSONResponse }

func (response CategoryCreate200JSONResponse) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryCreate400Response = BadRequestResponse

func (response CategoryCreate400Response) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CategoryCreate401Response = UnauthorisedResponse

func (response CategoryCreate401Response) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CategoryCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryCreatedefaultJSONResponse) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryUpdateRequestObject struct {
	CategoryId CategoryIDParam `json:"category_id"`
	Body       *CategoryUpdateJSONRequestBody
}

type CategoryUpdateResponseObject interface {
	VisitCategoryUpdateResponse(w http.ResponseWriter) error
}

type CategoryUpdate200JSONResponse struct{ CategoryUpdateOKJSONResponse }

func (response CategoryUpdate200JSONResponse) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryUpdate400Response = BadRequestResponse

func (response CategoryUpdate400Response) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CategoryUpdate401Response = UnauthorisedResponse

func (response CategoryUpdate401Response) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CategoryUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryUpdatedefaultJSONResponse) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterListRequestObject struct {
	Params ClusterListParams
}

type ClusterListResponseObject interface {
	VisitClusterListResponse(w http.ResponseWriter) error
}

type ClusterList200JSONResponse struct{ ClusterListOKJSONResponse }

func (response ClusterList200JSONResponse) VisitClusterListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterList404Response = NotFoundResponse

func (response ClusterList404Response) VisitClusterListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ClusterListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterListdefaultJSONResponse) VisitClusterListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterCreateRequestObject struct {
	Body *ClusterCreateJSONRequestBody
}

type ClusterCreateResponseObject interface {
	VisitClusterCreateResponse(w http.ResponseWriter) error
}

type ClusterCreate200JSONResponse struct{ ClusterCreateOKJSONResponse }

func (response ClusterCreate200JSONResponse) VisitClusterCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterCreate401Response = UnauthorisedResponse

func (response ClusterCreate401Response) VisitClusterCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ClusterCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterCreatedefaultJSONResponse) VisitClusterCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterGetRequestObject struct {
	ClusterSlug ClusterSlugParam `json:"cluster_slug"`
}

type ClusterGetResponseObject interface {
	VisitClusterGetResponse(w http.ResponseWriter) error
}

type ClusterGet200JSONResponse struct{ ClusterGetOKJSONResponse }

func (response ClusterGet200JSONResponse) VisitClusterGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterGet401Response = UnauthorisedResponse

func (response ClusterGet401Response) VisitClusterGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ClusterGet404Response = NotFoundResponse

func (response ClusterGet404Response) VisitClusterGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ClusterGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterGetdefaultJSONResponse) VisitClusterGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterUpdateRequestObject struct {
	ClusterSlug ClusterSlugParam `json:"cluster_slug"`
	Body        *ClusterUpdateJSONRequestBody
}

type ClusterUpdateResponseObject interface {
	VisitClusterUpdateResponse(w http.ResponseWriter) error
}

type ClusterUpdate200JSONResponse struct{ ClusterUpdateOKJSONResponse }

func (response ClusterUpdate200JSONResponse) VisitClusterUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterUpdate401Response = UnauthorisedResponse

func (response ClusterUpdate401Response) VisitClusterUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ClusterUpdate404Response = NotFoundResponse

func (response ClusterUpdate404Response) VisitClusterUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ClusterUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterUpdatedefaultJSONResponse) VisitClusterUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterRemoveClusterRequestObject struct {
	ClusterSlug      ClusterSlugParam      `json:"cluster_slug"`
	ClusterSlugChild ClusterSlugChildParam `json:"cluster_slug_child"`
}

type ClusterRemoveClusterResponseObject interface {
	VisitClusterRemoveClusterResponse(w http.ResponseWriter) error
}

type ClusterRemoveCluster200JSONResponse struct {
	ClusterRemoveChildOKJSONResponse
}

func (response ClusterRemoveCluster200JSONResponse) VisitClusterRemoveClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterRemoveCluster401Response = UnauthorisedResponse

func (response ClusterRemoveCluster401Response) VisitClusterRemoveClusterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ClusterRemoveCluster404Response = NotFoundResponse

func (response ClusterRemoveCluster404Response) VisitClusterRemoveClusterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ClusterRemoveClusterdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterRemoveClusterdefaultJSONResponse) VisitClusterRemoveClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterAddClusterRequestObject struct {
	ClusterSlug      ClusterSlugParam      `json:"cluster_slug"`
	ClusterSlugChild ClusterSlugChildParam `json:"cluster_slug_child"`
}

type ClusterAddClusterResponseObject interface {
	VisitClusterAddClusterResponse(w http.ResponseWriter) error
}

type ClusterAddCluster200JSONResponse struct{ ClusterAddChildOKJSONResponse }

func (response ClusterAddCluster200JSONResponse) VisitClusterAddClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterAddCluster401Response = UnauthorisedResponse

func (response ClusterAddCluster401Response) VisitClusterAddClusterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ClusterAddCluster404Response = NotFoundResponse

func (response ClusterAddCluster404Response) VisitClusterAddClusterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ClusterAddClusterdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterAddClusterdefaultJSONResponse) VisitClusterAddClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterRemoveItemRequestObject struct {
	ClusterSlug ClusterSlugParam `json:"cluster_slug"`
	ItemSlug    ItemSlugParam    `json:"item_slug"`
}

type ClusterRemoveItemResponseObject interface {
	VisitClusterRemoveItemResponse(w http.ResponseWriter) error
}

type ClusterRemoveItem200JSONResponse struct {
	ClusterRemoveItemOKJSONResponse
}

func (response ClusterRemoveItem200JSONResponse) VisitClusterRemoveItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterRemoveItem401Response = UnauthorisedResponse

func (response ClusterRemoveItem401Response) VisitClusterRemoveItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ClusterRemoveItem404Response = NotFoundResponse

func (response ClusterRemoveItem404Response) VisitClusterRemoveItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ClusterRemoveItemdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterRemoveItemdefaultJSONResponse) VisitClusterRemoveItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClusterAddItemRequestObject struct {
	ClusterSlug ClusterSlugParam `json:"cluster_slug"`
	ItemSlug    ItemSlugParam    `json:"item_slug"`
}

type ClusterAddItemResponseObject interface {
	VisitClusterAddItemResponse(w http.ResponseWriter) error
}

type ClusterAddItem200JSONResponse struct{ ClusterAddItemOKJSONResponse }

func (response ClusterAddItem200JSONResponse) VisitClusterAddItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClusterAddItem401Response = UnauthorisedResponse

func (response ClusterAddItem401Response) VisitClusterAddItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ClusterAddItem404Response = NotFoundResponse

func (response ClusterAddItem404Response) VisitClusterAddItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ClusterAddItemdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ClusterAddItemdefaultJSONResponse) VisitClusterAddItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionListRequestObject struct {
}

type CollectionListResponseObject interface {
	VisitCollectionListResponse(w http.ResponseWriter) error
}

type CollectionList200JSONResponse struct{ CollectionListOKJSONResponse }

func (response CollectionList200JSONResponse) VisitCollectionListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionList404Response = NotFoundResponse

func (response CollectionList404Response) VisitCollectionListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionListdefaultJSONResponse) VisitCollectionListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionCreateRequestObject struct {
	Body *CollectionCreateJSONRequestBody
}

type CollectionCreateResponseObject interface {
	VisitCollectionCreateResponse(w http.ResponseWriter) error
}

type CollectionCreate200JSONResponse struct{ CollectionCreateOKJSONResponse }

func (response CollectionCreate200JSONResponse) VisitCollectionCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionCreate401Response = UnauthorisedResponse

func (response CollectionCreate401Response) VisitCollectionCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionCreatedefaultJSONResponse) VisitCollectionCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionGetRequestObject struct {
	CollectionId CollectionIDParam `json:"collection_id"`
}

type CollectionGetResponseObject interface {
	VisitCollectionGetResponse(w http.ResponseWriter) error
}

type CollectionGet200JSONResponse struct{ CollectionGetOKJSONResponse }

func (response CollectionGet200JSONResponse) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionGet401Response = UnauthorisedResponse

func (response CollectionGet401Response) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionGet404Response = NotFoundResponse

func (response CollectionGet404Response) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionGetdefaultJSONResponse) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionUpdateRequestObject struct {
	CollectionId CollectionIDParam `json:"collection_id"`
	Body         *CollectionUpdateJSONRequestBody
}

type CollectionUpdateResponseObject interface {
	VisitCollectionUpdateResponse(w http.ResponseWriter) error
}

type CollectionUpdate200JSONResponse struct{ CollectionUpdateOKJSONResponse }

func (response CollectionUpdate200JSONResponse) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionUpdate401Response = UnauthorisedResponse

func (response CollectionUpdate401Response) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionUpdate404Response = NotFoundResponse

func (response CollectionUpdate404Response) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionUpdatedefaultJSONResponse) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionRemovePostRequestObject struct {
	CollectionId CollectionIDParam `json:"collection_id"`
	PostId       PostIDParam       `json:"post_id"`
}

type CollectionRemovePostResponseObject interface {
	VisitCollectionRemovePostResponse(w http.ResponseWriter) error
}

type CollectionRemovePost200JSONResponse struct {
	CollectionRemovePostOKJSONResponse
}

func (response CollectionRemovePost200JSONResponse) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionRemovePost401Response = UnauthorisedResponse

func (response CollectionRemovePost401Response) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionRemovePost404Response = NotFoundResponse

func (response CollectionRemovePost404Response) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionRemovePostdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionRemovePostdefaultJSONResponse) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionAddPostRequestObject struct {
	CollectionId CollectionIDParam `json:"collection_id"`
	PostId       PostIDParam       `json:"post_id"`
}

type CollectionAddPostResponseObject interface {
	VisitCollectionAddPostResponse(w http.ResponseWriter) error
}

type CollectionAddPost200JSONResponse struct {
	CollectionAddPostOKJSONResponse
}

func (response CollectionAddPost200JSONResponse) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionAddPost401Response = UnauthorisedResponse

func (response CollectionAddPost401Response) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionAddPost404Response = NotFoundResponse

func (response CollectionAddPost404Response) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionAddPostdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionAddPostdefaultJSONResponse) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetInfoRequestObject struct {
}

type GetInfoResponseObject interface {
	VisitGetInfoResponse(w http.ResponseWriter) error
}

type GetInfo200JSONResponse struct{ GetInfoOKJSONResponse }

func (response GetInfo200JSONResponse) VisitGetInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInfodefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response GetInfodefaultJSONResponse) VisitGetInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type IconUploadRequestObject struct {
	Params IconUploadParams
	Body   io.Reader
}

type IconUploadResponseObject interface {
	VisitIconUploadResponse(w http.ResponseWriter) error
}

type IconUpload200Response struct {
}

func (response IconUpload200Response) VisitIconUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type IconUpload401Response = UnauthorisedResponse

func (response IconUpload401Response) VisitIconUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type IconUploaddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response IconUploaddefaultJSONResponse) VisitIconUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type IconGetRequestObject struct {
	IconSize IconGetParamsIconSize `json:"icon_size"`
}

type IconGetResponseObject interface {
	VisitIconGetResponse(w http.ResponseWriter) error
}

type IconGet200AsteriskResponse struct{ AssetGetOKAsteriskResponse }

func (response IconGet200AsteriskResponse) VisitIconGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response IconGetdefaultJSONResponse) VisitIconGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ItemListRequestObject struct {
	Params ItemListParams
}

type ItemListResponseObject interface {
	VisitItemListResponse(w http.ResponseWriter) error
}

type ItemList200JSONResponse struct{ ItemListOKJSONResponse }

func (response ItemList200JSONResponse) VisitItemListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemList404Response = NotFoundResponse

func (response ItemList404Response) VisitItemListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ItemListdefaultJSONResponse) VisitItemListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ItemCreateRequestObject struct {
	Body *ItemCreateJSONRequestBody
}

type ItemCreateResponseObject interface {
	VisitItemCreateResponse(w http.ResponseWriter) error
}

type ItemCreate200JSONResponse struct{ ItemCreateOKJSONResponse }

func (response ItemCreate200JSONResponse) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreate401Response = UnauthorisedResponse

func (response ItemCreate401Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ItemCreatedefaultJSONResponse) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ItemGetRequestObject struct {
	ItemSlug ItemSlugParam `json:"item_slug"`
}

type ItemGetResponseObject interface {
	VisitItemGetResponse(w http.ResponseWriter) error
}

type ItemGet200JSONResponse struct{ ItemGetOKJSONResponse }

func (response ItemGet200JSONResponse) VisitItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemGet401Response = UnauthorisedResponse

func (response ItemGet401Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemGet404Response = NotFoundResponse

func (response ItemGet404Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ItemGetdefaultJSONResponse) VisitItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ItemUpdateRequestObject struct {
	ItemSlug ItemSlugParam `json:"item_slug"`
	Body     *ItemUpdateJSONRequestBody
}

type ItemUpdateResponseObject interface {
	VisitItemUpdateResponse(w http.ResponseWriter) error
}

type ItemUpdate200JSONResponse struct{ ItemUpdateOKJSONResponse }

func (response ItemUpdate200JSONResponse) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemUpdate401Response = UnauthorisedResponse

func (response ItemUpdate401Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemUpdate404Response = NotFoundResponse

func (response ItemUpdate404Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ItemUpdatedefaultJSONResponse) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSearchRequestObject struct {
	Params PostSearchParams
}

type PostSearchResponseObject interface {
	VisitPostSearchResponse(w http.ResponseWriter) error
}

type PostSearch200JSONResponse struct{ PostSearchOKJSONResponse }

func (response PostSearch200JSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSearch401Response = UnauthorisedResponse

func (response PostSearch401Response) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostSearch404Response = NotFoundResponse

func (response PostSearch404Response) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostSearchdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostSearchdefaultJSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDeleteRequestObject struct {
	PostId PostIDParam `json:"post_id"`
}

type PostDeleteResponseObject interface {
	VisitPostDeleteResponse(w http.ResponseWriter) error
}

type PostDelete200Response struct {
}

func (response PostDelete200Response) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostDelete401Response = UnauthorisedResponse

func (response PostDelete401Response) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostDelete404Response = NotFoundResponse

func (response PostDelete404Response) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostDeletedefaultJSONResponse) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUpdateRequestObject struct {
	PostId PostIDParam `json:"post_id"`
	Body   *PostUpdateJSONRequestBody
}

type PostUpdateResponseObject interface {
	VisitPostUpdateResponse(w http.ResponseWriter) error
}

type PostUpdate200JSONResponse struct{ PostUpdateOKJSONResponse }

func (response PostUpdate200JSONResponse) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUpdate401Response = UnauthorisedResponse

func (response PostUpdate401Response) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostUpdate404Response = NotFoundResponse

func (response PostUpdate404Response) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostUpdatedefaultJSONResponse) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostReactAddRequestObject struct {
	PostId PostIDParam `json:"post_id"`
	Body   *PostReactAddJSONRequestBody
}

type PostReactAddResponseObject interface {
	VisitPostReactAddResponse(w http.ResponseWriter) error
}

type PostReactAdd200JSONResponse struct{ PostReactAddOKJSONResponse }

func (response PostReactAdd200JSONResponse) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostReactAdd401Response = UnauthorisedResponse

func (response PostReactAdd401Response) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostReactAdd404Response = NotFoundResponse

func (response PostReactAdd404Response) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostReactAdddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostReactAdddefaultJSONResponse) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileGetRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type ProfileGetResponseObject interface {
	VisitProfileGetResponse(w http.ResponseWriter) error
}

type ProfileGet200JSONResponse struct{ ProfileGetOKJSONResponse }

func (response ProfileGet200JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet401Response = UnauthorisedResponse

func (response ProfileGet401Response) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfileGet404Response = NotFoundResponse

func (response ProfileGet404Response) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfileGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfileGetdefaultJSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadListRequestObject struct {
	Params ThreadListParams
}

type ThreadListResponseObject interface {
	VisitThreadListResponse(w http.ResponseWriter) error
}

type ThreadList200JSONResponse struct{ ThreadListOKJSONResponse }

func (response ThreadList200JSONResponse) VisitThreadListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadList401Response = UnauthorisedResponse

func (response ThreadList401Response) VisitThreadListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadList404Response = NotFoundResponse

func (response ThreadList404Response) VisitThreadListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadListdefaultJSONResponse) VisitThreadListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadCreateRequestObject struct {
	Body *ThreadCreateJSONRequestBody
}

type ThreadCreateResponseObject interface {
	VisitThreadCreateResponse(w http.ResponseWriter) error
}

type ThreadCreate200JSONResponse struct{ ThreadCreateOKJSONResponse }

func (response ThreadCreate200JSONResponse) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadCreate401Response = UnauthorisedResponse

func (response ThreadCreate401Response) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadCreate404Response = NotFoundResponse

func (response ThreadCreate404Response) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadCreatedefaultJSONResponse) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadDeleteRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
}

type ThreadDeleteResponseObject interface {
	VisitThreadDeleteResponse(w http.ResponseWriter) error
}

type ThreadDelete200Response struct {
}

func (response ThreadDelete200Response) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ThreadDelete401Response = UnauthorisedResponse

func (response ThreadDelete401Response) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadDelete404Response = NotFoundResponse

func (response ThreadDelete404Response) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadDeletedefaultJSONResponse) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadGetRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
}

type ThreadGetResponseObject interface {
	VisitThreadGetResponse(w http.ResponseWriter) error
}

type ThreadGet200JSONResponse struct{ ThreadGetJSONResponse }

func (response ThreadGet200JSONResponse) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadGet401Response = UnauthorisedResponse

func (response ThreadGet401Response) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadGet404Response = NotFoundResponse

func (response ThreadGet404Response) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadGetdefaultJSONResponse) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadUpdateRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
	Body       *ThreadUpdateJSONRequestBody
}

type ThreadUpdateResponseObject interface {
	VisitThreadUpdateResponse(w http.ResponseWriter) error
}

type ThreadUpdate200JSONResponse struct{ ThreadUpdateOKJSONResponse }

func (response ThreadUpdate200JSONResponse) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadUpdate401Response = UnauthorisedResponse

func (response ThreadUpdate401Response) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadUpdate404Response = NotFoundResponse

func (response ThreadUpdate404Response) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadUpdatedefaultJSONResponse) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostCreateRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
	Body       *PostCreateJSONRequestBody
}

type PostCreateResponseObject interface {
	VisitPostCreateResponse(w http.ResponseWriter) error
}

type PostCreate200JSONResponse struct{ PostCreateOKJSONResponse }

func (response PostCreate200JSONResponse) VisitPostCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCreate401Response = UnauthorisedResponse

func (response PostCreate401Response) VisitPostCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostCreate404Response = NotFoundResponse

func (response PostCreate404Response) VisitPostCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostCreatedefaultJSONResponse) VisitPostCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200TextResponse string

func (response GetVersion200TextResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) (GetSpecResponseObject, error)

	// (GET /v1/accounts)
	AccountGet(ctx context.Context, request AccountGetRequestObject) (AccountGetResponseObject, error)

	// (PATCH /v1/accounts)
	AccountUpdate(ctx context.Context, request AccountUpdateRequestObject) (AccountUpdateResponseObject, error)

	// (GET /v1/accounts/self/auth-methods)
	AccountAuthProviderList(ctx context.Context, request AccountAuthProviderListRequestObject) (AccountAuthProviderListResponseObject, error)

	// (POST /v1/accounts/self/avatar)
	AccountSetAvatar(ctx context.Context, request AccountSetAvatarRequestObject) (AccountSetAvatarResponseObject, error)

	// (GET /v1/accounts/{account_handle}/avatar)
	AccountGetAvatar(ctx context.Context, request AccountGetAvatarRequestObject) (AccountGetAvatarResponseObject, error)

	// (PATCH /v1/admin)
	AdminSettingsUpdate(ctx context.Context, request AdminSettingsUpdateRequestObject) (AdminSettingsUpdateResponseObject, error)

	// (POST /v1/assets)
	AssetUpload(ctx context.Context, request AssetUploadRequestObject) (AssetUploadResponseObject, error)

	// (GET /v1/assets/{id})
	AssetGet(ctx context.Context, request AssetGetRequestObject) (AssetGetResponseObject, error)

	// (GET /v1/auth)
	AuthProviderList(ctx context.Context, request AuthProviderListRequestObject) (AuthProviderListResponseObject, error)

	// (GET /v1/auth/logout)
	AuthProviderLogout(ctx context.Context, request AuthProviderLogoutRequestObject) (AuthProviderLogoutResponseObject, error)

	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	OAuthProviderCallback(ctx context.Context, request OAuthProviderCallbackRequestObject) (OAuthProviderCallbackResponseObject, error)

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) (AuthPasswordSigninResponseObject, error)

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) (AuthPasswordSignupResponseObject, error)

	// (POST /v1/auth/phone)
	PhoneRequestCode(ctx context.Context, request PhoneRequestCodeRequestObject) (PhoneRequestCodeResponseObject, error)

	// (PUT /v1/auth/phone/{account_handle})
	PhoneSubmitCode(ctx context.Context, request PhoneSubmitCodeRequestObject) (PhoneSubmitCodeResponseObject, error)

	// (POST /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx context.Context, request WebAuthnMakeAssertionRequestObject) (WebAuthnMakeAssertionResponseObject, error)

	// (GET /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx context.Context, request WebAuthnGetAssertionRequestObject) (WebAuthnGetAssertionResponseObject, error)

	// (POST /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx context.Context, request WebAuthnMakeCredentialRequestObject) (WebAuthnMakeCredentialResponseObject, error)

	// (GET /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx context.Context, request WebAuthnRequestCredentialRequestObject) (WebAuthnRequestCredentialResponseObject, error)

	// (GET /v1/categories)
	CategoryList(ctx context.Context, request CategoryListRequestObject) (CategoryListResponseObject, error)

	// (PATCH /v1/categories)
	CategoryUpdateOrder(ctx context.Context, request CategoryUpdateOrderRequestObject) (CategoryUpdateOrderResponseObject, error)

	// (POST /v1/categories)
	CategoryCreate(ctx context.Context, request CategoryCreateRequestObject) (CategoryCreateResponseObject, error)

	// (PATCH /v1/categories/{category_id})
	CategoryUpdate(ctx context.Context, request CategoryUpdateRequestObject) (CategoryUpdateResponseObject, error)

	// (GET /v1/clusters)
	ClusterList(ctx context.Context, request ClusterListRequestObject) (ClusterListResponseObject, error)

	// (POST /v1/clusters)
	ClusterCreate(ctx context.Context, request ClusterCreateRequestObject) (ClusterCreateResponseObject, error)

	// (GET /v1/clusters/{cluster_slug})
	ClusterGet(ctx context.Context, request ClusterGetRequestObject) (ClusterGetResponseObject, error)

	// (PATCH /v1/clusters/{cluster_slug})
	ClusterUpdate(ctx context.Context, request ClusterUpdateRequestObject) (ClusterUpdateResponseObject, error)

	// (DELETE /v1/clusters/{cluster_slug}/clusters/{cluster_slug_child})
	ClusterRemoveCluster(ctx context.Context, request ClusterRemoveClusterRequestObject) (ClusterRemoveClusterResponseObject, error)

	// (PUT /v1/clusters/{cluster_slug}/clusters/{cluster_slug_child})
	ClusterAddCluster(ctx context.Context, request ClusterAddClusterRequestObject) (ClusterAddClusterResponseObject, error)

	// (DELETE /v1/clusters/{cluster_slug}/items/{item_slug})
	ClusterRemoveItem(ctx context.Context, request ClusterRemoveItemRequestObject) (ClusterRemoveItemResponseObject, error)

	// (PUT /v1/clusters/{cluster_slug}/items/{item_slug})
	ClusterAddItem(ctx context.Context, request ClusterAddItemRequestObject) (ClusterAddItemResponseObject, error)

	// (GET /v1/collections)
	CollectionList(ctx context.Context, request CollectionListRequestObject) (CollectionListResponseObject, error)

	// (POST /v1/collections)
	CollectionCreate(ctx context.Context, request CollectionCreateRequestObject) (CollectionCreateResponseObject, error)

	// (GET /v1/collections/{collection_id})
	CollectionGet(ctx context.Context, request CollectionGetRequestObject) (CollectionGetResponseObject, error)

	// (PATCH /v1/collections/{collection_id})
	CollectionUpdate(ctx context.Context, request CollectionUpdateRequestObject) (CollectionUpdateResponseObject, error)

	// (DELETE /v1/collections/{collection_id}/items/{post_id})
	CollectionRemovePost(ctx context.Context, request CollectionRemovePostRequestObject) (CollectionRemovePostResponseObject, error)

	// (PUT /v1/collections/{collection_id}/items/{post_id})
	CollectionAddPost(ctx context.Context, request CollectionAddPostRequestObject) (CollectionAddPostResponseObject, error)

	// (GET /v1/info)
	GetInfo(ctx context.Context, request GetInfoRequestObject) (GetInfoResponseObject, error)

	// (POST /v1/info/icon)
	IconUpload(ctx context.Context, request IconUploadRequestObject) (IconUploadResponseObject, error)

	// (GET /v1/info/icon/{icon_size})
	IconGet(ctx context.Context, request IconGetRequestObject) (IconGetResponseObject, error)

	// (GET /v1/items)
	ItemList(ctx context.Context, request ItemListRequestObject) (ItemListResponseObject, error)

	// (POST /v1/items)
	ItemCreate(ctx context.Context, request ItemCreateRequestObject) (ItemCreateResponseObject, error)

	// (GET /v1/items/{item_slug})
	ItemGet(ctx context.Context, request ItemGetRequestObject) (ItemGetResponseObject, error)

	// (PATCH /v1/items/{item_slug})
	ItemUpdate(ctx context.Context, request ItemUpdateRequestObject) (ItemUpdateResponseObject, error)

	// (GET /v1/posts/search)
	PostSearch(ctx context.Context, request PostSearchRequestObject) (PostSearchResponseObject, error)

	// (DELETE /v1/posts/{post_id})
	PostDelete(ctx context.Context, request PostDeleteRequestObject) (PostDeleteResponseObject, error)

	// (PATCH /v1/posts/{post_id})
	PostUpdate(ctx context.Context, request PostUpdateRequestObject) (PostUpdateResponseObject, error)

	// (PUT /v1/posts/{post_id}/reacts)
	PostReactAdd(ctx context.Context, request PostReactAddRequestObject) (PostReactAddResponseObject, error)

	// (GET /v1/profiles/{account_handle})
	ProfileGet(ctx context.Context, request ProfileGetRequestObject) (ProfileGetResponseObject, error)

	// (GET /v1/threads)
	ThreadList(ctx context.Context, request ThreadListRequestObject) (ThreadListResponseObject, error)

	// (POST /v1/threads)
	ThreadCreate(ctx context.Context, request ThreadCreateRequestObject) (ThreadCreateResponseObject, error)

	// (DELETE /v1/threads/{thread_mark})
	ThreadDelete(ctx context.Context, request ThreadDeleteRequestObject) (ThreadDeleteResponseObject, error)
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_mark})
	ThreadGet(ctx context.Context, request ThreadGetRequestObject) (ThreadGetResponseObject, error)

	// (PATCH /v1/threads/{thread_mark})
	ThreadUpdate(ctx context.Context, request ThreadUpdateRequestObject) (ThreadUpdateResponseObject, error)

	// (POST /v1/threads/{thread_mark}/posts)
	PostCreate(ctx context.Context, request PostCreateRequestObject) (PostCreateResponseObject, error)
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSpecResponseObject); ok {
		return validResponse.VisitGetSpecResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountGet operation middleware
func (sh *strictHandler) AccountGet(ctx echo.Context) error {
	var request AccountGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountGet(ctx.Request().Context(), request.(AccountGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountGetResponseObject); ok {
		return validResponse.VisitAccountGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountUpdate operation middleware
func (sh *strictHandler) AccountUpdate(ctx echo.Context) error {
	var request AccountUpdateRequestObject

	var body AccountUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountUpdate(ctx.Request().Context(), request.(AccountUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountUpdateResponseObject); ok {
		return validResponse.VisitAccountUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountAuthProviderList operation middleware
func (sh *strictHandler) AccountAuthProviderList(ctx echo.Context) error {
	var request AccountAuthProviderListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountAuthProviderList(ctx.Request().Context(), request.(AccountAuthProviderListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountAuthProviderList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountAuthProviderListResponseObject); ok {
		return validResponse.VisitAccountAuthProviderListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountSetAvatar operation middleware
func (sh *strictHandler) AccountSetAvatar(ctx echo.Context, params AccountSetAvatarParams) error {
	var request AccountSetAvatarRequestObject

	request.Params = params

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountSetAvatar(ctx.Request().Context(), request.(AccountSetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountSetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountSetAvatarResponseObject); ok {
		return validResponse.VisitAccountSetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountGetAvatar operation middleware
func (sh *strictHandler) AccountGetAvatar(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request AccountGetAvatarRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountGetAvatar(ctx.Request().Context(), request.(AccountGetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountGetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountGetAvatarResponseObject); ok {
		return validResponse.VisitAccountGetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AdminSettingsUpdate operation middleware
func (sh *strictHandler) AdminSettingsUpdate(ctx echo.Context) error {
	var request AdminSettingsUpdateRequestObject

	var body AdminSettingsUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminSettingsUpdate(ctx.Request().Context(), request.(AdminSettingsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminSettingsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AdminSettingsUpdateResponseObject); ok {
		return validResponse.VisitAdminSettingsUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetUpload operation middleware
func (sh *strictHandler) AssetUpload(ctx echo.Context, params AssetUploadParams) error {
	var request AssetUploadRequestObject

	request.Params = params

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetUpload(ctx.Request().Context(), request.(AssetUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetUpload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetUploadResponseObject); ok {
		return validResponse.VisitAssetUploadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetGet operation middleware
func (sh *strictHandler) AssetGet(ctx echo.Context, id AssetPath) error {
	var request AssetGetRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetGet(ctx.Request().Context(), request.(AssetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetGetResponseObject); ok {
		return validResponse.VisitAssetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthProviderList operation middleware
func (sh *strictHandler) AuthProviderList(ctx echo.Context) error {
	var request AuthProviderListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthProviderList(ctx.Request().Context(), request.(AuthProviderListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthProviderList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthProviderListResponseObject); ok {
		return validResponse.VisitAuthProviderListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthProviderLogout operation middleware
func (sh *strictHandler) AuthProviderLogout(ctx echo.Context) error {
	var request AuthProviderLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthProviderLogout(ctx.Request().Context(), request.(AuthProviderLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthProviderLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthProviderLogoutResponseObject); ok {
		return validResponse.VisitAuthProviderLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// OAuthProviderCallback operation middleware
func (sh *strictHandler) OAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error {
	var request OAuthProviderCallbackRequestObject

	request.OauthProvider = oauthProvider

	var body OAuthProviderCallbackJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthProviderCallback(ctx.Request().Context(), request.(OAuthProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthProviderCallbackResponseObject); ok {
		return validResponse.VisitOAuthProviderCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	var body AuthPasswordSigninJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSigninResponseObject); ok {
		return validResponse.VisitAuthPasswordSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	var body AuthPasswordSignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSignupResponseObject); ok {
		return validResponse.VisitAuthPasswordSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PhoneRequestCode operation middleware
func (sh *strictHandler) PhoneRequestCode(ctx echo.Context) error {
	var request PhoneRequestCodeRequestObject

	var body PhoneRequestCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PhoneRequestCode(ctx.Request().Context(), request.(PhoneRequestCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PhoneRequestCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PhoneRequestCodeResponseObject); ok {
		return validResponse.VisitPhoneRequestCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PhoneSubmitCode operation middleware
func (sh *strictHandler) PhoneSubmitCode(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request PhoneSubmitCodeRequestObject

	request.AccountHandle = accountHandle

	var body PhoneSubmitCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PhoneSubmitCode(ctx.Request().Context(), request.(PhoneSubmitCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PhoneSubmitCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PhoneSubmitCodeResponseObject); ok {
		return validResponse.VisitPhoneSubmitCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeAssertion operation middleware
func (sh *strictHandler) WebAuthnMakeAssertion(ctx echo.Context) error {
	var request WebAuthnMakeAssertionRequestObject

	var body WebAuthnMakeAssertionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeAssertion(ctx.Request().Context(), request.(WebAuthnMakeAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnMakeAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnGetAssertion operation middleware
func (sh *strictHandler) WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request WebAuthnGetAssertionRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnGetAssertion(ctx.Request().Context(), request.(WebAuthnGetAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnGetAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnGetAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnGetAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeCredential operation middleware
func (sh *strictHandler) WebAuthnMakeCredential(ctx echo.Context) error {
	var request WebAuthnMakeCredentialRequestObject

	var body WebAuthnMakeCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeCredential(ctx.Request().Context(), request.(WebAuthnMakeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnMakeCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnRequestCredential operation middleware
func (sh *strictHandler) WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request WebAuthnRequestCredentialRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnRequestCredential(ctx.Request().Context(), request.(WebAuthnRequestCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnRequestCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnRequestCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnRequestCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CategoryList operation middleware
func (sh *strictHandler) CategoryList(ctx echo.Context) error {
	var request CategoryListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryList(ctx.Request().Context(), request.(CategoryListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryListResponseObject); ok {
		return validResponse.VisitCategoryListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CategoryUpdateOrder operation middleware
func (sh *strictHandler) CategoryUpdateOrder(ctx echo.Context) error {
	var request CategoryUpdateOrderRequestObject

	var body CategoryUpdateOrderJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryUpdateOrder(ctx.Request().Context(), request.(CategoryUpdateOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryUpdateOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryUpdateOrderResponseObject); ok {
		return validResponse.VisitCategoryUpdateOrderResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CategoryCreate operation middleware
func (sh *strictHandler) CategoryCreate(ctx echo.Context) error {
	var request CategoryCreateRequestObject

	var body CategoryCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryCreate(ctx.Request().Context(), request.(CategoryCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryCreateResponseObject); ok {
		return validResponse.VisitCategoryCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CategoryUpdate operation middleware
func (sh *strictHandler) CategoryUpdate(ctx echo.Context, categoryId CategoryIDParam) error {
	var request CategoryUpdateRequestObject

	request.CategoryId = categoryId

	var body CategoryUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryUpdate(ctx.Request().Context(), request.(CategoryUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryUpdateResponseObject); ok {
		return validResponse.VisitCategoryUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterList operation middleware
func (sh *strictHandler) ClusterList(ctx echo.Context, params ClusterListParams) error {
	var request ClusterListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterList(ctx.Request().Context(), request.(ClusterListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterListResponseObject); ok {
		return validResponse.VisitClusterListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterCreate operation middleware
func (sh *strictHandler) ClusterCreate(ctx echo.Context) error {
	var request ClusterCreateRequestObject

	var body ClusterCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterCreate(ctx.Request().Context(), request.(ClusterCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterCreateResponseObject); ok {
		return validResponse.VisitClusterCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterGet operation middleware
func (sh *strictHandler) ClusterGet(ctx echo.Context, clusterSlug ClusterSlugParam) error {
	var request ClusterGetRequestObject

	request.ClusterSlug = clusterSlug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterGet(ctx.Request().Context(), request.(ClusterGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterGetResponseObject); ok {
		return validResponse.VisitClusterGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterUpdate operation middleware
func (sh *strictHandler) ClusterUpdate(ctx echo.Context, clusterSlug ClusterSlugParam) error {
	var request ClusterUpdateRequestObject

	request.ClusterSlug = clusterSlug

	var body ClusterUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterUpdate(ctx.Request().Context(), request.(ClusterUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterUpdateResponseObject); ok {
		return validResponse.VisitClusterUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterRemoveCluster operation middleware
func (sh *strictHandler) ClusterRemoveCluster(ctx echo.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam) error {
	var request ClusterRemoveClusterRequestObject

	request.ClusterSlug = clusterSlug
	request.ClusterSlugChild = clusterSlugChild

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterRemoveCluster(ctx.Request().Context(), request.(ClusterRemoveClusterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterRemoveCluster")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterRemoveClusterResponseObject); ok {
		return validResponse.VisitClusterRemoveClusterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterAddCluster operation middleware
func (sh *strictHandler) ClusterAddCluster(ctx echo.Context, clusterSlug ClusterSlugParam, clusterSlugChild ClusterSlugChildParam) error {
	var request ClusterAddClusterRequestObject

	request.ClusterSlug = clusterSlug
	request.ClusterSlugChild = clusterSlugChild

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterAddCluster(ctx.Request().Context(), request.(ClusterAddClusterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterAddCluster")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterAddClusterResponseObject); ok {
		return validResponse.VisitClusterAddClusterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterRemoveItem operation middleware
func (sh *strictHandler) ClusterRemoveItem(ctx echo.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam) error {
	var request ClusterRemoveItemRequestObject

	request.ClusterSlug = clusterSlug
	request.ItemSlug = itemSlug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterRemoveItem(ctx.Request().Context(), request.(ClusterRemoveItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterRemoveItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterRemoveItemResponseObject); ok {
		return validResponse.VisitClusterRemoveItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ClusterAddItem operation middleware
func (sh *strictHandler) ClusterAddItem(ctx echo.Context, clusterSlug ClusterSlugParam, itemSlug ItemSlugParam) error {
	var request ClusterAddItemRequestObject

	request.ClusterSlug = clusterSlug
	request.ItemSlug = itemSlug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClusterAddItem(ctx.Request().Context(), request.(ClusterAddItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClusterAddItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClusterAddItemResponseObject); ok {
		return validResponse.VisitClusterAddItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CollectionList operation middleware
func (sh *strictHandler) CollectionList(ctx echo.Context) error {
	var request CollectionListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionList(ctx.Request().Context(), request.(CollectionListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionListResponseObject); ok {
		return validResponse.VisitCollectionListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CollectionCreate operation middleware
func (sh *strictHandler) CollectionCreate(ctx echo.Context) error {
	var request CollectionCreateRequestObject

	var body CollectionCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionCreate(ctx.Request().Context(), request.(CollectionCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionCreateResponseObject); ok {
		return validResponse.VisitCollectionCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CollectionGet operation middleware
func (sh *strictHandler) CollectionGet(ctx echo.Context, collectionId CollectionIDParam) error {
	var request CollectionGetRequestObject

	request.CollectionId = collectionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionGet(ctx.Request().Context(), request.(CollectionGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionGetResponseObject); ok {
		return validResponse.VisitCollectionGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CollectionUpdate operation middleware
func (sh *strictHandler) CollectionUpdate(ctx echo.Context, collectionId CollectionIDParam) error {
	var request CollectionUpdateRequestObject

	request.CollectionId = collectionId

	var body CollectionUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionUpdate(ctx.Request().Context(), request.(CollectionUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionUpdateResponseObject); ok {
		return validResponse.VisitCollectionUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CollectionRemovePost operation middleware
func (sh *strictHandler) CollectionRemovePost(ctx echo.Context, collectionId CollectionIDParam, postId PostIDParam) error {
	var request CollectionRemovePostRequestObject

	request.CollectionId = collectionId
	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionRemovePost(ctx.Request().Context(), request.(CollectionRemovePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionRemovePost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionRemovePostResponseObject); ok {
		return validResponse.VisitCollectionRemovePostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CollectionAddPost operation middleware
func (sh *strictHandler) CollectionAddPost(ctx echo.Context, collectionId CollectionIDParam, postId PostIDParam) error {
	var request CollectionAddPostRequestObject

	request.CollectionId = collectionId
	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionAddPost(ctx.Request().Context(), request.(CollectionAddPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionAddPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionAddPostResponseObject); ok {
		return validResponse.VisitCollectionAddPostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetInfo operation middleware
func (sh *strictHandler) GetInfo(ctx echo.Context) error {
	var request GetInfoRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInfo(ctx.Request().Context(), request.(GetInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetInfoResponseObject); ok {
		return validResponse.VisitGetInfoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// IconUpload operation middleware
func (sh *strictHandler) IconUpload(ctx echo.Context, params IconUploadParams) error {
	var request IconUploadRequestObject

	request.Params = params

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IconUpload(ctx.Request().Context(), request.(IconUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IconUpload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IconUploadResponseObject); ok {
		return validResponse.VisitIconUploadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// IconGet operation middleware
func (sh *strictHandler) IconGet(ctx echo.Context, iconSize IconGetParamsIconSize) error {
	var request IconGetRequestObject

	request.IconSize = iconSize

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IconGet(ctx.Request().Context(), request.(IconGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IconGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IconGetResponseObject); ok {
		return validResponse.VisitIconGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemList operation middleware
func (sh *strictHandler) ItemList(ctx echo.Context, params ItemListParams) error {
	var request ItemListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemList(ctx.Request().Context(), request.(ItemListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemListResponseObject); ok {
		return validResponse.VisitItemListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemCreate operation middleware
func (sh *strictHandler) ItemCreate(ctx echo.Context) error {
	var request ItemCreateRequestObject

	var body ItemCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreate(ctx.Request().Context(), request.(ItemCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateResponseObject); ok {
		return validResponse.VisitItemCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemGet operation middleware
func (sh *strictHandler) ItemGet(ctx echo.Context, itemSlug ItemSlugParam) error {
	var request ItemGetRequestObject

	request.ItemSlug = itemSlug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemGet(ctx.Request().Context(), request.(ItemGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemGetResponseObject); ok {
		return validResponse.VisitItemGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemUpdate operation middleware
func (sh *strictHandler) ItemUpdate(ctx echo.Context, itemSlug ItemSlugParam) error {
	var request ItemUpdateRequestObject

	request.ItemSlug = itemSlug

	var body ItemUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemUpdate(ctx.Request().Context(), request.(ItemUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemUpdateResponseObject); ok {
		return validResponse.VisitItemUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSearch operation middleware
func (sh *strictHandler) PostSearch(ctx echo.Context, params PostSearchParams) error {
	var request PostSearchRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSearch(ctx.Request().Context(), request.(PostSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSearchResponseObject); ok {
		return validResponse.VisitPostSearchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostDelete operation middleware
func (sh *strictHandler) PostDelete(ctx echo.Context, postId PostIDParam) error {
	var request PostDeleteRequestObject

	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostDelete(ctx.Request().Context(), request.(PostDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostDeleteResponseObject); ok {
		return validResponse.VisitPostDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUpdate operation middleware
func (sh *strictHandler) PostUpdate(ctx echo.Context, postId PostIDParam) error {
	var request PostUpdateRequestObject

	request.PostId = postId

	var body PostUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUpdate(ctx.Request().Context(), request.(PostUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUpdateResponseObject); ok {
		return validResponse.VisitPostUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostReactAdd operation middleware
func (sh *strictHandler) PostReactAdd(ctx echo.Context, postId PostIDParam) error {
	var request PostReactAddRequestObject

	request.PostId = postId

	var body PostReactAddJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostReactAdd(ctx.Request().Context(), request.(PostReactAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostReactAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostReactAddResponseObject); ok {
		return validResponse.VisitPostReactAddResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ProfileGet operation middleware
func (sh *strictHandler) ProfileGet(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request ProfileGetRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileGet(ctx.Request().Context(), request.(ProfileGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileGetResponseObject); ok {
		return validResponse.VisitProfileGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadList operation middleware
func (sh *strictHandler) ThreadList(ctx echo.Context, params ThreadListParams) error {
	var request ThreadListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadList(ctx.Request().Context(), request.(ThreadListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadListResponseObject); ok {
		return validResponse.VisitThreadListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadCreate operation middleware
func (sh *strictHandler) ThreadCreate(ctx echo.Context) error {
	var request ThreadCreateRequestObject

	var body ThreadCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadCreate(ctx.Request().Context(), request.(ThreadCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadCreateResponseObject); ok {
		return validResponse.VisitThreadCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadDelete operation middleware
func (sh *strictHandler) ThreadDelete(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request ThreadDeleteRequestObject

	request.ThreadMark = threadMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadDelete(ctx.Request().Context(), request.(ThreadDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadDeleteResponseObject); ok {
		return validResponse.VisitThreadDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadGet operation middleware
func (sh *strictHandler) ThreadGet(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request ThreadGetRequestObject

	request.ThreadMark = threadMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadGet(ctx.Request().Context(), request.(ThreadGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadGetResponseObject); ok {
		return validResponse.VisitThreadGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadUpdate operation middleware
func (sh *strictHandler) ThreadUpdate(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request ThreadUpdateRequestObject

	request.ThreadMark = threadMark

	var body ThreadUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadUpdate(ctx.Request().Context(), request.(ThreadUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadUpdateResponseObject); ok {
		return validResponse.VisitThreadUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostCreate operation middleware
func (sh *strictHandler) PostCreate(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request PostCreateRequestObject

	request.ThreadMark = threadMark

	var body PostCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCreate(ctx.Request().Context(), request.(PostCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCreateResponseObject); ok {
		return validResponse.VisitPostCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		return validResponse.VisitGetVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNpLov4I396pydzWSbGezd+WqV/UUezerjRP7JHv3h4xLxpCYGUQkwACgRhOX",
	"/vcrND4IkiCHw6H8oewviTwkG41uoNHoz4+zhOcFZ4QpOXv+cVZggXOiiIB/nScJL5n6G2ZpRt7oR/rX",
	"lMhE0EJRzmbP3TtoAy+dzuYzcofzIiOz5zPJS7VJMryVs/mM6rcLrDaz+YzhXD/H5ttr8+1sPhPkt5IK",
	"ks6eK1GS+UwmG5JjPej/FWQ1ez77t7MK3zPzVJ7V0Jzd389n51IS9UaP1cZXP0IXL0/jKNG0Fw21K2Bi",
	"SlC2hqFeYEXWXOwuXnYQ6B2jv5UEJfa97qHdG9d7cOgjxUVKmKIrSoRBLiulIuIqK9cvNjRL96Bo3kb6",
	"9S4czSvXMivX14kG+QCoTorlZPjxLCOJRmUvp/2bPbz270zJbc4UYeoVYevYyv+epzuUmHdQBi8hytBy",
	"p4j0aG4ITomoELUwTyzQAXuDlfnSInSRcHZFfydtXPQTJOnvZuRKYnz39Nndd0+fdezNhLNr/VEvGoSV",
	"+ez5LwGob5/dfav///S/n9w9/e8n+q9nT+6ePoO//vxfd0///F/6r++e3T397tns/Tyyyy8UyfcvTapI",
	"3rcu9fNJF+Xr81Jt3gh+SzXTWmi93RBE/RdoxQXCDMFHz1BhP0OyTDYIS7SYqS1ViojFrM4U+3N8ThyX",
	"anPtgB0oPN9wqfZtp4LLHnmtn064ha4IFsnmf0oidm2EzEP0m36KzCw8VvBjhdZvs/6Jv90IgtOfsLjp",
	"mLx5AZWGBpilqCAixxr5gKUdRFHw8XWOxc1owlQYzu41xhoKkep7nlISKgdXRJ3fYoVh+Vnpov/ERZHR",
	"BOvpnPFEEXUilSBmqhUGKy5yrGbPZ0vKMBCwSSs4zs1Q74oUK9Izzq9S0+7jYWrDT6XCy4y8EbyQbrw0",
	"p+yKKEXZWk49agg7NrbWT94VGcfpQ1F03txoMBrCaEW1BqeR0GIFS7nlIp1u5gCUCjtRpzi9EGRK+np9",
	"jFFFcRaS1j2amKMObISZ9RFfCyulp52olwavqFRuYKMBTU1bAzVGWvNkasoaqDHCev1p6ilWal5klv7h",
	"1BP1gCNz1brHxLPUICPz0z9PPDMNMjKnmuLyAmfZEic3kw0K0D1UM+KbDWfk0hxiL3g63QybgMNpwrOr",
	"cpnTBxizglsbkks18WoBLa2xWppniBkSYaOubanaUIYwMpoInCkayiXBiTpP00lRA6CdiJ2n+mQT+h19",
	"I1Pc4uhxmnjBa5DNBX84sYz2NTEfDdDIvjcPJiaEVSDbe/+fZKn3J/sJ3xCt7QhDlanoXy4zmvxItF4B",
	"JyPOIuMGDx96YNCdZcGZrOnNoQDUB/frH6dWbPUIPxG14Wl0Eb7+cVap1j90aPE0x2tyVrD10Upmc7jp",
	"57t3VKuFfcqB2xeJKYcPoXcKG4uJvlbEyP6fZ/95NG/fbghiZIveXb5CfIUwQyVcKUgaXCmqe82UJNBQ",
	"R6N03BYsBC+08DLb2llA5KBrUDDqzN2uzR39lwBSZYriy19J0rfQSrW5KpOESDkldSuoHUPPrcEQZn1F",
	"1MkLzm8oqQ8Ru9J/j1OrM0UMlThF1twwa10UJ5yeA9xNVvfGxAI6BLt/8MnlxoB5m4vXeZqC22DKsQ3k",
	"qFZkDfvgVkA4TUl6ii6JKgWTqMCCMOWM/6d1JPUl4xPjaM3oBstZ88b9iZGBMWtoTHvAWqD/pGqjSS37",
	"kKHMHCBa2cYsdZQKkTta1tpVIAfiHZWyHsYQIesml1FZm8klyfkt+Wx7RMDwg3aJwfQL2ijTS7X9yJQw",
	"pkXDm1zO01Rf2qZExcOOYlP5ByPUaRi2PgtWoTzxP08sUjzcfqlSYdUrWPxrx8sWD0oOn0NcwgSQBgmZ",
	"aq6VnPG/mQ38JS7U6XfyUKzC/fwDURdsxSdEQ4PrVpEumCKC4eyKiFsi/iIEn860f/7mwgCMjO7GRWZg",
	"ZF8MzcRT0kCRPIqFInlNTugfppUQGqKWDW/gTJOdWPTJBf3C0RKBgnAagG1UCpivh+x/mI3f+ZUt/lOx",
	"M9xNP3P1V16ytH05+5krtIJHNWPzhEhqoJ3WDOsXB8OpXX9ImivqqsyyXcvUPCFiADKGlB6vMjFXMlL/",
	"boIGJiaPAXpJZJmpvWSyfI2TafIlNph73WgJvqIZmVaaGOusBd0t1UO7+4SjG7A9FAlFqfnpB6I+yfCk",
	"LkCXvFTeFQHylCoJDJMBckfLVANfDkM8KlcdhCGSVQMAK2CW2ZmFk5l8C+zldihp3zFcqg0XVJI0FgNl",
	"n/5OQOA6H8YPRHnXyZSal3ddWOPc68LorxNb/9w0nNvUDzvhXNwYoV8G4DzInO5dXJXx8TgFrh1+jIJ/",
	"W8s00a8iypKsTClbI4w2ZY6ZPlFSvMwIyomUeG3CwDDbLZggGcjOnCicYoXRSvAcqQ1xdlPzqpQ8oUbI",
	"EnFLEyJPF2w2b+xFEsfUiAarbMI7c8S4gt8Y2NG5QISlJ6UkAqVUFhnenbbdBfOZRT9GDJjoSWuiY8Yw",
	"lIA1k6ZUj2CcnG6iJvitgQDboertipyOvooDUWH2wbBO0sxnslyviVSxrXuO/ENkNQM9Gw1PzyYyi4aE",
	"M3x5HxnV+Z30XLPs9Wr2/Jd9N6o85yygxv18kGer+k7O7nswqVyNw3Gqha4OxKca5xCc4PwYqsi3Z3Tv",
	"x8BC4F10CINO65jTfL+NLPy3oiSIrmAx2CQIRCUqpd7+akMl0mJfr8cNT4OVsuQ8I5i1loodZxA1YmiW",
	"anOdV08Pok/0dK5B7EErXGBttNKcskDc+tnPZ0vKI3J4PrOZJIcljMxnIOeIVPsVErw283WxtoMG+lm/",
	"2iSRT3oBQHM72/cVbf7m59IWzDYu+P/btBt7kNilVI/evgqTcOoEm8/uTtb8pEXFWGRsizufmQUXL+VY",
	"LnQtxp8trDa53R7lW0aEdAcR0oPXif09Fgwvd+hHQhiJnVPd4b8R4ZEQpq4TnvFSREldQzTyXFFlONE+",
	"aNo0aAcTtAPgFRe7lDBEmVQ4yyqjCyxeKpUwP0kL57SlbDzopGr3A3itDm7eGD4qmCCioMWMDaHrjYqk",
	"ucxnNB0UpXDxEvQUmpNrAyIyt1Jk0d+3NDUZPe0cm5qtKZ0ZGOE47uu5m0PnrC9exrQYK2oaeSRwSAki",
	"eSmSxh5Iku8ylj6TT+Wf/vzdM5yq8rsns3kVV3IHaA6URBqvw85vExESObMhAOXyVXyHV3EiGBIEfbSI",
	"VQGLDCs9g6jyea4UkQqW/gvObskOs4S8EWRFBGFJRKZslCrk87Oz7XZ7uv32lIv12dvLsy1Z6nOTnTw7",
	"+zfCyvwEV3BPEgAM6rvLcEqp0OzTPygiCn2FhHwQ/zvjjETymVx8PxURY2eVD6OvBp6pPKUsNnXFbwir",
	"v1q4xIF9Cm4wlgMUXZuNHKc6whllN3GWbnYFEfqx5qHQ9wmxTwOfzzK+5td2G7ZB6qcamjsAHDgXshMF",
	"yTqPlcbtR7+oF+FeiEVvxpfMyvVQWB2hR5VW4ukxN5Tex6DD9mr9CtDeskH8UWSl7j8EaNqJsF56xq7w",
	"lztFmKScyRcZJUxdsKJU8rCL5P4NndJEpWR1gmtjEz92AmNTGHvBZv1Yc3GuFE42ubWSjJEuDWS4wB5k",
	"Tco4yTebzxLBpTzxP3RJFg/x0sa9jkGxhpoLoI1YLwIZ+dqQKnaA1qC9tHaC1luGB/rx369e/xx9RdI1",
	"w6oU8fNbCcxkwYWqO47a7zUWuhZHlbrfv6YbSL7ft1KuiA8ooIoIisdwI7J6uZAOcmIhx9jTvWj3SYbY",
	"ZxUtLomE8+NHsotfEUX9hX7Hjn/10kB3g2nG/IMIurL7dR+kd433a+Aid+TYHOuox/jrA/gezgDkgy5D",
	"C9DAb8692IwbaCLvtcNpuVQvnJHLQtBXxHVE7a3e7RttrKnhiKtKTtReM/VPznA58DLrpmNus/MZpJMP",
	"/OZKv6u/4WIIXa0KYBPW6xcpSxULy1kv7JT72NBIVxzsXw/ytNvyM5r0+YdmcpyVHTy0pqcerjleNWKl",
	"zNND4iSq2OMmF5vHXAW7D7E9JpQ/Fsc7qRS3bJ37ojTfSLgRnaxwQtna27VaM3fwLsOr7ac8gfqWwpUl",
	"Wc8k312+OpF4Ze5IvTPUwNyibwLMrDvZl/TR9DIlVA7ZAk4at4SZDWR9QNLaWPUGZVuEcyHdEmG0Frws",
	"9KxhjmD042pDhHtLnqILBX5GIhHWL6AFw0upROD8AiB6hUklykSr0SkCh5vhpoGRgOuzEETCVURtKFtL",
	"X6VkKTBL5RzlmJUrDDCEnCPjJpdzZIwf8CdRySmyc5ULpuEuCfJmmRTRKrARIhxgVmpDdghnkqMNviX6",
	"n1QgvvWvnsZvZxGaRm/nOaYMVVIKjE5VwHZTfW6IogFMfRl8cT83CXzOoLHXbvbu8tVggWWGc/IKLON7",
	"g3BM+E0lPe6b893zdbXAhwnIqqbUQcqNmUwNt/fdLH+557iIVU1onVRfDaO/PH71sAbiHQfLURMd2RaE",
	"zBR2WpKMszV4aG1YAEsyDi5bt38XrDH4viPECFObAa5hgpC5g2e18SoZgV7SFewftWAQ9oEZckOhJUlw",
	"KQnaEpRyCNdgxBixTXgJMQbBWprIgoURYJTpuyciONmYaUvKEoKo+kYinAmC0x3Ct5hmWu0ysnDYqRdw",
	"pPvQO+hO4DM+OsE1tcNWKCt5jqplirDQx0OR4YSc4Cwzni1BgI45EWuSAqsQuaNSUbaORdP8ayNHNnLX",
	"/nR6aZfM7FLpanocaBbGS5XtnJ9qp/eN80/JuKrXzGobrnD5hTdJZtrhO6gn0nweZLa1ZZnWQFZllnVp",
	"IGEUWpYFul6Od0ti0s4WzI2A/j0lBWHwOmdou8HKCsa04NTEtCScregaND0uoHYaNQIp5f+x0HLHumZM",
	"4JuWpllV45EzhNEtJVuz04bE1YeZKQ+pQld5Wvu06CCFqaZI20hUCCpI0XKHsHFLaR0YZxnfmkuZRIov",
	"WFIKrEJtVJ8gwDunwfoQQEkVOUUVghI0as6y3YLpl7UCKjhXKCO3JLOa779bbP7DSDjwnhvO6y2mcUDW",
	"ldal/0YJEtm7Xv92x2hFoH3CtNO11nowUh0dYjUxoPsX3kG63tBZ7UduD1IHKUNH7AjIRKrtihYe/cZY",
	"uMuNuUzIjbVstkIx9QN0S4S0Ybd64Zkl/41ES57uEKhdcJRIguCORrTkkbX1HjiCBhyDYQ3FIHClLZLh",
	"UR2tekzF30iWcbTlIkv/z14vrqWfV5ZdKIyhzv5FcpgSVl9fMV2sniZ5OOB+oP0WwPF7rYdIY1SGiQ6Y",
	"+ajstAh/O/LUDlEZPNA56jrH/SsLJnlOthsiCDL/3fESDia8WnEBGoHc8K3N0SBW9fC3IgfnMEWgQfO2",
	"Aduk3Zyrrm2ZExtVbxRJtMWyytUJYppSrMiJfj0mKlKSkYNHkXylTuyXw4faH4tWd6TkVCYReSmWVAks",
	"dojcKYGNiU4qLtwFKMQ2GhdvM1wOm7JPixk221jwW8XQEIf44gC16Udqkhx9tAOX+lsjg6MRDsGHh2zA",
	"arSYNOvKuxnhqpeJYieJB2gTQrgBeOIDTiJX18JlyowoddbKF2q4aD3oGC8uakFnX1QAIiSBRyoUSZog",
	"M6lI/pxe2dFY2YeIh+VsybHQd7BrqbAq967F1/6DK/P+tEG1MYyiTH9YdbSthHbZ9Sg4K7CXeQZFrQaa",
	"/CPKUnIHxxrboRvKUn38VQ6MBTMZWC4UsBQFl/aMFMmG3uJsjiQk7M5RypMyJ8zEK831kZqWibK+igWc",
	"zsYMJWlOMyz0sWguaPokJCIHuDBgzlOSoWWpzPskxxBLkulrXupMhPqs1dNECc8J3OIsfqcLtmAXKziF",
	"t/o4VhwUX79sFUeiZHDM53nJqDLRjvo6nhKO1jgn+ocFs/tubk/shJdZipbE0A8iL60rB+FEldgZFfx1",
	"VUNasO2GJht37c1JvjQXX0s4R90cYYnQlmSZ/iO4SW6gEMCCVW4c65zq9dlEbiL7HTa2ir6exVH+Gj34",
	"pzL96bG+aE+N66/wEG6aJqFjQrRVEPkYB83n4uwXxqAuXgz0icAloXJDWP+FrC4IrWOXKrlgdd8GUpyf",
	"or/aWz3orudvLiRSG6zQFjMFItGEICPsUVgwgwS8luOdlmcFFvCskq3e8z3cC9IqatLWBVsVs784v8Wj",
	"X9/RZdvpq/CfPpSjorloPqHSNI2D476tfF06rUC6w7S6WTa2cN07CVIgPUXvJBjNF8yOaPYqZ9nO7Gtv",
	"gwDYOONsbUagSsZAd6gIP43LK/fKZJWhb/XD3mtzvXB9pDZZGl+CWs0eoL6b1+YGTkw8t64GrSX9kgh6",
	"qxVjrb5ZuwBWWvtjKU2wItK4gaQyefww5+pCoGVtQqRcsM47ktbHqQkXMrE8+rMVFVKBHQBJosoCSUUK",
	"K3jd1d3OVF7Dy9c2Z7OyFslrF7AV/pZzQdy7MnxgoFh7gF7hGVHxbKp4B4CoMlnoV5FJ3/O1Ggq8y7ix",
	"+PYlY7WhpURq1oKbCBJ+Ki+N2UjBaD2d+dr5Rfq7a5tkuH8eoOQnhJpoKcSZsdggvcyQufQekAhWGzy2",
	"SKPND6JYwptIwqsGm05Sd2ytVkm/jo0DhbB6fRr63BuWvOicwuPdIEue7obUabJWqTExrVDtSg6qmOXm",
	"ozWU3bXih1koBefQ4Ovwjw730AzQX0B1aawKh2I4rmXCvHLGWIrN3VLoXka++E17RVeeKjDBR/tHILCw",
	"7gqiJSmhcA/Gtl8Z0jd2zKyNY47a/nswxOqzNS3hg8RWzTlFVwDBeJOXZMG8gWRprGEZBhuFxk2gHIub",
	"NIiaNHdyE+UJuqn7esG0BEZGwN4B3lWw51WGFTn9VSKSUqUPBGs+6XLKtTqVtKsWfIqtMWadj1x7MJ+u",
	"pVRTXkZqjJ2w+4tDPDyZDyBYdAIe82GUqdFznx7dPA5icSGMbKP7V+9sU28NnZsX9AUUFhUEAjJj2YIn",
	"lBlFyn653CFZkMReKvSDD24xfnAmrJ2RD4E13ShpCxa8e4uzkqC8hIjCGpYQYAKqhhE2ca250ZanJcou",
	"ba1EIwqSUmiFP9uhX/WIkmpRYAWWBAsnxGRrMtBcX9YJ0nJBRItZ5fxXOtCh266kGNG46yloVdUHUX0y",
	"6OYf1EXcl/ni1VYzQnQHNk/9yN0zp4zmOKsH3NSrxAzOlhlb1OXAc/vYmjpwCHcU1olTsTb9w693f796",
	"/bNzGMAFVB+O5E7fbSX4C4LqYv4aiBfM+z3Nt3pP6muPrFc+M6m+CPaD9xpIZ6q31nflDnB7uMIlt/Jm",
	"hLdnxZHEisrVznkeIDxYgjPgr1ygypYfeAaWJc1sXbol5zcwjyWWZG5c+GDv1/iAEHnTEVeohzaiybjN",
	"5KZxs3dHfooVQXy1YFBklrL1HG0ITn8rsVCQ6SHp78Tmdth0DeaGR/XRAaEgjgCrGDowpxgmgmQESwIY",
	"zRfMXna0dMZr4l02LfFX9yRiBka9WHOoEb5dusIJOSluKvfuYSnXHRnvvgJCIAdbmyVab2E+E3h70fEk",
	"yP4fnOvtSwZ4KflxiN/fYBGMab+O7vo2L5qlIQ9iDamnyBuv8A3ZVUxyOrR1wvdXMdhLrj3FZprVDnz+",
	"/0F8aFcN0Ktlg7OMsHXcCEXuwDZXUfWAw7HNEmdg5tH4/qpuxgGz6q71cT+fFeXSjg8dmY/CHSAQMJNG",
	"cBfFmPiK4i9MUWXyZmlOeBnN4DYVC0bAfyeJcCM0r7fFzIINV0CU3xEyDtyBAbuPKE8R2XupBxzZdh0y",
	"raOMhzM0LjNTZ8nURtWKxioBEi01hbB5vNktBY1HEDUXhJNzB7Lsrf6sFaFhSn51FL7pX6vTEr7wgGPy",
	"LltHteoHIIUeaiAtjg++6qFHPRArSpOMbz+J9OyX46LoOND3yp1mpZSqUJlMeCnwmqQwa31WCVJr2v9+",
	"n424wnkoM53EnJiNBQGww6XJQeH8wzfuW7tVxtZ+isxND1uv/QTvnNzU4vYCc1vvOTIt3fX66qS8rcfW",
	"6aI9ijOgYLpsi2Cgbj65NgPHOWqHlVuthTBPVow1xx3C4XNUyo3e6sNI3wqp91F7pWnc0TLudNmKDrVb",
	"3HcNuS/SRXgzGESzgp1tgyXaYOtgLQgvMjK4soRtUNIW+B0Fro6QHq5E1Q3ZiQpiozzlCKk/nz1oKMVb",
	"HIWt8BqZCMQEM+NCLcwelgj89iZT75Zi5NdazIfYGcT7EIawt3jdvV1Yl4Ry+7JnWSq8Hl7NRFM0suKC",
	"Ks17RkIXL4eP1l8GylEk6jpzFTGxHjW+OEzQ/2Cpbd4PPa+xKmYPYSL2GV3G1WgSu+azgjIGG8w7HTWB",
	"9QPAYz6rBUCAO7K9RN57SkzuSUuCunUH5Kgc6BgaFgVvphhEwGtKHVR63MfM7x/mLbw63svn+G19ygEb",
	"ewLsg+Y5Q1dge0W391jlMY8JUpdSefHSeHwLa/wGoS2JvhQql+2cYrlB/8+UlrBJHjkWN6cLBtZwGwzu",
	"ksmliTORBWcQV36LBQj8FbdR8TgcvW3SXtNbEnjZfLTZxUv0IZYx8sGZlxcMkP+geHHy9MlJzm8pkScG",
	"zId5FcS0pVmGSpYSIZX+dMntCIDh8wWLDnMSBQtjx9FaMATRbpGMGEi/r9xy/Rkx0YEbaTIn+tSmdyQ9",
	"uSFLvDxJsCQnPmNmWAaNXTBTu4v/JUuOcYA3N/qUN5VPGuo0dBm0K9eZGoBje70evpTs4dwSmv/cEHDo",
	"B358fReAt43fikpfai7WC8Yc79feVR1RfSrXFeTHgJAygKtkc/3/1yzbOZdn28QzIubr4RLyO9A9KkHf",
	"bttebTVoquWPkIqIw0s+P1w1gKO1jEO0ymsXrdBWLe0W8QFv8z0dkSMxMnY/VBEMPgsk55Yn/Q0Ml6Va",
	"sJQTaVuXBTWwYCcEUS0ueu6dJKsya2S0Z1isyYL5oiu+douwiWaSqtK65yHlbsdLlHL2jSvA5ZLotTSw",
	"ZcJqp0anLmXD7RBECKUCr5SJuNb31cwG3G4ZESjHN0SiZIPZ2mT6+XJiTJ2i1zZNbgcRNxtcFDsXDj83",
	"v+txrGu+ufDchV6Pbnw84MCP39/DU6p/eeNRizvawuMcbckS4TQVRMpQiTGtC9pAeup0A/AVLjP9fWi2",
	"GGsrKaEqZjXYxAaTvY0Oj08ibziwHyyLvN2icXgauRb5JCkFVbsrPYLVLAXfWo8o1VNPTDdHZ2GZSau9",
	"n0gipUkrdJK6oHqg+/nMEWY/EE/CTmj3YEM1OeVQjMkYJi2gevuoVntKf9WAIyhD528uTACui9CpcnVT",
	"Adcd16vBWMPMnvTozuYzewDPns+eQm5oQRgu6Oz57NvTJ6dPNW+x2gAhz+yzU9eFc01UV2oapPUSRgRW",
	"XNh6GRJh9CHHxS9m4b4HO9oKJ+Tj/QfTCs8EQEmioODVh2bnzw+np6dIcnTxTW7iBE23vCDsWJOCcVsr",
	"TC9J+PginT2f/UDUVUGSIEIEJvXsyZNGv1EN6Axg7un4GesfHCzB2fNf3s9nssxzrJVTjQCQ5XVBmGbb",
	"t6dPbASSnaO+1P396vXPp+58ff6Lqc7xXoM9u3165pNUuojvxgjPQ5d2VMVYBsEh0JnSBwPWKWYN8j8Q",
	"1UG02Nb2751Vn5vGyn968nT/R7VeuPDRn/Z/5FuVA0us3N73Uax7//19RXlP6/f3sAeSTaQ3L9QXmZzi",
	"BqwV+kSq73vuxtUrtKK5BXB/BNt8S+SvmnONfXMmSbY603ieBL0uozvpkihByW2YElzv2+N7Krl4S7TK",
	"8NolwWm5BO6EBePM5ueaFp2DV0dEhgWdN2vdlo7gcxOW4/gACN/j1IZLTMK+utwczMxbrLBwlvbYFs04",
	"tDFH5k1P/sO25BVR52YkLQyqeJkOW0n1iqv784qwtdrAFWfsrq5w6NjYsXb2j2fvfrR/XRs/8H3A+s6z",
	"sM12e+IOO/dGsrzmTIfoKsv38UdoxfivhKGDd7PLOOg/YhlnJ4Td+lqy9SajtkhPvcpSg6lhc9MjDtgI",
	"mHHHbBvQaNE7aklMt2Vt12LHUG/73SOQU5cJjjDKSUoxWlET6dDgHNSLgK8+i/ANhh/H6QrAESJ5OnbZ",
	"3NM6v84+0vS+U5S+5Fvmj1FojrrcQRWFi5cd/DKXhgPFpv7wDfaMGkXor+260SEnm0wqTfPfY1XV08pX",
	"KcsC4pu14kq2aMG2eAdGw1AxmpsgJJuP59q6wmtQqAK2sbM+mRSmBfO1vxXJMgkZQNQUIoMCX/qzBBd4",
	"STPqa9cQhpcZSaNK7yTa7peu5moG19h9lvG1DbXt4HrObwkyhihbTM1KLtOPQtP8tJ+aZoSByuR8tiE4",
	"tVHiV0SdvDA2sH4jyWeicg9dOfz3I/zv2u2M+7MkrLkSPbmu6JqBOw5yKF0lJd8Z3t4CfSUOOOHsjmnz",
	"4XXICF/v5VCR+breP3fM+RZH5H7sJrPNeh+DDG4vHcfOM0nXzKqtD79UTKtu8/TKDDxGjwmg/Iu9+9lb",
	"Ft3svSRrCkmkGHL4p2FrWXwxbP2CT0WoDdSz8RQWqmnfAZtsxreOQbWiSFALwZgUhAngkoSlC4YbVYxc",
	"QSUjKdN6/SOj2kC1BMhGXhIE9U4VN9UZbMEG+KRSjzgCn+AOAFtIes3c4ox6w3KPObBZdWrM+mnB+KOs",
	"oZY9yXguI2vqha381SqoFV1jy50tN6VcBQ63jhbMLCRXY8euEHhHy4xvpIHeyeqq4tV0JqkxyyXA4w+w",
	"WpxHF27KJpQpLntq66TynCPzHTj4WIpkTTXoNEK6S9VP+IacOwBjNngc0B9VAfgYuPJ/MalCgzkflRjR",
	"u1l1CjnqB4vAVo9uKoXdS+AHosIV8Jls0TFsHqca6Nme4xsyYLt7HgtQC61termzhdOgbIpWEyuR0L/d",
	"gwIhR+73ANKjENTjdq9m41F7t8ZXZ7Re7kJzCw65Gzm/HSynaYUs/swbuoXSl30m1zvOd3v+KltolqHq",
	"I8RZ1SKvxaZas/sxRA0BGDo+EFHC5viDAlQkFwpxkZoo8OrzbiJYr5T+ZIwgioG5/6poGhf7EMumN7zr",
	"/a4PdC7WmFETjsZtamicqub7YwhqIRxFSwPjK/U41vjUEgtnHx1nrq1Pq2NzHMtJ70U+0CdpP794ecQ9",
	"rIHDUWvhq/Y+R9dCUKE+ekBAo2w4F1z/hjaTg+r1LQ5HoJkcHVtbDrovaPAbmqW1QSB4+LeSQJaEDfm1",
	"z0394MqVMrj2wKjTP5if4/yXoZAHvYv3i2BLb71voamu3rVVx2LbAMi1KlZ8DXlWMf3MkuMI4VwDcH8E",
	"S+qi+bPurYoVjZ119tEtWpmV6/s9mphjkw0aeHf5CpKBOzfdmOCBoF34MUpxhcEjuNvWt1KvhuiZ1MmU",
	"saddnC/jdtdRp10I4quMjRy8HTt+v4bj6N6sAWhl0RVUEEhWwXPYtI2OLJDdjhPfZ0LxwjQT7xGuBrjr",
	"nH/8Qpof8s0LPfcJJIOdhIb2tS+iedzdcRXK7G885y2jq/jZxDMyyu3zNP3KWa1n8Bj4vEdYgL509lH/",
	"rzrN9wkI27AJxMP+s8N8Be0+P8VacO24JtvuGuAj3e3naeq5qfgAXp6n6dfISIv2Y9nL9bIVey651cs2",
	"YxJy0WmmTGa7TemNcLxe8WIU9WsgvrCbZliLYMBl079uKvNDEoKzEvmCGmR4NlfQ33/8tbMJ4/44Ln1B",
	"l88ad9rr/uxj9Y/rvuB1ewetuFfFrqMXwdawVRZsS28uUCHorWa95KYGlMPdRAmZvkmmaRLENdsgMCpR",
	"jm/cLnMN3rS+TG0/AoXFmqgQIyrtsHM36BxKOqQI8pmV/cdyty8iqJrPqDu0/7pumxy/nB7JPbopKPZd",
	"pSvO1hk3LOWwIt/YO3cHH0fLlqPu3Q0oX+cJfKAwcko11MehA+/cUPzVadQenAlQDJaU68kULq0Fc+Kn",
	"LXv65YQZ/Q2Xk4iL/Sod9GebSLpUuD+CRdWnn5ulYdTzwxaGkzILFlkYAABA27MPs6o3T2qe8BX8ekNZ",
	"2r+QztP061xFFvHHI5dccZneCiGmY+OKizJv9N5lK+4bIEG9mDkKQARNj1r1VS70wGOYYb99UOd+vZKK",
	"nuUZTTg7KFHVFPqoiPWNRBlfcwTF0tsH+UWiD70vOHF1soIBky3oDi6dfdT/vZb0d3K/d2kbliR6LXfz",
	"ZYx+rL+7or+TSfJTP80yd8UI+y0ExmV6kG3gQpE87hzfQ0TTbvF/wAU+jo5u6C/LmmBIPcCO4ExtwvW/",
	"1+c7JQkUxJNKlIkqBUlta3UriJ2JjrIFw+iWpoSjNc7JHILIhaKJKaiXZFxtoGUe9g3+oG6gVFyQTuEN",
	"Xf9HGyGCr+/HMvTLMTw4RoZbqGke7zE0AJv2err1lEeJoAksonbsR3AxD/bcniu5fjPOhZF37BgjRmyb",
	"Y27W1fdfpe7a2GdgRj2TcDp0B2fDY6Q2gpfrjTO9wrl1iwXlpUS/lQTifLXeZs6xyOlV9f3dF9x1bgoL",
	"QsgW9Aw1GJiCM/byZCusdoR32Yr93Tny89YsN3yLOMt2yDYAtgUU7aWOytB2FBvSl+kdFk3WaP7TRkiT",
	"S87DkrdLrjZdo+u74uCxraL7I2WpHBvLVnHzEcg006ijsS0GGZLORbKhlSXJbAvJV+rEfBHfBi8NtEPl",
	"35Ab+COoR+a40XnCvLH1koOqyxhpymfGtBIn+shDp030Q9M3q7Hvx+60r/jI6d9bZ1V1+x5TnOvYZTjd",
	"zWIogn+epp+HyX700Wx2EB4Fo20nr+FZYEaXt75A+7k+fWMFr2xTilElr6ZK5qpweAxHoGVXxUCreRyQ",
	"8WW/aHMr6Im0R/WLqmF1PayUJlLmUyhhbXRc9wlJkO3HEMPDPhqGRdiT5kAUgkyMjjyH8IWB2qFNUdE3",
	"LdNQZNz2qJj+CLaH2wwDbE2MbMNuV7bPRRDDGTSViW2T8Tah2vf343l2tF3o8x1CFZ/qUuzso/njOsfi",
	"ZqBGb5k4QKc3ZBup1VfdcB69Zh/uos4zpaevjLPMUuXdZGZqc9P+hUKRlwVzV3cs0ZZkGRhzq35CPW1o",
	"ImZaw54xisZQxg7Zknr8r1WG1tsx9LDXdv7r5M6sQx4fcEusIMW4PPKKGGf0KOF9zEUxhPCIhfeZb+86",
	"4CAGq4xdSd3chyaH7tj9DLwPxh99d/yKD+3azdG1xum4dbzdEN+/zlYE893JtKgwvgctSGjuu7kJkhEs",
	"ienYg/QJUR0LpiWedwwawWS/+4EqaO5DoUH4piME4x8W5c/e5UbrKFssKgIZiLHeNs0aL75hkynxYlpn",
	"xS5omv5/e/v2DfKdhFwHVCpRypMyJ0zZ4JUlgd5Cub5jkdRVAflwhgv6AS1YgW0xY8x8XReJeKkkTS3r",
	"qERLzTh4FUKAl1AO8E4r0srGCK8EkBiCfX2pZSqRKBmD5GRNCMxSnHFGUM5TW+0N+vXNNDazoKxNu7cS",
	"O1lqHZBIiDyhCZKqXK1Oq0sWELV9c4Ny81URGz3TeCn9AJQp7B6BVa96V2u3Htx9I1++k0Q430XtddcW",
	"IOJ6qJlgwo+8laD90VvXNy8sctK+hbY//CvEQwW2A3eHtqdBh2ukkuquoVMg3h26IFgiQ9KMoBLCdIzT",
	"KrXF1msEMvXAOygKqQj6NhdEs7tOn+HMg2CxCFfFkiqBxc54sH06fYG1wmL8XSm5g/tHFaQQ+L7q1QwG",
	"DHEoZOMwvH9//78BAAD//xkmhM6zDAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
