// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220906181851-9c600dddea33 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes  = "browser.Scopes"
	WebauthnScopes = "webauthn.Scopes"
)

// APIError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type APIError struct {
	// Error The internal error, not intended for end-user display.
	Error string `json:"error"`

	// Message A human-readable message intended for end-user display.
	Message *string `json:"message,omitempty"`

	// Metadata Any additional metadata related to the error.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Suggested A suggested action for the user.
	Suggested *string `json:"suggested,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Bio *string `json:"bio,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccountHandle The unique @ handle of an account.
type AccountHandle string

// AccountName The account owners display name.
type AccountName = string

// AccountsUpdateBody defines model for AccountsUpdateBody.
type AccountsUpdateBody struct {
	Bio *string `json:"bio,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`
}

// AuthOAuthProviderCallbackBody defines model for AuthOAuthProviderCallbackBody.
type AuthOAuthProviderCallbackBody struct {
	Code  string `json:"code"`
	State string `json:"state"`
}

// AuthPasswordBody defines model for AuthPasswordBody.
type AuthPasswordBody struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthProvider defines model for AuthProvider.
type AuthProvider struct {
	// Link The hyperlink to render for the user.
	Link string `json:"link"`

	// LogoUrl The logo to display for the provider.
	LogoUrl string `json:"logo_url"`

	// Name The human-readable name of the provider.
	Name string `json:"name"`

	// Provider The slug name of the provider.
	Provider string `json:"provider"`
}

// AuthProviderListBody defines model for AuthProviderListBody.
type AuthProviderListBody = []AuthProvider

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	PostCount *int        `json:"postCount,omitempty"`
	Sort      *int        `json:"sort,omitempty"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Identifier A unique identifier for this resource.
type Identifier string

// Metadata Arbitrary metadata for the resource.
type Metadata map[string]interface{}

// Post defines model for Post.
type Post struct {
	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostBodyMarkdown The body text of a post within a thread.
type PostBodyMarkdown = string

// PostSubmission A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostSubmission = Post

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Name The account owners display name.
	Name AccountName `json:"name"`
}

// PublicProfile defines model for PublicProfile.
type PublicProfile struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt string  `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Image *string    `json:"image,omitempty"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// Tag A tag which can link profiles or threads via interests.
type Tag struct {
	Colour *string `json:"colour,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Name The name of a tag.
	Name TagName `json:"name"`
}

// TagList A list of tags.
type TagList = []Tag

// TagListIDs A list of tags.
type TagListIDs = []Identifier

// TagName The name of a tag.
type TagName = string

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// PostCount The number of posts under this thread.
	PostCount *int   `json:"post_count,omitempty"`
	Posts     []Post `json:"posts"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadMark A thread's ID and optional slug separated by a dash = it's unique mark.
// This allows endpoints to respond to varying forms of a thread's ID.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
//
//	as the identifier for that thread.
type ThreadMark string

// ThreadReference defines model for ThreadReference.
type ThreadReference struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// PostCount The number of posts under this thread.
	PostCount *int `json:"post_count,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadTitle The title of a thread.
type ThreadTitle = string

// ThreadsCreateBody defines model for ThreadsCreateBody.
type ThreadsCreateBody struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Tags A list of tags.
	Tags TagList `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// AccountsGetSuccess defines model for AccountsGetSuccess.
type AccountsGetSuccess = Account

// AccountsUpdateSuccess defines model for AccountsUpdateSuccess.
type AccountsUpdateSuccess = Account

// AuthProviderList defines model for AuthProviderList.
type AuthProviderList = AuthProviderListBody

// InternalServerError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type InternalServerError = APIError

// PostsCreateSuccess A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostsCreateSuccess = Post

// ProfilesGetSuccess defines model for ProfilesGetSuccess.
type ProfilesGetSuccess = PublicProfile

// ThreadsCreateSuccess defines model for ThreadsCreateSuccess.
type ThreadsCreateSuccess = Thread

// ThreadsGet defines model for ThreadsGet.
type ThreadsGet = Thread

// ThreadsList defines model for ThreadsList.
type ThreadsList = []ThreadReference

// WebAuthnPublicKeyCreationOptions defines model for WebAuthnPublicKeyCreationOptions.
type WebAuthnPublicKeyCreationOptions any

// AccountsUpdate defines model for AccountsUpdate.
type AccountsUpdate = AccountsUpdateBody

// AuthOAuthProviderCallback defines model for AuthOAuthProviderCallback.
type AuthOAuthProviderCallback = AuthOAuthProviderCallbackBody

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthPasswordBody

// PostsCreate A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostsCreate = PostSubmission

// ThreadsCreate defines model for ThreadsCreate.
type ThreadsCreate = ThreadsCreateBody

// WebAuthnMakeCredentialJSONBody defines parameters for WebAuthnMakeCredential.
type WebAuthnMakeCredentialJSONBody = map[string]interface{}

// ThreadsListParams defines parameters for ThreadsList.
type ThreadsListParams struct {
	// Author Show only results creeated by this user.
	Author *AccountHandle `form:"author,omitempty" json:"author,omitempty"`

	// Tags Show only results with these tags
	Tags *TagListIDs `form:"tags,omitempty" json:"tags,omitempty"`
}

// AccountsUpdateJSONRequestBody defines body for AccountsUpdate for application/json ContentType.
type AccountsUpdateJSONRequestBody = AccountsUpdateBody

// AuthOAuthProviderCallbackJSONRequestBody defines body for AuthOAuthProviderCallback for application/json ContentType.
type AuthOAuthProviderCallbackJSONRequestBody = AuthOAuthProviderCallbackBody

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthPasswordBody

// AuthPasswordSigninFormdataRequestBody defines body for AuthPasswordSignin for application/x-www-form-urlencoded ContentType.
type AuthPasswordSigninFormdataRequestBody = AuthPasswordBody

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthPasswordBody

// AuthPasswordSignupFormdataRequestBody defines body for AuthPasswordSignup for application/x-www-form-urlencoded ContentType.
type AuthPasswordSignupFormdataRequestBody = AuthPasswordBody

// WebAuthnMakeAssertionJSONRequestBody defines body for WebAuthnMakeAssertion for application/json ContentType.
type WebAuthnMakeAssertionJSONRequestBody = AuthPasswordBody

// WebAuthnMakeAssertionFormdataRequestBody defines body for WebAuthnMakeAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnMakeAssertionFormdataRequestBody = AuthPasswordBody

// WebAuthnGetAssertionJSONRequestBody defines body for WebAuthnGetAssertion for application/json ContentType.
type WebAuthnGetAssertionJSONRequestBody = AuthPasswordBody

// WebAuthnGetAssertionFormdataRequestBody defines body for WebAuthnGetAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnGetAssertionFormdataRequestBody = AuthPasswordBody

// WebAuthnMakeCredentialJSONRequestBody defines body for WebAuthnMakeCredential for application/json ContentType.
type WebAuthnMakeCredentialJSONRequestBody = WebAuthnMakeCredentialJSONBody

// ThreadsCreateJSONRequestBody defines body for ThreadsCreate for application/json ContentType.
type ThreadsCreateJSONRequestBody = ThreadsCreateBody

// ThreadsCreateFormdataRequestBody defines body for ThreadsCreate for application/x-www-form-urlencoded ContentType.
type ThreadsCreateFormdataRequestBody = ThreadsCreateBody

// PostsCreateJSONRequestBody defines body for PostsCreate for application/json ContentType.
type PostsCreateJSONRequestBody = PostSubmission

// PostsCreateFormdataRequestBody defines body for PostsCreate for application/x-www-form-urlencoded ContentType.
type PostsCreateFormdataRequestBody = PostSubmission

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSpec request
	GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsGet request
	AccountsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsUpdate request with any body
	AccountsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdate(ctx context.Context, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsSetAvatar request with any body
	AccountsSetAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsGetAvatar request
	AccountsGetAvatar(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthProviderList request
	AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthOAuthProviderCallback request with any body
	AuthOAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthOAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body AuthOAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSignin request with any body
	AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSigninWithFormdataBody(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSignup request with any body
	AuthPasswordSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignup(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignupWithFormdataBody(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeAssertion request with any body
	WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeAssertionWithFormdataBody(ctx context.Context, body WebAuthnMakeAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnGetAssertion request with any body
	WebAuthnGetAssertionWithBody(ctx context.Context, accountHandle AccountHandle, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnGetAssertionWithFormdataBody(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeCredential request with any body
	WebAuthnMakeCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeCredential(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnRequestCredential request
	WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesGet request
	ProfilesGet(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadsList request
	ThreadsList(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadsCreate request with any body
	ThreadsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadsCreate(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadsCreateWithFormdataBody(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadsGet request
	ThreadsGet(ctx context.Context, threadMark ThreadMark, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostsCreate request with any body
	PostsCreateWithBody(ctx context.Context, threadMark ThreadMark, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostsCreate(ctx context.Context, threadMark ThreadMark, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostsCreateWithFormdataBody(ctx context.Context, threadMark ThreadMark, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdate(ctx context.Context, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsSetAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsSetAvatarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsGetAvatar(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsGetAvatarRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthProviderListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthOAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthOAuthProviderCallbackRequestWithBody(c.Server, oauthProvider, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthOAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body AuthOAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthOAuthProviderCallbackRequest(c.Server, oauthProvider, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSigninWithFormdataBody(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignup(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignupWithFormdataBody(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertionWithFormdataBody(ctx context.Context, body WebAuthnMakeAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnGetAssertionWithBody(ctx context.Context, accountHandle AccountHandle, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnGetAssertionRequestWithBody(c.Server, accountHandle, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnGetAssertionRequest(c.Server, accountHandle, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnGetAssertionWithFormdataBody(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnGetAssertionRequestWithFormdataBody(c.Server, accountHandle, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredential(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnRequestCredentialRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesGet(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesGetRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsList(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsCreate(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsCreateWithFormdataBody(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadsGet(ctx context.Context, threadMark ThreadMark, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadsGetRequest(c.Server, threadMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostsCreateWithBody(ctx context.Context, threadMark ThreadMark, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostsCreateRequestWithBody(c.Server, threadMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostsCreate(ctx context.Context, threadMark ThreadMark, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostsCreateRequest(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostsCreateWithFormdataBody(ctx context.Context, threadMark ThreadMark, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostsCreateRequestWithFormdataBody(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSpecRequest generates requests for GetSpec
func NewGetSpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsGetRequest generates requests for AccountsGet
func NewAccountsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsUpdateRequest calls the generic AccountsUpdate builder with application/json body
func NewAccountsUpdateRequest(server string, body AccountsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsUpdateRequestWithBody generates requests for AccountsUpdate with any type of body
func NewAccountsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsSetAvatarRequestWithBody generates requests for AccountsSetAvatar with any type of body
func NewAccountsSetAvatarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/self/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsGetAvatarRequest generates requests for AccountsGetAvatar
func NewAccountsGetAvatarRequest(server string, accountHandle AccountHandle) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/avatar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthProviderListRequest generates requests for AuthProviderList
func NewAuthProviderListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthOAuthProviderCallbackRequest calls the generic AuthOAuthProviderCallback builder with application/json body
func NewAuthOAuthProviderCallbackRequest(server string, oauthProvider OAuthProvider, body AuthOAuthProviderCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthOAuthProviderCallbackRequestWithBody(server, oauthProvider, "application/json", bodyReader)
}

// NewAuthOAuthProviderCallbackRequestWithBody generates requests for AuthOAuthProviderCallback with any type of body
func NewAuthOAuthProviderCallbackRequestWithBody(server string, oauthProvider OAuthProvider, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, oauthProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/oauth/%s/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSigninRequest calls the generic AuthPasswordSignin builder with application/json body
func NewAuthPasswordSigninRequest(server string, body AuthPasswordSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordSigninRequestWithFormdataBody calls the generic AuthPasswordSignin builder with application/x-www-form-urlencoded body
func NewAuthPasswordSigninRequestWithFormdataBody(server string, body AuthPasswordSigninFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAuthPasswordSigninRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAuthPasswordSigninRequestWithBody generates requests for AuthPasswordSignin with any type of body
func NewAuthPasswordSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/password/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSignupRequest calls the generic AuthPasswordSignup builder with application/json body
func NewAuthPasswordSignupRequest(server string, body AuthPasswordSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSignupRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordSignupRequestWithFormdataBody calls the generic AuthPasswordSignup builder with application/x-www-form-urlencoded body
func NewAuthPasswordSignupRequestWithFormdataBody(server string, body AuthPasswordSignupFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAuthPasswordSignupRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAuthPasswordSignupRequestWithBody generates requests for AuthPasswordSignup with any type of body
func NewAuthPasswordSignupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/password/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnMakeAssertionRequest calls the generic WebAuthnMakeAssertion builder with application/json body
func NewWebAuthnMakeAssertionRequest(server string, body WebAuthnMakeAssertionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeAssertionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebAuthnMakeAssertionRequestWithFormdataBody calls the generic WebAuthnMakeAssertion builder with application/x-www-form-urlencoded body
func NewWebAuthnMakeAssertionRequestWithFormdataBody(server string, body WebAuthnMakeAssertionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWebAuthnMakeAssertionRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewWebAuthnMakeAssertionRequestWithBody generates requests for WebAuthnMakeAssertion with any type of body
func NewWebAuthnMakeAssertionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/assert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnGetAssertionRequest calls the generic WebAuthnGetAssertion builder with application/json body
func NewWebAuthnGetAssertionRequest(server string, accountHandle AccountHandle, body WebAuthnGetAssertionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnGetAssertionRequestWithBody(server, accountHandle, "application/json", bodyReader)
}

// NewWebAuthnGetAssertionRequestWithFormdataBody calls the generic WebAuthnGetAssertion builder with application/x-www-form-urlencoded body
func NewWebAuthnGetAssertionRequestWithFormdataBody(server string, accountHandle AccountHandle, body WebAuthnGetAssertionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWebAuthnGetAssertionRequestWithBody(server, accountHandle, "application/x-www-form-urlencoded", bodyReader)
}

// NewWebAuthnGetAssertionRequestWithBody generates requests for WebAuthnGetAssertion with any type of body
func NewWebAuthnGetAssertionRequestWithBody(server string, accountHandle AccountHandle, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/assert/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnMakeCredentialRequest calls the generic WebAuthnMakeCredential builder with application/json body
func NewWebAuthnMakeCredentialRequest(server string, body WebAuthnMakeCredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeCredentialRequestWithBody(server, "application/json", bodyReader)
}

// NewWebAuthnMakeCredentialRequestWithBody generates requests for WebAuthnMakeCredential with any type of body
func NewWebAuthnMakeCredentialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/make")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnRequestCredentialRequest generates requests for WebAuthnRequestCredential
func NewWebAuthnRequestCredentialRequest(server string, accountHandle AccountHandle) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/webauthn/make/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesGetRequest generates requests for ProfilesGet
func NewProfilesGetRequest(server string, accountHandle AccountHandle) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadsListRequest generates requests for ThreadsList
func NewThreadsListRequest(server string, params *ThreadsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Author != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadsCreateRequest calls the generic ThreadsCreate builder with application/json body
func NewThreadsCreateRequest(server string, body ThreadsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreadsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewThreadsCreateRequestWithFormdataBody calls the generic ThreadsCreate builder with application/x-www-form-urlencoded body
func NewThreadsCreateRequestWithFormdataBody(server string, body ThreadsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewThreadsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewThreadsCreateRequestWithBody generates requests for ThreadsCreate with any type of body
func NewThreadsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThreadsGetRequest generates requests for ThreadsGet
func NewThreadsGetRequest(server string, threadMark ThreadMark) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostsCreateRequest calls the generic PostsCreate builder with application/json body
func NewPostsCreateRequest(server string, threadMark ThreadMark, body PostsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostsCreateRequestWithBody(server, threadMark, "application/json", bodyReader)
}

// NewPostsCreateRequestWithFormdataBody calls the generic PostsCreate builder with application/x-www-form-urlencoded body
func NewPostsCreateRequestWithFormdataBody(server string, threadMark ThreadMark, body PostsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostsCreateRequestWithBody(server, threadMark, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostsCreateRequestWithBody generates requests for PostsCreate with any type of body
func NewPostsCreateRequestWithBody(server string, threadMark ThreadMark, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/threads/%s/posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSpec request
	GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error)

	// AccountsGet request
	AccountsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsGetResponse, error)

	// AccountsUpdate request with any body
	AccountsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error)

	AccountsUpdateWithResponse(ctx context.Context, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error)

	// AccountsSetAvatar request with any body
	AccountsSetAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsSetAvatarResponse, error)

	// AccountsGetAvatar request
	AccountsGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*AccountsGetAvatarResponse, error)

	// AuthProviderList request
	AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error)

	// AuthOAuthProviderCallback request with any body
	AuthOAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthOAuthProviderCallbackResponse, error)

	AuthOAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body AuthOAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthOAuthProviderCallbackResponse, error)

	// AuthPasswordSignin request with any body
	AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	AuthPasswordSigninWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	// AuthPasswordSignup request with any body
	AuthPasswordSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	AuthPasswordSignupWithResponse(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	AuthPasswordSignupWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	// WebAuthnMakeAssertion request with any body
	WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	WebAuthnMakeAssertionWithFormdataBodyWithResponse(ctx context.Context, body WebAuthnMakeAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	// WebAuthnGetAssertion request with any body
	WebAuthnGetAssertionWithBodyWithResponse(ctx context.Context, accountHandle AccountHandle, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error)

	WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error)

	WebAuthnGetAssertionWithFormdataBodyWithResponse(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error)

	// WebAuthnMakeCredential request with any body
	WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	WebAuthnMakeCredentialWithResponse(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	// WebAuthnRequestCredential request
	WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error)

	// ProfilesGet request
	ProfilesGetWithResponse(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*ProfilesGetResponse, error)

	// ThreadsList request
	ThreadsListWithResponse(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*ThreadsListResponse, error)

	// ThreadsCreate request with any body
	ThreadsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error)

	ThreadsCreateWithResponse(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error)

	ThreadsCreateWithFormdataBodyWithResponse(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error)

	// ThreadsGet request
	ThreadsGetWithResponse(ctx context.Context, threadMark ThreadMark, reqEditors ...RequestEditorFn) (*ThreadsGetResponse, error)

	// PostsCreate request with any body
	PostsCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMark, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error)

	PostsCreateWithResponse(ctx context.Context, threadMark ThreadMark, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error)

	PostsCreateWithFormdataBodyWithResponse(ctx context.Context, threadMark ThreadMark, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsSetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountsSetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsSetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsGetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AccountsGetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsGetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthProviderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthProviderListBody
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthProviderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthOAuthProviderCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthOAuthProviderCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthOAuthProviderCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnGetAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnGetAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnGetAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccess
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnRequestCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *any
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r WebAuthnRequestCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnRequestCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicProfile
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ProfilesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ThreadReference
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r ThreadsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Post
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSpecWithResponse request returning *GetSpecResponse
func (c *ClientWithResponses) GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error) {
	rsp, err := c.GetSpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpecResponse(rsp)
}

// AccountsGetWithResponse request returning *AccountsGetResponse
func (c *ClientWithResponses) AccountsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsGetResponse, error) {
	rsp, err := c.AccountsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsGetResponse(rsp)
}

// AccountsUpdateWithBodyWithResponse request with arbitrary body returning *AccountsUpdateResponse
func (c *ClientWithResponses) AccountsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error) {
	rsp, err := c.AccountsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountsUpdateWithResponse(ctx context.Context, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error) {
	rsp, err := c.AccountsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateResponse(rsp)
}

// AccountsSetAvatarWithBodyWithResponse request with arbitrary body returning *AccountsSetAvatarResponse
func (c *ClientWithResponses) AccountsSetAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsSetAvatarResponse, error) {
	rsp, err := c.AccountsSetAvatarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsSetAvatarResponse(rsp)
}

// AccountsGetAvatarWithResponse request returning *AccountsGetAvatarResponse
func (c *ClientWithResponses) AccountsGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*AccountsGetAvatarResponse, error) {
	rsp, err := c.AccountsGetAvatar(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsGetAvatarResponse(rsp)
}

// AuthProviderListWithResponse request returning *AuthProviderListResponse
func (c *ClientWithResponses) AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error) {
	rsp, err := c.AuthProviderList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthProviderListResponse(rsp)
}

// AuthOAuthProviderCallbackWithBodyWithResponse request with arbitrary body returning *AuthOAuthProviderCallbackResponse
func (c *ClientWithResponses) AuthOAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthOAuthProviderCallbackResponse, error) {
	rsp, err := c.AuthOAuthProviderCallbackWithBody(ctx, oauthProvider, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthOAuthProviderCallbackResponse(rsp)
}

func (c *ClientWithResponses) AuthOAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body AuthOAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthOAuthProviderCallbackResponse, error) {
	rsp, err := c.AuthOAuthProviderCallback(ctx, oauthProvider, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthOAuthProviderCallbackResponse(rsp)
}

// AuthPasswordSigninWithBodyWithResponse request with arbitrary body returning *AuthPasswordSigninResponse
func (c *ClientWithResponses) AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSigninWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSigninFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSigninWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

// AuthPasswordSignupWithBodyWithResponse request with arbitrary body returning *AuthPasswordSignupResponse
func (c *ClientWithResponses) AuthPasswordSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSignupWithResponse(ctx context.Context, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSignupWithFormdataBodyWithResponse(ctx context.Context, body AuthPasswordSignupFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignupWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

// WebAuthnMakeAssertionWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeAssertionResponse
func (c *ClientWithResponses) WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeAssertionWithFormdataBodyWithResponse(ctx context.Context, body WebAuthnMakeAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertionWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

// WebAuthnGetAssertionWithBodyWithResponse request with arbitrary body returning *WebAuthnGetAssertionResponse
func (c *ClientWithResponses) WebAuthnGetAssertionWithBodyWithResponse(ctx context.Context, accountHandle AccountHandle, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error) {
	rsp, err := c.WebAuthnGetAssertionWithBody(ctx, accountHandle, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnGetAssertionResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error) {
	rsp, err := c.WebAuthnGetAssertion(ctx, accountHandle, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnGetAssertionResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnGetAssertionWithFormdataBodyWithResponse(ctx context.Context, accountHandle AccountHandle, body WebAuthnGetAssertionFormdataRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error) {
	rsp, err := c.WebAuthnGetAssertionWithFormdataBody(ctx, accountHandle, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnGetAssertionResponse(rsp)
}

// WebAuthnMakeCredentialWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeCredentialResponse
func (c *ClientWithResponses) WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredentialWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeCredentialWithResponse(ctx context.Context, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredential(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

// WebAuthnRequestCredentialWithResponse request returning *WebAuthnRequestCredentialResponse
func (c *ClientWithResponses) WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error) {
	rsp, err := c.WebAuthnRequestCredential(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnRequestCredentialResponse(rsp)
}

// ProfilesGetWithResponse request returning *ProfilesGetResponse
func (c *ClientWithResponses) ProfilesGetWithResponse(ctx context.Context, accountHandle AccountHandle, reqEditors ...RequestEditorFn) (*ProfilesGetResponse, error) {
	rsp, err := c.ProfilesGet(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesGetResponse(rsp)
}

// ThreadsListWithResponse request returning *ThreadsListResponse
func (c *ClientWithResponses) ThreadsListWithResponse(ctx context.Context, params *ThreadsListParams, reqEditors ...RequestEditorFn) (*ThreadsListResponse, error) {
	rsp, err := c.ThreadsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsListResponse(rsp)
}

// ThreadsCreateWithBodyWithResponse request with arbitrary body returning *ThreadsCreateResponse
func (c *ClientWithResponses) ThreadsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error) {
	rsp, err := c.ThreadsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsCreateResponse(rsp)
}

func (c *ClientWithResponses) ThreadsCreateWithResponse(ctx context.Context, body ThreadsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error) {
	rsp, err := c.ThreadsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsCreateResponse(rsp)
}

func (c *ClientWithResponses) ThreadsCreateWithFormdataBodyWithResponse(ctx context.Context, body ThreadsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ThreadsCreateResponse, error) {
	rsp, err := c.ThreadsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsCreateResponse(rsp)
}

// ThreadsGetWithResponse request returning *ThreadsGetResponse
func (c *ClientWithResponses) ThreadsGetWithResponse(ctx context.Context, threadMark ThreadMark, reqEditors ...RequestEditorFn) (*ThreadsGetResponse, error) {
	rsp, err := c.ThreadsGet(ctx, threadMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadsGetResponse(rsp)
}

// PostsCreateWithBodyWithResponse request with arbitrary body returning *PostsCreateResponse
func (c *ClientWithResponses) PostsCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMark, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error) {
	rsp, err := c.PostsCreateWithBody(ctx, threadMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostsCreateWithResponse(ctx context.Context, threadMark ThreadMark, body PostsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error) {
	rsp, err := c.PostsCreate(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostsCreateWithFormdataBodyWithResponse(ctx context.Context, threadMark ThreadMark, body PostsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostsCreateResponse, error) {
	rsp, err := c.PostsCreateWithFormdataBody(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostsCreateResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetSpecResponse parses an HTTP response from a GetSpecWithResponse call
func ParseGetSpecResponse(rsp *http.Response) (*GetSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountsGetResponse parses an HTTP response from a AccountsGetWithResponse call
func ParseAccountsGetResponse(rsp *http.Response) (*AccountsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountsUpdateResponse parses an HTTP response from a AccountsUpdateWithResponse call
func ParseAccountsUpdateResponse(rsp *http.Response) (*AccountsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountsSetAvatarResponse parses an HTTP response from a AccountsSetAvatarWithResponse call
func ParseAccountsSetAvatarResponse(rsp *http.Response) (*AccountsSetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsSetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountsGetAvatarResponse parses an HTTP response from a AccountsGetAvatarWithResponse call
func ParseAccountsGetAvatarResponse(rsp *http.Response) (*AccountsGetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsGetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthProviderListResponse parses an HTTP response from a AuthProviderListWithResponse call
func ParseAuthProviderListResponse(rsp *http.Response) (*AuthProviderListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthProviderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthProviderListBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthOAuthProviderCallbackResponse parses an HTTP response from a AuthOAuthProviderCallbackWithResponse call
func ParseAuthOAuthProviderCallbackResponse(rsp *http.Response) (*AuthOAuthProviderCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthOAuthProviderCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSigninResponse parses an HTTP response from a AuthPasswordSigninWithResponse call
func ParseAuthPasswordSigninResponse(rsp *http.Response) (*AuthPasswordSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSignupResponse parses an HTTP response from a AuthPasswordSignupWithResponse call
func ParseAuthPasswordSignupResponse(rsp *http.Response) (*AuthPasswordSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeAssertionResponse parses an HTTP response from a WebAuthnMakeAssertionWithResponse call
func ParseWebAuthnMakeAssertionResponse(rsp *http.Response) (*WebAuthnMakeAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnGetAssertionResponse parses an HTTP response from a WebAuthnGetAssertionWithResponse call
func ParseWebAuthnGetAssertionResponse(rsp *http.Response) (*WebAuthnGetAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnGetAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeCredentialResponse parses an HTTP response from a WebAuthnMakeCredentialWithResponse call
func ParseWebAuthnMakeCredentialResponse(rsp *http.Response) (*WebAuthnMakeCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnRequestCredentialResponse parses an HTTP response from a WebAuthnRequestCredentialWithResponse call
func ParseWebAuthnRequestCredentialResponse(rsp *http.Response) (*WebAuthnRequestCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnRequestCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest any
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfilesGetResponse parses an HTTP response from a ProfilesGetWithResponse call
func ParseProfilesGetResponse(rsp *http.Response) (*ProfilesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadsListResponse parses an HTTP response from a ThreadsListWithResponse call
func ParseThreadsListResponse(rsp *http.Response) (*ThreadsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ThreadReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadsCreateResponse parses an HTTP response from a ThreadsCreateWithResponse call
func ParseThreadsCreateResponse(rsp *http.Response) (*ThreadsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadsGetResponse parses an HTTP response from a ThreadsGetWithResponse call
func ParseThreadsGetResponse(rsp *http.Response) (*ThreadsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostsCreateResponse parses an HTTP response from a PostsCreateWithResponse call
func ParsePostsCreateResponse(rsp *http.Response) (*PostsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Post
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error

	// (GET /v1/accounts)
	AccountsGet(ctx echo.Context) error

	// (PATCH /v1/accounts)
	AccountsUpdate(ctx echo.Context) error

	// (POST /v1/accounts/self/avatar)
	AccountsSetAvatar(ctx echo.Context) error

	// (GET /v1/accounts/{account_handle}/avatar)
	AccountsGetAvatar(ctx echo.Context, accountHandle AccountHandle) error

	// (GET /v1/auth)
	AuthProviderList(ctx echo.Context) error

	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	AuthOAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error

	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx echo.Context) error

	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error

	// (POST /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx echo.Context) error

	// (GET /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error

	// (GET /v1/profiles/{account_handle})
	ProfilesGet(ctx echo.Context, accountHandle AccountHandle) error

	// (GET /v1/threads)
	ThreadsList(ctx echo.Context, params ThreadsListParams) error

	// (POST /v1/threads)
	ThreadsCreate(ctx echo.Context) error
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_mark})
	ThreadsGet(ctx echo.Context, threadMark ThreadMark) error

	// (POST /v1/threads/{thread_mark}/posts)
	PostsCreate(ctx echo.Context, threadMark ThreadMark) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountsGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGet(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGet(ctx)
	return err
}

// AccountsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsUpdate(ctx)
	return err
}

// AccountsSetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsSetAvatar(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsSetAvatar(ctx)
	return err
}

// AccountsGetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGetAvatar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGetAvatar(ctx, accountHandle)
	return err
}

// AuthProviderList converts echo context to params.
func (w *ServerInterfaceWrapper) AuthProviderList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthProviderList(ctx)
	return err
}

// AuthOAuthProviderCallback converts echo context to params.
func (w *ServerInterfaceWrapper) AuthOAuthProviderCallback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "oauth_provider" -------------
	var oauthProvider OAuthProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, ctx.Param("oauth_provider"), &oauthProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter oauth_provider: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthOAuthProviderCallback(ctx, oauthProvider)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// WebAuthnMakeAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeAssertion(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeAssertion(ctx)
	return err
}

// WebAuthnGetAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnGetAssertion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnGetAssertion(ctx, accountHandle)
	return err
}

// WebAuthnMakeCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeCredential(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeCredential(ctx)
	return err
}

// WebAuthnRequestCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnRequestCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnRequestCredential(ctx, accountHandle)
	return err
}

// ProfilesGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfilesGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfilesGet(ctx, accountHandle)
	return err
}

// ThreadsList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ThreadsListParams
	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsList(ctx, params)
	return err
}

// ThreadsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsCreate(ctx)
	return err
}

// ThreadsGet converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMark

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsGet(ctx, threadMark)
	return err
}

// PostsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMark

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, ctx.Param("thread_mark"), &threadMark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostsCreate(ctx, threadMark)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts", wrapper.AccountsGet)
	router.PATCH(baseURL+"/v1/accounts", wrapper.AccountsUpdate)
	router.POST(baseURL+"/v1/accounts/self/avatar", wrapper.AccountsSetAvatar)
	router.GET(baseURL+"/v1/accounts/:account_handle/avatar", wrapper.AccountsGetAvatar)
	router.GET(baseURL+"/v1/auth", wrapper.AuthProviderList)
	router.POST(baseURL+"/v1/auth/oauth/:oauth_provider/callback", wrapper.AuthOAuthProviderCallback)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.GET(baseURL+"/v1/auth/webauthn/assert", wrapper.WebAuthnMakeAssertion)
	router.POST(baseURL+"/v1/auth/webauthn/assert/:account_handle", wrapper.WebAuthnGetAssertion)
	router.POST(baseURL+"/v1/auth/webauthn/make", wrapper.WebAuthnMakeCredential)
	router.GET(baseURL+"/v1/auth/webauthn/make/:account_handle", wrapper.WebAuthnRequestCredential)
	router.GET(baseURL+"/v1/profiles/:account_handle", wrapper.ProfilesGet)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadsList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadsCreate)
	router.GET(baseURL+"/v1/threads/:thread_mark", wrapper.ThreadsGet)
	router.POST(baseURL+"/v1/threads/:thread_mark/posts", wrapper.PostsCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountsGetAvatarImagepngResponse struct {
	Body io.Reader

	ContentLength int64
}

type AccountsGetSuccessJSONResponse Account

type AccountsUpdateSuccessJSONResponse Account

type AuthProviderListJSONResponse AuthProviderListBody

type AuthSuccessResponseHeaders struct {
	SetCookie string
}
type AuthSuccessJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessResponseHeaders
}

type BadRequestResponse struct {
}

type InternalServerErrorJSONResponse APIError

type NotFoundResponse struct {
}

type PostsCreateSuccessJSONResponse Post

type ProfilesGetSuccessJSONResponse PublicProfile

type ThreadsCreateSuccessJSONResponse Thread

type ThreadsGetJSONResponse Thread

type ThreadsListJSONResponse []ThreadReference

type UnauthorisedResponse struct {
}

type WebAuthnPublicKeyCreationOptionsResponseHeaders struct {
	SetCookie string
}
type WebAuthnPublicKeyCreationOptionsJSONResponse struct {
	Body any

	Headers WebAuthnPublicKeyCreationOptionsResponseHeaders
}

type GetSpecRequestObject struct {
}

type GetSpecResponseObject interface {
	VisitGetSpecResponse(w http.ResponseWriter) error
}

type GetSpec200TextResponse string

func (response GetSpec200TextResponse) VisitGetSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AccountsGetRequestObject struct {
}

type AccountsGetResponseObject interface {
	VisitAccountsGetResponse(w http.ResponseWriter) error
}

type AccountsGet200JSONResponse = AccountsGetSuccessJSONResponse

func (response AccountsGet200JSONResponse) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsGet401Response = UnauthorisedResponse

func (response AccountsGet401Response) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsGet404Response = NotFoundResponse

func (response AccountsGet404Response) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsGetdefaultJSONResponse) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountsUpdateRequestObject struct {
	Body *AccountsUpdateJSONRequestBody
}

type AccountsUpdateResponseObject interface {
	VisitAccountsUpdateResponse(w http.ResponseWriter) error
}

type AccountsUpdate200JSONResponse = AccountsUpdateSuccessJSONResponse

func (response AccountsUpdate200JSONResponse) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsUpdate401Response = UnauthorisedResponse

func (response AccountsUpdate401Response) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsUpdate404Response = NotFoundResponse

func (response AccountsUpdate404Response) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsUpdatedefaultJSONResponse) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountsSetAvatarRequestObject struct {
	Body io.Reader
}

type AccountsSetAvatarResponseObject interface {
	VisitAccountsSetAvatarResponse(w http.ResponseWriter) error
}

type AccountsSetAvatar200Response struct {
}

func (response AccountsSetAvatar200Response) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AccountsSetAvatar401Response = UnauthorisedResponse

func (response AccountsSetAvatar401Response) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsSetAvatar404Response = NotFoundResponse

func (response AccountsSetAvatar404Response) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsSetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsSetAvatardefaultJSONResponse) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountsGetAvatarRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type AccountsGetAvatarResponseObject interface {
	VisitAccountsGetAvatarResponse(w http.ResponseWriter) error
}

type AccountsGetAvatar200ImagepngResponse = AccountsGetAvatarImagepngResponse

func (response AccountsGetAvatar200ImagepngResponse) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AccountsGetAvatar401Response = UnauthorisedResponse

func (response AccountsGetAvatar401Response) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsGetAvatar404Response = NotFoundResponse

func (response AccountsGetAvatar404Response) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsGetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsGetAvatardefaultJSONResponse) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthProviderListRequestObject struct {
}

type AuthProviderListResponseObject interface {
	VisitAuthProviderListResponse(w http.ResponseWriter) error
}

type AuthProviderList200JSONResponse = AuthProviderListJSONResponse

func (response AuthProviderList200JSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthProviderList400Response = BadRequestResponse

func (response AuthProviderList400Response) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthProviderListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthProviderListdefaultJSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthOAuthProviderCallbackRequestObject struct {
	OauthProvider OAuthProvider `json:"oauth_provider"`
	Body          *AuthOAuthProviderCallbackJSONRequestBody
}

type AuthOAuthProviderCallbackResponseObject interface {
	VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error
}

type AuthOAuthProviderCallback200JSONResponse = AuthSuccessJSONResponse

func (response AuthOAuthProviderCallback200JSONResponse) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthOAuthProviderCallback401Response = UnauthorisedResponse

func (response AuthOAuthProviderCallback401Response) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthOAuthProviderCallback404Response = NotFoundResponse

func (response AuthOAuthProviderCallback404Response) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthOAuthProviderCallbackdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthOAuthProviderCallbackdefaultJSONResponse) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSigninRequestObject struct {
	JSONBody     *AuthPasswordSigninJSONRequestBody
	FormdataBody *AuthPasswordSigninFormdataRequestBody
}

type AuthPasswordSigninResponseObject interface {
	VisitAuthPasswordSigninResponse(w http.ResponseWriter) error
}

type AuthPasswordSignin200JSONResponse = AuthSuccessJSONResponse

func (response AuthPasswordSignin200JSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignin401Response = UnauthorisedResponse

func (response AuthPasswordSignin401Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordSignin404Response = NotFoundResponse

func (response AuthPasswordSignin404Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignindefaultJSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignupRequestObject struct {
	JSONBody     *AuthPasswordSignupJSONRequestBody
	FormdataBody *AuthPasswordSignupFormdataRequestBody
}

type AuthPasswordSignupResponseObject interface {
	VisitAuthPasswordSignupResponse(w http.ResponseWriter) error
}

type AuthPasswordSignup200JSONResponse = AuthSuccessJSONResponse

func (response AuthPasswordSignup200JSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignup400Response = BadRequestResponse

func (response AuthPasswordSignup400Response) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignupdefaultJSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertionRequestObject struct {
	JSONBody     *WebAuthnMakeAssertionJSONRequestBody
	FormdataBody *WebAuthnMakeAssertionFormdataRequestBody
}

type WebAuthnMakeAssertionResponseObject interface {
	VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnMakeAssertion200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnMakeAssertion200JSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertion401Response = UnauthorisedResponse

func (response WebAuthnMakeAssertion401Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnMakeAssertion404Response = NotFoundResponse

func (response WebAuthnMakeAssertion404Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnMakeAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeAssertiondefaultJSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertionRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
	JSONBody      *WebAuthnGetAssertionJSONRequestBody
	FormdataBody  *WebAuthnGetAssertionFormdataRequestBody
}

type WebAuthnGetAssertionResponseObject interface {
	VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnGetAssertion200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnGetAssertion200JSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertion401Response = UnauthorisedResponse

func (response WebAuthnGetAssertion401Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnGetAssertion404Response = NotFoundResponse

func (response WebAuthnGetAssertion404Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnGetAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnGetAssertiondefaultJSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredentialRequestObject struct {
	Body *WebAuthnMakeCredentialJSONRequestBody
}

type WebAuthnMakeCredentialResponseObject interface {
	VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnMakeCredential200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnMakeCredential200JSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredential400Response = BadRequestResponse

func (response WebAuthnMakeCredential400Response) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnMakeCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeCredentialdefaultJSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredentialRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type WebAuthnRequestCredentialResponseObject interface {
	VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnRequestCredential200JSONResponse = WebAuthnPublicKeyCreationOptionsJSONResponse

func (response WebAuthnRequestCredential200JSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredential400Response = BadRequestResponse

func (response WebAuthnRequestCredential400Response) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnRequestCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnRequestCredentialdefaultJSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfilesGetRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type ProfilesGetResponseObject interface {
	VisitProfilesGetResponse(w http.ResponseWriter) error
}

type ProfilesGet200JSONResponse = ProfilesGetSuccessJSONResponse

func (response ProfilesGet200JSONResponse) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfilesGet401Response = UnauthorisedResponse

func (response ProfilesGet401Response) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfilesGet404Response = NotFoundResponse

func (response ProfilesGet404Response) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfilesGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfilesGetdefaultJSONResponse) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsListRequestObject struct {
	Params ThreadsListParams
}

type ThreadsListResponseObject interface {
	VisitThreadsListResponse(w http.ResponseWriter) error
}

type ThreadsList200JSONResponse = ThreadsListJSONResponse

func (response ThreadsList200JSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsList401Response = UnauthorisedResponse

func (response ThreadsList401Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsList404Response = NotFoundResponse

func (response ThreadsList404Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsListdefaultJSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsCreateRequestObject struct {
	JSONBody     *ThreadsCreateJSONRequestBody
	FormdataBody *ThreadsCreateFormdataRequestBody
}

type ThreadsCreateResponseObject interface {
	VisitThreadsCreateResponse(w http.ResponseWriter) error
}

type ThreadsCreate200JSONResponse = ThreadsCreateSuccessJSONResponse

func (response ThreadsCreate200JSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsCreate401Response = UnauthorisedResponse

func (response ThreadsCreate401Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsCreate404Response = NotFoundResponse

func (response ThreadsCreate404Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsCreatedefaultJSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsGetRequestObject struct {
	ThreadMark ThreadMark `json:"thread_mark"`
}

type ThreadsGetResponseObject interface {
	VisitThreadsGetResponse(w http.ResponseWriter) error
}

type ThreadsGet200JSONResponse = ThreadsGetJSONResponse

func (response ThreadsGet200JSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsGet401Response = UnauthorisedResponse

func (response ThreadsGet401Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsGet404Response = NotFoundResponse

func (response ThreadsGet404Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsGetdefaultJSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostsCreateRequestObject struct {
	ThreadMark   ThreadMark `json:"thread_mark"`
	JSONBody     *PostsCreateJSONRequestBody
	FormdataBody *PostsCreateFormdataRequestBody
}

type PostsCreateResponseObject interface {
	VisitPostsCreateResponse(w http.ResponseWriter) error
}

type PostsCreate200JSONResponse = PostsCreateSuccessJSONResponse

func (response PostsCreate200JSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostsCreate401Response = UnauthorisedResponse

func (response PostsCreate401Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostsCreate404Response = NotFoundResponse

func (response PostsCreate404Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostsCreatedefaultJSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200TextResponse string

func (response GetVersion200TextResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) (GetSpecResponseObject, error)

	// (GET /v1/accounts)
	AccountsGet(ctx context.Context, request AccountsGetRequestObject) (AccountsGetResponseObject, error)

	// (PATCH /v1/accounts)
	AccountsUpdate(ctx context.Context, request AccountsUpdateRequestObject) (AccountsUpdateResponseObject, error)

	// (POST /v1/accounts/self/avatar)
	AccountsSetAvatar(ctx context.Context, request AccountsSetAvatarRequestObject) (AccountsSetAvatarResponseObject, error)

	// (GET /v1/accounts/{account_handle}/avatar)
	AccountsGetAvatar(ctx context.Context, request AccountsGetAvatarRequestObject) (AccountsGetAvatarResponseObject, error)

	// (GET /v1/auth)
	AuthProviderList(ctx context.Context, request AuthProviderListRequestObject) (AuthProviderListResponseObject, error)

	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	AuthOAuthProviderCallback(ctx context.Context, request AuthOAuthProviderCallbackRequestObject) (AuthOAuthProviderCallbackResponseObject, error)

	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) (AuthPasswordSigninResponseObject, error)

	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) (AuthPasswordSignupResponseObject, error)

	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx context.Context, request WebAuthnMakeAssertionRequestObject) (WebAuthnMakeAssertionResponseObject, error)

	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx context.Context, request WebAuthnGetAssertionRequestObject) (WebAuthnGetAssertionResponseObject, error)

	// (POST /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx context.Context, request WebAuthnMakeCredentialRequestObject) (WebAuthnMakeCredentialResponseObject, error)

	// (GET /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx context.Context, request WebAuthnRequestCredentialRequestObject) (WebAuthnRequestCredentialResponseObject, error)

	// (GET /v1/profiles/{account_handle})
	ProfilesGet(ctx context.Context, request ProfilesGetRequestObject) (ProfilesGetResponseObject, error)

	// (GET /v1/threads)
	ThreadsList(ctx context.Context, request ThreadsListRequestObject) (ThreadsListResponseObject, error)

	// (POST /v1/threads)
	ThreadsCreate(ctx context.Context, request ThreadsCreateRequestObject) (ThreadsCreateResponseObject, error)
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_mark})
	ThreadsGet(ctx context.Context, request ThreadsGetRequestObject) (ThreadsGetResponseObject, error)

	// (POST /v1/threads/{thread_mark}/posts)
	PostsCreate(ctx context.Context, request PostsCreateRequestObject) (PostsCreateResponseObject, error)
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSpecResponseObject); ok {
		return validResponse.VisitGetSpecResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsGet operation middleware
func (sh *strictHandler) AccountsGet(ctx echo.Context) error {
	var request AccountsGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsGet(ctx.Request().Context(), request.(AccountsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsGetResponseObject); ok {
		return validResponse.VisitAccountsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsUpdate operation middleware
func (sh *strictHandler) AccountsUpdate(ctx echo.Context) error {
	var request AccountsUpdateRequestObject

	var body AccountsUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsUpdate(ctx.Request().Context(), request.(AccountsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsUpdateResponseObject); ok {
		return validResponse.VisitAccountsUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsSetAvatar operation middleware
func (sh *strictHandler) AccountsSetAvatar(ctx echo.Context) error {
	var request AccountsSetAvatarRequestObject

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsSetAvatar(ctx.Request().Context(), request.(AccountsSetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsSetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsSetAvatarResponseObject); ok {
		return validResponse.VisitAccountsSetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsGetAvatar operation middleware
func (sh *strictHandler) AccountsGetAvatar(ctx echo.Context, accountHandle AccountHandle) error {
	var request AccountsGetAvatarRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsGetAvatar(ctx.Request().Context(), request.(AccountsGetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsGetAvatarResponseObject); ok {
		return validResponse.VisitAccountsGetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthProviderList operation middleware
func (sh *strictHandler) AuthProviderList(ctx echo.Context) error {
	var request AuthProviderListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthProviderList(ctx.Request().Context(), request.(AuthProviderListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthProviderList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthProviderListResponseObject); ok {
		return validResponse.VisitAuthProviderListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthOAuthProviderCallback operation middleware
func (sh *strictHandler) AuthOAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error {
	var request AuthOAuthProviderCallbackRequestObject

	request.OauthProvider = oauthProvider

	var body AuthOAuthProviderCallbackJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthOAuthProviderCallback(ctx.Request().Context(), request.(AuthOAuthProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthOAuthProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthOAuthProviderCallbackResponseObject); ok {
		return validResponse.VisitAuthOAuthProviderCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSigninResponseObject); ok {
		return validResponse.VisitAuthPasswordSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSignupResponseObject); ok {
		return validResponse.VisitAuthPasswordSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeAssertion operation middleware
func (sh *strictHandler) WebAuthnMakeAssertion(ctx echo.Context) error {
	var request WebAuthnMakeAssertionRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnMakeAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnMakeAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeAssertion(ctx.Request().Context(), request.(WebAuthnMakeAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnMakeAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnGetAssertion operation middleware
func (sh *strictHandler) WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnGetAssertionRequestObject

	request.AccountHandle = accountHandle
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnGetAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnGetAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnGetAssertion(ctx.Request().Context(), request.(WebAuthnGetAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnGetAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnGetAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnGetAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeCredential operation middleware
func (sh *strictHandler) WebAuthnMakeCredential(ctx echo.Context) error {
	var request WebAuthnMakeCredentialRequestObject

	var body WebAuthnMakeCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeCredential(ctx.Request().Context(), request.(WebAuthnMakeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnMakeCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnRequestCredential operation middleware
func (sh *strictHandler) WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnRequestCredentialRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnRequestCredential(ctx.Request().Context(), request.(WebAuthnRequestCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnRequestCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnRequestCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnRequestCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ProfilesGet operation middleware
func (sh *strictHandler) ProfilesGet(ctx echo.Context, accountHandle AccountHandle) error {
	var request ProfilesGetRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfilesGet(ctx.Request().Context(), request.(ProfilesGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfilesGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfilesGetResponseObject); ok {
		return validResponse.VisitProfilesGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsList operation middleware
func (sh *strictHandler) ThreadsList(ctx echo.Context, params ThreadsListParams) error {
	var request ThreadsListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsList(ctx.Request().Context(), request.(ThreadsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsListResponseObject); ok {
		return validResponse.VisitThreadsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsCreate operation middleware
func (sh *strictHandler) ThreadsCreate(ctx echo.Context) error {
	var request ThreadsCreateRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ThreadsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body ThreadsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsCreate(ctx.Request().Context(), request.(ThreadsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsCreateResponseObject); ok {
		return validResponse.VisitThreadsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsGet operation middleware
func (sh *strictHandler) ThreadsGet(ctx echo.Context, threadMark ThreadMark) error {
	var request ThreadsGetRequestObject

	request.ThreadMark = threadMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsGet(ctx.Request().Context(), request.(ThreadsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsGetResponseObject); ok {
		return validResponse.VisitThreadsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostsCreate operation middleware
func (sh *strictHandler) PostsCreate(ctx echo.Context, threadMark ThreadMark) error {
	var request PostsCreateRequestObject

	request.ThreadMark = threadMark
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body PostsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body PostsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostsCreate(ctx.Request().Context(), request.(PostsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostsCreateResponseObject); ok {
		return validResponse.VisitPostsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		return validResponse.VisitGetVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w8XXMbN5J/BTd7Va7aGpJ2NrkHVV3VyvbF0WUdqyz59sFUWeBMk4MIA0wAjCieiv99",
	"C18zGA6GX6KdaCtPiTVAd6O/u9HgY5LxsuIMmJLJ2WNSYYFLUCDMv86zjNdM/YRZTkH/IQeZCVIpwlly",
	"5j+jwnwfJ2kCD7is9NJE8loVGcVLmaQJ0asrrIokTRgu9Xds936xe5M0EfBbTQTkyZkSNaSJzAoosUaq",
	"VpWBqARhi2S9TpMP57UqLgW/JzmIPl3XBSCSA1NkTkCgORcIM2Q2fYcqtw3JOisQlmiaqCVRCsQ06R7B",
	"/TlOP8e1Kr54YAfSf10IwPl7LO5ixOtvqGbktxoQZjmqQJRYSyg41DhOlTKbv5Qa8jaS/lPAPDlL/jJp",
	"pT+xX+UkIG6tidVQQKrXPCcQaoW8AnV+jxU2Esg4U8CU/l9cVZRkWJ9nwjMFaiSVAFzqby0Jcy5KrJKz",
	"ZEYYFqsk7fFJI/e4PlU5VrAF0a9Sc+9xzzN2wb7m+crjq1XR0a43mNIZzu5Oh3oIwwYVl1jKJRf5SRF7",
	"oA5X2gH3MFoulyMtl1EtKLCM55A/Cb7GcMmlkm8EnFJ8GuZVPSuJlNpoTnyQHvR1umGj9jgIo4pLhZZE",
	"FYQhjKz1jZPGwk997g7UryHDGALnBGTFmew6gHcDDoCUeAGTii0OtvhNRn/4OQmcwDtQV3WWgZSndgS7",
	"cVtP8e3RB47iH0Sq03qDALAX9jAZJz97ADOOOE0KwLnLRa5Ajd5wfkegiyIWNV7j/KONWv34+hrnyIU0",
	"fbILpkAwTK9A3IP4HyG4ON0JLy8swMjxPF5kESO3ME1+4epHXrO8T/kvXKG5+dR1q6cWjAYdI9llJsbn",
	"ZQZzrpMojXteU7oyju9S8Dmh8DVs9bKeUZI5BMO62vFhp6bBAt/CHceYMAi8A/VN8AMizPpYwhnCM16r",
	"JiiZRJIoaaQnQ+oO9ipEQSn3o/MjzEEAy0Djc4aKhcBRT6MJQXyOMKWOaEvnJ6ZTbS6IhIhRNF//H4xd",
	"/BNm2rEwqyw/w8roAeHsg9lxmCY4kvnsV8hUkiYPowUf+XOw1Wnd1ton6DbGet/Rr7pQ8G/DMIZAL0WE",
	"ZbTOCVsgjIq6xAxpLuIZBVSClHhh6wnMVlMmgBoDLkHhHCuM5oKXSBXgnaNdKiXPiLV0EPckAzmesiRN",
	"KsErEMpVBBCn1Kqk83NmTYoYV+ZvLIfcVGbA8lEtQaCcyIri1bifF6SJIz/GDHPQUe+gx+CwnDBqkedE",
	"Y8D0MjioraI2CGAr1K5u2en5q7hhqjl9gNaplJZ5vViAVDHdPkfNR4QzI259Gg1PnyZyinVY9H12crmJ",
	"YPWJhz4rpR/mydnn7Qb9hpclZwE31unjhhbMCI9odpoUTftgj1TI9RrWurxVIECq3b4GL4wTW/syeC9E",
	"v+il6/X6psuyph9B8m2MG2qJaJV3pfvfXV/EmahreHRbDFdhl6TLuK63abkZkh9F7xAhvmQgpFd5pFnT",
	"Rf4aC4ZnK/QzAIOYRUSq5LN/C6HH5Lq1LO8dW9dV0XNL5Qq+7ZZpl6UWzs0APZ1qukdC2wwyLjjSefu7",
	"VFyscmBjLhYxASt+B6y7u/Jth12+JUDvAQ2eI+jUdc9ACbuLa3GxqkDoz9qDCu3KxS7nlyaUL/iXWtA4",
	"SP1VQ/MW4cH5Jl4UJBu0s43AoxdqU98Jsdrat5S0XuwLa0MiQTPSUB3wI7WcvolUlF659krrOtLs5XS9",
	"OnFTYXfbxYDXfYMVLLiIWAHOS8ICuDPOKWCmN2Wc8lpErbTD98h3S+o2Tly06h9oSV/YXKo3PtK6r9rH",
	"Lew+yUX0S8xD9SJw3ynZ2uNcxVVLkRJchid5LTJASyzbgiVtGzTa3Y/08pj+5kDhYCySz9XI7dwf1aFi",
	"KInMImmUmBElsFgheFACI5OfadcIuenddaiN5mi1CYAHHtlt2ve0fUNIA4GGNMQM5KITDDbTSJeRbNyJ",
	"qILIzrnbKJBlP1CWfydfye//64fvcK7qH16G53gg+d4Jy/vj8upGaG2F4vz1VlGZ5sUps1pbXu7sTdiu",
	"RKfgnTnPuqvXoj3weyzucr5kvhDZta9hqlGbiq6+KH6IrWxomyE19WftK9hNTzyIwTLa/tZxyzYZ0Lld",
	"UOIVMjTq4IsZVwUI+4WwKdMSdTtnKyQryMh8pWtY/eHWn+0WOamsxmjjeo8wvXTKgrX3mNaAyloqNIMO",
	"lRqoxKVHaYvZqBJ1pBI1e800pODBdi0G7gJCq/oLer8yy6Zsyq619RGJMPqi//Sl3frF3eIha266+iMM",
	"/bV0xPy1Q3RrZxvXFns1+Zp+Xau4EfdREkZKTJHwi6wgw5KmazPHJv9HRt1DEv+ej20KPgMt5lu7fcdv",
	"UTF3AvnJSqvSdVD6YfZ3qbQj3O9GvJasmFQ+As5UPweCkv9KTpDTxTKwa7yImYfCC7QsSFagDDNkapbK",
	"dcGRCVmml4nuCUbNkfo2syVb/Rp2cY0XwzYxaApeASJcoK59q/DCnG6/NjFexMoIh+birTwZpi6HIgiH",
	"Gyq+GsMaY7Skc135vV1Dvzu+qcYmgu5dlnlnvtFi70pWEWUsTVeY+j+Frj3SpCKMQd4G/zTRfE1SR0Ka",
	"ZL720uBwFjXHmx1DLefOCl5IdPHWdJZ55TqmpuCVUGFh+qWzFdIZuizQfyOiXkifu+roN3ZRE1PKlxIB",
	"yytOmJK2RSArzky/9R4Lk0Do8Cmd4FrsYx18f+QCubicogW5hyB/aUqCi7foNpYI35oDmJzDEH+reDV6",
	"9XJU8nsCcmTB3KboynVf0JJQimqWg5BKb51xh8FQeDZlUTSjKFiDO07WlCEsDdxeoo9VJ+HZnuhHEW9k",
	"/6NKwJw8QD66gxmejTIsYdQUAvsVBptW8MfI2rOg1bCVCL/uiIzd2VzPTP5ZgEmOg5yYSGRX2zyXSOQJ",
	"DDxR0PQwuWTT2484s7qcgWiSdKuWFnCbsur/fmB05UuzfuPCeYIt3tmsIJxJC9xkxwWWqMC5vWuqgFd2",
	"anAvH2fjfcR3W0cWuzzRH9A9COkuylq2vpBB9q5NpJagGVwJuCewdJdcA2wImr3alUYwf/r4DzQXBFhO",
	"V9bB2fxA80FAZS+mGj9jWHPxdsoMIcbdMZDSWLrkQuEZoUSt9qTJeO8dUTO812vIaMXfyKMPfIP3NqYM",
	"NEUUhS7Xu9XQT0ApR0suaP4fO9shxwQvZwaxCOZMdq9C1xliW/zYa1aQqOSOpduv3me1mrKcg3SXn2Z3",
	"I3kZlqaOT+iThHlNjWba3reOZxSLBUyZFqS0aG1iyQWyNbUkqsbW5pYFMLTiNco5e6EQA8htxKkpNQ0w",
	"rU2ND77eQ4z4CCFuDGMM3CAd2SbZ11FvtAgPdNXenPYsixqD2J3+WaYPKbrryDh1bs7a11jthiCrBVGr",
	"Kw3fMVXwpbTNQDMmnNkRhGZQ2N8MjSTYdkFr2xX5GYxxL2GmzYrtBuJXDkNbmzJzzv34havdHKDuTWRv",
	"pqJJpIzTouj88sKYxqwm1Iw7ZLwsa0bUCuXCJHMVxcokVyZIWpk05CZp4oJCcpa80uh4BQxXJDlL/jZ+",
	"OX6l/QdWhWHkxH0b++mQBajoaBacGQNbAAOBFReusS4RRrclrj5bm7gxFeAcZ/C4vkVkboMjkUiCQopP",
	"2e3mRMrteDxGkqOLFyX6tZYK1VIfuaJY+wwfvxhf2vigLctsvsiTs+QdqKsKsmRjgPO7ly835mA0oImB",
	"uWNMJTZzFahgcvb5Jk1kXZZYW6YmwLDlQwVMi+1v45eux+fOqFPW/7368MvYK/vZZ9vGv9FgJ/evJq7L",
	"JAeZ73GELtj3irNaCGCKrpBWUO0IMmzHKZrWVZdjwazpANdilt2sm0RmVddp8v3LV7u3dgadzKbvd29q",
	"xgWNZOa4pmr3ptjQ43rdCqBhua7rKqyyIjJ4Ze4jTs94N+kfvjtYDZ8oeJqwMdSfrJ8ivu6477OW4IYZ",
	"TSTQ+QQ3c9sVj/VzPlWUm6lBZFc2cj1Qmu0bkScItAUyINPYGOi/j8Aeu2+l1oHwBv1hX3DO6+7p+xqh",
	"hQ/CBsrydslm0/nmiR60lfozkWY3DG6Rba2KQfl9BCUI3APCTdEWWJ12sn7SQ47bJpOsq4oLpfONOSzR",
	"lC3xynTGQotNbektiU7fkZ/1McvM8JOpOf0I7RhdF0ROme+zIQWUavgZJcCUq2k1eJThylapRCc8AhAw",
	"PKOQx3KS3pOGo5RkE4gR9x4bg6cBX1HgWrwdYU/Me8HJY/fZ4HqSBc/L4p74iiyY6f2YKzd4IFKZCV83",
	"5WfKd2xGokyf2jwYdHIdR3kff952qKV3n2D6u53D3PsgMetjVeL5Bey9FcgLdSLJgtk0/RspjB9DvLKI",
	"j5R0857xT+HuEG5dDQv3IyyIVCAQNgMYpxFqXf1BhPoH9t++xTHBUoLtN0eD9xuuQ6srjDIBpvmEKbLb",
	"TMHLciQ7NjqYkPlI/B7fwbkH8KcBHiXex6Cf9flmfZC0eyn4Fu+rsLDtCC+8QPTulwg2ffKw4HUOHMj9",
	"6cn4n3rzldxCie9gWCsar9AohTCO3IoczVa2W2ifbmnH3nqO7V7hTbOu7xaOfOYWefD9DL35ceaupRg1",
	"9qivj9h6R6yV4JobWrxONFbAgXAj9ZGH5RjTkfC3r8Z3vqf8AwduP4W1v0RN6wRV5qx+iEuL7+Jt3wyD",
	"l86/i2QiL62fu4P1AmtF6O44dwiMxp4Ob8orfO/ck9eGYRd8iTij2m5lTZV5JQF+Pslc2fg3SOZi7Lca",
	"zO2y/20jfxl90I9AeGVYp7vJ8Zf2EpC7IYzR4T7t+bK8nblbH6eQIYOfuyZ6vbtxIzWRkO5/A0aH62B0",
	"zA+ZN+3WcF4nqpHuR2KOSM+6ANZPEFr31xKeX/u8lVfXcUweg5/E2u73t0xw+J8KI0ragYgU2YOndtCC",
	"KLTEcsr8r2JgiZZAddEXOKdtAx+RNCD48YhDo0v4C15PsWSN+7kacvcKescPY2wTTXKokk2a2d09HMfQ",
	"o5GNVCP4Da0nK8OBPibEfZSHifxSzfPzL1amTvB+eGTAmVwX0EwdunHLZmRMK5a5NzdqR9pnvgIoYAl2",
	"pgVpZ9J6EDvIKKASIIEprIJ5xndEmfEXYqYri4EhkP9zJP/ucyCSz9USi5ZBFmJs+mOznmtGmmw5J42k",
	"Ytmb5v9P19eXqJm18RPQRKKcZ3UJTLkfUZmBmb4pdQIGOeLW9G8nuCK3aMoq7O7EMGtqOIl4rSTJneiI",
	"RDMtOLPUTHrPzKPtB9L8+seUzYVhcY7IvL2xIxKJmjFdExLNCMxyTDkDVPIcrCDNW/ZEU5MEJWx/+oiN",
	"ZrUkZmqU8gXJkFT1fD5uU0HD1H5med69V/QvK+W4m8xGdn6SIHz/qrPc33X2t1x2yqpwU5P39zf9yEVd",
	"hkl955cuo2hCR46baaPAuXqsxqbXN+t/BQAA//8iP7jPBVUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
