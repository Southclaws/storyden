// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"bytes"
	"net/http"
	"strings"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeAccountsSetAvatarRequest(
	req AccountsSetAvatarReq,
	r *http.Request,
) error {
	const contentType = "application/octet-stream"
	ht.SetBody(r, req, contentType)
	return nil
}

func encodeAccountsUpdateRequest(
	req OptAccountsUpdateBody,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeAuthOAuthProviderCallbackRequest(
	req OptAuthOAuthProviderCallbackBody,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeAuthPasswordSigninRequest(
	req AuthPasswordSigninReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *AuthPasswordSigninReqEmptyBody:
		// Empty body case.
		return nil
	case *AuthPasswordSigninApplicationJSON:
		const contentType = "application/json"
		e := jx.GetEncoder()
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *AuthPasswordSigninApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewQueryEncoder()
		{
			// Encode "identifier" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "identifier",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Identifier))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "token" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "token",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Token))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeAuthPasswordSignupRequest(
	req AuthPasswordSignupReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *AuthPasswordSignupReqEmptyBody:
		// Empty body case.
		return nil
	case *AuthPasswordSignupApplicationJSON:
		const contentType = "application/json"
		e := jx.GetEncoder()
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *AuthPasswordSignupApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewQueryEncoder()
		{
			// Encode "identifier" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "identifier",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Identifier))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "token" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "token",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Token))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodePostsCreateRequest(
	req OptPost,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeWebAuthnGetAssertionRequest(
	req WebAuthnGetAssertionReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *WebAuthnGetAssertionReqEmptyBody:
		// Empty body case.
		return nil
	case *WebAuthnGetAssertionApplicationJSON:
		const contentType = "application/json"
		e := jx.GetEncoder()
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *WebAuthnGetAssertionApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewQueryEncoder()
		{
			// Encode "identifier" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "identifier",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Identifier))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "token" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "token",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Token))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeWebAuthnMakeAssertionRequest(
	req WebAuthnMakeAssertionReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *WebAuthnMakeAssertionReqEmptyBody:
		// Empty body case.
		return nil
	case *WebAuthnMakeAssertionApplicationJSON:
		const contentType = "application/json"
		e := jx.GetEncoder()
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *WebAuthnMakeAssertionApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewQueryEncoder()
		{
			// Encode "identifier" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "identifier",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Identifier))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "token" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "token",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Token))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeWebAuthnMakeCredentialRequest(
	req *WebAuthnMakeCredentialReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
