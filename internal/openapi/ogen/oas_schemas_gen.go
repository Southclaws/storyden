// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"io"
	"time"

	"github.com/go-faster/jx"
)

// A description of an error including a human readable message and any
// related metadata from the request and associated services.
// Ref: #/components/schemas/APIError
type APIError struct {
	// The internal error, not intended for end-user display.
	Error string `json:"error"`
	// A human-readable message intended for end-user display.
	Message OptString `json:"message"`
	// A suggested action for the user.
	Suggested OptString `json:"suggested"`
	// Any additional metadata related to the error.
	Metadata OptAPIErrorMetadata `json:"metadata"`
}

// GetError returns the value of Error.
func (s APIError) GetError() string {
	return s.Error
}

// GetMessage returns the value of Message.
func (s APIError) GetMessage() OptString {
	return s.Message
}

// GetSuggested returns the value of Suggested.
func (s APIError) GetSuggested() OptString {
	return s.Suggested
}

// GetMetadata returns the value of Metadata.
func (s APIError) GetMetadata() OptAPIErrorMetadata {
	return s.Metadata
}

// SetError sets the value of Error.
func (s *APIError) SetError(val string) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *APIError) SetMessage(val OptString) {
	s.Message = val
}

// SetSuggested sets the value of Suggested.
func (s *APIError) SetSuggested(val OptString) {
	s.Suggested = val
}

// SetMetadata sets the value of Metadata.
func (s *APIError) SetMetadata(val OptAPIErrorMetadata) {
	s.Metadata = val
}

// Any additional metadata related to the error.
type APIErrorMetadata map[string]jx.Raw

func (s *APIErrorMetadata) init() APIErrorMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// APIErrorStatusCode wraps APIError with StatusCode.
type APIErrorStatusCode struct {
	StatusCode int
	Response   APIError
}

// GetStatusCode returns the value of StatusCode.
func (s APIErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s APIErrorStatusCode) GetResponse() APIError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *APIErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *APIErrorStatusCode) SetResponse(val APIError) {
	s.Response = val
}

func (*APIErrorStatusCode) accountsGetAvatarRes()         {}
func (*APIErrorStatusCode) accountsGetRes()               {}
func (*APIErrorStatusCode) accountsSetAvatarRes()         {}
func (*APIErrorStatusCode) accountsUpdateRes()            {}
func (*APIErrorStatusCode) authOAuthProviderCallbackRes() {}
func (*APIErrorStatusCode) authOAuthProviderListRes()     {}
func (*APIErrorStatusCode) authPasswordSigninRes()        {}
func (*APIErrorStatusCode) authPasswordSignupRes()        {}
func (*APIErrorStatusCode) postsCreateRes()               {}
func (*APIErrorStatusCode) profilesGetRes()               {}
func (*APIErrorStatusCode) threadsListRes()               {}
func (*APIErrorStatusCode) webAuthnGetAssertionRes()      {}
func (*APIErrorStatusCode) webAuthnMakeAssertionRes()     {}
func (*APIErrorStatusCode) webAuthnMakeCredentialRes()    {}
func (*APIErrorStatusCode) webAuthnRequestCredentialRes() {}

type AccountHandle string

type AccountName string

type AccountsGetAvatar struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AccountsGetAvatar) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*AccountsGetAvatar) accountsGetAvatarRes() {}

// AccountsSetAvatarOK is response for AccountsSetAvatar operation.
type AccountsSetAvatarOK struct{}

func (*AccountsSetAvatarOK) accountsSetAvatarRes() {}

type AccountsSetAvatarReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AccountsSetAvatarReq) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

// Ref: #/components/schemas/AccountsUpdateBody
type AccountsUpdateBody struct {
	Handle    OptAccountHandle `json:"handle"`
	Name      OptAccountName   `json:"name"`
	Bio       OptString        `json:"bio"`
	Interests *TagList         `json:"interests"`
}

// GetHandle returns the value of Handle.
func (s AccountsUpdateBody) GetHandle() OptAccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s AccountsUpdateBody) GetName() OptAccountName {
	return s.Name
}

// GetBio returns the value of Bio.
func (s AccountsUpdateBody) GetBio() OptString {
	return s.Bio
}

// GetInterests returns the value of Interests.
func (s AccountsUpdateBody) GetInterests() *TagList {
	return s.Interests
}

// SetHandle sets the value of Handle.
func (s *AccountsUpdateBody) SetHandle(val OptAccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *AccountsUpdateBody) SetName(val OptAccountName) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *AccountsUpdateBody) SetBio(val OptString) {
	s.Bio = val
}

// SetInterests sets the value of Interests.
func (s *AccountsUpdateBody) SetInterests(val *TagList) {
	s.Interests = val
}

// Ref: #/components/schemas/AuthOAuthProvider
type AuthOAuthProvider struct {
	// The slug name of the provider.
	Provider string `json:"provider"`
	// The human-readable name of the provider.
	Name string `json:"name"`
	// The logo to display for the provider.
	LogoURL string `json:"logo_url"`
	// The hyperlink to render for the user.
	Link string `json:"link"`
}

// GetProvider returns the value of Provider.
func (s AuthOAuthProvider) GetProvider() string {
	return s.Provider
}

// GetName returns the value of Name.
func (s AuthOAuthProvider) GetName() string {
	return s.Name
}

// GetLogoURL returns the value of LogoURL.
func (s AuthOAuthProvider) GetLogoURL() string {
	return s.LogoURL
}

// GetLink returns the value of Link.
func (s AuthOAuthProvider) GetLink() string {
	return s.Link
}

// SetProvider sets the value of Provider.
func (s *AuthOAuthProvider) SetProvider(val string) {
	s.Provider = val
}

// SetName sets the value of Name.
func (s *AuthOAuthProvider) SetName(val string) {
	s.Name = val
}

// SetLogoURL sets the value of LogoURL.
func (s *AuthOAuthProvider) SetLogoURL(val string) {
	s.LogoURL = val
}

// SetLink sets the value of Link.
func (s *AuthOAuthProvider) SetLink(val string) {
	s.Link = val
}

// Ref: #/components/schemas/AuthOAuthProviderCallbackBody
type AuthOAuthProviderCallbackBody struct {
	State string `json:"state"`
	Code  string `json:"code"`
}

// GetState returns the value of State.
func (s AuthOAuthProviderCallbackBody) GetState() string {
	return s.State
}

// GetCode returns the value of Code.
func (s AuthOAuthProviderCallbackBody) GetCode() string {
	return s.Code
}

// SetState sets the value of State.
func (s *AuthOAuthProviderCallbackBody) SetState(val string) {
	s.State = val
}

// SetCode sets the value of Code.
func (s *AuthOAuthProviderCallbackBody) SetCode(val string) {
	s.Code = val
}

type AuthOAuthProviderListBody []AuthOAuthProvider

func (AuthOAuthProviderListBody) authOAuthProviderListRes() {}

// Ref: #/components/schemas/AuthPasswordBody
type AuthPasswordBody struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// GetIdentifier returns the value of Identifier.
func (s AuthPasswordBody) GetIdentifier() string {
	return s.Identifier
}

// GetToken returns the value of Token.
func (s AuthPasswordBody) GetToken() string {
	return s.Token
}

// SetIdentifier sets the value of Identifier.
func (s *AuthPasswordBody) SetIdentifier(val string) {
	s.Identifier = val
}

// SetToken sets the value of Token.
func (s *AuthPasswordBody) SetToken(val string) {
	s.Token = val
}

type AuthPasswordSigninApplicationJSON AuthPasswordBody

func (*AuthPasswordSigninApplicationJSON) authPasswordSigninReq() {}

type AuthPasswordSigninApplicationXWwwFormUrlencoded AuthPasswordBody

func (*AuthPasswordSigninApplicationXWwwFormUrlencoded) authPasswordSigninReq() {}

type AuthPasswordSigninReqEmptyBody struct{}

func (*AuthPasswordSigninReqEmptyBody) authPasswordSigninReq() {}

type AuthPasswordSignupApplicationJSON AuthPasswordBody

func (*AuthPasswordSignupApplicationJSON) authPasswordSignupReq() {}

type AuthPasswordSignupApplicationXWwwFormUrlencoded AuthPasswordBody

func (*AuthPasswordSignupApplicationXWwwFormUrlencoded) authPasswordSignupReq() {}

type AuthPasswordSignupReqEmptyBody struct{}

func (*AuthPasswordSignupReqEmptyBody) authPasswordSignupReq() {}

// Ref: #/components/schemas/AuthSuccess
type AuthSuccess struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s AuthSuccess) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *AuthSuccess) SetID(val string) {
	s.ID = val
}

// AuthSuccessHeaders wraps AuthSuccess with response headers.
type AuthSuccessHeaders struct {
	SetCookie OptString
	Response  AuthSuccess
}

// GetSetCookie returns the value of SetCookie.
func (s AuthSuccessHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s AuthSuccessHeaders) GetResponse() AuthSuccess {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthSuccessHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *AuthSuccessHeaders) SetResponse(val AuthSuccess) {
	s.Response = val
}

func (*AuthSuccessHeaders) authOAuthProviderCallbackRes() {}
func (*AuthSuccessHeaders) authPasswordSigninRes()        {}
func (*AuthSuccessHeaders) authPasswordSignupRes()        {}
func (*AuthSuccessHeaders) webAuthnGetAssertionRes()      {}
func (*AuthSuccessHeaders) webAuthnMakeAssertionRes()     {}
func (*AuthSuccessHeaders) webAuthnMakeCredentialRes()    {}

// Ref: #/components/responses/BadRequest
type BadRequest struct{}

func (*BadRequest) authOAuthProviderListRes()     {}
func (*BadRequest) authPasswordSignupRes()        {}
func (*BadRequest) webAuthnMakeCredentialRes()    {}
func (*BadRequest) webAuthnRequestCredentialRes() {}

// Ref: #/components/schemas/Category
type Category struct {
	ID          OptIdentifier `json:"id"`
	Name        OptString     `json:"name"`
	Description OptString     `json:"description"`
	Colour      OptString     `json:"colour"`
	Sort        OptInt        `json:"sort"`
	Admin       OptBool       `json:"admin"`
	PostCount   OptInt        `json:"postCount"`
}

// GetID returns the value of ID.
func (s Category) GetID() OptIdentifier {
	return s.ID
}

// GetName returns the value of Name.
func (s Category) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s Category) GetDescription() OptString {
	return s.Description
}

// GetColour returns the value of Colour.
func (s Category) GetColour() OptString {
	return s.Colour
}

// GetSort returns the value of Sort.
func (s Category) GetSort() OptInt {
	return s.Sort
}

// GetAdmin returns the value of Admin.
func (s Category) GetAdmin() OptBool {
	return s.Admin
}

// GetPostCount returns the value of PostCount.
func (s Category) GetPostCount() OptInt {
	return s.PostCount
}

// SetID sets the value of ID.
func (s *Category) SetID(val OptIdentifier) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Category) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Category) SetDescription(val OptString) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *Category) SetColour(val OptString) {
	s.Colour = val
}

// SetSort sets the value of Sort.
func (s *Category) SetSort(val OptInt) {
	s.Sort = val
}

// SetAdmin sets the value of Admin.
func (s *Category) SetAdmin(val OptBool) {
	s.Admin = val
}

// SetPostCount sets the value of PostCount.
func (s *Category) SetPostCount(val OptInt) {
	s.PostCount = val
}

// Ref: #/components/schemas/CommonProperties
type CommonProperties struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc *CommonPropertiesMisc `json:"misc"`
}

// GetID returns the value of ID.
func (s CommonProperties) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s CommonProperties) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s CommonProperties) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s CommonProperties) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s CommonProperties) GetMisc() *CommonPropertiesMisc {
	return s.Misc
}

// SetID sets the value of ID.
func (s *CommonProperties) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CommonProperties) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CommonProperties) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *CommonProperties) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *CommonProperties) SetMisc(val *CommonPropertiesMisc) {
	s.Misc = val
}

func (*CommonProperties) accountsGetRes()    {}
func (*CommonProperties) accountsUpdateRes() {}
func (*CommonProperties) profilesGetRes()    {}

// Arbitrary extra data stored with the resource.
type CommonPropertiesMisc struct{}

type GetSpecOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetSpecOK) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

type GetVersionOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVersionOK) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

type Identifier string

// Arbitrary metadata for the resource.
// Ref: #/components/schemas/Metadata
type Metadata map[string]jx.Raw

func (s *Metadata) init() Metadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/responses/NotFound
type NotFound struct{}

func (*NotFound) accountsGetAvatarRes()         {}
func (*NotFound) accountsGetRes()               {}
func (*NotFound) accountsSetAvatarRes()         {}
func (*NotFound) accountsUpdateRes()            {}
func (*NotFound) authOAuthProviderCallbackRes() {}
func (*NotFound) authPasswordSigninRes()        {}
func (*NotFound) postsCreateRes()               {}
func (*NotFound) profilesGetRes()               {}
func (*NotFound) threadsListRes()               {}
func (*NotFound) webAuthnGetAssertionRes()      {}
func (*NotFound) webAuthnMakeAssertionRes()     {}

// NewOptAPIErrorMetadata returns new OptAPIErrorMetadata with value set to v.
func NewOptAPIErrorMetadata(v APIErrorMetadata) OptAPIErrorMetadata {
	return OptAPIErrorMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAPIErrorMetadata is optional APIErrorMetadata.
type OptAPIErrorMetadata struct {
	Value APIErrorMetadata
	Set   bool
}

// IsSet returns true if OptAPIErrorMetadata was set.
func (o OptAPIErrorMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAPIErrorMetadata) Reset() {
	var v APIErrorMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAPIErrorMetadata) SetTo(v APIErrorMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAPIErrorMetadata) Get() (v APIErrorMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAPIErrorMetadata) Or(d APIErrorMetadata) APIErrorMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountHandle returns new OptAccountHandle with value set to v.
func NewOptAccountHandle(v AccountHandle) OptAccountHandle {
	return OptAccountHandle{
		Value: v,
		Set:   true,
	}
}

// OptAccountHandle is optional AccountHandle.
type OptAccountHandle struct {
	Value AccountHandle
	Set   bool
}

// IsSet returns true if OptAccountHandle was set.
func (o OptAccountHandle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountHandle) Reset() {
	var v AccountHandle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountHandle) SetTo(v AccountHandle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountHandle) Get() (v AccountHandle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountHandle) Or(d AccountHandle) AccountHandle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountName returns new OptAccountName with value set to v.
func NewOptAccountName(v AccountName) OptAccountName {
	return OptAccountName{
		Value: v,
		Set:   true,
	}
}

// OptAccountName is optional AccountName.
type OptAccountName struct {
	Value AccountName
	Set   bool
}

// IsSet returns true if OptAccountName was set.
func (o OptAccountName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountName) Reset() {
	var v AccountName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountName) SetTo(v AccountName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountName) Get() (v AccountName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountName) Or(d AccountName) AccountName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountsUpdateBody returns new OptAccountsUpdateBody with value set to v.
func NewOptAccountsUpdateBody(v AccountsUpdateBody) OptAccountsUpdateBody {
	return OptAccountsUpdateBody{
		Value: v,
		Set:   true,
	}
}

// OptAccountsUpdateBody is optional AccountsUpdateBody.
type OptAccountsUpdateBody struct {
	Value AccountsUpdateBody
	Set   bool
}

// IsSet returns true if OptAccountsUpdateBody was set.
func (o OptAccountsUpdateBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountsUpdateBody) Reset() {
	var v AccountsUpdateBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountsUpdateBody) SetTo(v AccountsUpdateBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountsUpdateBody) Get() (v AccountsUpdateBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountsUpdateBody) Or(d AccountsUpdateBody) AccountsUpdateBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthOAuthProviderCallbackBody returns new OptAuthOAuthProviderCallbackBody with value set to v.
func NewOptAuthOAuthProviderCallbackBody(v AuthOAuthProviderCallbackBody) OptAuthOAuthProviderCallbackBody {
	return OptAuthOAuthProviderCallbackBody{
		Value: v,
		Set:   true,
	}
}

// OptAuthOAuthProviderCallbackBody is optional AuthOAuthProviderCallbackBody.
type OptAuthOAuthProviderCallbackBody struct {
	Value AuthOAuthProviderCallbackBody
	Set   bool
}

// IsSet returns true if OptAuthOAuthProviderCallbackBody was set.
func (o OptAuthOAuthProviderCallbackBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthOAuthProviderCallbackBody) Reset() {
	var v AuthOAuthProviderCallbackBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthOAuthProviderCallbackBody) SetTo(v AuthOAuthProviderCallbackBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthOAuthProviderCallbackBody) Get() (v AuthOAuthProviderCallbackBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthOAuthProviderCallbackBody) Or(d AuthOAuthProviderCallbackBody) AuthOAuthProviderCallbackBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdentifier returns new OptIdentifier with value set to v.
func NewOptIdentifier(v Identifier) OptIdentifier {
	return OptIdentifier{
		Value: v,
		Set:   true,
	}
}

// OptIdentifier is optional Identifier.
type OptIdentifier struct {
	Value Identifier
	Set   bool
}

// IsSet returns true if OptIdentifier was set.
func (o OptIdentifier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdentifier) Reset() {
	var v Identifier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdentifier) SetTo(v Identifier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdentifier) Get() (v Identifier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdentifier) Or(d Identifier) Identifier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetadata returns new OptMetadata with value set to v.
func NewOptMetadata(v Metadata) OptMetadata {
	return OptMetadata{
		Value: v,
		Set:   true,
	}
}

// OptMetadata is optional Metadata.
type OptMetadata struct {
	Value Metadata
	Set   bool
}

// IsSet returns true if OptMetadata was set.
func (o OptMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetadata) Reset() {
	var v Metadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetadata) SetTo(v Metadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetadata) Get() (v Metadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetadata) Or(d Metadata) Metadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPost returns new OptPost with value set to v.
func NewOptPost(v Post) OptPost {
	return OptPost{
		Value: v,
		Set:   true,
	}
}

// OptPost is optional Post.
type OptPost struct {
	Value Post
	Set   bool
}

// IsSet returns true if OptPost was set.
func (o OptPost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPost) Reset() {
	var v Post
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPost) SetTo(v Post) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPost) Get() (v Post, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPost) Or(d Post) Post {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Merged schema.
// Ref: #/components/schemas/Post
type Post struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc    *PostMisc        `json:"misc"`
	Body    PostBodyMarkdown `json:"body"`
	Meta    OptMetadata      `json:"meta"`
	ReplyTo OptIdentifier    `json:"reply_to"`
}

// GetID returns the value of ID.
func (s Post) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s Post) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s Post) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s Post) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s Post) GetMisc() *PostMisc {
	return s.Misc
}

// GetBody returns the value of Body.
func (s Post) GetBody() PostBodyMarkdown {
	return s.Body
}

// GetMeta returns the value of Meta.
func (s Post) GetMeta() OptMetadata {
	return s.Meta
}

// GetReplyTo returns the value of ReplyTo.
func (s Post) GetReplyTo() OptIdentifier {
	return s.ReplyTo
}

// SetID sets the value of ID.
func (s *Post) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Post) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Post) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Post) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Post) SetMisc(val *PostMisc) {
	s.Misc = val
}

// SetBody sets the value of Body.
func (s *Post) SetBody(val PostBodyMarkdown) {
	s.Body = val
}

// SetMeta sets the value of Meta.
func (s *Post) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetReplyTo sets the value of ReplyTo.
func (s *Post) SetReplyTo(val OptIdentifier) {
	s.ReplyTo = val
}

func (*Post) postsCreateRes() {}

type PostBodyMarkdown string

// Arbitrary extra data stored with the resource.
type PostMisc struct{}

// A minimal reference to an account.
// Ref: #/components/schemas/ProfileReference
type ProfileReference struct {
	ID   OptIdentifier  `json:"id"`
	Name OptAccountName `json:"name"`
}

// GetID returns the value of ID.
func (s ProfileReference) GetID() OptIdentifier {
	return s.ID
}

// GetName returns the value of Name.
func (s ProfileReference) GetName() OptAccountName {
	return s.Name
}

// SetID sets the value of ID.
func (s *ProfileReference) SetID(val OptIdentifier) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProfileReference) SetName(val OptAccountName) {
	s.Name = val
}

// Ref: #/components/schemas/React
type React struct {
	ID    OptIdentifier `json:"id"`
	Emoji OptString     `json:"emoji"`
}

// GetID returns the value of ID.
func (s React) GetID() OptIdentifier {
	return s.ID
}

// GetEmoji returns the value of Emoji.
func (s React) GetEmoji() OptString {
	return s.Emoji
}

// SetID sets the value of ID.
func (s *React) SetID(val OptIdentifier) {
	s.ID = val
}

// SetEmoji sets the value of Emoji.
func (s *React) SetEmoji(val OptString) {
	s.Emoji = val
}

// A tag which can link profiles or threads via interests.
// Ref: #/components/schemas/Tag
type Tag struct {
	ID     Identifier `json:"id"`
	Name   TagName    `json:"name"`
	Colour OptString  `json:"colour"`
}

// GetID returns the value of ID.
func (s Tag) GetID() Identifier {
	return s.ID
}

// GetName returns the value of Name.
func (s Tag) GetName() TagName {
	return s.Name
}

// GetColour returns the value of Colour.
func (s Tag) GetColour() OptString {
	return s.Colour
}

// SetID sets the value of ID.
func (s *Tag) SetID(val Identifier) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val TagName) {
	s.Name = val
}

// SetColour sets the value of Colour.
func (s *Tag) SetColour(val OptString) {
	s.Colour = val
}

type TagList []Tag

type TagListIDs []Identifier

type TagName string

// Merged schema.
// Ref: #/components/schemas/ThreadReference
type ThreadReference struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc *ThreadReferenceMisc `json:"misc"`
	// The title of the thread.
	Title string `json:"title"`
	// A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug string `json:"slug"`
	// A short version of the thread's body text for use in previews.
	Short string `json:"short"`
	// Whether the thread is pinned in this category.
	Pinned bool             `json:"pinned"`
	Author ProfileReference `json:"author"`
	// A list of tags associated with the thread.
	Tags []string `json:"tags"`
	// The number of posts under this thread.
	PostCount OptInt   `json:"post_count"`
	Category  Category `json:"category"`
	// A list of reactions this post has had from people.
	Reacts []React  `json:"reacts"`
	Meta   Metadata `json:"meta"`
}

// GetID returns the value of ID.
func (s ThreadReference) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s ThreadReference) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s ThreadReference) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s ThreadReference) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s ThreadReference) GetMisc() *ThreadReferenceMisc {
	return s.Misc
}

// GetTitle returns the value of Title.
func (s ThreadReference) GetTitle() string {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s ThreadReference) GetSlug() string {
	return s.Slug
}

// GetShort returns the value of Short.
func (s ThreadReference) GetShort() string {
	return s.Short
}

// GetPinned returns the value of Pinned.
func (s ThreadReference) GetPinned() bool {
	return s.Pinned
}

// GetAuthor returns the value of Author.
func (s ThreadReference) GetAuthor() ProfileReference {
	return s.Author
}

// GetTags returns the value of Tags.
func (s ThreadReference) GetTags() []string {
	return s.Tags
}

// GetPostCount returns the value of PostCount.
func (s ThreadReference) GetPostCount() OptInt {
	return s.PostCount
}

// GetCategory returns the value of Category.
func (s ThreadReference) GetCategory() Category {
	return s.Category
}

// GetReacts returns the value of Reacts.
func (s ThreadReference) GetReacts() []React {
	return s.Reacts
}

// GetMeta returns the value of Meta.
func (s ThreadReference) GetMeta() Metadata {
	return s.Meta
}

// SetID sets the value of ID.
func (s *ThreadReference) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ThreadReference) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ThreadReference) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *ThreadReference) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *ThreadReference) SetMisc(val *ThreadReferenceMisc) {
	s.Misc = val
}

// SetTitle sets the value of Title.
func (s *ThreadReference) SetTitle(val string) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *ThreadReference) SetSlug(val string) {
	s.Slug = val
}

// SetShort sets the value of Short.
func (s *ThreadReference) SetShort(val string) {
	s.Short = val
}

// SetPinned sets the value of Pinned.
func (s *ThreadReference) SetPinned(val bool) {
	s.Pinned = val
}

// SetAuthor sets the value of Author.
func (s *ThreadReference) SetAuthor(val ProfileReference) {
	s.Author = val
}

// SetTags sets the value of Tags.
func (s *ThreadReference) SetTags(val []string) {
	s.Tags = val
}

// SetPostCount sets the value of PostCount.
func (s *ThreadReference) SetPostCount(val OptInt) {
	s.PostCount = val
}

// SetCategory sets the value of Category.
func (s *ThreadReference) SetCategory(val Category) {
	s.Category = val
}

// SetReacts sets the value of Reacts.
func (s *ThreadReference) SetReacts(val []React) {
	s.Reacts = val
}

// SetMeta sets the value of Meta.
func (s *ThreadReference) SetMeta(val Metadata) {
	s.Meta = val
}

// Arbitrary extra data stored with the resource.
type ThreadReferenceMisc struct{}

type ThreadsListOKApplicationJSON []ThreadReference

func (ThreadsListOKApplicationJSON) threadsListRes() {}

// Ref: #/components/responses/Unauthorised
type Unauthorised struct{}

func (*Unauthorised) accountsGetAvatarRes()         {}
func (*Unauthorised) accountsGetRes()               {}
func (*Unauthorised) accountsSetAvatarRes()         {}
func (*Unauthorised) accountsUpdateRes()            {}
func (*Unauthorised) authOAuthProviderCallbackRes() {}
func (*Unauthorised) authPasswordSigninRes()        {}
func (*Unauthorised) postsCreateRes()               {}
func (*Unauthorised) profilesGetRes()               {}
func (*Unauthorised) threadsListRes()               {}
func (*Unauthorised) webAuthnGetAssertionRes()      {}
func (*Unauthorised) webAuthnMakeAssertionRes()     {}

type WebAuthnGetAssertionApplicationJSON AuthPasswordBody

func (*WebAuthnGetAssertionApplicationJSON) webAuthnGetAssertionReq() {}

type WebAuthnGetAssertionApplicationXWwwFormUrlencoded AuthPasswordBody

func (*WebAuthnGetAssertionApplicationXWwwFormUrlencoded) webAuthnGetAssertionReq() {}

type WebAuthnGetAssertionReqEmptyBody struct{}

func (*WebAuthnGetAssertionReqEmptyBody) webAuthnGetAssertionReq() {}

type WebAuthnMakeAssertionApplicationJSON AuthPasswordBody

func (*WebAuthnMakeAssertionApplicationJSON) webAuthnMakeAssertionReq() {}

type WebAuthnMakeAssertionApplicationXWwwFormUrlencoded AuthPasswordBody

func (*WebAuthnMakeAssertionApplicationXWwwFormUrlencoded) webAuthnMakeAssertionReq() {}

type WebAuthnMakeAssertionReqEmptyBody struct{}

func (*WebAuthnMakeAssertionReqEmptyBody) webAuthnMakeAssertionReq() {}

type WebAuthnMakeCredentialReq struct{}

type WebAuthnPublicKeyCreationOptions struct{}

// WebAuthnPublicKeyCreationOptionsHeaders wraps WebAuthnPublicKeyCreationOptions with response headers.
type WebAuthnPublicKeyCreationOptionsHeaders struct {
	SetCookie OptString
	Response  WebAuthnPublicKeyCreationOptions
}

// GetSetCookie returns the value of SetCookie.
func (s WebAuthnPublicKeyCreationOptionsHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s WebAuthnPublicKeyCreationOptionsHeaders) GetResponse() WebAuthnPublicKeyCreationOptions {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *WebAuthnPublicKeyCreationOptionsHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *WebAuthnPublicKeyCreationOptionsHeaders) SetResponse(val WebAuthnPublicKeyCreationOptions) {
	s.Response = val
}

func (*WebAuthnPublicKeyCreationOptionsHeaders) webAuthnRequestCredentialRes() {}
