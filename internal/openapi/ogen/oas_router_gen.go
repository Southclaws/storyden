// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"strings"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "openapi.json"
				if l := len("openapi.json"); len(elem) >= l && elem[0:l] == "openapi.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetSpecRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'v': // Prefix: "v"
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"
					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccounts"
							if l := len("ccounts"); len(elem) >= l && elem[0:l] == "ccounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleAccountsGetRequest([0]string{}, w, r)
								case "PATCH":
									s.handleAccountsUpdateRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "self/avatar"
									if l := len("self/avatar"); len(elem) >= l && elem[0:l] == "self/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleAccountsSetAvatarRequest([0]string{}, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
								// Param: "account_handle"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/avatar"
									if l := len("/avatar"); len(elem) >= l && elem[0:l] == "/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAccountsGetAvatarRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						case 'u': // Prefix: "uth/"
							if l := len("uth/"); len(elem) >= l && elem[0:l] == "uth/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'o': // Prefix: "oauth"
								if l := len("oauth"); len(elem) >= l && elem[0:l] == "oauth" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleAuthOAuthProviderListRequest([0]string{}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "oauth_provider"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/callback"
										if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleAuthOAuthProviderCallbackRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							case 'p': // Prefix: "password/sign"
								if l := len("password/sign"); len(elem) >= l && elem[0:l] == "password/sign" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "in"
									if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleAuthPasswordSigninRequest([0]string{}, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								case 'u': // Prefix: "up"
									if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleAuthPasswordSignupRequest([0]string{}, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'w': // Prefix: "webauthn/"
								if l := len("webauthn/"); len(elem) >= l && elem[0:l] == "webauthn/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "assert"
									if l := len("assert"); len(elem) >= l && elem[0:l] == "assert" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleWebAuthnMakeAssertionRequest([0]string{}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "account_handle"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleWebAuthnGetAssertionRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'm': // Prefix: "make"
									if l := len("make"); len(elem) >= l && elem[0:l] == "make" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleWebAuthnMakeCredentialRequest([0]string{}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "account_handle"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleWebAuthnRequestCredentialRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							}
						}
					case 'p': // Prefix: "profiles/"
						if l := len("profiles/"); len(elem) >= l && elem[0:l] == "profiles/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "account_handle"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleProfilesGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 't': // Prefix: "threads"
						if l := len("threads"); len(elem) >= l && elem[0:l] == "threads" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleThreadsListRequest([0]string{}, w, r)
							case "POST":
								s.handleThreadsCreateRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "thread_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleThreadsGetRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/posts"
								if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handlePostsCreateRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							}
						}
					}
				case 'e': // Prefix: "ersion"
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetVersionRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [1]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "openapi.json"
				if l := len("openapi.json"); len(elem) >= l && elem[0:l] == "openapi.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetSpec
						r.name = "GetSpec"
						r.operationID = "GetSpec"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'v': // Prefix: "v"
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"
					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccounts"
							if l := len("ccounts"); len(elem) >= l && elem[0:l] == "ccounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "AccountsGet"
									r.operationID = "AccountsGet"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = "AccountsUpdate"
									r.operationID = "AccountsUpdate"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "self/avatar"
									if l := len("self/avatar"); len(elem) >= l && elem[0:l] == "self/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: AccountsSetAvatar
											r.name = "AccountsSetAvatar"
											r.operationID = "AccountsSetAvatar"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
								// Param: "account_handle"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/avatar"
									if l := len("/avatar"); len(elem) >= l && elem[0:l] == "/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: AccountsGetAvatar
											r.name = "AccountsGetAvatar"
											r.operationID = "AccountsGetAvatar"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						case 'u': // Prefix: "uth/"
							if l := len("uth/"); len(elem) >= l && elem[0:l] == "uth/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'o': // Prefix: "oauth"
								if l := len("oauth"); len(elem) >= l && elem[0:l] == "oauth" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "AuthOAuthProviderList"
										r.operationID = "AuthOAuthProviderList"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "oauth_provider"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/callback"
										if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: AuthOAuthProviderCallback
												r.name = "AuthOAuthProviderCallback"
												r.operationID = "AuthOAuthProviderCallback"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'p': // Prefix: "password/sign"
								if l := len("password/sign"); len(elem) >= l && elem[0:l] == "password/sign" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "in"
									if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: AuthPasswordSignin
											r.name = "AuthPasswordSignin"
											r.operationID = "AuthPasswordSignin"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'u': // Prefix: "up"
									if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: AuthPasswordSignup
											r.name = "AuthPasswordSignup"
											r.operationID = "AuthPasswordSignup"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'w': // Prefix: "webauthn/"
								if l := len("webauthn/"); len(elem) >= l && elem[0:l] == "webauthn/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "assert"
									if l := len("assert"); len(elem) >= l && elem[0:l] == "assert" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "WebAuthnMakeAssertion"
											r.operationID = "WebAuthnMakeAssertion"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "account_handle"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: WebAuthnGetAssertion
												r.name = "WebAuthnGetAssertion"
												r.operationID = "WebAuthnGetAssertion"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								case 'm': // Prefix: "make"
									if l := len("make"); len(elem) >= l && elem[0:l] == "make" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "WebAuthnMakeCredential"
											r.operationID = "WebAuthnMakeCredential"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "account_handle"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: WebAuthnRequestCredential
												r.name = "WebAuthnRequestCredential"
												r.operationID = "WebAuthnRequestCredential"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						}
					case 'p': // Prefix: "profiles/"
						if l := len("profiles/"); len(elem) >= l && elem[0:l] == "profiles/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "account_handle"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ProfilesGet
								r.name = "ProfilesGet"
								r.operationID = "ProfilesGet"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 't': // Prefix: "threads"
						if l := len("threads"); len(elem) >= l && elem[0:l] == "threads" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ThreadsList"
								r.operationID = "ThreadsList"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "ThreadsCreate"
								r.operationID = "ThreadsCreate"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "thread_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "ThreadsGet"
									r.operationID = "ThreadsGet"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/posts"
								if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: PostsCreate
										r.name = "PostsCreate"
										r.operationID = "PostsCreate"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'e': // Prefix: "ersion"
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetVersion
							r.name = "GetVersion"
							r.operationID = "GetVersion"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
