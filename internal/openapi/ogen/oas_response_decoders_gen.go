// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"bytes"
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeAccountsGetResponse(resp *http.Response) (res AccountsGetRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response CommonProperties
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeAccountsGetAvatarResponse(resp *http.Response) (res AccountsGetAvatarRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "image/png":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := AccountsGetAvatar{Data: bytes.NewReader(b)}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeAccountsSetAvatarResponse(resp *http.Response) (res AccountsSetAvatarRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &AccountsSetAvatarOK{}, nil
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeAccountsUpdateResponse(resp *http.Response) (res AccountsUpdateRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response CommonProperties
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeAuthOAuthProviderCallbackResponse(resp *http.Response) (res AuthOAuthProviderCallbackRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response AuthSuccess
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			var wrapper AuthSuccessHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse 'Set-Cookie' header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
					var wrapperDotSetCookieVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapperDotSetCookieVal = c
						return nil
					}(); err != nil {
						return err
					}
					wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
					return nil
				}); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeAuthOAuthProviderListResponse(resp *http.Response) (res AuthOAuthProviderListRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response AuthOAuthProviderListBody
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &BadRequest{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeAuthPasswordSigninResponse(resp *http.Response) (res AuthPasswordSigninRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response AuthSuccess
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			var wrapper AuthSuccessHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse 'Set-Cookie' header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
					var wrapperDotSetCookieVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapperDotSetCookieVal = c
						return nil
					}(); err != nil {
						return err
					}
					wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
					return nil
				}); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeAuthPasswordSignupResponse(resp *http.Response) (res AuthPasswordSignupRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response AuthSuccess
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			var wrapper AuthSuccessHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse 'Set-Cookie' header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
					var wrapperDotSetCookieVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapperDotSetCookieVal = c
						return nil
					}(); err != nil {
						return err
					}
					wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
					return nil
				}); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &BadRequest{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeGetSpecResponse(resp *http.Response) (res GetSpecOK, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "text/plain":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := GetSpecOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeGetVersionResponse(resp *http.Response) (res GetVersionOK, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "text/plain":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := GetVersionOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodePostsCreateResponse(resp *http.Response) (res PostsCreateRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response Post
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeProfilesGetResponse(resp *http.Response) (res ProfilesGetRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response CommonProperties
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeThreadsCreateResponse(resp *http.Response) (res ThreadsCreateRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response ThreadReference
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeThreadsGetResponse(resp *http.Response) (res ThreadsGetRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response ThreadReference
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeThreadsListResponse(resp *http.Response) (res ThreadsListRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response ThreadsListOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeWebAuthnGetAssertionResponse(resp *http.Response) (res WebAuthnGetAssertionRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response AuthSuccess
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			var wrapper AuthSuccessHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse 'Set-Cookie' header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
					var wrapperDotSetCookieVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapperDotSetCookieVal = c
						return nil
					}(); err != nil {
						return err
					}
					wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
					return nil
				}); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeWebAuthnMakeAssertionResponse(resp *http.Response) (res WebAuthnMakeAssertionRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response AuthSuccess
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			var wrapper AuthSuccessHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse 'Set-Cookie' header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
					var wrapperDotSetCookieVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapperDotSetCookieVal = c
						return nil
					}(); err != nil {
						return err
					}
					wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
					return nil
				}); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &Unauthorised{}, nil
	case 404:
		// Code 404.
		return &NotFound{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeWebAuthnMakeCredentialResponse(resp *http.Response) (res WebAuthnMakeCredentialRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response AuthSuccess
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			var wrapper AuthSuccessHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse 'Set-Cookie' header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
					var wrapperDotSetCookieVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapperDotSetCookieVal = c
						return nil
					}(); err != nil {
						return err
					}
					wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
					return nil
				}); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &BadRequest{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}

func decodeWebAuthnRequestCredentialResponse(resp *http.Response) (res WebAuthnRequestCredentialRes, err error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response WebAuthnPublicKeyCreationOptions
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "decode \"application/json\"")
			}
			if err := d.Skip(); err != io.EOF {
				return res, errors.New("unexpected trailing data")
			}
			var wrapper WebAuthnPublicKeyCreationOptionsHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse 'Set-Cookie' header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
					var wrapperDotSetCookieVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapperDotSetCookieVal = c
						return nil
					}(); err != nil {
						return err
					}
					wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
					return nil
				}); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &BadRequest{}, nil
	}
	// Default response.
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return res, err
		}

		d := jx.DecodeBytes(b)
		var response APIError
		if err := func() error {
			if err := response.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := d.Skip(); err != io.EOF {
			return res, errors.New("unexpected trailing data")
		}
		return &APIErrorStatusCode{
			StatusCode: resp.StatusCode,
			Response:   response,
		}, nil
	default:
		return res, validate.InvalidContentType(ct)
	}
}
