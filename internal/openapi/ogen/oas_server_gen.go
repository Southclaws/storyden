// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AccountsGet implements AccountsGet operation.
	//
	// Get the information for the currently authenticated account.
	//
	// GET /v1/accounts
	AccountsGet(ctx context.Context) (AccountsGetRes, error)
	// AccountsGetAvatar implements AccountsGetAvatar operation.
	//
	// Get an avatar for the specified account.
	//
	// GET /v1/accounts/{account_handle}/avatar
	AccountsGetAvatar(ctx context.Context, params AccountsGetAvatarParams) (AccountsGetAvatarRes, error)
	// AccountsSetAvatar implements AccountsSetAvatar operation.
	//
	// Upload an avatar for the authenticated account.
	//
	// POST /v1/accounts/self/avatar
	AccountsSetAvatar(ctx context.Context, req AccountsSetAvatarReq) (AccountsSetAvatarRes, error)
	// AccountsUpdate implements AccountsUpdate operation.
	//
	// Update the information for the currently authenticated account.
	//
	// PATCH /v1/accounts
	AccountsUpdate(ctx context.Context, req OptAccountsUpdateBody) (AccountsUpdateRes, error)
	// AuthOAuthProviderCallback implements AuthOAuthProviderCallback operation.
	//
	// Sign in to an existing account with a username and password.
	//
	// POST /v1/auth/oauth/{oauth_provider}/callback
	AuthOAuthProviderCallback(ctx context.Context, req OptAuthOAuthProviderCallbackBody, params AuthOAuthProviderCallbackParams) (AuthOAuthProviderCallbackRes, error)
	// AuthOAuthProviderList implements AuthOAuthProviderList operation.
	//
	// Retrieve a list of OAuth2 providers and their links.
	//
	// GET /v1/auth/oauth
	AuthOAuthProviderList(ctx context.Context) (AuthOAuthProviderListRes, error)
	// AuthPasswordSignin implements AuthPasswordSignin operation.
	//
	// Sign in to an existing account with a username and password.
	//
	// POST /v1/auth/password/signin
	AuthPasswordSignin(ctx context.Context, req AuthPasswordSigninReq) (AuthPasswordSigninRes, error)
	// AuthPasswordSignup implements AuthPasswordSignup operation.
	//
	// Register a new account with a username and password.
	//
	// POST /v1/auth/password/signup
	AuthPasswordSignup(ctx context.Context, req AuthPasswordSignupReq) (AuthPasswordSignupRes, error)
	// GetSpec implements GetSpec operation.
	//
	// Note: the generator creates a `map[string]interface{}` if this is set to
	// `application/json`... so I'm just using plain text for now.
	//
	// GET /openapi.json
	GetSpec(ctx context.Context) (GetSpecOK, error)
	// GetVersion implements GetVersion operation.
	//
	// The version number includes the date and time of the release build as
	// well as a short representation of the Git commit hash.
	//
	// GET /version
	GetVersion(ctx context.Context) (GetVersionOK, error)
	// PostsCreate implements PostsCreate operation.
	//
	// Create a new post within a thread.
	//
	// POST /v1/threads/{thread_id}/posts
	PostsCreate(ctx context.Context, req OptPost, params PostsCreateParams) (PostsCreateRes, error)
	// ProfilesGet implements ProfilesGet operation.
	//
	// Get a public profile by ID.
	//
	// GET /v1/profiles/{account_handle}
	ProfilesGet(ctx context.Context, params ProfilesGetParams) (ProfilesGetRes, error)
	// ThreadsList implements ThreadsList operation.
	//
	// Get a list of all threads.
	//
	// GET /v1/threads
	ThreadsList(ctx context.Context, params ThreadsListParams) (ThreadsListRes, error)
	// WebAuthnGetAssertion implements WebAuthnGetAssertion operation.
	//
	// Start the WebAuthn assertion for an existing account.
	//
	// POST /v1/auth/webauthn/assert/{account_handle}
	WebAuthnGetAssertion(ctx context.Context, req WebAuthnGetAssertionReq, params WebAuthnGetAssertionParams) (WebAuthnGetAssertionRes, error)
	// WebAuthnMakeAssertion implements WebAuthnMakeAssertion operation.
	//
	// Complete the credential assertion and sign in to an account.
	//
	// GET /v1/auth/webauthn/assert
	WebAuthnMakeAssertion(ctx context.Context, req WebAuthnMakeAssertionReq) (WebAuthnMakeAssertionRes, error)
	// WebAuthnMakeCredential implements WebAuthnMakeCredential operation.
	//
	// Complete WebAuthn registration by creating a new credential.
	//
	// GET /v1/auth/webauthn/make
	WebAuthnMakeCredential(ctx context.Context, req *WebAuthnMakeCredentialReq) (WebAuthnMakeCredentialRes, error)
	// WebAuthnRequestCredential implements WebAuthnRequestCredential operation.
	//
	// Start the WebAuthn registration process by requesting a credential.
	//
	// POST /v1/auth/webauthn/make/{account_handle}
	WebAuthnRequestCredential(ctx context.Context, params WebAuthnRequestCredentialParams) (WebAuthnRequestCredentialRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...Option) (*Server, error) {
	s, err := newConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
