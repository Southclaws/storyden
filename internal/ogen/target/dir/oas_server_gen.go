// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AccountGet implements AccountGet operation.
	//
	// Get the information for the currently authenticated account.
	//
	// GET /v1/accounts
	AccountGet(ctx context.Context) (AccountGetRes, error)
	// AccountGetAvatar implements AccountGetAvatar operation.
	//
	// Get an avatar for the specified account.
	//
	// GET /v1/accounts/{account_handle}/avatar
	AccountGetAvatar(ctx context.Context, params AccountGetAvatarParams) (AccountGetAvatarRes, error)
	// AccountSetAvatar implements AccountSetAvatar operation.
	//
	// Upload an avatar for the authenticated account.
	//
	// POST /v1/accounts/self/avatar
	AccountSetAvatar(ctx context.Context, req AccountSetAvatarReq) (AccountSetAvatarRes, error)
	// AccountUpdate implements AccountUpdate operation.
	//
	// Update the information for the currently authenticated account.
	//
	// PATCH /v1/accounts
	AccountUpdate(ctx context.Context, req OptAccountMutableProps) (AccountUpdateRes, error)
	// AuthPasswordSignin implements AuthPasswordSignin operation.
	//
	// Sign in to an existing account with a username and password.
	//
	// POST /v1/auth/password/signin
	AuthPasswordSignin(ctx context.Context, req OptAuthPair) (AuthPasswordSigninRes, error)
	// AuthPasswordSignup implements AuthPasswordSignup operation.
	//
	// Register a new account with a username and password.
	//
	// POST /v1/auth/password/signup
	AuthPasswordSignup(ctx context.Context, req OptAuthPair) (AuthPasswordSignupRes, error)
	// AuthProviderList implements AuthProviderList operation.
	//
	// Retrieve a list of authentication providers. Storyden supports a few
	// ways to authenticate, from simple passwords to OAuth and WebAuthn. This
	// endpoint tells a client which auth capabilities are enabled.
	//
	// GET /v1/auth
	AuthProviderList(ctx context.Context) (AuthProviderListRes, error)
	// AuthProviderLogout implements AuthProviderLogout operation.
	//
	// Remove cookies from requesting client.
	//
	// GET /v1/auth/logout
	AuthProviderLogout(ctx context.Context) (AuthProviderLogoutRes, error)
	// CategoriesList implements CategoriesList operation.
	//
	// Get a list of all categories on the site.
	//
	// GET /v1/categories
	CategoriesList(ctx context.Context) (CategoriesListRes, error)
	// GetSpec implements GetSpec operation.
	//
	// Note: the generator creates a `map[string]interface{}` if this is set to
	// `application/json`... so I'm just using plain text for now.
	//
	// GET /openapi.json
	GetSpec(ctx context.Context) (GetSpecOK, error)
	// GetVersion implements GetVersion operation.
	//
	// The version number includes the date and time of the release build as
	// well as a short representation of the Git commit hash.
	//
	// GET /version
	GetVersion(ctx context.Context) (GetVersionOK, error)
	// OAuthProviderCallback implements OAuthProviderCallback operation.
	//
	// Sign in to an existing account with a username and password.
	//
	// POST /v1/auth/oauth/{oauth_provider}/callback
	OAuthProviderCallback(ctx context.Context, req OptOAuthCallback, params OAuthProviderCallbackParams) (OAuthProviderCallbackRes, error)
	// PostsCreate implements PostsCreate operation.
	//
	// Create a new post within a thread.
	//
	// POST /v1/threads/{thread_mark}/posts
	PostsCreate(ctx context.Context, req OptPostInitialProps, params PostsCreateParams) (PostsCreateRes, error)
	// ProfileGet implements ProfileGet operation.
	//
	// Get a public profile by ID.
	//
	// GET /v1/profiles/{account_handle}
	ProfileGet(ctx context.Context, params ProfileGetParams) (ProfileGetRes, error)
	// ThreadsCreate implements ThreadsCreate operation.
	//
	// Create a new thread within the specified category.
	//
	// POST /v1/threads
	ThreadsCreate(ctx context.Context, req OptThreadMutableProps) (ThreadsCreateRes, error)
	// ThreadsGet implements ThreadsGet operation.
	//
	// Get information about a thread such as its title, author, when it was
	// created as well as a list of the posts within the thread.
	//
	// GET /v1/threads/{thread_mark}
	ThreadsGet(ctx context.Context, params ThreadsGetParams) (ThreadsGetRes, error)
	// ThreadsList implements ThreadsList operation.
	//
	// Get a list of all threads.
	//
	// GET /v1/threads
	ThreadsList(ctx context.Context, params ThreadsListParams) (ThreadsListRes, error)
	// WebAuthnGetAssertion implements WebAuthnGetAssertion operation.
	//
	// Start the WebAuthn assertion for an existing account.
	//
	// GET /v1/auth/webauthn/assert/{account_handle}
	WebAuthnGetAssertion(ctx context.Context, params WebAuthnGetAssertionParams) (WebAuthnGetAssertionRes, error)
	// WebAuthnMakeAssertion implements WebAuthnMakeAssertion operation.
	//
	// Complete the credential assertion and sign in to an account.
	//
	// POST /v1/auth/webauthn/assert
	WebAuthnMakeAssertion(ctx context.Context, req OptPublicKeyCredential) (WebAuthnMakeAssertionRes, error)
	// WebAuthnMakeCredential implements WebAuthnMakeCredential operation.
	//
	// Complete WebAuthn registration by creating a new credential.
	//
	// POST /v1/auth/webauthn/make
	WebAuthnMakeCredential(ctx context.Context, req OptPublicKeyCredential) (WebAuthnMakeCredentialRes, error)
	// WebAuthnRequestCredential implements WebAuthnRequestCredential operation.
	//
	// Start the WebAuthn registration process by requesting a credential.
	//
	// GET /v1/auth/webauthn/make/{account_handle}
	WebAuthnRequestCredential(ctx context.Context, params WebAuthnRequestCredentialParams) (WebAuthnRequestCredentialRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
