// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AccountAuthProviderList implements AccountAuthProviderList operation.
//
// Retrieve a list of authentication providers with a flag indicating which
// ones are active for the currently authenticated account.
//
// GET /v1/accounts/self/auth-methods
func (UnimplementedHandler) AccountAuthProviderList(ctx context.Context) (r AccountAuthProviderListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountGet implements AccountGet operation.
//
// Get the information for the currently authenticated account.
//
// GET /v1/accounts
func (UnimplementedHandler) AccountGet(ctx context.Context) (r AccountGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountGetAvatar implements AccountGetAvatar operation.
//
// Get an avatar for the specified account.
//
// GET /v1/accounts/{account_handle}/avatar
func (UnimplementedHandler) AccountGetAvatar(ctx context.Context, params AccountGetAvatarParams) (r AccountGetAvatarRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountSetAvatar implements AccountSetAvatar operation.
//
// Upload an avatar for the authenticated account.
//
// POST /v1/accounts/self/avatar
func (UnimplementedHandler) AccountSetAvatar(ctx context.Context, req AccountSetAvatarReq) (r AccountSetAvatarRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountUpdate implements AccountUpdate operation.
//
// Update the information for the currently authenticated account.
//
// PATCH /v1/accounts
func (UnimplementedHandler) AccountUpdate(ctx context.Context, req OptAccountMutableProps) (r AccountUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AssetGet implements AssetGet operation.
//
// Download an asset by its ID.
//
// GET /v1/assets/{id}
func (UnimplementedHandler) AssetGet(ctx context.Context, params AssetGetParams) (r AssetGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AssetUpload implements AssetUpload operation.
//
// Upload and process a media file.
//
// POST /v1/assets
func (UnimplementedHandler) AssetUpload(ctx context.Context, req AssetUploadReq) (r AssetUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthPasswordSignin implements AuthPasswordSignin operation.
//
// Sign in to an existing account with a username and password.
//
// POST /v1/auth/password/signin
func (UnimplementedHandler) AuthPasswordSignin(ctx context.Context, req OptAuthPair) (r AuthPasswordSigninRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthPasswordSignup implements AuthPasswordSignup operation.
//
// Register a new account with a username and password.
//
// POST /v1/auth/password/signup
func (UnimplementedHandler) AuthPasswordSignup(ctx context.Context, req OptAuthPair) (r AuthPasswordSignupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthProviderList implements AuthProviderList operation.
//
// Retrieve a list of authentication providers. Storyden supports a few
// ways to authenticate, from simple passwords to OAuth and WebAuthn. This
// endpoint tells a client which auth capabilities are enabled.
//
// GET /v1/auth
func (UnimplementedHandler) AuthProviderList(ctx context.Context) (r AuthProviderListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthProviderLogout implements AuthProviderLogout operation.
//
// Remove cookies from requesting client.
//
// GET /v1/auth/logout
func (UnimplementedHandler) AuthProviderLogout(ctx context.Context) (r AuthProviderLogoutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CategoryCreate implements CategoryCreate operation.
//
// Create a category for organising posts.
//
// POST /v1/categories
func (UnimplementedHandler) CategoryCreate(ctx context.Context, req OptCategoryInitialProps) (r CategoryCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CategoryList implements CategoryList operation.
//
// Get a list of all categories on the site.
//
// GET /v1/categories
func (UnimplementedHandler) CategoryList(ctx context.Context) (r CategoryListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CategoryUpdateOrder implements CategoryUpdateOrder operation.
//
// Update the sort order of categories.
//
// PATCH /v1/categories
func (UnimplementedHandler) CategoryUpdateOrder(ctx context.Context, req *CategoryIdentifierList) (r CategoryUpdateOrderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionAddPost implements CollectionAddPost operation.
//
// Add a post to a collection. The collection must be owned by the account
// making the request. The post can be any published post of any kind.
//
// PUT /v1/collections/{collection_id}/items/{post_id}
func (UnimplementedHandler) CollectionAddPost(ctx context.Context, params CollectionAddPostParams) (r CollectionAddPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionCreate implements CollectionCreate operation.
//
// Create a collection for curating posts under the authenticated account.
//
// POST /v1/collections
func (UnimplementedHandler) CollectionCreate(ctx context.Context, req OptCollectionInitialProps) (r CollectionCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionGet implements CollectionGet operation.
//
// Get a collection by its ID. Collections can be public or private so the
// response will depend on which account is making the request and if the
// target collection is public, private, owned or not owned by the account.
//
// GET /v1/collections/{collection_id}
func (UnimplementedHandler) CollectionGet(ctx context.Context, params CollectionGetParams) (r CollectionGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionList implements CollectionList operation.
//
// List all collections using the filtering options.
//
// GET /v1/collections
func (UnimplementedHandler) CollectionList(ctx context.Context) (r CollectionListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionRemovePost implements CollectionRemovePost operation.
//
// Remove a post from a collection. The collection must be owned by the
// account making the request.
//
// DELETE /v1/collections/{collection_id}/items/{post_id}
func (UnimplementedHandler) CollectionRemovePost(ctx context.Context, params CollectionRemovePostParams) (r CollectionRemovePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionUpdate implements CollectionUpdate operation.
//
// Update a collection owned by the authenticated account.
//
// PATCH /v1/collections/{collection_id}
func (UnimplementedHandler) CollectionUpdate(ctx context.Context, req OptCollectionMutableProps, params CollectionUpdateParams) (r CollectionUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetInfo implements GetInfo operation.
//
// Get the basic forum installation info such as title, description, etc.
//
// GET /v1/info
func (UnimplementedHandler) GetInfo(ctx context.Context) (r GetInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSpec implements GetSpec operation.
//
// Note: the generator creates a `map[string]interface{}` if this is set to
// `application/json`... so I'm just using plain text for now.
//
// GET /openapi.json
func (UnimplementedHandler) GetSpec(ctx context.Context) (r GetSpecOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersion implements GetVersion operation.
//
// The version number includes the date and time of the release build as
// well as a short representation of the Git commit hash.
//
// GET /version
func (UnimplementedHandler) GetVersion(ctx context.Context) (r GetVersionOK, _ error) {
	return r, ht.ErrNotImplemented
}

// OAuthProviderCallback implements OAuthProviderCallback operation.
//
// Sign in to an existing account with a username and password.
//
// POST /v1/auth/oauth/{oauth_provider}/callback
func (UnimplementedHandler) OAuthProviderCallback(ctx context.Context, req OptOAuthCallback, params OAuthProviderCallbackParams) (r OAuthProviderCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PhoneRequestCode implements PhoneRequestCode operation.
//
// Start the authentication flow with a phone number. The handler will send
// a one-time code to the provided phone number which must then be sent to
// the other phone endpoint to verify the number and validate the account.
//
// POST /v1/auth/phone
func (UnimplementedHandler) PhoneRequestCode(ctx context.Context, req OptPhoneRequestCodeProps) (r PhoneRequestCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PhoneSubmitCode implements PhoneSubmitCode operation.
//
// Complete the phone number authentication flow by submitting the one-time
// code that was sent to the user's phone.
//
// PUT /v1/auth/phone/{account_handle}
func (UnimplementedHandler) PhoneSubmitCode(ctx context.Context, req OptPhoneSubmitCodeProps, params PhoneSubmitCodeParams) (r PhoneSubmitCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostCreate implements PostCreate operation.
//
// Create a new post within a thread.
//
// POST /v1/threads/{thread_mark}/posts
func (UnimplementedHandler) PostCreate(ctx context.Context, req OptPostInitialProps, params PostCreateParams) (r PostCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostDelete implements PostDelete operation.
//
// Archive a post using soft-delete.
//
// DELETE /v1/posts/{post_id}
func (UnimplementedHandler) PostDelete(ctx context.Context, params PostDeleteParams) (r PostDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostReactAdd implements PostReactAdd operation.
//
// Add a reaction to a post.
//
// PUT /v1/posts/{post_id}/reacts
func (UnimplementedHandler) PostReactAdd(ctx context.Context, req OptPostReactProps, params PostReactAddParams) (r PostReactAddRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostSearch implements PostSearch operation.
//
// Search through posts using various queries and filters.
//
// GET /v1/posts/search
func (UnimplementedHandler) PostSearch(ctx context.Context, params PostSearchParams) (r PostSearchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostUpdate implements PostUpdate operation.
//
// Publish changes to a single post.
//
// PATCH /v1/posts/{post_id}
func (UnimplementedHandler) PostUpdate(ctx context.Context, req OptPostMutableProps, params PostUpdateParams) (r PostUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ProfileGet implements ProfileGet operation.
//
// Get a public profile by ID.
//
// GET /v1/profiles/{account_handle}
func (UnimplementedHandler) ProfileGet(ctx context.Context, params ProfileGetParams) (r ProfileGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadCreate implements ThreadCreate operation.
//
// Create a new thread within the specified category.
//
// POST /v1/threads
func (UnimplementedHandler) ThreadCreate(ctx context.Context, req OptThreadInitialProps) (r ThreadCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadDelete implements ThreadDelete operation.
//
// Archive a thread using soft-delete.
//
// DELETE /v1/threads/{thread_mark}
func (UnimplementedHandler) ThreadDelete(ctx context.Context, params ThreadDeleteParams) (r ThreadDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadGet implements ThreadGet operation.
//
// Get information about a thread such as its title, author, when it was
// created as well as a list of the posts within the thread.
//
// GET /v1/threads/{thread_mark}
func (UnimplementedHandler) ThreadGet(ctx context.Context, params ThreadGetParams) (r ThreadGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadList implements ThreadList operation.
//
// Get a list of all threads.
//
// GET /v1/threads
func (UnimplementedHandler) ThreadList(ctx context.Context, params ThreadListParams) (r ThreadListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadUpdate implements ThreadUpdate operation.
//
// Publish changes to a thread.
//
// PATCH /v1/threads/{thread_mark}
func (UnimplementedHandler) ThreadUpdate(ctx context.Context, req OptThreadMutableProps, params ThreadUpdateParams) (r ThreadUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnGetAssertion implements WebAuthnGetAssertion operation.
//
// Start the WebAuthn assertion for an existing account.
//
// GET /v1/auth/webauthn/assert/{account_handle}
func (UnimplementedHandler) WebAuthnGetAssertion(ctx context.Context, params WebAuthnGetAssertionParams) (r WebAuthnGetAssertionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnMakeAssertion implements WebAuthnMakeAssertion operation.
//
// Complete the credential assertion and sign in to an account.
//
// POST /v1/auth/webauthn/assert
func (UnimplementedHandler) WebAuthnMakeAssertion(ctx context.Context, req OptPublicKeyCredential) (r WebAuthnMakeAssertionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnMakeCredential implements WebAuthnMakeCredential operation.
//
// Complete WebAuthn registration by creating a new credential.
//
// POST /v1/auth/webauthn/make
func (UnimplementedHandler) WebAuthnMakeCredential(ctx context.Context, req OptPublicKeyCredential) (r WebAuthnMakeCredentialRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnRequestCredential implements WebAuthnRequestCredential operation.
//
// Start the WebAuthn registration process by requesting a credential.
//
// GET /v1/auth/webauthn/make/{account_handle}
func (UnimplementedHandler) WebAuthnRequestCredential(ctx context.Context, params WebAuthnRequestCredentialParams) (r WebAuthnRequestCredentialRes, _ error) {
	return r, ht.ErrNotImplemented
}
