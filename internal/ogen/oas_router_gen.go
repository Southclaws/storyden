// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "openapi.json"
				if l := len("openapi.json"); len(elem) >= l && elem[0:l] == "openapi.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetSpecRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'v': // Prefix: "v"
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"
					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccounts"
							if l := len("ccounts"); len(elem) >= l && elem[0:l] == "ccounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleAccountGetRequest([0]string{}, w, r)
								case "PATCH":
									s.handleAccountUpdateRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "self/avatar"
									if l := len("self/avatar"); len(elem) >= l && elem[0:l] == "self/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleAccountSetAvatarRequest([0]string{}, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
								// Param: "account_handle"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/avatar"
									if l := len("/avatar"); len(elem) >= l && elem[0:l] == "/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAccountGetAvatarRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						case 'u': // Prefix: "uth"
							if l := len("uth"); len(elem) >= l && elem[0:l] == "uth" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleAuthProviderListRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "logout"
									if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAuthProviderLogoutRequest([0]string{}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'o': // Prefix: "oauth/"
									if l := len("oauth/"); len(elem) >= l && elem[0:l] == "oauth/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "oauth_provider"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/callback"
										if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleOAuthProviderCallbackRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'p': // Prefix: "password/sign"
									if l := len("password/sign"); len(elem) >= l && elem[0:l] == "password/sign" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "in"
										if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleAuthPasswordSigninRequest([0]string{}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									case 'u': // Prefix: "up"
										if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleAuthPasswordSignupRequest([0]string{}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'w': // Prefix: "webauthn/"
									if l := len("webauthn/"); len(elem) >= l && elem[0:l] == "webauthn/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assert"
										if l := len("assert"); len(elem) >= l && elem[0:l] == "assert" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleWebAuthnMakeAssertionRequest([0]string{}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWebAuthnGetAssertionRequest([1]string{
														args[0],
													}, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'm': // Prefix: "make"
										if l := len("make"); len(elem) >= l && elem[0:l] == "make" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleWebAuthnMakeCredentialRequest([0]string{}, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWebAuthnRequestCredentialRequest([1]string{
														args[0],
													}, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							}
						}
					case 'c': // Prefix: "categories"
						if l := len("categories"); len(elem) >= l && elem[0:l] == "categories" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleCategoriesListRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 'p': // Prefix: "profiles/"
						if l := len("profiles/"); len(elem) >= l && elem[0:l] == "profiles/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "account_handle"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleProfileGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 't': // Prefix: "threads"
						if l := len("threads"); len(elem) >= l && elem[0:l] == "threads" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleThreadsListRequest([0]string{}, w, r)
							case "POST":
								s.handleThreadsCreateRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "thread_mark"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleThreadsGetRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/posts"
								if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handlePostsCreateRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							}
						}
					}
				case 'e': // Prefix: "ersion"
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetVersionRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "openapi.json"
				if l := len("openapi.json"); len(elem) >= l && elem[0:l] == "openapi.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetSpec
						r.name = "GetSpec"
						r.operationID = "GetSpec"
						r.pathPattern = "/openapi.json"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'v': // Prefix: "v"
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"
					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccounts"
							if l := len("ccounts"); len(elem) >= l && elem[0:l] == "ccounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "AccountGet"
									r.operationID = "AccountGet"
									r.pathPattern = "/v1/accounts"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = "AccountUpdate"
									r.operationID = "AccountUpdate"
									r.pathPattern = "/v1/accounts"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "self/avatar"
									if l := len("self/avatar"); len(elem) >= l && elem[0:l] == "self/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: AccountSetAvatar
											r.name = "AccountSetAvatar"
											r.operationID = "AccountSetAvatar"
											r.pathPattern = "/v1/accounts/self/avatar"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
								// Param: "account_handle"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/avatar"
									if l := len("/avatar"); len(elem) >= l && elem[0:l] == "/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: AccountGetAvatar
											r.name = "AccountGetAvatar"
											r.operationID = "AccountGetAvatar"
											r.pathPattern = "/v1/accounts/{account_handle}/avatar"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						case 'u': // Prefix: "uth"
							if l := len("uth"); len(elem) >= l && elem[0:l] == "uth" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "AuthProviderList"
									r.operationID = "AuthProviderList"
									r.pathPattern = "/v1/auth"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "logout"
									if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: AuthProviderLogout
											r.name = "AuthProviderLogout"
											r.operationID = "AuthProviderLogout"
											r.pathPattern = "/v1/auth/logout"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'o': // Prefix: "oauth/"
									if l := len("oauth/"); len(elem) >= l && elem[0:l] == "oauth/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "oauth_provider"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/callback"
										if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: OAuthProviderCallback
												r.name = "OAuthProviderCallback"
												r.operationID = "OAuthProviderCallback"
												r.pathPattern = "/v1/auth/oauth/{oauth_provider}/callback"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								case 'p': // Prefix: "password/sign"
									if l := len("password/sign"); len(elem) >= l && elem[0:l] == "password/sign" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "in"
										if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: AuthPasswordSignin
												r.name = "AuthPasswordSignin"
												r.operationID = "AuthPasswordSignin"
												r.pathPattern = "/v1/auth/password/signin"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'u': // Prefix: "up"
										if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: AuthPasswordSignup
												r.name = "AuthPasswordSignup"
												r.operationID = "AuthPasswordSignup"
												r.pathPattern = "/v1/auth/password/signup"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'w': // Prefix: "webauthn/"
									if l := len("webauthn/"); len(elem) >= l && elem[0:l] == "webauthn/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assert"
										if l := len("assert"); len(elem) >= l && elem[0:l] == "assert" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "WebAuthnMakeAssertion"
												r.operationID = "WebAuthnMakeAssertion"
												r.pathPattern = "/v1/auth/webauthn/assert"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WebAuthnGetAssertion
													r.name = "WebAuthnGetAssertion"
													r.operationID = "WebAuthnGetAssertion"
													r.pathPattern = "/v1/auth/webauthn/assert/{account_handle}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'm': // Prefix: "make"
										if l := len("make"); len(elem) >= l && elem[0:l] == "make" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "WebAuthnMakeCredential"
												r.operationID = "WebAuthnMakeCredential"
												r.pathPattern = "/v1/auth/webauthn/make"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WebAuthnRequestCredential
													r.name = "WebAuthnRequestCredential"
													r.operationID = "WebAuthnRequestCredential"
													r.pathPattern = "/v1/auth/webauthn/make/{account_handle}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						}
					case 'c': // Prefix: "categories"
						if l := len("categories"); len(elem) >= l && elem[0:l] == "categories" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: CategoriesList
								r.name = "CategoriesList"
								r.operationID = "CategoriesList"
								r.pathPattern = "/v1/categories"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'p': // Prefix: "profiles/"
						if l := len("profiles/"); len(elem) >= l && elem[0:l] == "profiles/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "account_handle"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ProfileGet
								r.name = "ProfileGet"
								r.operationID = "ProfileGet"
								r.pathPattern = "/v1/profiles/{account_handle}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 't': // Prefix: "threads"
						if l := len("threads"); len(elem) >= l && elem[0:l] == "threads" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ThreadsList"
								r.operationID = "ThreadsList"
								r.pathPattern = "/v1/threads"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "ThreadsCreate"
								r.operationID = "ThreadsCreate"
								r.pathPattern = "/v1/threads"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "thread_mark"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "ThreadsGet"
									r.operationID = "ThreadsGet"
									r.pathPattern = "/v1/threads/{thread_mark}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/posts"
								if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: PostsCreate
										r.name = "PostsCreate"
										r.operationID = "PostsCreate"
										r.pathPattern = "/v1/threads/{thread_mark}/posts"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'e': // Prefix: "ersion"
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetVersion
							r.name = "GetVersion"
							r.operationID = "GetVersion"
							r.pathPattern = "/version"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
