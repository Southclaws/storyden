// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// A description of an error including a human readable message and any
// related metadata from the request and associated services.
// Ref: #/components/schemas/APIError
type APIError struct {
	// The internal error, not intended for end-user display.
	Error string `json:"error"`
	// A human-readable message intended for end-user display.
	Message OptString `json:"message"`
	// A suggested action for the user.
	Suggested OptString `json:"suggested"`
	// Any additional metadata related to the error.
	Metadata OptAPIErrorMetadata `json:"metadata"`
}

// GetError returns the value of Error.
func (s *APIError) GetError() string {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *APIError) GetMessage() OptString {
	return s.Message
}

// GetSuggested returns the value of Suggested.
func (s *APIError) GetSuggested() OptString {
	return s.Suggested
}

// GetMetadata returns the value of Metadata.
func (s *APIError) GetMetadata() OptAPIErrorMetadata {
	return s.Metadata
}

// SetError sets the value of Error.
func (s *APIError) SetError(val string) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *APIError) SetMessage(val OptString) {
	s.Message = val
}

// SetSuggested sets the value of Suggested.
func (s *APIError) SetSuggested(val OptString) {
	s.Suggested = val
}

// SetMetadata sets the value of Metadata.
func (s *APIError) SetMetadata(val OptAPIErrorMetadata) {
	s.Metadata = val
}

// Any additional metadata related to the error.
type APIErrorMetadata map[string]jx.Raw

func (s *APIErrorMetadata) init() APIErrorMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// APIErrorStatusCode wraps APIError with StatusCode.
type APIErrorStatusCode struct {
	StatusCode int
	Response   APIError
}

// GetStatusCode returns the value of StatusCode.
func (s *APIErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *APIErrorStatusCode) GetResponse() APIError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *APIErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *APIErrorStatusCode) SetResponse(val APIError) {
	s.Response = val
}

func (*APIErrorStatusCode) accountAuthProviderListRes()   {}
func (*APIErrorStatusCode) accountGetAvatarRes()          {}
func (*APIErrorStatusCode) accountGetRes()                {}
func (*APIErrorStatusCode) accountSetAvatarRes()          {}
func (*APIErrorStatusCode) accountUpdateRes()             {}
func (*APIErrorStatusCode) assetGetRes()                  {}
func (*APIErrorStatusCode) assetUploadRes()               {}
func (*APIErrorStatusCode) authPasswordSigninRes()        {}
func (*APIErrorStatusCode) authPasswordSignupRes()        {}
func (*APIErrorStatusCode) authProviderListRes()          {}
func (*APIErrorStatusCode) authProviderLogoutRes()        {}
func (*APIErrorStatusCode) categoryCreateRes()            {}
func (*APIErrorStatusCode) categoryListRes()              {}
func (*APIErrorStatusCode) categoryUpdateOrderRes()       {}
func (*APIErrorStatusCode) collectionAddPostRes()         {}
func (*APIErrorStatusCode) collectionCreateRes()          {}
func (*APIErrorStatusCode) collectionGetRes()             {}
func (*APIErrorStatusCode) collectionListRes()            {}
func (*APIErrorStatusCode) collectionRemovePostRes()      {}
func (*APIErrorStatusCode) collectionUpdateRes()          {}
func (*APIErrorStatusCode) getInfoRes()                   {}
func (*APIErrorStatusCode) oAuthProviderCallbackRes()     {}
func (*APIErrorStatusCode) phoneRequestCodeRes()          {}
func (*APIErrorStatusCode) phoneSubmitCodeRes()           {}
func (*APIErrorStatusCode) postCreateRes()                {}
func (*APIErrorStatusCode) postDeleteRes()                {}
func (*APIErrorStatusCode) postReactAddRes()              {}
func (*APIErrorStatusCode) postSearchRes()                {}
func (*APIErrorStatusCode) postUpdateRes()                {}
func (*APIErrorStatusCode) profileGetRes()                {}
func (*APIErrorStatusCode) threadCreateRes()              {}
func (*APIErrorStatusCode) threadDeleteRes()              {}
func (*APIErrorStatusCode) threadGetRes()                 {}
func (*APIErrorStatusCode) threadListRes()                {}
func (*APIErrorStatusCode) threadUpdateRes()              {}
func (*APIErrorStatusCode) webAuthnGetAssertionRes()      {}
func (*APIErrorStatusCode) webAuthnMakeAssertionRes()     {}
func (*APIErrorStatusCode) webAuthnMakeCredentialRes()    {}
func (*APIErrorStatusCode) webAuthnRequestCredentialRes() {}

// Merged schema.
// Ref: #/components/schemas/Account
type Account struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc      *AccountMisc  `json:"misc"`
	Handle    AccountHandle `json:"handle"`
	Name      AccountName   `json:"name"`
	Bio       OptString     `json:"bio"`
	Interests *TagList      `json:"interests"`
	Admin     bool          `json:"admin"`
}

// GetID returns the value of ID.
func (s *Account) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Account) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Account) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Account) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Account) GetMisc() *AccountMisc {
	return s.Misc
}

// GetHandle returns the value of Handle.
func (s *Account) GetHandle() AccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *Account) GetName() AccountName {
	return s.Name
}

// GetBio returns the value of Bio.
func (s *Account) GetBio() OptString {
	return s.Bio
}

// GetInterests returns the value of Interests.
func (s *Account) GetInterests() *TagList {
	return s.Interests
}

// GetAdmin returns the value of Admin.
func (s *Account) GetAdmin() bool {
	return s.Admin
}

// SetID sets the value of ID.
func (s *Account) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Account) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Account) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Account) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Account) SetMisc(val *AccountMisc) {
	s.Misc = val
}

// SetHandle sets the value of Handle.
func (s *Account) SetHandle(val AccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *Account) SetName(val AccountName) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *Account) SetBio(val OptString) {
	s.Bio = val
}

// SetInterests sets the value of Interests.
func (s *Account) SetInterests(val *TagList) {
	s.Interests = val
}

// SetAdmin sets the value of Admin.
func (s *Account) SetAdmin(val bool) {
	s.Admin = val
}

func (*Account) accountGetRes()    {}
func (*Account) accountUpdateRes() {}

// Merged schema.
// Ref: #/components/schemas/AccountAuthMethod
type AccountAuthMethod struct {
	// The slug name of the provider.
	Provider string `json:"provider"`
	// The human-readable name of the provider.
	Name string `json:"name"`
	// The logo to display for the provider.
	LogoURL string `json:"logo_url"`
	// The hyperlink to render for the user.
	Link string `json:"link"`
	// True if the account is using this auth method.
	Active bool `json:"active"`
}

// GetProvider returns the value of Provider.
func (s *AccountAuthMethod) GetProvider() string {
	return s.Provider
}

// GetName returns the value of Name.
func (s *AccountAuthMethod) GetName() string {
	return s.Name
}

// GetLogoURL returns the value of LogoURL.
func (s *AccountAuthMethod) GetLogoURL() string {
	return s.LogoURL
}

// GetLink returns the value of Link.
func (s *AccountAuthMethod) GetLink() string {
	return s.Link
}

// GetActive returns the value of Active.
func (s *AccountAuthMethod) GetActive() bool {
	return s.Active
}

// SetProvider sets the value of Provider.
func (s *AccountAuthMethod) SetProvider(val string) {
	s.Provider = val
}

// SetName sets the value of Name.
func (s *AccountAuthMethod) SetName(val string) {
	s.Name = val
}

// SetLogoURL sets the value of LogoURL.
func (s *AccountAuthMethod) SetLogoURL(val string) {
	s.LogoURL = val
}

// SetLink sets the value of Link.
func (s *AccountAuthMethod) SetLink(val string) {
	s.Link = val
}

// SetActive sets the value of Active.
func (s *AccountAuthMethod) SetActive(val bool) {
	s.Active = val
}

type AccountAuthMethodList []AccountAuthMethod

// Ref: #/components/schemas/AccountAuthMethods
type AccountAuthMethods struct {
	AuthMethods AccountAuthMethodList `json:"auth_methods"`
}

// GetAuthMethods returns the value of AuthMethods.
func (s *AccountAuthMethods) GetAuthMethods() AccountAuthMethodList {
	return s.AuthMethods
}

// SetAuthMethods sets the value of AuthMethods.
func (s *AccountAuthMethods) SetAuthMethods(val AccountAuthMethodList) {
	s.AuthMethods = val
}

func (*AccountAuthMethods) accountAuthProviderListRes() {}

type AccountGetAvatar struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AccountGetAvatar) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*AccountGetAvatar) accountGetAvatarRes() {}

type AccountHandle string

// Arbitrary extra data stored with the resource.
type AccountMisc struct{}

// Ref: #/components/schemas/AccountMutableProps
type AccountMutableProps struct {
	Handle    OptAccountHandle `json:"handle"`
	Name      OptAccountName   `json:"name"`
	Bio       OptString        `json:"bio"`
	Interests *TagListIDs      `json:"interests"`
}

// GetHandle returns the value of Handle.
func (s *AccountMutableProps) GetHandle() OptAccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *AccountMutableProps) GetName() OptAccountName {
	return s.Name
}

// GetBio returns the value of Bio.
func (s *AccountMutableProps) GetBio() OptString {
	return s.Bio
}

// GetInterests returns the value of Interests.
func (s *AccountMutableProps) GetInterests() *TagListIDs {
	return s.Interests
}

// SetHandle sets the value of Handle.
func (s *AccountMutableProps) SetHandle(val OptAccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *AccountMutableProps) SetName(val OptAccountName) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *AccountMutableProps) SetBio(val OptString) {
	s.Bio = val
}

// SetInterests sets the value of Interests.
func (s *AccountMutableProps) SetInterests(val *TagListIDs) {
	s.Interests = val
}

type AccountName string

// AccountSetAvatarOK is response for AccountSetAvatar operation.
type AccountSetAvatarOK struct{}

func (*AccountSetAvatarOK) accountSetAvatarRes() {}

type AccountSetAvatarReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AccountSetAvatarReq) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

// Ref: #/components/schemas/Asset
type Asset struct {
	ID       Identifier `json:"id"`
	URL      string     `json:"url"`
	MimeType string     `json:"mime_type"`
	Width    float64    `json:"width"`
	Height   float64    `json:"height"`
}

// GetID returns the value of ID.
func (s *Asset) GetID() Identifier {
	return s.ID
}

// GetURL returns the value of URL.
func (s *Asset) GetURL() string {
	return s.URL
}

// GetMimeType returns the value of MimeType.
func (s *Asset) GetMimeType() string {
	return s.MimeType
}

// GetWidth returns the value of Width.
func (s *Asset) GetWidth() float64 {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *Asset) GetHeight() float64 {
	return s.Height
}

// SetID sets the value of ID.
func (s *Asset) SetID(val Identifier) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *Asset) SetURL(val string) {
	s.URL = val
}

// SetMimeType sets the value of MimeType.
func (s *Asset) SetMimeType(val string) {
	s.MimeType = val
}

// SetWidth sets the value of Width.
func (s *Asset) SetWidth(val float64) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Asset) SetHeight(val float64) {
	s.Height = val
}

func (*Asset) assetUploadRes() {}

type AssetGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AssetGetOK) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*AssetGetOK) assetGetRes() {}

type AssetList []Asset

type AssetUploadReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AssetUploadReq) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

// Https://www.w3.org/TR/webauthn-2/#enum-attestation-convey.
// Ref: #/components/schemas/AttestationConveyancePreference
type AttestationConveyancePreference string

const (
	AttestationConveyancePreferenceDirect     AttestationConveyancePreference = "direct"
	AttestationConveyancePreferenceEnterprise AttestationConveyancePreference = "enterprise"
	AttestationConveyancePreferenceIndirect   AttestationConveyancePreference = "indirect"
	AttestationConveyancePreferenceNone       AttestationConveyancePreference = "none"
)

// MarshalText implements encoding.TextMarshaler.
func (s AttestationConveyancePreference) MarshalText() ([]byte, error) {
	switch s {
	case AttestationConveyancePreferenceDirect:
		return []byte(s), nil
	case AttestationConveyancePreferenceEnterprise:
		return []byte(s), nil
	case AttestationConveyancePreferenceIndirect:
		return []byte(s), nil
	case AttestationConveyancePreferenceNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AttestationConveyancePreference) UnmarshalText(data []byte) error {
	switch AttestationConveyancePreference(data) {
	case AttestationConveyancePreferenceDirect:
		*s = AttestationConveyancePreferenceDirect
		return nil
	case AttestationConveyancePreferenceEnterprise:
		*s = AttestationConveyancePreferenceEnterprise
		return nil
	case AttestationConveyancePreferenceIndirect:
		*s = AttestationConveyancePreferenceIndirect
		return nil
	case AttestationConveyancePreferenceNone:
		*s = AttestationConveyancePreferenceNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AuthPair
type AuthPair struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// GetIdentifier returns the value of Identifier.
func (s *AuthPair) GetIdentifier() string {
	return s.Identifier
}

// GetToken returns the value of Token.
func (s *AuthPair) GetToken() string {
	return s.Token
}

// SetIdentifier sets the value of Identifier.
func (s *AuthPair) SetIdentifier(val string) {
	s.Identifier = val
}

// SetToken sets the value of Token.
func (s *AuthPair) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/AuthProvider
type AuthProvider struct {
	// The slug name of the provider.
	Provider string `json:"provider"`
	// The human-readable name of the provider.
	Name string `json:"name"`
	// The logo to display for the provider.
	LogoURL string `json:"logo_url"`
	// The hyperlink to render for the user.
	Link string `json:"link"`
}

// GetProvider returns the value of Provider.
func (s *AuthProvider) GetProvider() string {
	return s.Provider
}

// GetName returns the value of Name.
func (s *AuthProvider) GetName() string {
	return s.Name
}

// GetLogoURL returns the value of LogoURL.
func (s *AuthProvider) GetLogoURL() string {
	return s.LogoURL
}

// GetLink returns the value of Link.
func (s *AuthProvider) GetLink() string {
	return s.Link
}

// SetProvider sets the value of Provider.
func (s *AuthProvider) SetProvider(val string) {
	s.Provider = val
}

// SetName sets the value of Name.
func (s *AuthProvider) SetName(val string) {
	s.Name = val
}

// SetLogoURL sets the value of LogoURL.
func (s *AuthProvider) SetLogoURL(val string) {
	s.LogoURL = val
}

// SetLink sets the value of Link.
func (s *AuthProvider) SetLink(val string) {
	s.Link = val
}

type AuthProviderList []AuthProvider

type AuthProviderListOK struct {
	Providers AuthProviderList `json:"providers"`
}

// GetProviders returns the value of Providers.
func (s *AuthProviderListOK) GetProviders() AuthProviderList {
	return s.Providers
}

// SetProviders sets the value of Providers.
func (s *AuthProviderListOK) SetProviders(val AuthProviderList) {
	s.Providers = val
}

func (*AuthProviderListOK) authProviderListRes() {}

// AuthProviderLogoutOK is response for AuthProviderLogout operation.
type AuthProviderLogoutOK struct {
	SetCookie OptString
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthProviderLogoutOK) GetSetCookie() OptString {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthProviderLogoutOK) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*AuthProviderLogoutOK) authProviderLogoutRes() {}

// Ref: #/components/schemas/AuthSuccess
type AuthSuccess struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *AuthSuccess) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *AuthSuccess) SetID(val string) {
	s.ID = val
}

// AuthSuccessHeaders wraps AuthSuccess with response headers.
type AuthSuccessHeaders struct {
	SetCookie OptString
	Response  AuthSuccess
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthSuccessHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *AuthSuccessHeaders) GetResponse() AuthSuccess {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthSuccessHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *AuthSuccessHeaders) SetResponse(val AuthSuccess) {
	s.Response = val
}

func (*AuthSuccessHeaders) authPasswordSigninRes()     {}
func (*AuthSuccessHeaders) authPasswordSignupRes()     {}
func (*AuthSuccessHeaders) oAuthProviderCallbackRes()  {}
func (*AuthSuccessHeaders) phoneRequestCodeRes()       {}
func (*AuthSuccessHeaders) phoneSubmitCodeRes()        {}
func (*AuthSuccessHeaders) webAuthnMakeAssertionRes()  {}
func (*AuthSuccessHeaders) webAuthnMakeCredentialRes() {}

// Https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs.
// Ref: #/components/schemas/AuthenticationExtensionsClientInputs
type AuthenticationExtensionsClientInputs map[string]jx.Raw

func (s *AuthenticationExtensionsClientInputs) init() AuthenticationExtensionsClientInputs {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment.
// Ref: #/components/schemas/AuthenticatorAttachment
type AuthenticatorAttachment string

const (
	AuthenticatorAttachmentPlatform      AuthenticatorAttachment = "platform"
	AuthenticatorAttachmentCrossPlatform AuthenticatorAttachment = "cross-platform"
)

// MarshalText implements encoding.TextMarshaler.
func (s AuthenticatorAttachment) MarshalText() ([]byte, error) {
	switch s {
	case AuthenticatorAttachmentPlatform:
		return []byte(s), nil
	case AuthenticatorAttachmentCrossPlatform:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthenticatorAttachment) UnmarshalText(data []byte) error {
	switch AuthenticatorAttachment(data) {
	case AuthenticatorAttachmentPlatform:
		*s = AuthenticatorAttachmentPlatform
		return nil
	case AuthenticatorAttachmentCrossPlatform:
		*s = AuthenticatorAttachmentCrossPlatform
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#authenticatorresponse.
// Ref: #/components/schemas/AuthenticatorResponse
type AuthenticatorResponse struct {
	ClientDataJSON    string    `json:"clientDataJSON"`
	AttestationObject OptString `json:"attestationObject"`
	Transports        []string  `json:"transports"`
	AuthenticatorData OptString `json:"authenticatorData"`
	Signature         OptString `json:"signature"`
	UserHandle        OptString `json:"userHandle"`
}

// GetClientDataJSON returns the value of ClientDataJSON.
func (s *AuthenticatorResponse) GetClientDataJSON() string {
	return s.ClientDataJSON
}

// GetAttestationObject returns the value of AttestationObject.
func (s *AuthenticatorResponse) GetAttestationObject() OptString {
	return s.AttestationObject
}

// GetTransports returns the value of Transports.
func (s *AuthenticatorResponse) GetTransports() []string {
	return s.Transports
}

// GetAuthenticatorData returns the value of AuthenticatorData.
func (s *AuthenticatorResponse) GetAuthenticatorData() OptString {
	return s.AuthenticatorData
}

// GetSignature returns the value of Signature.
func (s *AuthenticatorResponse) GetSignature() OptString {
	return s.Signature
}

// GetUserHandle returns the value of UserHandle.
func (s *AuthenticatorResponse) GetUserHandle() OptString {
	return s.UserHandle
}

// SetClientDataJSON sets the value of ClientDataJSON.
func (s *AuthenticatorResponse) SetClientDataJSON(val string) {
	s.ClientDataJSON = val
}

// SetAttestationObject sets the value of AttestationObject.
func (s *AuthenticatorResponse) SetAttestationObject(val OptString) {
	s.AttestationObject = val
}

// SetTransports sets the value of Transports.
func (s *AuthenticatorResponse) SetTransports(val []string) {
	s.Transports = val
}

// SetAuthenticatorData sets the value of AuthenticatorData.
func (s *AuthenticatorResponse) SetAuthenticatorData(val OptString) {
	s.AuthenticatorData = val
}

// SetSignature sets the value of Signature.
func (s *AuthenticatorResponse) SetSignature(val OptString) {
	s.Signature = val
}

// SetUserHandle sets the value of UserHandle.
func (s *AuthenticatorResponse) SetUserHandle(val OptString) {
	s.UserHandle = val
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria.
// Ref: #/components/schemas/AuthenticatorSelectionCriteria
type AuthenticatorSelectionCriteria struct {
	AuthenticatorAttachment AuthenticatorAttachment        `json:"authenticatorAttachment"`
	ResidentKey             ResidentKeyRequirement         `json:"residentKey"`
	RequireResidentKey      OptBool                        `json:"requireResidentKey"`
	UserVerification        OptUserVerificationRequirement `json:"userVerification"`
}

// GetAuthenticatorAttachment returns the value of AuthenticatorAttachment.
func (s *AuthenticatorSelectionCriteria) GetAuthenticatorAttachment() AuthenticatorAttachment {
	return s.AuthenticatorAttachment
}

// GetResidentKey returns the value of ResidentKey.
func (s *AuthenticatorSelectionCriteria) GetResidentKey() ResidentKeyRequirement {
	return s.ResidentKey
}

// GetRequireResidentKey returns the value of RequireResidentKey.
func (s *AuthenticatorSelectionCriteria) GetRequireResidentKey() OptBool {
	return s.RequireResidentKey
}

// GetUserVerification returns the value of UserVerification.
func (s *AuthenticatorSelectionCriteria) GetUserVerification() OptUserVerificationRequirement {
	return s.UserVerification
}

// SetAuthenticatorAttachment sets the value of AuthenticatorAttachment.
func (s *AuthenticatorSelectionCriteria) SetAuthenticatorAttachment(val AuthenticatorAttachment) {
	s.AuthenticatorAttachment = val
}

// SetResidentKey sets the value of ResidentKey.
func (s *AuthenticatorSelectionCriteria) SetResidentKey(val ResidentKeyRequirement) {
	s.ResidentKey = val
}

// SetRequireResidentKey sets the value of RequireResidentKey.
func (s *AuthenticatorSelectionCriteria) SetRequireResidentKey(val OptBool) {
	s.RequireResidentKey = val
}

// SetUserVerification sets the value of UserVerification.
func (s *AuthenticatorSelectionCriteria) SetUserVerification(val OptUserVerificationRequirement) {
	s.UserVerification = val
}

// Ref: #/components/responses/BadRequest
type BadRequest struct{}

func (*BadRequest) accountAuthProviderListRes()   {}
func (*BadRequest) authPasswordSignupRes()        {}
func (*BadRequest) authProviderListRes()          {}
func (*BadRequest) authProviderLogoutRes()        {}
func (*BadRequest) categoryCreateRes()            {}
func (*BadRequest) phoneRequestCodeRes()          {}
func (*BadRequest) phoneSubmitCodeRes()           {}
func (*BadRequest) webAuthnMakeCredentialRes()    {}
func (*BadRequest) webAuthnRequestCredentialRes() {}

type Browser struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Browser) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Browser) SetAPIKey(val string) {
	s.APIKey = val
}

// Merged schema.
// Ref: #/components/schemas/Category
type Category struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CategoryMisc `json:"misc"`
	Name        CategoryName  `json:"name"`
	Description OptString     `json:"description"`
	Colour      OptString     `json:"colour"`
	Sort        int           `json:"sort"`
	Admin       OptBool       `json:"admin"`
	PostCount   int           `json:"postCount"`
}

// GetID returns the value of ID.
func (s *Category) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Category) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Category) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Category) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Category) GetMisc() *CategoryMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *Category) GetName() CategoryName {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Category) GetDescription() OptString {
	return s.Description
}

// GetColour returns the value of Colour.
func (s *Category) GetColour() OptString {
	return s.Colour
}

// GetSort returns the value of Sort.
func (s *Category) GetSort() int {
	return s.Sort
}

// GetAdmin returns the value of Admin.
func (s *Category) GetAdmin() OptBool {
	return s.Admin
}

// GetPostCount returns the value of PostCount.
func (s *Category) GetPostCount() int {
	return s.PostCount
}

// SetID sets the value of ID.
func (s *Category) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Category) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Category) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Category) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Category) SetMisc(val *CategoryMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *Category) SetName(val CategoryName) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Category) SetDescription(val OptString) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *Category) SetColour(val OptString) {
	s.Colour = val
}

// SetSort sets the value of Sort.
func (s *Category) SetSort(val int) {
	s.Sort = val
}

// SetAdmin sets the value of Admin.
func (s *Category) SetAdmin(val OptBool) {
	s.Admin = val
}

// SetPostCount sets the value of PostCount.
func (s *Category) SetPostCount(val int) {
	s.PostCount = val
}

func (*Category) categoryCreateRes() {}

type CategoryIdentifierList []Identifier

// Ref: #/components/schemas/CategoryInitialProps
type CategoryInitialProps struct {
	Name        CategoryName `json:"name"`
	Description string       `json:"description"`
	Colour      string       `json:"colour"`
	Admin       bool         `json:"admin"`
}

// GetName returns the value of Name.
func (s *CategoryInitialProps) GetName() CategoryName {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CategoryInitialProps) GetDescription() string {
	return s.Description
}

// GetColour returns the value of Colour.
func (s *CategoryInitialProps) GetColour() string {
	return s.Colour
}

// GetAdmin returns the value of Admin.
func (s *CategoryInitialProps) GetAdmin() bool {
	return s.Admin
}

// SetName sets the value of Name.
func (s *CategoryInitialProps) SetName(val CategoryName) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CategoryInitialProps) SetDescription(val string) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *CategoryInitialProps) SetColour(val string) {
	s.Colour = val
}

// SetAdmin sets the value of Admin.
func (s *CategoryInitialProps) SetAdmin(val bool) {
	s.Admin = val
}

// Ref: #/components/schemas/CategoryList
type CategoryList struct {
	Categories []Category `json:"categories"`
}

// GetCategories returns the value of Categories.
func (s *CategoryList) GetCategories() []Category {
	return s.Categories
}

// SetCategories sets the value of Categories.
func (s *CategoryList) SetCategories(val []Category) {
	s.Categories = val
}

func (*CategoryList) categoryListRes()        {}
func (*CategoryList) categoryUpdateOrderRes() {}

// Arbitrary extra data stored with the resource.
type CategoryMisc struct{}

type CategoryName string

type CategoryNameList []CategoryName

// Merged schema.
// Ref: #/components/schemas/CategoryReference
type CategoryReference struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CategoryReferenceMisc `json:"misc"`
	Name        CategoryName           `json:"name"`
	Description OptString              `json:"description"`
	Colour      OptString              `json:"colour"`
	Sort        int                    `json:"sort"`
	Admin       OptBool                `json:"admin"`
}

// GetID returns the value of ID.
func (s *CategoryReference) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CategoryReference) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CategoryReference) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *CategoryReference) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *CategoryReference) GetMisc() *CategoryReferenceMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *CategoryReference) GetName() CategoryName {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CategoryReference) GetDescription() OptString {
	return s.Description
}

// GetColour returns the value of Colour.
func (s *CategoryReference) GetColour() OptString {
	return s.Colour
}

// GetSort returns the value of Sort.
func (s *CategoryReference) GetSort() int {
	return s.Sort
}

// GetAdmin returns the value of Admin.
func (s *CategoryReference) GetAdmin() OptBool {
	return s.Admin
}

// SetID sets the value of ID.
func (s *CategoryReference) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CategoryReference) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CategoryReference) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *CategoryReference) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *CategoryReference) SetMisc(val *CategoryReferenceMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *CategoryReference) SetName(val CategoryName) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CategoryReference) SetDescription(val OptString) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *CategoryReference) SetColour(val OptString) {
	s.Colour = val
}

// SetSort sets the value of Sort.
func (s *CategoryReference) SetSort(val int) {
	s.Sort = val
}

// SetAdmin sets the value of Admin.
func (s *CategoryReference) SetAdmin(val OptBool) {
	s.Admin = val
}

// Arbitrary extra data stored with the resource.
type CategoryReferenceMisc struct{}

// Merged schema.
// Ref: #/components/schemas/Collection
type Collection struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CollectionMisc  `json:"misc"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Owner       ProfileReference `json:"owner"`
}

// GetID returns the value of ID.
func (s *Collection) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Collection) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Collection) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Collection) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Collection) GetMisc() *CollectionMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *Collection) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Collection) GetDescription() string {
	return s.Description
}

// GetOwner returns the value of Owner.
func (s *Collection) GetOwner() ProfileReference {
	return s.Owner
}

// SetID sets the value of ID.
func (s *Collection) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Collection) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Collection) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Collection) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Collection) SetMisc(val *CollectionMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *Collection) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Collection) SetDescription(val string) {
	s.Description = val
}

// SetOwner sets the value of Owner.
func (s *Collection) SetOwner(val ProfileReference) {
	s.Owner = val
}

func (*Collection) collectionAddPostRes()    {}
func (*Collection) collectionCreateRes()     {}
func (*Collection) collectionRemovePostRes() {}
func (*Collection) collectionUpdateRes()     {}

// Ref: #/components/schemas/CollectionInitialProps
type CollectionInitialProps struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *CollectionInitialProps) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CollectionInitialProps) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *CollectionInitialProps) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CollectionInitialProps) SetDescription(val string) {
	s.Description = val
}

// Merged schema.
// Ref: #/components/schemas/CollectionItem
type CollectionItem struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc   *CollectionItemMisc `json:"misc"`
	Author ProfileReference    `json:"author"`
	Slug   ThreadMark          `json:"slug"`
	// The title of the thread.
	Title string `json:"title"`
	// A short version of the thread's body text for use in previews.
	Short string `json:"short"`
}

// GetID returns the value of ID.
func (s *CollectionItem) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CollectionItem) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CollectionItem) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *CollectionItem) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *CollectionItem) GetMisc() *CollectionItemMisc {
	return s.Misc
}

// GetAuthor returns the value of Author.
func (s *CollectionItem) GetAuthor() ProfileReference {
	return s.Author
}

// GetSlug returns the value of Slug.
func (s *CollectionItem) GetSlug() ThreadMark {
	return s.Slug
}

// GetTitle returns the value of Title.
func (s *CollectionItem) GetTitle() string {
	return s.Title
}

// GetShort returns the value of Short.
func (s *CollectionItem) GetShort() string {
	return s.Short
}

// SetID sets the value of ID.
func (s *CollectionItem) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CollectionItem) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CollectionItem) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *CollectionItem) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *CollectionItem) SetMisc(val *CollectionItemMisc) {
	s.Misc = val
}

// SetAuthor sets the value of Author.
func (s *CollectionItem) SetAuthor(val ProfileReference) {
	s.Author = val
}

// SetSlug sets the value of Slug.
func (s *CollectionItem) SetSlug(val ThreadMark) {
	s.Slug = val
}

// SetTitle sets the value of Title.
func (s *CollectionItem) SetTitle(val string) {
	s.Title = val
}

// SetShort sets the value of Short.
func (s *CollectionItem) SetShort(val string) {
	s.Short = val
}

type CollectionItemList []CollectionItem

// Arbitrary extra data stored with the resource.
type CollectionItemMisc struct{}

type CollectionList []Collection

type CollectionListOK struct {
	Collections CollectionList `json:"collections"`
}

// GetCollections returns the value of Collections.
func (s *CollectionListOK) GetCollections() CollectionList {
	return s.Collections
}

// SetCollections sets the value of Collections.
func (s *CollectionListOK) SetCollections(val CollectionList) {
	s.Collections = val
}

func (*CollectionListOK) collectionListRes() {}

// Arbitrary extra data stored with the resource.
type CollectionMisc struct{}

// Ref: #/components/schemas/CollectionMutableProps
type CollectionMutableProps struct {
	Name        OptString `json:"name"`
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *CollectionMutableProps) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CollectionMutableProps) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *CollectionMutableProps) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CollectionMutableProps) SetDescription(val OptString) {
	s.Description = val
}

// Merged schema.
// Ref: #/components/schemas/CollectionWithItems
type CollectionWithItems struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CollectionWithItemsMisc `json:"misc"`
	Name        string                   `json:"name"`
	Description string                   `json:"description"`
	Owner       ProfileReference         `json:"owner"`
	Items       CollectionItemList       `json:"items"`
}

// GetID returns the value of ID.
func (s *CollectionWithItems) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CollectionWithItems) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CollectionWithItems) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *CollectionWithItems) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *CollectionWithItems) GetMisc() *CollectionWithItemsMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *CollectionWithItems) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CollectionWithItems) GetDescription() string {
	return s.Description
}

// GetOwner returns the value of Owner.
func (s *CollectionWithItems) GetOwner() ProfileReference {
	return s.Owner
}

// GetItems returns the value of Items.
func (s *CollectionWithItems) GetItems() CollectionItemList {
	return s.Items
}

// SetID sets the value of ID.
func (s *CollectionWithItems) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CollectionWithItems) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CollectionWithItems) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *CollectionWithItems) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *CollectionWithItems) SetMisc(val *CollectionWithItemsMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *CollectionWithItems) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CollectionWithItems) SetDescription(val string) {
	s.Description = val
}

// SetOwner sets the value of Owner.
func (s *CollectionWithItems) SetOwner(val ProfileReference) {
	s.Owner = val
}

// SetItems sets the value of Items.
func (s *CollectionWithItems) SetItems(val CollectionItemList) {
	s.Items = val
}

func (*CollectionWithItems) collectionGetRes() {}

// Arbitrary extra data stored with the resource.
type CollectionWithItemsMisc struct{}

// Ref: #/components/schemas/ContentKind
type ContentKind string

const (
	ContentKindPost   ContentKind = "post"
	ContentKindThread ContentKind = "thread"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContentKind) MarshalText() ([]byte, error) {
	switch s {
	case ContentKindPost:
		return []byte(s), nil
	case ContentKindThread:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentKind) UnmarshalText(data []byte) error {
	switch ContentKind(data) {
	case ContentKindPost:
		*s = ContentKindPost
		return nil
	case ContentKindThread:
		*s = ContentKindThread
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContentKinds []ContentKind

// Https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension.
// Ref: #/components/schemas/CredentialRequestOptions
type CredentialRequestOptions struct {
	PublicKey PublicKeyCredentialRequestOptions `json:"publicKey"`
}

// GetPublicKey returns the value of PublicKey.
func (s *CredentialRequestOptions) GetPublicKey() PublicKeyCredentialRequestOptions {
	return s.PublicKey
}

// SetPublicKey sets the value of PublicKey.
func (s *CredentialRequestOptions) SetPublicKey(val PublicKeyCredentialRequestOptions) {
	s.PublicKey = val
}

// CredentialRequestOptionsHeaders wraps CredentialRequestOptions with response headers.
type CredentialRequestOptionsHeaders struct {
	SetCookie OptString
	Response  CredentialRequestOptions
}

// GetSetCookie returns the value of SetCookie.
func (s *CredentialRequestOptionsHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *CredentialRequestOptionsHeaders) GetResponse() CredentialRequestOptions {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *CredentialRequestOptionsHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *CredentialRequestOptionsHeaders) SetResponse(val CredentialRequestOptions) {
	s.Response = val
}

func (*CredentialRequestOptionsHeaders) webAuthnGetAssertionRes() {}

type GetSpecOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetSpecOK) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

type GetVersionOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVersionOK) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

type Identifier string

// Basic public information about the Storyden installation.
// Ref: #/components/schemas/Info
type Info struct {
	Title            string           `json:"title"`
	Description      string           `json:"description"`
	AccentColour     string           `json:"accent_colour"`
	OnboardingStatus OnboardingStatus `json:"onboarding_status"`
}

// GetTitle returns the value of Title.
func (s *Info) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Info) GetDescription() string {
	return s.Description
}

// GetAccentColour returns the value of AccentColour.
func (s *Info) GetAccentColour() string {
	return s.AccentColour
}

// GetOnboardingStatus returns the value of OnboardingStatus.
func (s *Info) GetOnboardingStatus() OnboardingStatus {
	return s.OnboardingStatus
}

// SetTitle sets the value of Title.
func (s *Info) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Info) SetDescription(val string) {
	s.Description = val
}

// SetAccentColour sets the value of AccentColour.
func (s *Info) SetAccentColour(val string) {
	s.AccentColour = val
}

// SetOnboardingStatus sets the value of OnboardingStatus.
func (s *Info) SetOnboardingStatus(val OnboardingStatus) {
	s.OnboardingStatus = val
}

func (*Info) getInfoRes() {}

// Arbitrary metadata for the resource.
// Ref: #/components/schemas/Metadata
type Metadata map[string]jx.Raw

func (s *Metadata) init() Metadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/responses/NotFound
type NotFound struct{}

func (*NotFound) accountGetAvatarRes()      {}
func (*NotFound) accountGetRes()            {}
func (*NotFound) accountSetAvatarRes()      {}
func (*NotFound) accountUpdateRes()         {}
func (*NotFound) assetGetRes()              {}
func (*NotFound) authPasswordSigninRes()    {}
func (*NotFound) collectionAddPostRes()     {}
func (*NotFound) collectionGetRes()         {}
func (*NotFound) collectionListRes()        {}
func (*NotFound) collectionRemovePostRes()  {}
func (*NotFound) collectionUpdateRes()      {}
func (*NotFound) oAuthProviderCallbackRes() {}
func (*NotFound) postCreateRes()            {}
func (*NotFound) postDeleteRes()            {}
func (*NotFound) postReactAddRes()          {}
func (*NotFound) postSearchRes()            {}
func (*NotFound) postUpdateRes()            {}
func (*NotFound) profileGetRes()            {}
func (*NotFound) threadCreateRes()          {}
func (*NotFound) threadDeleteRes()          {}
func (*NotFound) threadGetRes()             {}
func (*NotFound) threadListRes()            {}
func (*NotFound) threadUpdateRes()          {}
func (*NotFound) webAuthnGetAssertionRes()  {}
func (*NotFound) webAuthnMakeAssertionRes() {}

// Ref: #/components/schemas/OAuthCallback
type OAuthCallback struct {
	State string `json:"state"`
	Code  string `json:"code"`
}

// GetState returns the value of State.
func (s *OAuthCallback) GetState() string {
	return s.State
}

// GetCode returns the value of Code.
func (s *OAuthCallback) GetCode() string {
	return s.Code
}

// SetState sets the value of State.
func (s *OAuthCallback) SetState(val string) {
	s.State = val
}

// SetCode sets the value of Code.
func (s *OAuthCallback) SetCode(val string) {
	s.Code = val
}

// Derived from data state, indicates what stage in the onboarding process
// the Storyden installation is in for directing first-time setup steps.
// Ref: #/components/schemas/OnboardingStatus
type OnboardingStatus string

const (
	OnboardingStatusRequiresFirstAccount OnboardingStatus = "requires_first_account"
	OnboardingStatusRequiresCategory     OnboardingStatus = "requires_category"
	OnboardingStatusRequiresMoreAccounts OnboardingStatus = "requires_more_accounts"
	OnboardingStatusRequiresFirstPost    OnboardingStatus = "requires_first_post"
	OnboardingStatusComplete             OnboardingStatus = "complete"
)

// MarshalText implements encoding.TextMarshaler.
func (s OnboardingStatus) MarshalText() ([]byte, error) {
	switch s {
	case OnboardingStatusRequiresFirstAccount:
		return []byte(s), nil
	case OnboardingStatusRequiresCategory:
		return []byte(s), nil
	case OnboardingStatusRequiresMoreAccounts:
		return []byte(s), nil
	case OnboardingStatusRequiresFirstPost:
		return []byte(s), nil
	case OnboardingStatusComplete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OnboardingStatus) UnmarshalText(data []byte) error {
	switch OnboardingStatus(data) {
	case OnboardingStatusRequiresFirstAccount:
		*s = OnboardingStatusRequiresFirstAccount
		return nil
	case OnboardingStatusRequiresCategory:
		*s = OnboardingStatusRequiresCategory
		return nil
	case OnboardingStatusRequiresMoreAccounts:
		*s = OnboardingStatusRequiresMoreAccounts
		return nil
	case OnboardingStatusRequiresFirstPost:
		*s = OnboardingStatusRequiresFirstPost
		return nil
	case OnboardingStatusComplete:
		*s = OnboardingStatusComplete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptAPIErrorMetadata returns new OptAPIErrorMetadata with value set to v.
func NewOptAPIErrorMetadata(v APIErrorMetadata) OptAPIErrorMetadata {
	return OptAPIErrorMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAPIErrorMetadata is optional APIErrorMetadata.
type OptAPIErrorMetadata struct {
	Value APIErrorMetadata
	Set   bool
}

// IsSet returns true if OptAPIErrorMetadata was set.
func (o OptAPIErrorMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAPIErrorMetadata) Reset() {
	var v APIErrorMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAPIErrorMetadata) SetTo(v APIErrorMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAPIErrorMetadata) Get() (v APIErrorMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAPIErrorMetadata) Or(d APIErrorMetadata) APIErrorMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountHandle returns new OptAccountHandle with value set to v.
func NewOptAccountHandle(v AccountHandle) OptAccountHandle {
	return OptAccountHandle{
		Value: v,
		Set:   true,
	}
}

// OptAccountHandle is optional AccountHandle.
type OptAccountHandle struct {
	Value AccountHandle
	Set   bool
}

// IsSet returns true if OptAccountHandle was set.
func (o OptAccountHandle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountHandle) Reset() {
	var v AccountHandle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountHandle) SetTo(v AccountHandle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountHandle) Get() (v AccountHandle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountHandle) Or(d AccountHandle) AccountHandle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountMutableProps returns new OptAccountMutableProps with value set to v.
func NewOptAccountMutableProps(v AccountMutableProps) OptAccountMutableProps {
	return OptAccountMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptAccountMutableProps is optional AccountMutableProps.
type OptAccountMutableProps struct {
	Value AccountMutableProps
	Set   bool
}

// IsSet returns true if OptAccountMutableProps was set.
func (o OptAccountMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountMutableProps) Reset() {
	var v AccountMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountMutableProps) SetTo(v AccountMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountMutableProps) Get() (v AccountMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountMutableProps) Or(d AccountMutableProps) AccountMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountName returns new OptAccountName with value set to v.
func NewOptAccountName(v AccountName) OptAccountName {
	return OptAccountName{
		Value: v,
		Set:   true,
	}
}

// OptAccountName is optional AccountName.
type OptAccountName struct {
	Value AccountName
	Set   bool
}

// IsSet returns true if OptAccountName was set.
func (o OptAccountName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountName) Reset() {
	var v AccountName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountName) SetTo(v AccountName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountName) Get() (v AccountName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountName) Or(d AccountName) AccountName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAttestationConveyancePreference returns new OptAttestationConveyancePreference with value set to v.
func NewOptAttestationConveyancePreference(v AttestationConveyancePreference) OptAttestationConveyancePreference {
	return OptAttestationConveyancePreference{
		Value: v,
		Set:   true,
	}
}

// OptAttestationConveyancePreference is optional AttestationConveyancePreference.
type OptAttestationConveyancePreference struct {
	Value AttestationConveyancePreference
	Set   bool
}

// IsSet returns true if OptAttestationConveyancePreference was set.
func (o OptAttestationConveyancePreference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAttestationConveyancePreference) Reset() {
	var v AttestationConveyancePreference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAttestationConveyancePreference) SetTo(v AttestationConveyancePreference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAttestationConveyancePreference) Get() (v AttestationConveyancePreference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAttestationConveyancePreference) Or(d AttestationConveyancePreference) AttestationConveyancePreference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthPair returns new OptAuthPair with value set to v.
func NewOptAuthPair(v AuthPair) OptAuthPair {
	return OptAuthPair{
		Value: v,
		Set:   true,
	}
}

// OptAuthPair is optional AuthPair.
type OptAuthPair struct {
	Value AuthPair
	Set   bool
}

// IsSet returns true if OptAuthPair was set.
func (o OptAuthPair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthPair) Reset() {
	var v AuthPair
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthPair) SetTo(v AuthPair) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthPair) Get() (v AuthPair, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthPair) Or(d AuthPair) AuthPair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthenticationExtensionsClientInputs returns new OptAuthenticationExtensionsClientInputs with value set to v.
func NewOptAuthenticationExtensionsClientInputs(v AuthenticationExtensionsClientInputs) OptAuthenticationExtensionsClientInputs {
	return OptAuthenticationExtensionsClientInputs{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticationExtensionsClientInputs is optional AuthenticationExtensionsClientInputs.
type OptAuthenticationExtensionsClientInputs struct {
	Value AuthenticationExtensionsClientInputs
	Set   bool
}

// IsSet returns true if OptAuthenticationExtensionsClientInputs was set.
func (o OptAuthenticationExtensionsClientInputs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticationExtensionsClientInputs) Reset() {
	var v AuthenticationExtensionsClientInputs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticationExtensionsClientInputs) SetTo(v AuthenticationExtensionsClientInputs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticationExtensionsClientInputs) Get() (v AuthenticationExtensionsClientInputs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticationExtensionsClientInputs) Or(d AuthenticationExtensionsClientInputs) AuthenticationExtensionsClientInputs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthenticatorSelectionCriteria returns new OptAuthenticatorSelectionCriteria with value set to v.
func NewOptAuthenticatorSelectionCriteria(v AuthenticatorSelectionCriteria) OptAuthenticatorSelectionCriteria {
	return OptAuthenticatorSelectionCriteria{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticatorSelectionCriteria is optional AuthenticatorSelectionCriteria.
type OptAuthenticatorSelectionCriteria struct {
	Value AuthenticatorSelectionCriteria
	Set   bool
}

// IsSet returns true if OptAuthenticatorSelectionCriteria was set.
func (o OptAuthenticatorSelectionCriteria) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticatorSelectionCriteria) Reset() {
	var v AuthenticatorSelectionCriteria
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticatorSelectionCriteria) SetTo(v AuthenticatorSelectionCriteria) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticatorSelectionCriteria) Get() (v AuthenticatorSelectionCriteria, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticatorSelectionCriteria) Or(d AuthenticatorSelectionCriteria) AuthenticatorSelectionCriteria {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategoryInitialProps returns new OptCategoryInitialProps with value set to v.
func NewOptCategoryInitialProps(v CategoryInitialProps) OptCategoryInitialProps {
	return OptCategoryInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptCategoryInitialProps is optional CategoryInitialProps.
type OptCategoryInitialProps struct {
	Value CategoryInitialProps
	Set   bool
}

// IsSet returns true if OptCategoryInitialProps was set.
func (o OptCategoryInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategoryInitialProps) Reset() {
	var v CategoryInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategoryInitialProps) SetTo(v CategoryInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategoryInitialProps) Get() (v CategoryInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategoryInitialProps) Or(d CategoryInitialProps) CategoryInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollectionInitialProps returns new OptCollectionInitialProps with value set to v.
func NewOptCollectionInitialProps(v CollectionInitialProps) OptCollectionInitialProps {
	return OptCollectionInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptCollectionInitialProps is optional CollectionInitialProps.
type OptCollectionInitialProps struct {
	Value CollectionInitialProps
	Set   bool
}

// IsSet returns true if OptCollectionInitialProps was set.
func (o OptCollectionInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollectionInitialProps) Reset() {
	var v CollectionInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollectionInitialProps) SetTo(v CollectionInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollectionInitialProps) Get() (v CollectionInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollectionInitialProps) Or(d CollectionInitialProps) CollectionInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollectionMutableProps returns new OptCollectionMutableProps with value set to v.
func NewOptCollectionMutableProps(v CollectionMutableProps) OptCollectionMutableProps {
	return OptCollectionMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptCollectionMutableProps is optional CollectionMutableProps.
type OptCollectionMutableProps struct {
	Value CollectionMutableProps
	Set   bool
}

// IsSet returns true if OptCollectionMutableProps was set.
func (o OptCollectionMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollectionMutableProps) Reset() {
	var v CollectionMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollectionMutableProps) SetTo(v CollectionMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollectionMutableProps) Get() (v CollectionMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollectionMutableProps) Or(d CollectionMutableProps) CollectionMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdentifier returns new OptIdentifier with value set to v.
func NewOptIdentifier(v Identifier) OptIdentifier {
	return OptIdentifier{
		Value: v,
		Set:   true,
	}
}

// OptIdentifier is optional Identifier.
type OptIdentifier struct {
	Value Identifier
	Set   bool
}

// IsSet returns true if OptIdentifier was set.
func (o OptIdentifier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdentifier) Reset() {
	var v Identifier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdentifier) SetTo(v Identifier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdentifier) Get() (v Identifier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdentifier) Or(d Identifier) Identifier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetadata returns new OptMetadata with value set to v.
func NewOptMetadata(v Metadata) OptMetadata {
	return OptMetadata{
		Value: v,
		Set:   true,
	}
}

// OptMetadata is optional Metadata.
type OptMetadata struct {
	Value Metadata
	Set   bool
}

// IsSet returns true if OptMetadata was set.
func (o OptMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetadata) Reset() {
	var v Metadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetadata) SetTo(v Metadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetadata) Get() (v Metadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetadata) Or(d Metadata) Metadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOAuthCallback returns new OptOAuthCallback with value set to v.
func NewOptOAuthCallback(v OAuthCallback) OptOAuthCallback {
	return OptOAuthCallback{
		Value: v,
		Set:   true,
	}
}

// OptOAuthCallback is optional OAuthCallback.
type OptOAuthCallback struct {
	Value OAuthCallback
	Set   bool
}

// IsSet returns true if OptOAuthCallback was set.
func (o OptOAuthCallback) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOAuthCallback) Reset() {
	var v OAuthCallback
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOAuthCallback) SetTo(v OAuthCallback) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOAuthCallback) Get() (v OAuthCallback, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOAuthCallback) Or(d OAuthCallback) OAuthCallback {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneRequestCodeProps returns new OptPhoneRequestCodeProps with value set to v.
func NewOptPhoneRequestCodeProps(v PhoneRequestCodeProps) OptPhoneRequestCodeProps {
	return OptPhoneRequestCodeProps{
		Value: v,
		Set:   true,
	}
}

// OptPhoneRequestCodeProps is optional PhoneRequestCodeProps.
type OptPhoneRequestCodeProps struct {
	Value PhoneRequestCodeProps
	Set   bool
}

// IsSet returns true if OptPhoneRequestCodeProps was set.
func (o OptPhoneRequestCodeProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneRequestCodeProps) Reset() {
	var v PhoneRequestCodeProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneRequestCodeProps) SetTo(v PhoneRequestCodeProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneRequestCodeProps) Get() (v PhoneRequestCodeProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneRequestCodeProps) Or(d PhoneRequestCodeProps) PhoneRequestCodeProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneSubmitCodeProps returns new OptPhoneSubmitCodeProps with value set to v.
func NewOptPhoneSubmitCodeProps(v PhoneSubmitCodeProps) OptPhoneSubmitCodeProps {
	return OptPhoneSubmitCodeProps{
		Value: v,
		Set:   true,
	}
}

// OptPhoneSubmitCodeProps is optional PhoneSubmitCodeProps.
type OptPhoneSubmitCodeProps struct {
	Value PhoneSubmitCodeProps
	Set   bool
}

// IsSet returns true if OptPhoneSubmitCodeProps was set.
func (o OptPhoneSubmitCodeProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneSubmitCodeProps) Reset() {
	var v PhoneSubmitCodeProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneSubmitCodeProps) SetTo(v PhoneSubmitCodeProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneSubmitCodeProps) Get() (v PhoneSubmitCodeProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneSubmitCodeProps) Or(d PhoneSubmitCodeProps) PhoneSubmitCodeProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostContent returns new OptPostContent with value set to v.
func NewOptPostContent(v PostContent) OptPostContent {
	return OptPostContent{
		Value: v,
		Set:   true,
	}
}

// OptPostContent is optional PostContent.
type OptPostContent struct {
	Value PostContent
	Set   bool
}

// IsSet returns true if OptPostContent was set.
func (o OptPostContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostContent) Reset() {
	var v PostContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostContent) SetTo(v PostContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostContent) Get() (v PostContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostContent) Or(d PostContent) PostContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostInitialProps returns new OptPostInitialProps with value set to v.
func NewOptPostInitialProps(v PostInitialProps) OptPostInitialProps {
	return OptPostInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptPostInitialProps is optional PostInitialProps.
type OptPostInitialProps struct {
	Value PostInitialProps
	Set   bool
}

// IsSet returns true if OptPostInitialProps was set.
func (o OptPostInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostInitialProps) Reset() {
	var v PostInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostInitialProps) SetTo(v PostInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostInitialProps) Get() (v PostInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostInitialProps) Or(d PostInitialProps) PostInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostMutableProps returns new OptPostMutableProps with value set to v.
func NewOptPostMutableProps(v PostMutableProps) OptPostMutableProps {
	return OptPostMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptPostMutableProps is optional PostMutableProps.
type OptPostMutableProps struct {
	Value PostMutableProps
	Set   bool
}

// IsSet returns true if OptPostMutableProps was set.
func (o OptPostMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostMutableProps) Reset() {
	var v PostMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostMutableProps) SetTo(v PostMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostMutableProps) Get() (v PostMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostMutableProps) Or(d PostMutableProps) PostMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostReactProps returns new OptPostReactProps with value set to v.
func NewOptPostReactProps(v PostReactProps) OptPostReactProps {
	return OptPostReactProps{
		Value: v,
		Set:   true,
	}
}

// OptPostReactProps is optional PostReactProps.
type OptPostReactProps struct {
	Value PostReactProps
	Set   bool
}

// IsSet returns true if OptPostReactProps was set.
func (o OptPostReactProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostReactProps) Reset() {
	var v PostReactProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostReactProps) SetTo(v PostReactProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostReactProps) Get() (v PostReactProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostReactProps) Or(d PostReactProps) PostReactProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicKeyCredential returns new OptPublicKeyCredential with value set to v.
func NewOptPublicKeyCredential(v PublicKeyCredential) OptPublicKeyCredential {
	return OptPublicKeyCredential{
		Value: v,
		Set:   true,
	}
}

// OptPublicKeyCredential is optional PublicKeyCredential.
type OptPublicKeyCredential struct {
	Value PublicKeyCredential
	Set   bool
}

// IsSet returns true if OptPublicKeyCredential was set.
func (o OptPublicKeyCredential) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicKeyCredential) Reset() {
	var v PublicKeyCredential
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicKeyCredential) SetTo(v PublicKeyCredential) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicKeyCredential) Get() (v PublicKeyCredential, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicKeyCredential) Or(d PublicKeyCredential) PublicKeyCredential {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicKeyCredentialRequestOptionsUserVerification returns new OptPublicKeyCredentialRequestOptionsUserVerification with value set to v.
func NewOptPublicKeyCredentialRequestOptionsUserVerification(v PublicKeyCredentialRequestOptionsUserVerification) OptPublicKeyCredentialRequestOptionsUserVerification {
	return OptPublicKeyCredentialRequestOptionsUserVerification{
		Value: v,
		Set:   true,
	}
}

// OptPublicKeyCredentialRequestOptionsUserVerification is optional PublicKeyCredentialRequestOptionsUserVerification.
type OptPublicKeyCredentialRequestOptionsUserVerification struct {
	Value PublicKeyCredentialRequestOptionsUserVerification
	Set   bool
}

// IsSet returns true if OptPublicKeyCredentialRequestOptionsUserVerification was set.
func (o OptPublicKeyCredentialRequestOptionsUserVerification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicKeyCredentialRequestOptionsUserVerification) Reset() {
	var v PublicKeyCredentialRequestOptionsUserVerification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicKeyCredentialRequestOptionsUserVerification) SetTo(v PublicKeyCredentialRequestOptionsUserVerification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicKeyCredentialRequestOptionsUserVerification) Get() (v PublicKeyCredentialRequestOptionsUserVerification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicKeyCredentialRequestOptionsUserVerification) Or(d PublicKeyCredentialRequestOptionsUserVerification) PublicKeyCredentialRequestOptionsUserVerification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadInitialProps returns new OptThreadInitialProps with value set to v.
func NewOptThreadInitialProps(v ThreadInitialProps) OptThreadInitialProps {
	return OptThreadInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptThreadInitialProps is optional ThreadInitialProps.
type OptThreadInitialProps struct {
	Value ThreadInitialProps
	Set   bool
}

// IsSet returns true if OptThreadInitialProps was set.
func (o OptThreadInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadInitialProps) Reset() {
	var v ThreadInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadInitialProps) SetTo(v ThreadInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadInitialProps) Get() (v ThreadInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadInitialProps) Or(d ThreadInitialProps) ThreadInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadMutableProps returns new OptThreadMutableProps with value set to v.
func NewOptThreadMutableProps(v ThreadMutableProps) OptThreadMutableProps {
	return OptThreadMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptThreadMutableProps is optional ThreadMutableProps.
type OptThreadMutableProps struct {
	Value ThreadMutableProps
	Set   bool
}

// IsSet returns true if OptThreadMutableProps was set.
func (o OptThreadMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadMutableProps) Reset() {
	var v ThreadMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadMutableProps) SetTo(v ThreadMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadMutableProps) Get() (v ThreadMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadMutableProps) Or(d ThreadMutableProps) ThreadMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadStatus returns new OptThreadStatus with value set to v.
func NewOptThreadStatus(v ThreadStatus) OptThreadStatus {
	return OptThreadStatus{
		Value: v,
		Set:   true,
	}
}

// OptThreadStatus is optional ThreadStatus.
type OptThreadStatus struct {
	Value ThreadStatus
	Set   bool
}

// IsSet returns true if OptThreadStatus was set.
func (o OptThreadStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadStatus) Reset() {
	var v ThreadStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadStatus) SetTo(v ThreadStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadStatus) Get() (v ThreadStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadStatus) Or(d ThreadStatus) ThreadStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadTitle returns new OptThreadTitle with value set to v.
func NewOptThreadTitle(v ThreadTitle) OptThreadTitle {
	return OptThreadTitle{
		Value: v,
		Set:   true,
	}
}

// OptThreadTitle is optional ThreadTitle.
type OptThreadTitle struct {
	Value ThreadTitle
	Set   bool
}

// IsSet returns true if OptThreadTitle was set.
func (o OptThreadTitle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadTitle) Reset() {
	var v ThreadTitle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadTitle) SetTo(v ThreadTitle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadTitle) Get() (v ThreadTitle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadTitle) Or(d ThreadTitle) ThreadTitle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserVerificationRequirement returns new OptUserVerificationRequirement with value set to v.
func NewOptUserVerificationRequirement(v UserVerificationRequirement) OptUserVerificationRequirement {
	return OptUserVerificationRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserVerificationRequirement is optional UserVerificationRequirement.
type OptUserVerificationRequirement struct {
	Value UserVerificationRequirement
	Set   bool
}

// IsSet returns true if OptUserVerificationRequirement was set.
func (o OptUserVerificationRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserVerificationRequirement) Reset() {
	var v UserVerificationRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserVerificationRequirement) SetTo(v UserVerificationRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserVerificationRequirement) Get() (v UserVerificationRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserVerificationRequirement) Or(d UserVerificationRequirement) UserVerificationRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// The phone number request payload.
// Ref: #/components/schemas/PhoneRequestCodeProps
type PhoneRequestCodeProps struct {
	// The desired username to link to the phone number.
	Identifier string `json:"identifier"`
	// The phone number to receive the one-time code on.
	PhoneNumber string `json:"phone_number"`
}

// GetIdentifier returns the value of Identifier.
func (s *PhoneRequestCodeProps) GetIdentifier() string {
	return s.Identifier
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneRequestCodeProps) GetPhoneNumber() string {
	return s.PhoneNumber
}

// SetIdentifier sets the value of Identifier.
func (s *PhoneRequestCodeProps) SetIdentifier(val string) {
	s.Identifier = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneRequestCodeProps) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// The Phone submit code payload.
// Ref: #/components/schemas/PhoneSubmitCodeProps
type PhoneSubmitCodeProps struct {
	Code string `json:"code"`
}

// GetCode returns the value of Code.
func (s *PhoneSubmitCodeProps) GetCode() string {
	return s.Code
}

// SetCode sets the value of Code.
func (s *PhoneSubmitCodeProps) SetCode(val string) {
	s.Code = val
}

type PostContent string

// PostDeleteOK is response for PostDelete operation.
type PostDeleteOK struct{}

func (*PostDeleteOK) postDeleteRes() {}

// Ref: #/components/schemas/PostInitialProps
type PostInitialProps struct {
	Body    PostContent   `json:"body"`
	Meta    OptMetadata   `json:"meta"`
	ReplyTo OptIdentifier `json:"reply_to"`
}

// GetBody returns the value of Body.
func (s *PostInitialProps) GetBody() PostContent {
	return s.Body
}

// GetMeta returns the value of Meta.
func (s *PostInitialProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetReplyTo returns the value of ReplyTo.
func (s *PostInitialProps) GetReplyTo() OptIdentifier {
	return s.ReplyTo
}

// SetBody sets the value of Body.
func (s *PostInitialProps) SetBody(val PostContent) {
	s.Body = val
}

// SetMeta sets the value of Meta.
func (s *PostInitialProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetReplyTo sets the value of ReplyTo.
func (s *PostInitialProps) SetReplyTo(val OptIdentifier) {
	s.ReplyTo = val
}

// Ref: #/components/schemas/PostMutableProps
type PostMutableProps struct {
	Body OptPostContent `json:"body"`
	Meta OptMetadata    `json:"meta"`
}

// GetBody returns the value of Body.
func (s *PostMutableProps) GetBody() OptPostContent {
	return s.Body
}

// GetMeta returns the value of Meta.
func (s *PostMutableProps) GetMeta() OptMetadata {
	return s.Meta
}

// SetBody sets the value of Body.
func (s *PostMutableProps) SetBody(val OptPostContent) {
	s.Body = val
}

// SetMeta sets the value of Meta.
func (s *PostMutableProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// Merged schema.
// Ref: #/components/schemas/PostProps
type PostProps struct {
	RootID   Identifier       `json:"root_id"`
	RootSlug ThreadMark       `json:"root_slug"`
	Body     PostContent      `json:"body"`
	Author   ProfileReference `json:"author"`
	Meta     OptMetadata      `json:"meta"`
	Reacts   ReactList        `json:"reacts"`
	ReplyTo  OptIdentifier    `json:"reply_to"`
	Assets   AssetList        `json:"assets"`
}

// GetRootID returns the value of RootID.
func (s *PostProps) GetRootID() Identifier {
	return s.RootID
}

// GetRootSlug returns the value of RootSlug.
func (s *PostProps) GetRootSlug() ThreadMark {
	return s.RootSlug
}

// GetBody returns the value of Body.
func (s *PostProps) GetBody() PostContent {
	return s.Body
}

// GetAuthor returns the value of Author.
func (s *PostProps) GetAuthor() ProfileReference {
	return s.Author
}

// GetMeta returns the value of Meta.
func (s *PostProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetReacts returns the value of Reacts.
func (s *PostProps) GetReacts() ReactList {
	return s.Reacts
}

// GetReplyTo returns the value of ReplyTo.
func (s *PostProps) GetReplyTo() OptIdentifier {
	return s.ReplyTo
}

// GetAssets returns the value of Assets.
func (s *PostProps) GetAssets() AssetList {
	return s.Assets
}

// SetRootID sets the value of RootID.
func (s *PostProps) SetRootID(val Identifier) {
	s.RootID = val
}

// SetRootSlug sets the value of RootSlug.
func (s *PostProps) SetRootSlug(val ThreadMark) {
	s.RootSlug = val
}

// SetBody sets the value of Body.
func (s *PostProps) SetBody(val PostContent) {
	s.Body = val
}

// SetAuthor sets the value of Author.
func (s *PostProps) SetAuthor(val ProfileReference) {
	s.Author = val
}

// SetMeta sets the value of Meta.
func (s *PostProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetReacts sets the value of Reacts.
func (s *PostProps) SetReacts(val ReactList) {
	s.Reacts = val
}

// SetReplyTo sets the value of ReplyTo.
func (s *PostProps) SetReplyTo(val OptIdentifier) {
	s.ReplyTo = val
}

// SetAssets sets the value of Assets.
func (s *PostProps) SetAssets(val AssetList) {
	s.Assets = val
}

func (*PostProps) postCreateRes() {}
func (*PostProps) postUpdateRes() {}

// Reactions are currently just simple strings but they may improve later.
// Ref: #/components/schemas/PostReactProps
type PostReactProps struct {
	Emoji OptString `json:"emoji"`
}

// GetEmoji returns the value of Emoji.
func (s *PostReactProps) GetEmoji() OptString {
	return s.Emoji
}

// SetEmoji sets the value of Emoji.
func (s *PostReactProps) SetEmoji(val OptString) {
	s.Emoji = val
}

// Ref: #/components/schemas/PostSearchResults
type PostSearchResults struct {
	Count   float64     `json:"count"`
	Results []PostProps `json:"results"`
}

// GetCount returns the value of Count.
func (s *PostSearchResults) GetCount() float64 {
	return s.Count
}

// GetResults returns the value of Results.
func (s *PostSearchResults) GetResults() []PostProps {
	return s.Results
}

// SetCount sets the value of Count.
func (s *PostSearchResults) SetCount(val float64) {
	s.Count = val
}

// SetResults sets the value of Results.
func (s *PostSearchResults) SetResults(val []PostProps) {
	s.Results = val
}

func (*PostSearchResults) postSearchRes() {}

// A minimal reference to an account.
// Ref: #/components/schemas/ProfileReference
type ProfileReference struct {
	ID     Identifier    `json:"id"`
	Handle AccountHandle `json:"handle"`
	Name   AccountName   `json:"name"`
	Admin  bool          `json:"admin"`
}

// GetID returns the value of ID.
func (s *ProfileReference) GetID() Identifier {
	return s.ID
}

// GetHandle returns the value of Handle.
func (s *ProfileReference) GetHandle() AccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *ProfileReference) GetName() AccountName {
	return s.Name
}

// GetAdmin returns the value of Admin.
func (s *ProfileReference) GetAdmin() bool {
	return s.Admin
}

// SetID sets the value of ID.
func (s *ProfileReference) SetID(val Identifier) {
	s.ID = val
}

// SetHandle sets the value of Handle.
func (s *ProfileReference) SetHandle(val AccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *ProfileReference) SetName(val AccountName) {
	s.Name = val
}

// SetAdmin sets the value of Admin.
func (s *ProfileReference) SetAdmin(val bool) {
	s.Admin = val
}

// Https://www.w3.org/TR/webauthn-2/#iface-pkcredential.
// Ref: #/components/schemas/PublicKeyCredential
type PublicKeyCredential struct {
	ID                      string                                     `json:"id"`
	RawId                   string                                     `json:"rawId"`
	Response                AuthenticatorResponse                      `json:"response"`
	Type                    string                                     `json:"type"`
	ClientExtensionResults  *PublicKeyCredentialClientExtensionResults `json:"clientExtensionResults"`
	AuthenticatorAttachment OptString                                  `json:"authenticatorAttachment"`
}

// GetID returns the value of ID.
func (s *PublicKeyCredential) GetID() string {
	return s.ID
}

// GetRawId returns the value of RawId.
func (s *PublicKeyCredential) GetRawId() string {
	return s.RawId
}

// GetResponse returns the value of Response.
func (s *PublicKeyCredential) GetResponse() AuthenticatorResponse {
	return s.Response
}

// GetType returns the value of Type.
func (s *PublicKeyCredential) GetType() string {
	return s.Type
}

// GetClientExtensionResults returns the value of ClientExtensionResults.
func (s *PublicKeyCredential) GetClientExtensionResults() *PublicKeyCredentialClientExtensionResults {
	return s.ClientExtensionResults
}

// GetAuthenticatorAttachment returns the value of AuthenticatorAttachment.
func (s *PublicKeyCredential) GetAuthenticatorAttachment() OptString {
	return s.AuthenticatorAttachment
}

// SetID sets the value of ID.
func (s *PublicKeyCredential) SetID(val string) {
	s.ID = val
}

// SetRawId sets the value of RawId.
func (s *PublicKeyCredential) SetRawId(val string) {
	s.RawId = val
}

// SetResponse sets the value of Response.
func (s *PublicKeyCredential) SetResponse(val AuthenticatorResponse) {
	s.Response = val
}

// SetType sets the value of Type.
func (s *PublicKeyCredential) SetType(val string) {
	s.Type = val
}

// SetClientExtensionResults sets the value of ClientExtensionResults.
func (s *PublicKeyCredential) SetClientExtensionResults(val *PublicKeyCredentialClientExtensionResults) {
	s.ClientExtensionResults = val
}

// SetAuthenticatorAttachment sets the value of AuthenticatorAttachment.
func (s *PublicKeyCredential) SetAuthenticatorAttachment(val OptString) {
	s.AuthenticatorAttachment = val
}

type PublicKeyCredentialClientExtensionResults struct{}

// Https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions.
// Ref: #/components/schemas/PublicKeyCredentialCreationOptions
type PublicKeyCredentialCreationOptions struct {
	Rp                     PublicKeyCredentialRpEntity             `json:"rp"`
	User                   PublicKeyCredentialUserEntity           `json:"user"`
	Challenge              string                                  `json:"challenge"`
	PubKeyCredParams       []PublicKeyCredentialParameters         `json:"pubKeyCredParams"`
	Timeout                OptInt                                  `json:"timeout"`
	ExcludeCredentials     []PublicKeyCredentialDescriptor         `json:"excludeCredentials"`
	AuthenticatorSelection OptAuthenticatorSelectionCriteria       `json:"authenticatorSelection"`
	Attestation            OptAttestationConveyancePreference      `json:"attestation"`
	Extensions             OptAuthenticationExtensionsClientInputs `json:"extensions"`
}

// GetRp returns the value of Rp.
func (s *PublicKeyCredentialCreationOptions) GetRp() PublicKeyCredentialRpEntity {
	return s.Rp
}

// GetUser returns the value of User.
func (s *PublicKeyCredentialCreationOptions) GetUser() PublicKeyCredentialUserEntity {
	return s.User
}

// GetChallenge returns the value of Challenge.
func (s *PublicKeyCredentialCreationOptions) GetChallenge() string {
	return s.Challenge
}

// GetPubKeyCredParams returns the value of PubKeyCredParams.
func (s *PublicKeyCredentialCreationOptions) GetPubKeyCredParams() []PublicKeyCredentialParameters {
	return s.PubKeyCredParams
}

// GetTimeout returns the value of Timeout.
func (s *PublicKeyCredentialCreationOptions) GetTimeout() OptInt {
	return s.Timeout
}

// GetExcludeCredentials returns the value of ExcludeCredentials.
func (s *PublicKeyCredentialCreationOptions) GetExcludeCredentials() []PublicKeyCredentialDescriptor {
	return s.ExcludeCredentials
}

// GetAuthenticatorSelection returns the value of AuthenticatorSelection.
func (s *PublicKeyCredentialCreationOptions) GetAuthenticatorSelection() OptAuthenticatorSelectionCriteria {
	return s.AuthenticatorSelection
}

// GetAttestation returns the value of Attestation.
func (s *PublicKeyCredentialCreationOptions) GetAttestation() OptAttestationConveyancePreference {
	return s.Attestation
}

// GetExtensions returns the value of Extensions.
func (s *PublicKeyCredentialCreationOptions) GetExtensions() OptAuthenticationExtensionsClientInputs {
	return s.Extensions
}

// SetRp sets the value of Rp.
func (s *PublicKeyCredentialCreationOptions) SetRp(val PublicKeyCredentialRpEntity) {
	s.Rp = val
}

// SetUser sets the value of User.
func (s *PublicKeyCredentialCreationOptions) SetUser(val PublicKeyCredentialUserEntity) {
	s.User = val
}

// SetChallenge sets the value of Challenge.
func (s *PublicKeyCredentialCreationOptions) SetChallenge(val string) {
	s.Challenge = val
}

// SetPubKeyCredParams sets the value of PubKeyCredParams.
func (s *PublicKeyCredentialCreationOptions) SetPubKeyCredParams(val []PublicKeyCredentialParameters) {
	s.PubKeyCredParams = val
}

// SetTimeout sets the value of Timeout.
func (s *PublicKeyCredentialCreationOptions) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetExcludeCredentials sets the value of ExcludeCredentials.
func (s *PublicKeyCredentialCreationOptions) SetExcludeCredentials(val []PublicKeyCredentialDescriptor) {
	s.ExcludeCredentials = val
}

// SetAuthenticatorSelection sets the value of AuthenticatorSelection.
func (s *PublicKeyCredentialCreationOptions) SetAuthenticatorSelection(val OptAuthenticatorSelectionCriteria) {
	s.AuthenticatorSelection = val
}

// SetAttestation sets the value of Attestation.
func (s *PublicKeyCredentialCreationOptions) SetAttestation(val OptAttestationConveyancePreference) {
	s.Attestation = val
}

// SetExtensions sets the value of Extensions.
func (s *PublicKeyCredentialCreationOptions) SetExtensions(val OptAuthenticationExtensionsClientInputs) {
	s.Extensions = val
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor.
// Ref: #/components/schemas/PublicKeyCredentialDescriptor
type PublicKeyCredentialDescriptor struct {
	Type       PublicKeyCredentialType                       `json:"type"`
	ID         string                                        `json:"id"`
	Transports []PublicKeyCredentialDescriptorTransportsItem `json:"transports"`
}

// GetType returns the value of Type.
func (s *PublicKeyCredentialDescriptor) GetType() PublicKeyCredentialType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PublicKeyCredentialDescriptor) GetID() string {
	return s.ID
}

// GetTransports returns the value of Transports.
func (s *PublicKeyCredentialDescriptor) GetTransports() []PublicKeyCredentialDescriptorTransportsItem {
	return s.Transports
}

// SetType sets the value of Type.
func (s *PublicKeyCredentialDescriptor) SetType(val PublicKeyCredentialType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PublicKeyCredentialDescriptor) SetID(val string) {
	s.ID = val
}

// SetTransports sets the value of Transports.
func (s *PublicKeyCredentialDescriptor) SetTransports(val []PublicKeyCredentialDescriptorTransportsItem) {
	s.Transports = val
}

type PublicKeyCredentialDescriptorTransportsItem string

const (
	PublicKeyCredentialDescriptorTransportsItemBle      PublicKeyCredentialDescriptorTransportsItem = "ble"
	PublicKeyCredentialDescriptorTransportsItemInternal PublicKeyCredentialDescriptorTransportsItem = "internal"
	PublicKeyCredentialDescriptorTransportsItemNfc      PublicKeyCredentialDescriptorTransportsItem = "nfc"
	PublicKeyCredentialDescriptorTransportsItemUsb      PublicKeyCredentialDescriptorTransportsItem = "usb"
	PublicKeyCredentialDescriptorTransportsItemCable    PublicKeyCredentialDescriptorTransportsItem = "cable"
	PublicKeyCredentialDescriptorTransportsItemHybrid   PublicKeyCredentialDescriptorTransportsItem = "hybrid"
)

// MarshalText implements encoding.TextMarshaler.
func (s PublicKeyCredentialDescriptorTransportsItem) MarshalText() ([]byte, error) {
	switch s {
	case PublicKeyCredentialDescriptorTransportsItemBle:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemInternal:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemNfc:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemUsb:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemCable:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemHybrid:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublicKeyCredentialDescriptorTransportsItem) UnmarshalText(data []byte) error {
	switch PublicKeyCredentialDescriptorTransportsItem(data) {
	case PublicKeyCredentialDescriptorTransportsItemBle:
		*s = PublicKeyCredentialDescriptorTransportsItemBle
		return nil
	case PublicKeyCredentialDescriptorTransportsItemInternal:
		*s = PublicKeyCredentialDescriptorTransportsItemInternal
		return nil
	case PublicKeyCredentialDescriptorTransportsItemNfc:
		*s = PublicKeyCredentialDescriptorTransportsItemNfc
		return nil
	case PublicKeyCredentialDescriptorTransportsItemUsb:
		*s = PublicKeyCredentialDescriptorTransportsItemUsb
		return nil
	case PublicKeyCredentialDescriptorTransportsItemCable:
		*s = PublicKeyCredentialDescriptorTransportsItemCable
		return nil
	case PublicKeyCredentialDescriptorTransportsItemHybrid:
		*s = PublicKeyCredentialDescriptorTransportsItemHybrid
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters.
// Ref: #/components/schemas/PublicKeyCredentialParameters
type PublicKeyCredentialParameters struct {
	Type PublicKeyCredentialType `json:"type"`
	Alg  float64                 `json:"alg"`
}

// GetType returns the value of Type.
func (s *PublicKeyCredentialParameters) GetType() PublicKeyCredentialType {
	return s.Type
}

// GetAlg returns the value of Alg.
func (s *PublicKeyCredentialParameters) GetAlg() float64 {
	return s.Alg
}

// SetType sets the value of Type.
func (s *PublicKeyCredentialParameters) SetType(val PublicKeyCredentialType) {
	s.Type = val
}

// SetAlg sets the value of Alg.
func (s *PublicKeyCredentialParameters) SetAlg(val float64) {
	s.Alg = val
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions.
// Ref: #/components/schemas/PublicKeyCredentialRequestOptions
type PublicKeyCredentialRequestOptions struct {
	Challenge        string                                               `json:"challenge"`
	Timeout          OptInt                                               `json:"timeout"`
	RpId             OptString                                            `json:"rpId"`
	AllowCredentials []PublicKeyCredentialDescriptor                      `json:"allowCredentials"`
	UserVerification OptPublicKeyCredentialRequestOptionsUserVerification `json:"userVerification"`
}

// GetChallenge returns the value of Challenge.
func (s *PublicKeyCredentialRequestOptions) GetChallenge() string {
	return s.Challenge
}

// GetTimeout returns the value of Timeout.
func (s *PublicKeyCredentialRequestOptions) GetTimeout() OptInt {
	return s.Timeout
}

// GetRpId returns the value of RpId.
func (s *PublicKeyCredentialRequestOptions) GetRpId() OptString {
	return s.RpId
}

// GetAllowCredentials returns the value of AllowCredentials.
func (s *PublicKeyCredentialRequestOptions) GetAllowCredentials() []PublicKeyCredentialDescriptor {
	return s.AllowCredentials
}

// GetUserVerification returns the value of UserVerification.
func (s *PublicKeyCredentialRequestOptions) GetUserVerification() OptPublicKeyCredentialRequestOptionsUserVerification {
	return s.UserVerification
}

// SetChallenge sets the value of Challenge.
func (s *PublicKeyCredentialRequestOptions) SetChallenge(val string) {
	s.Challenge = val
}

// SetTimeout sets the value of Timeout.
func (s *PublicKeyCredentialRequestOptions) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetRpId sets the value of RpId.
func (s *PublicKeyCredentialRequestOptions) SetRpId(val OptString) {
	s.RpId = val
}

// SetAllowCredentials sets the value of AllowCredentials.
func (s *PublicKeyCredentialRequestOptions) SetAllowCredentials(val []PublicKeyCredentialDescriptor) {
	s.AllowCredentials = val
}

// SetUserVerification sets the value of UserVerification.
func (s *PublicKeyCredentialRequestOptions) SetUserVerification(val OptPublicKeyCredentialRequestOptionsUserVerification) {
	s.UserVerification = val
}

type PublicKeyCredentialRequestOptionsUserVerification string

const (
	PublicKeyCredentialRequestOptionsUserVerificationDiscouraged PublicKeyCredentialRequestOptionsUserVerification = "discouraged"
	PublicKeyCredentialRequestOptionsUserVerificationPreferred   PublicKeyCredentialRequestOptionsUserVerification = "preferred"
	PublicKeyCredentialRequestOptionsUserVerificationRequired    PublicKeyCredentialRequestOptionsUserVerification = "required"
)

// MarshalText implements encoding.TextMarshaler.
func (s PublicKeyCredentialRequestOptionsUserVerification) MarshalText() ([]byte, error) {
	switch s {
	case PublicKeyCredentialRequestOptionsUserVerificationDiscouraged:
		return []byte(s), nil
	case PublicKeyCredentialRequestOptionsUserVerificationPreferred:
		return []byte(s), nil
	case PublicKeyCredentialRequestOptionsUserVerificationRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublicKeyCredentialRequestOptionsUserVerification) UnmarshalText(data []byte) error {
	switch PublicKeyCredentialRequestOptionsUserVerification(data) {
	case PublicKeyCredentialRequestOptionsUserVerificationDiscouraged:
		*s = PublicKeyCredentialRequestOptionsUserVerificationDiscouraged
		return nil
	case PublicKeyCredentialRequestOptionsUserVerificationPreferred:
		*s = PublicKeyCredentialRequestOptionsUserVerificationPreferred
		return nil
	case PublicKeyCredentialRequestOptionsUserVerificationRequired:
		*s = PublicKeyCredentialRequestOptionsUserVerificationRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity.
// Ref: #/components/schemas/PublicKeyCredentialRpEntity
type PublicKeyCredentialRpEntity struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *PublicKeyCredentialRpEntity) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *PublicKeyCredentialRpEntity) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *PublicKeyCredentialRpEntity) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PublicKeyCredentialRpEntity) SetName(val string) {
	s.Name = val
}

// Https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype.
// Ref: #/components/schemas/PublicKeyCredentialType
type PublicKeyCredentialType string

const (
	PublicKeyCredentialTypePublicKey PublicKeyCredentialType = "public-key"
)

// MarshalText implements encoding.TextMarshaler.
func (s PublicKeyCredentialType) MarshalText() ([]byte, error) {
	switch s {
	case PublicKeyCredentialTypePublicKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublicKeyCredentialType) UnmarshalText(data []byte) error {
	switch PublicKeyCredentialType(data) {
	case PublicKeyCredentialTypePublicKey:
		*s = PublicKeyCredentialTypePublicKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity.
// Ref: #/components/schemas/PublicKeyCredentialUserEntity
type PublicKeyCredentialUserEntity struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	DisplayName string `json:"displayName"`
}

// GetID returns the value of ID.
func (s *PublicKeyCredentialUserEntity) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *PublicKeyCredentialUserEntity) GetName() string {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *PublicKeyCredentialUserEntity) GetDisplayName() string {
	return s.DisplayName
}

// SetID sets the value of ID.
func (s *PublicKeyCredentialUserEntity) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PublicKeyCredentialUserEntity) SetName(val string) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *PublicKeyCredentialUserEntity) SetDisplayName(val string) {
	s.DisplayName = val
}

// Merged schema.
// Ref: #/components/schemas/PublicProfile
type PublicProfile struct {
	ID Identifier `json:"id"`
	// Merged property.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc      *PublicProfileMisc `json:"misc"`
	Handle    AccountHandle      `json:"handle"`
	Name      AccountName        `json:"name"`
	Bio       OptString          `json:"bio"`
	Image     OptString          `json:"image"`
	Interests TagList            `json:"interests"`
}

// GetID returns the value of ID.
func (s *PublicProfile) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PublicProfile) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PublicProfile) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *PublicProfile) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *PublicProfile) GetMisc() *PublicProfileMisc {
	return s.Misc
}

// GetHandle returns the value of Handle.
func (s *PublicProfile) GetHandle() AccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *PublicProfile) GetName() AccountName {
	return s.Name
}

// GetBio returns the value of Bio.
func (s *PublicProfile) GetBio() OptString {
	return s.Bio
}

// GetImage returns the value of Image.
func (s *PublicProfile) GetImage() OptString {
	return s.Image
}

// GetInterests returns the value of Interests.
func (s *PublicProfile) GetInterests() TagList {
	return s.Interests
}

// SetID sets the value of ID.
func (s *PublicProfile) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PublicProfile) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PublicProfile) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *PublicProfile) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *PublicProfile) SetMisc(val *PublicProfileMisc) {
	s.Misc = val
}

// SetHandle sets the value of Handle.
func (s *PublicProfile) SetHandle(val AccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *PublicProfile) SetName(val AccountName) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *PublicProfile) SetBio(val OptString) {
	s.Bio = val
}

// SetImage sets the value of Image.
func (s *PublicProfile) SetImage(val OptString) {
	s.Image = val
}

// SetInterests sets the value of Interests.
func (s *PublicProfile) SetInterests(val TagList) {
	s.Interests = val
}

func (*PublicProfile) profileGetRes() {}

// Arbitrary extra data stored with the resource.
type PublicProfileMisc struct{}

// Ref: #/components/schemas/React
type React struct {
	ID    OptIdentifier `json:"id"`
	Emoji OptString     `json:"emoji"`
}

// GetID returns the value of ID.
func (s *React) GetID() OptIdentifier {
	return s.ID
}

// GetEmoji returns the value of Emoji.
func (s *React) GetEmoji() OptString {
	return s.Emoji
}

// SetID sets the value of ID.
func (s *React) SetID(val OptIdentifier) {
	s.ID = val
}

// SetEmoji sets the value of Emoji.
func (s *React) SetEmoji(val OptString) {
	s.Emoji = val
}

func (*React) postReactAddRes() {}

type ReactList []React

// Https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement.
// Ref: #/components/schemas/ResidentKeyRequirement
type ResidentKeyRequirement string

const (
	ResidentKeyRequirementDiscouraged ResidentKeyRequirement = "discouraged"
	ResidentKeyRequirementPreferred   ResidentKeyRequirement = "preferred"
	ResidentKeyRequirementRequired    ResidentKeyRequirement = "required"
)

// MarshalText implements encoding.TextMarshaler.
func (s ResidentKeyRequirement) MarshalText() ([]byte, error) {
	switch s {
	case ResidentKeyRequirementDiscouraged:
		return []byte(s), nil
	case ResidentKeyRequirementPreferred:
		return []byte(s), nil
	case ResidentKeyRequirementRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResidentKeyRequirement) UnmarshalText(data []byte) error {
	switch ResidentKeyRequirement(data) {
	case ResidentKeyRequirementDiscouraged:
		*s = ResidentKeyRequirementDiscouraged
		return nil
	case ResidentKeyRequirementPreferred:
		*s = ResidentKeyRequirementPreferred
		return nil
	case ResidentKeyRequirementRequired:
		*s = ResidentKeyRequirementRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A tag which can link profiles or threads via interests.
// Ref: #/components/schemas/Tag
type Tag struct {
	ID     Identifier `json:"id"`
	Name   TagName    `json:"name"`
	Colour OptString  `json:"colour"`
}

// GetID returns the value of ID.
func (s *Tag) GetID() Identifier {
	return s.ID
}

// GetName returns the value of Name.
func (s *Tag) GetName() TagName {
	return s.Name
}

// GetColour returns the value of Colour.
func (s *Tag) GetColour() OptString {
	return s.Colour
}

// SetID sets the value of ID.
func (s *Tag) SetID(val Identifier) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val TagName) {
	s.Name = val
}

// SetColour sets the value of Colour.
func (s *Tag) SetColour(val OptString) {
	s.Colour = val
}

type TagList []Tag

type TagListIDs []Identifier

type TagName string

// Merged schema.
// Ref: #/components/schemas/Thread
type Thread struct {
	Posts []PostProps `json:"posts"`
}

// GetPosts returns the value of Posts.
func (s *Thread) GetPosts() []PostProps {
	return s.Posts
}

// SetPosts sets the value of Posts.
func (s *Thread) SetPosts(val []PostProps) {
	s.Posts = val
}

func (*Thread) threadCreateRes() {}
func (*Thread) threadGetRes()    {}
func (*Thread) threadUpdateRes() {}

// ThreadDeleteOK is response for ThreadDelete operation.
type ThreadDeleteOK struct{}

func (*ThreadDeleteOK) threadDeleteRes() {}

// Ref: #/components/schemas/ThreadInitialProps
type ThreadInitialProps struct {
	Title    ThreadTitle  `json:"title"`
	Body     PostContent  `json:"body"`
	Tags     *TagListIDs  `json:"tags"`
	Meta     OptMetadata  `json:"meta"`
	Category Identifier   `json:"category"`
	Status   ThreadStatus `json:"status"`
}

// GetTitle returns the value of Title.
func (s *ThreadInitialProps) GetTitle() ThreadTitle {
	return s.Title
}

// GetBody returns the value of Body.
func (s *ThreadInitialProps) GetBody() PostContent {
	return s.Body
}

// GetTags returns the value of Tags.
func (s *ThreadInitialProps) GetTags() *TagListIDs {
	return s.Tags
}

// GetMeta returns the value of Meta.
func (s *ThreadInitialProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetCategory returns the value of Category.
func (s *ThreadInitialProps) GetCategory() Identifier {
	return s.Category
}

// GetStatus returns the value of Status.
func (s *ThreadInitialProps) GetStatus() ThreadStatus {
	return s.Status
}

// SetTitle sets the value of Title.
func (s *ThreadInitialProps) SetTitle(val ThreadTitle) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *ThreadInitialProps) SetBody(val PostContent) {
	s.Body = val
}

// SetTags sets the value of Tags.
func (s *ThreadInitialProps) SetTags(val *TagListIDs) {
	s.Tags = val
}

// SetMeta sets the value of Meta.
func (s *ThreadInitialProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetCategory sets the value of Category.
func (s *ThreadInitialProps) SetCategory(val Identifier) {
	s.Category = val
}

// SetStatus sets the value of Status.
func (s *ThreadInitialProps) SetStatus(val ThreadStatus) {
	s.Status = val
}

type ThreadList []ThreadReference

type ThreadListOK struct {
	Threads ThreadList `json:"threads"`
}

// GetThreads returns the value of Threads.
func (s *ThreadListOK) GetThreads() ThreadList {
	return s.Threads
}

// SetThreads sets the value of Threads.
func (s *ThreadListOK) SetThreads(val ThreadList) {
	s.Threads = val
}

func (*ThreadListOK) threadListRes() {}

type ThreadMark string

// Ref: #/components/schemas/ThreadMutableProps
type ThreadMutableProps struct {
	Title    OptThreadTitle  `json:"title"`
	Body     OptPostContent  `json:"body"`
	Tags     *TagListIDs     `json:"tags"`
	Meta     OptMetadata     `json:"meta"`
	Category OptIdentifier   `json:"category"`
	Status   OptThreadStatus `json:"status"`
}

// GetTitle returns the value of Title.
func (s *ThreadMutableProps) GetTitle() OptThreadTitle {
	return s.Title
}

// GetBody returns the value of Body.
func (s *ThreadMutableProps) GetBody() OptPostContent {
	return s.Body
}

// GetTags returns the value of Tags.
func (s *ThreadMutableProps) GetTags() *TagListIDs {
	return s.Tags
}

// GetMeta returns the value of Meta.
func (s *ThreadMutableProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetCategory returns the value of Category.
func (s *ThreadMutableProps) GetCategory() OptIdentifier {
	return s.Category
}

// GetStatus returns the value of Status.
func (s *ThreadMutableProps) GetStatus() OptThreadStatus {
	return s.Status
}

// SetTitle sets the value of Title.
func (s *ThreadMutableProps) SetTitle(val OptThreadTitle) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *ThreadMutableProps) SetBody(val OptPostContent) {
	s.Body = val
}

// SetTags sets the value of Tags.
func (s *ThreadMutableProps) SetTags(val *TagListIDs) {
	s.Tags = val
}

// SetMeta sets the value of Meta.
func (s *ThreadMutableProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetCategory sets the value of Category.
func (s *ThreadMutableProps) SetCategory(val OptIdentifier) {
	s.Category = val
}

// SetStatus sets the value of Status.
func (s *ThreadMutableProps) SetStatus(val OptThreadStatus) {
	s.Status = val
}

// Merged schema.
// Ref: #/components/schemas/ThreadReference
type ThreadReference struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc *ThreadReferenceMisc `json:"misc"`
	// The title of the thread.
	Title string     `json:"title"`
	Slug  ThreadMark `json:"slug"`
	// A short version of the thread's body text for use in previews.
	Short string `json:"short"`
	// Whether the thread is pinned in this category.
	Pinned bool             `json:"pinned"`
	Author ProfileReference `json:"author"`
	// A list of tags associated with the thread.
	Tags []string `json:"tags"`
	// The number of posts under this thread.
	PostCount   int               `json:"post_count"`
	Category    CategoryReference `json:"category"`
	Reacts      ReactList         `json:"reacts"`
	Meta        Metadata          `json:"meta"`
	Assets      AssetList         `json:"assets"`
	Collections CollectionList    `json:"collections"`
}

// GetID returns the value of ID.
func (s *ThreadReference) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ThreadReference) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ThreadReference) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *ThreadReference) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *ThreadReference) GetMisc() *ThreadReferenceMisc {
	return s.Misc
}

// GetTitle returns the value of Title.
func (s *ThreadReference) GetTitle() string {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s *ThreadReference) GetSlug() ThreadMark {
	return s.Slug
}

// GetShort returns the value of Short.
func (s *ThreadReference) GetShort() string {
	return s.Short
}

// GetPinned returns the value of Pinned.
func (s *ThreadReference) GetPinned() bool {
	return s.Pinned
}

// GetAuthor returns the value of Author.
func (s *ThreadReference) GetAuthor() ProfileReference {
	return s.Author
}

// GetTags returns the value of Tags.
func (s *ThreadReference) GetTags() []string {
	return s.Tags
}

// GetPostCount returns the value of PostCount.
func (s *ThreadReference) GetPostCount() int {
	return s.PostCount
}

// GetCategory returns the value of Category.
func (s *ThreadReference) GetCategory() CategoryReference {
	return s.Category
}

// GetReacts returns the value of Reacts.
func (s *ThreadReference) GetReacts() ReactList {
	return s.Reacts
}

// GetMeta returns the value of Meta.
func (s *ThreadReference) GetMeta() Metadata {
	return s.Meta
}

// GetAssets returns the value of Assets.
func (s *ThreadReference) GetAssets() AssetList {
	return s.Assets
}

// GetCollections returns the value of Collections.
func (s *ThreadReference) GetCollections() CollectionList {
	return s.Collections
}

// SetID sets the value of ID.
func (s *ThreadReference) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ThreadReference) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ThreadReference) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *ThreadReference) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *ThreadReference) SetMisc(val *ThreadReferenceMisc) {
	s.Misc = val
}

// SetTitle sets the value of Title.
func (s *ThreadReference) SetTitle(val string) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *ThreadReference) SetSlug(val ThreadMark) {
	s.Slug = val
}

// SetShort sets the value of Short.
func (s *ThreadReference) SetShort(val string) {
	s.Short = val
}

// SetPinned sets the value of Pinned.
func (s *ThreadReference) SetPinned(val bool) {
	s.Pinned = val
}

// SetAuthor sets the value of Author.
func (s *ThreadReference) SetAuthor(val ProfileReference) {
	s.Author = val
}

// SetTags sets the value of Tags.
func (s *ThreadReference) SetTags(val []string) {
	s.Tags = val
}

// SetPostCount sets the value of PostCount.
func (s *ThreadReference) SetPostCount(val int) {
	s.PostCount = val
}

// SetCategory sets the value of Category.
func (s *ThreadReference) SetCategory(val CategoryReference) {
	s.Category = val
}

// SetReacts sets the value of Reacts.
func (s *ThreadReference) SetReacts(val ReactList) {
	s.Reacts = val
}

// SetMeta sets the value of Meta.
func (s *ThreadReference) SetMeta(val Metadata) {
	s.Meta = val
}

// SetAssets sets the value of Assets.
func (s *ThreadReference) SetAssets(val AssetList) {
	s.Assets = val
}

// SetCollections sets the value of Collections.
func (s *ThreadReference) SetCollections(val CollectionList) {
	s.Collections = val
}

// Arbitrary extra data stored with the resource.
type ThreadReferenceMisc struct{}

// A thread can be in a draft state while the owner makes changes to the content. Once they are happy
// with it, they can publish the thread.
// Ref: #/components/schemas/ThreadStatus
type ThreadStatus string

const (
	ThreadStatusDraft     ThreadStatus = "draft"
	ThreadStatusPublished ThreadStatus = "published"
)

// MarshalText implements encoding.TextMarshaler.
func (s ThreadStatus) MarshalText() ([]byte, error) {
	switch s {
	case ThreadStatusDraft:
		return []byte(s), nil
	case ThreadStatusPublished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ThreadStatus) UnmarshalText(data []byte) error {
	switch ThreadStatus(data) {
	case ThreadStatusDraft:
		*s = ThreadStatusDraft
		return nil
	case ThreadStatusPublished:
		*s = ThreadStatusPublished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ThreadTitle string

// Ref: #/components/responses/Unauthorised
type Unauthorised struct{}

func (*Unauthorised) accountGetAvatarRes()      {}
func (*Unauthorised) accountGetRes()            {}
func (*Unauthorised) accountSetAvatarRes()      {}
func (*Unauthorised) accountUpdateRes()         {}
func (*Unauthorised) assetGetRes()              {}
func (*Unauthorised) assetUploadRes()           {}
func (*Unauthorised) authPasswordSigninRes()    {}
func (*Unauthorised) categoryCreateRes()        {}
func (*Unauthorised) collectionAddPostRes()     {}
func (*Unauthorised) collectionCreateRes()      {}
func (*Unauthorised) collectionGetRes()         {}
func (*Unauthorised) collectionRemovePostRes()  {}
func (*Unauthorised) collectionUpdateRes()      {}
func (*Unauthorised) oAuthProviderCallbackRes() {}
func (*Unauthorised) postCreateRes()            {}
func (*Unauthorised) postDeleteRes()            {}
func (*Unauthorised) postReactAddRes()          {}
func (*Unauthorised) postSearchRes()            {}
func (*Unauthorised) postUpdateRes()            {}
func (*Unauthorised) profileGetRes()            {}
func (*Unauthorised) threadCreateRes()          {}
func (*Unauthorised) threadDeleteRes()          {}
func (*Unauthorised) threadGetRes()             {}
func (*Unauthorised) threadListRes()            {}
func (*Unauthorised) threadUpdateRes()          {}
func (*Unauthorised) webAuthnGetAssertionRes()  {}
func (*Unauthorised) webAuthnMakeAssertionRes() {}

// Https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement.
// Ref: #/components/schemas/UserVerificationRequirement
type UserVerificationRequirement string

const (
	UserVerificationRequirementDiscouraged UserVerificationRequirement = "discouraged"
	UserVerificationRequirementPreferred   UserVerificationRequirement = "preferred"
	UserVerificationRequirementRequired    UserVerificationRequirement = "required"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserVerificationRequirement) MarshalText() ([]byte, error) {
	switch s {
	case UserVerificationRequirementDiscouraged:
		return []byte(s), nil
	case UserVerificationRequirementPreferred:
		return []byte(s), nil
	case UserVerificationRequirementRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserVerificationRequirement) UnmarshalText(data []byte) error {
	switch UserVerificationRequirement(data) {
	case UserVerificationRequirementDiscouraged:
		*s = UserVerificationRequirementDiscouraged
		return nil
	case UserVerificationRequirementPreferred:
		*s = UserVerificationRequirementPreferred
		return nil
	case UserVerificationRequirementRequired:
		*s = UserVerificationRequirementRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension.
// Ref: #/components/schemas/WebAuthnPublicKeyCreationOptions
type WebAuthnPublicKeyCreationOptions struct {
	PublicKey PublicKeyCredentialCreationOptions `json:"publicKey"`
}

// GetPublicKey returns the value of PublicKey.
func (s *WebAuthnPublicKeyCreationOptions) GetPublicKey() PublicKeyCredentialCreationOptions {
	return s.PublicKey
}

// SetPublicKey sets the value of PublicKey.
func (s *WebAuthnPublicKeyCreationOptions) SetPublicKey(val PublicKeyCredentialCreationOptions) {
	s.PublicKey = val
}

// WebAuthnPublicKeyCreationOptionsHeaders wraps WebAuthnPublicKeyCreationOptions with response headers.
type WebAuthnPublicKeyCreationOptionsHeaders struct {
	SetCookie OptString
	Response  WebAuthnPublicKeyCreationOptions
}

// GetSetCookie returns the value of SetCookie.
func (s *WebAuthnPublicKeyCreationOptionsHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *WebAuthnPublicKeyCreationOptionsHeaders) GetResponse() WebAuthnPublicKeyCreationOptions {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *WebAuthnPublicKeyCreationOptionsHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *WebAuthnPublicKeyCreationOptionsHeaders) SetResponse(val WebAuthnPublicKeyCreationOptions) {
	s.Response = val
}

func (*WebAuthnPublicKeyCreationOptionsHeaders) webAuthnRequestCredentialRes() {}

type Webauthn struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Webauthn) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Webauthn) SetAPIKey(val string) {
	s.APIKey = val
}
