// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *Account) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Interests == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.Interests.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AccountMutableProps) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Interests == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.Interests.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AttestationConveyancePreference) Validate() error {
	switch s {
	case "direct":
		return nil
	case "enterprise":
		return nil
	case "indirect":
		return nil
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AuthProviderList) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s *AuthProviderListOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Providers.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "providers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AuthenticatorAttachment) Validate() error {
	switch s {
	case "platform":
		return nil
	case "cross-platform":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *AuthenticatorSelectionCriteria) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuthenticatorAttachment.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "authenticatorAttachment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ResidentKey.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "residentKey",
			Error: err,
		})
	}
	if err := func() error {
		if s.UserVerification.Set {
			if err := func() error {
				if err := s.UserVerification.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "userVerification",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CategoryList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Categories == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "categories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CredentialRequestOptions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.PublicKey.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "publicKey",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CredentialRequestOptionsHeaders) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Response",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PublicKeyCredentialCreationOptions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.PubKeyCredParams == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PubKeyCredParams {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pubKeyCredParams",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExcludeCredentials == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.ExcludeCredentials {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "excludeCredentials",
			Error: err,
		})
	}
	if err := func() error {
		if s.AuthenticatorSelection.Set {
			if err := func() error {
				if err := s.AuthenticatorSelection.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "authenticatorSelection",
			Error: err,
		})
	}
	if err := func() error {
		if s.Attestation.Set {
			if err := func() error {
				if err := s.Attestation.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "attestation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PublicKeyCredentialDescriptor) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Transports {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transports",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PublicKeyCredentialDescriptorTransportsItem) Validate() error {
	switch s {
	case "ble":
		return nil
	case "internal":
		return nil
	case "nfc":
		return nil
	case "usb":
		return nil
	case "cable":
		return nil
	case "hybrid":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *PublicKeyCredentialParameters) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Alg)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "alg",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PublicKeyCredentialRequestOptions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.AllowCredentials {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowCredentials",
			Error: err,
		})
	}
	if err := func() error {
		if s.UserVerification.Set {
			if err := func() error {
				if err := s.UserVerification.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "userVerification",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PublicKeyCredentialRequestOptionsUserVerification) Validate() error {
	switch s {
	case "discouraged":
		return nil
	case "preferred":
		return nil
	case "required":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PublicKeyCredentialType) Validate() error {
	switch s {
	case "public-key":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *PublicProfile) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Interests == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.Interests.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interests",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ResidentKeyRequirement) Validate() error {
	switch s {
	case "discouraged":
		return nil
	case "preferred":
		return nil
	case "required":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TagList) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s TagListIDs) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s *Thread) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Posts == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "posts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ThreadList) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ThreadMutableProps) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Tags.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ThreadReference) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tags == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if err := func() error {
		if s.Reacts == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reacts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ThreadsListOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Threads.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "threads",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserVerificationRequirement) Validate() error {
	switch s {
	case "discouraged":
		return nil
	case "preferred":
		return nil
	case "required":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *WebAuthnPublicKeyCreationOptions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.PublicKey.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "publicKey",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *WebAuthnPublicKeyCreationOptionsHeaders) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Response",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
