// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleBrowser handles browser security.
	HandleBrowser(ctx context.Context, operationName string, t Browser) (context.Context, error)
	// HandleWebauthn handles webauthn security.
	HandleWebauthn(ctx context.Context, operationName string, t Webauthn) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

func (s *Server) securityBrowser(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t Browser
	const parameterName = "storyden-session"
	var value string
	switch cookie, err := req.Cookie(parameterName); err {
	case nil:
		value = cookie.Value
	case http.ErrNoCookie:
		return ctx, false, nil
	default:
		return nil, false, err
	}
	t.APIKey = value
	rctx, err := s.sec.HandleBrowser(ctx, operationName, t)
	if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
func (s *Server) securityWebauthn(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t Webauthn
	const parameterName = "storyden-webauthn-session"
	var value string
	switch cookie, err := req.Cookie(parameterName); err {
	case nil:
		value = cookie.Value
	case http.ErrNoCookie:
		return ctx, false, nil
	default:
		return nil, false, err
	}
	t.APIKey = value
	rctx, err := s.sec.HandleWebauthn(ctx, operationName, t)
	if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// Browser provides browser security value.
	Browser(ctx context.Context, operationName string) (Browser, error)
	// Webauthn provides webauthn security value.
	Webauthn(ctx context.Context, operationName string) (Webauthn, error)
}

func (s *Client) securityBrowser(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.Browser(ctx, operationName)
	if err != nil {
		if errors.Is(err, ogenerrors.ErrSkipClientSecurity) {
			return ogenerrors.ErrSkipClientSecurity
		}
		return errors.Wrap(err, "security source \"Browser\"")
	}
	req.AddCookie(&http.Cookie{
		Name:  "storyden-session",
		Value: t.APIKey,
	})
	return nil
}
func (s *Client) securityWebauthn(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.Webauthn(ctx, operationName)
	if err != nil {
		if errors.Is(err, ogenerrors.ErrSkipClientSecurity) {
			return ogenerrors.ErrSkipClientSecurity
		}
		return errors.Wrap(err, "security source \"Webauthn\"")
	}
	req.AddCookie(&http.Cookie{
		Name:  "storyden-webauthn-session",
		Value: t.APIKey,
	})
	return nil
}
