// Code generated by enumerator. DO NOT EDIT.

package onboarding

import (
	"database/sql/driver"
	"fmt"
)

type Status struct {
	v statusEnum
}

var (
	StatusRequiresFirstAccount = Status{statusRequiresFirstAccount}
	StatusRequiresCategory     = Status{statusRequiresCategory}
	StatusRequiresFirstPost    = Status{statusRequiresFirstPost}
	StatusRequiresMoreAccounts = Status{statusRequiresMoreAccounts}
	StatusComplete             = Status{statusComplete}
)

func (r Status) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Status) String() string {
	return string(r.v)
}
func (r Status) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Status) UnmarshalText(in []byte) error {
	s, err := NewStatus(string(in))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Status) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Status) Scan(in any) error {
	s, err := NewStatus(fmt.Sprint(in))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewStatus(in string) (Status, error) {
	switch in {
	case string(statusRequiresFirstAccount):
		return StatusRequiresFirstAccount, nil
	case string(statusRequiresCategory):
		return StatusRequiresCategory, nil
	case string(statusRequiresFirstPost):
		return StatusRequiresFirstPost, nil
	case string(statusRequiresMoreAccounts):
		return StatusRequiresMoreAccounts, nil
	case string(statusComplete):
		return StatusComplete, nil
	default:
		return Status{}, fmt.Errorf("invalid value for type 'Status': '%s'", in)
	}
}
