// Code generated by enumerator. DO NOT EDIT.

package asset

import (
	"database/sql/driver"
	"fmt"
)

type ContentFillRule struct {
	v contentFillRuleEnum
}

var (
	ContentFillRuleEnumNone = ContentFillRule{contentFillRuleEnumNone}
	ContentFillRulePrepend  = ContentFillRule{contentFillRulePrepend}
	ContentFillRuleAppend   = ContentFillRule{contentFillRuleAppend}
	ContentFillRuleReplace  = ContentFillRule{contentFillRuleReplace}
)

func (r ContentFillRule) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r ContentFillRule) String() string {
	return string(r.v)
}
func (r ContentFillRule) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *ContentFillRule) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewContentFillRule(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r ContentFillRule) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *ContentFillRule) Scan(__iNpUt__ any) error {
	s, err := NewContentFillRule(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewContentFillRule(__iNpUt__ string) (ContentFillRule, error) {
	switch __iNpUt__ {
	case string(contentFillRuleEnumNone):
		return ContentFillRuleEnumNone, nil
	case string(contentFillRulePrepend):
		return ContentFillRulePrepend, nil
	case string(contentFillRuleAppend):
		return ContentFillRuleAppend, nil
	case string(contentFillRuleReplace):
		return ContentFillRuleReplace, nil
	default:
		return ContentFillRule{}, fmt.Errorf("invalid value for type 'ContentFillRule': '%s'", __iNpUt__)
	}
}
