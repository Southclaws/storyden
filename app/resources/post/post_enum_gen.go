// Code generated by enumerator. DO NOT EDIT.

package post

import (
	"database/sql/driver"
	"fmt"
)

type Status struct {
	v statusEnum
}

var (
	StatusDraft     = Status{statusDraft}
	StatusPublished = Status{statusPublished}
)

func (r Status) String() string {
	switch r {
	case StatusDraft:
		return "statusDraft"
	case StatusPublished:
		return "statusPublished"
	default:
		return ""
	}
}
func (r Status) GoString() string {
	return string(r.v)
}
func (r Status) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Status) UnmarshalText(in []byte) error {
	s, err := NewStatus(string(in))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Status) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Status) Scan(in any) error {
	s, err := NewStatus(fmt.Sprint(in))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewStatus(in string) (Status, error) {
	switch in {
	case string(statusDraft):
		return StatusDraft, nil
	case string(statusPublished):
		return StatusPublished, nil
	default:
		return Status{}, fmt.Errorf("invalid value for type 'Status': '%s'", in)
	}
}
