// Code generated by enumerator. DO NOT EDIT.

package authentication

import (
	"database/sql/driver"
	"fmt"
)

type Mode struct {
	v modeEnum
}

var (
	ModeHandle = Mode{modeHandle}
	ModeEmail  = Mode{modeEmail}
	ModePhone  = Mode{modePhone}
)

func (r Mode) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	case 'v':
		switch r {
		case ModeHandle:
			fmt.Fprint(f, "Username (default)")
		case ModeEmail:
			fmt.Fprint(f, "Email address")
		case ModePhone:
			fmt.Fprint(f, "Phone number")
		default:
			fmt.Fprint(f, "")
		}
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Mode) String() string {
	return string(r.v)
}
func (r Mode) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Mode) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewMode(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Mode) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Mode) Scan(__iNpUt__ any) error {
	s, err := NewMode(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewMode(__iNpUt__ string) (Mode, error) {
	switch __iNpUt__ {
	case string(modeHandle):
		return ModeHandle, nil
	case string(modeEmail):
		return ModeEmail, nil
	case string(modePhone):
		return ModePhone, nil
	default:
		return Mode{}, fmt.Errorf("invalid value for type 'Mode': '%s'", __iNpUt__)
	}
}

type Service struct {
	v serviceEnum
}

var (
	ServicePassword      = Service{servicePassword}
	ServiceEmail         = Service{serviceEmail}
	ServicePhone         = Service{servicePhone}
	ServiceWebAuthn      = Service{serviceWebAuthn}
	ServiceOAuthGoogle   = Service{serviceOAuthGoogle}
	ServiceOAuthGitHub   = Service{serviceOAuthGitHub}
	ServiceOAuthLinkedin = Service{serviceOAuthLinkedin}
)

func (r Service) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	case 'v':
		switch r {
		case ServicePassword:
			fmt.Fprint(f, "User/email + password")
		case ServiceEmail:
			fmt.Fprint(f, "Email + verification code")
		case ServicePhone:
			fmt.Fprint(f, "Phone number + verification code")
		case ServiceWebAuthn:
			fmt.Fprint(f, "WebAuthn/Passkey")
		case ServiceOAuthGoogle:
			fmt.Fprint(f, "Google")
		case ServiceOAuthGitHub:
			fmt.Fprint(f, "GitHub")
		case ServiceOAuthLinkedin:
			fmt.Fprint(f, "LinkedIn")
		default:
			fmt.Fprint(f, "")
		}
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Service) String() string {
	return string(r.v)
}
func (r Service) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Service) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewService(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Service) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Service) Scan(__iNpUt__ any) error {
	s, err := NewService(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewService(__iNpUt__ string) (Service, error) {
	switch __iNpUt__ {
	case string(servicePassword):
		return ServicePassword, nil
	case string(serviceEmail):
		return ServiceEmail, nil
	case string(servicePhone):
		return ServicePhone, nil
	case string(serviceWebAuthn):
		return ServiceWebAuthn, nil
	case string(serviceOAuthGoogle):
		return ServiceOAuthGoogle, nil
	case string(serviceOAuthGitHub):
		return ServiceOAuthGitHub, nil
	case string(serviceOAuthLinkedin):
		return ServiceOAuthLinkedin, nil
	default:
		return Service{}, fmt.Errorf("invalid value for type 'Service': '%s'", __iNpUt__)
	}
}
