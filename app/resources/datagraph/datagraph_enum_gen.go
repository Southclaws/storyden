// Code generated by enumerator. DO NOT EDIT.

package datagraph

import (
	"database/sql/driver"
	"fmt"
)

type Kind struct {
	v kindEnum
}

var (
	KindPost       = Kind{kindPost}
	KindThread     = Kind{kindThread}
	KindReply      = Kind{kindReply}
	KindNode       = Kind{kindNode}
	KindCollection = Kind{kindCollection}
	KindProfile    = Kind{kindProfile}
	KindEvent      = Kind{kindEvent}
)

func (r Kind) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Kind) String() string {
	return string(r.v)
}
func (r Kind) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Kind) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewKind(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Kind) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Kind) Scan(__iNpUt__ any) error {
	s, err := NewKind(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewKind(__iNpUt__ string) (Kind, error) {
	switch __iNpUt__ {
	case string(kindPost):
		return KindPost, nil
	case string(kindThread):
		return KindThread, nil
	case string(kindReply):
		return KindReply, nil
	case string(kindNode):
		return KindNode, nil
	case string(kindCollection):
		return KindCollection, nil
	case string(kindProfile):
		return KindProfile, nil
	case string(kindEvent):
		return KindEvent, nil
	default:
		return Kind{}, fmt.Errorf("invalid value for type 'Kind': '%s'", __iNpUt__)
	}
}

type TitleFillRule struct {
	v titleFillRuleEnum
}

var (
	TitleFillRuleQuery   = TitleFillRule{titleFillRuleQuery}
	TitleFillRuleReplace = TitleFillRule{titleFillRuleReplace}
)

func (r TitleFillRule) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r TitleFillRule) String() string {
	return string(r.v)
}
func (r TitleFillRule) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *TitleFillRule) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewTitleFillRule(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r TitleFillRule) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *TitleFillRule) Scan(__iNpUt__ any) error {
	s, err := NewTitleFillRule(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewTitleFillRule(__iNpUt__ string) (TitleFillRule, error) {
	switch __iNpUt__ {
	case string(titleFillRuleQuery):
		return TitleFillRuleQuery, nil
	case string(titleFillRuleReplace):
		return TitleFillRuleReplace, nil
	default:
		return TitleFillRule{}, fmt.Errorf("invalid value for type 'TitleFillRule': '%s'", __iNpUt__)
	}
}
