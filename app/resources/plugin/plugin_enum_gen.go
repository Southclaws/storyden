// Code generated by enumerator. DO NOT EDIT.

package plugin

import (
	"database/sql/driver"
	"fmt"
)

type ActiveState struct {
	v activeStateEnum
}

var (
	ActiveStateActive   = ActiveState{activeStateActive}
	ActiveStateInactive = ActiveState{activeStateInactive}
	ActiveStateError    = ActiveState{activeStateError}
)

func (r ActiveState) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r ActiveState) String() string {
	return string(r.v)
}
func (r ActiveState) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *ActiveState) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewActiveState(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r ActiveState) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *ActiveState) Scan(__iNpUt__ any) error {
	s, err := NewActiveState(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewActiveState(__iNpUt__ string) (ActiveState, error) {
	switch __iNpUt__ {
	case string(activeStateActive):
		return ActiveStateActive, nil
	case string(activeStateInactive):
		return ActiveStateInactive, nil
	case string(activeStateError):
		return ActiveStateError, nil
	default:
		return ActiveState{}, fmt.Errorf("invalid value for type 'ActiveState': '%s'", __iNpUt__)
	}
}
