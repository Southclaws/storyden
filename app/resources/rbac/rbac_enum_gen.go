// Code generated by enumerator. DO NOT EDIT.

package rbac

import (
	"database/sql/driver"
	"fmt"
)

type Permission struct {
	v permissionEnum
}

var (
	PermissionCreatePost           = Permission{permissionCreatePost}
	PermissionReadPublishedThreads = Permission{permissionReadPublishedThreads}
	PermissionCreateReaction       = Permission{permissionCreateReaction}
	PermissionManagePosts          = Permission{permissionManagePosts}
	PermissionManageCategories     = Permission{permissionManageCategories}
	PermissionReadPublishedLibrary = Permission{permissionReadPublishedLibrary}
	PermissionManageLibrary        = Permission{permissionManageLibrary}
	PermissionSubmitLibraryNode    = Permission{permissionSubmitLibraryNode}
	PermissionUploadAsset          = Permission{permissionUploadAsset}
	PermissionManageEvents         = Permission{permissionManageEvents}
	PermissionListProfiles         = Permission{permissionListProfiles}
	PermissionReadProfile          = Permission{permissionReadProfile}
	PermissionCreateCollection     = Permission{permissionCreateCollection}
	PermissionListCollections      = Permission{permissionListCollections}
	PermissionReadCollection       = Permission{permissionReadCollection}
	PermissionManageCollections    = Permission{permissionManageCollections}
	PermissionCollectionSubmit     = Permission{permissionCollectionSubmit}
	PermissionManageSettings       = Permission{permissionManageSettings}
	PermissionManageSuspensions    = Permission{permissionManageSuspensions}
	PermissionManageRoles          = Permission{permissionManageRoles}
	PermissionAdministrator        = Permission{permissionAdministrator}
)

func (r Permission) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Permission) String() string {
	return string(r.v)
}
func (r Permission) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Permission) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewPermission(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Permission) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Permission) Scan(__iNpUt__ any) error {
	s, err := NewPermission(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewPermission(__iNpUt__ string) (Permission, error) {
	switch __iNpUt__ {
	case string(permissionCreatePost):
		return PermissionCreatePost, nil
	case string(permissionReadPublishedThreads):
		return PermissionReadPublishedThreads, nil
	case string(permissionCreateReaction):
		return PermissionCreateReaction, nil
	case string(permissionManagePosts):
		return PermissionManagePosts, nil
	case string(permissionManageCategories):
		return PermissionManageCategories, nil
	case string(permissionReadPublishedLibrary):
		return PermissionReadPublishedLibrary, nil
	case string(permissionManageLibrary):
		return PermissionManageLibrary, nil
	case string(permissionSubmitLibraryNode):
		return PermissionSubmitLibraryNode, nil
	case string(permissionUploadAsset):
		return PermissionUploadAsset, nil
	case string(permissionManageEvents):
		return PermissionManageEvents, nil
	case string(permissionListProfiles):
		return PermissionListProfiles, nil
	case string(permissionReadProfile):
		return PermissionReadProfile, nil
	case string(permissionCreateCollection):
		return PermissionCreateCollection, nil
	case string(permissionListCollections):
		return PermissionListCollections, nil
	case string(permissionReadCollection):
		return PermissionReadCollection, nil
	case string(permissionManageCollections):
		return PermissionManageCollections, nil
	case string(permissionCollectionSubmit):
		return PermissionCollectionSubmit, nil
	case string(permissionManageSettings):
		return PermissionManageSettings, nil
	case string(permissionManageSuspensions):
		return PermissionManageSuspensions, nil
	case string(permissionManageRoles):
		return PermissionManageRoles, nil
	case string(permissionAdministrator):
		return PermissionAdministrator, nil
	default:
		return Permission{}, fmt.Errorf("invalid value for type 'Permission': '%s'", __iNpUt__)
	}
}
