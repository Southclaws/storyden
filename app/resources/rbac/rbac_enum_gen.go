// Code generated by enumerator. DO NOT EDIT.

package rbac

import (
	"database/sql/driver"
	"fmt"
)

type Permission struct {
	v string
}

var (
	PermissionCreatePost           = Permission{`CREATE_POST`}
	PermissionReadPublishedThreads = Permission{`READ_PUBLISHED_THREADS`}
	PermissionCreateReaction       = Permission{`CREATE_REACTION`}
	PermissionManagePosts          = Permission{`MANAGE_POSTS`}
	PermissionManageCategories     = Permission{`MANAGE_CATEGORIES`}
	PermissionCreateInvitation     = Permission{`CREATE_INVITATION`}
	PermissionReadPublishedLibrary = Permission{`READ_PUBLISHED_LIBRARY`}
	PermissionManageLibrary        = Permission{`MANAGE_LIBRARY`}
	PermissionSubmitLibraryNode    = Permission{`SUBMIT_LIBRARY_NODE`}
	PermissionUploadAsset          = Permission{`UPLOAD_ASSET`}
	PermissionManageEvents         = Permission{`MANAGE_EVENTS`}
	PermissionListProfiles         = Permission{`LIST_PROFILES`}
	PermissionReadProfile          = Permission{`READ_PROFILE`}
	PermissionCreateCollection     = Permission{`CREATE_COLLECTION`}
	PermissionListCollections      = Permission{`LIST_COLLECTIONS`}
	PermissionReadCollection       = Permission{`READ_COLLECTION`}
	PermissionManageCollections    = Permission{`MANAGE_COLLECTIONS`}
	PermissionCollectionSubmit     = Permission{`COLLECTION_SUBMIT`}
	PermissionManageSettings       = Permission{`MANAGE_SETTINGS`}
	PermissionManageSuspensions    = Permission{`MANAGE_SUSPENSIONS`}
	PermissionManageRoles          = Permission{`MANAGE_ROLES`}
	PermissionAdministrator        = Permission{`ADMINISTRATOR`}
)

func (r Permission) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Permission) String() string {
	return string(r.v)
}
func (r Permission) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Permission) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewPermission(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Permission) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Permission) Scan(__iNpUt__ any) error {
	s, err := NewPermission(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewPermission(__iNpUt__ string) (Permission, error) {
	switch __iNpUt__ {
	case string(`CREATE_POST`):
		return PermissionCreatePost, nil
	case string(`READ_PUBLISHED_THREADS`):
		return PermissionReadPublishedThreads, nil
	case string(`CREATE_REACTION`):
		return PermissionCreateReaction, nil
	case string(`MANAGE_POSTS`):
		return PermissionManagePosts, nil
	case string(`MANAGE_CATEGORIES`):
		return PermissionManageCategories, nil
	case string(`CREATE_INVITATION`):
		return PermissionCreateInvitation, nil
	case string(`READ_PUBLISHED_LIBRARY`):
		return PermissionReadPublishedLibrary, nil
	case string(`MANAGE_LIBRARY`):
		return PermissionManageLibrary, nil
	case string(`SUBMIT_LIBRARY_NODE`):
		return PermissionSubmitLibraryNode, nil
	case string(`UPLOAD_ASSET`):
		return PermissionUploadAsset, nil
	case string(`MANAGE_EVENTS`):
		return PermissionManageEvents, nil
	case string(`LIST_PROFILES`):
		return PermissionListProfiles, nil
	case string(`READ_PROFILE`):
		return PermissionReadProfile, nil
	case string(`CREATE_COLLECTION`):
		return PermissionCreateCollection, nil
	case string(`LIST_COLLECTIONS`):
		return PermissionListCollections, nil
	case string(`READ_COLLECTION`):
		return PermissionReadCollection, nil
	case string(`MANAGE_COLLECTIONS`):
		return PermissionManageCollections, nil
	case string(`COLLECTION_SUBMIT`):
		return PermissionCollectionSubmit, nil
	case string(`MANAGE_SETTINGS`):
		return PermissionManageSettings, nil
	case string(`MANAGE_SUSPENSIONS`):
		return PermissionManageSuspensions, nil
	case string(`MANAGE_ROLES`):
		return PermissionManageRoles, nil
	case string(`ADMINISTRATOR`):
		return PermissionAdministrator, nil
	default:
		return Permission{}, fmt.Errorf("invalid value for type 'Permission': '%s'", __iNpUt__)
	}
}
