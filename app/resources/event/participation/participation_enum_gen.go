// Code generated by enumerator. DO NOT EDIT.

package participation

import (
	"database/sql/driver"
	"fmt"
)

type Policy struct {
	v policyEnum
}

var (
	PolicyOpen       = Policy{policyOpen}
	PolicyClosed     = Policy{policyClosed}
	PolicyInviteOnly = Policy{policyInviteOnly}
)

func (r Policy) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Policy) String() string {
	return string(r.v)
}
func (r Policy) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Policy) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewPolicy(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Policy) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Policy) Scan(__iNpUt__ any) error {
	s, err := NewPolicy(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewPolicy(__iNpUt__ string) (Policy, error) {
	switch __iNpUt__ {
	case string(policyOpen):
		return PolicyOpen, nil
	case string(policyClosed):
		return PolicyClosed, nil
	case string(policyInviteOnly):
		return PolicyInviteOnly, nil
	default:
		return Policy{}, fmt.Errorf("invalid value for type 'Policy': '%s'", __iNpUt__)
	}
}

type Role struct {
	v roleEnum
}

var (
	RoleHost     = Role{roleHost}
	RoleAttendee = Role{roleAttendee}
)

func (r Role) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Role) String() string {
	return string(r.v)
}
func (r Role) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Role) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewRole(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Role) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Role) Scan(__iNpUt__ any) error {
	s, err := NewRole(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewRole(__iNpUt__ string) (Role, error) {
	switch __iNpUt__ {
	case string(roleHost):
		return RoleHost, nil
	case string(roleAttendee):
		return RoleAttendee, nil
	default:
		return Role{}, fmt.Errorf("invalid value for type 'Role': '%s'", __iNpUt__)
	}
}

type Status struct {
	v statusEnum
}

var (
	StatusRequested = Status{statusRequested}
	StatusInvited   = Status{statusInvited}
	StatusAttending = Status{statusAttending}
	StatusDeclined  = Status{statusDeclined}
)

func (r Status) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Status) String() string {
	return string(r.v)
}
func (r Status) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Status) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewStatus(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Status) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Status) Scan(__iNpUt__ any) error {
	s, err := NewStatus(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewStatus(__iNpUt__ string) (Status, error) {
	switch __iNpUt__ {
	case string(statusRequested):
		return StatusRequested, nil
	case string(statusInvited):
		return StatusInvited, nil
	case string(statusAttending):
		return StatusAttending, nil
	case string(statusDeclined):
		return StatusDeclined, nil
	default:
		return Status{}, fmt.Errorf("invalid value for type 'Status': '%s'", __iNpUt__)
	}
}
