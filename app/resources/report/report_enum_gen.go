// Code generated by enumerator. DO NOT EDIT.

package report

import (
	"database/sql/driver"
	"fmt"
)

type Status struct {
	v statusEnum
}

var (
	StatusSubmitted    = Status{statusSubmitted}
	StatusAcknowledged = Status{statusAcknowledged}
	StatusResolved     = Status{statusResolved}
)

func (r Status) Format(f fmt.State, verb rune) {
	switch verb {
	case 's':
		fmt.Fprint(f, r.v)
	case 'q':
		fmt.Fprintf(f, "%q", r.String())
	default:
		fmt.Fprint(f, r.v)
	}
}
func (r Status) String() string {
	return string(r.v)
}
func (r Status) MarshalText() ([]byte, error) {
	return []byte(r.v), nil
}
func (r *Status) UnmarshalText(__iNpUt__ []byte) error {
	s, err := NewStatus(string(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func (r Status) Value() (driver.Value, error) {
	return r.v, nil
}
func (r *Status) Scan(__iNpUt__ any) error {
	s, err := NewStatus(fmt.Sprint(__iNpUt__))
	if err != nil {
		return err
	}
	*r = s
	return nil
}
func NewStatus(__iNpUt__ string) (Status, error) {
	switch __iNpUt__ {
	case string(statusSubmitted):
		return StatusSubmitted, nil
	case string(statusAcknowledged):
		return StatusAcknowledged, nil
	case string(statusResolved):
		return StatusResolved, nil
	default:
		return Status{}, fmt.Errorf("invalid value for type 'Status': '%s'", __iNpUt__)
	}
}
