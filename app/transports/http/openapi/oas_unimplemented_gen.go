// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AccountAuthMethodDelete implements AccountAuthMethodDelete operation.
//
// Retrieve a list of authentication providers with a flag indicating which
// ones are active for the currently authenticated account.
//
// DELETE /v1/accounts/self/auth-methods/{auth_method_id}
func (UnimplementedHandler) AccountAuthMethodDelete(ctx context.Context, params AccountAuthMethodDeleteParams) (r AccountAuthMethodDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountAuthProviderList implements AccountAuthProviderList operation.
//
// Retrieve a list of authentication providers with a flag indicating which
// ones are active for the currently authenticated account.
//
// GET /v1/accounts/self/auth-methods
func (UnimplementedHandler) AccountAuthProviderList(ctx context.Context) (r AccountAuthProviderListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountGet implements AccountGet operation.
//
// Get the information for the currently authenticated account.
//
// GET /v1/accounts
func (UnimplementedHandler) AccountGet(ctx context.Context) (r AccountGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountGetAvatar implements AccountGetAvatar operation.
//
// Get an avatar for the specified account.
//
// GET /v1/accounts/{account_handle}/avatar
func (UnimplementedHandler) AccountGetAvatar(ctx context.Context, params AccountGetAvatarParams) (r AccountGetAvatarRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountSetAvatar implements AccountSetAvatar operation.
//
// Upload an avatar for the authenticated account.
//
// POST /v1/accounts/self/avatar
func (UnimplementedHandler) AccountSetAvatar(ctx context.Context, req AccountSetAvatarReq, params AccountSetAvatarParams) (r AccountSetAvatarRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountUpdate implements AccountUpdate operation.
//
// Update the information for the currently authenticated account.
//
// PATCH /v1/accounts
func (UnimplementedHandler) AccountUpdate(ctx context.Context, req OptAccountMutableProps) (r AccountUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AdminAccountBanCreate implements AdminAccountBanCreate operation.
//
// Suspend an account - soft delete. This disables the ability for the
// account owner to log in and use the platform. It keeps the account on
// record for linkage to content so UI doesn't break. It does not change
// anything else about the account such as the avatar, name, etc.
//
// POST /v1/admin/bans/{account_handle}
func (UnimplementedHandler) AdminAccountBanCreate(ctx context.Context, params AdminAccountBanCreateParams) (r AdminAccountBanCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AdminAccountBanRemove implements AdminAccountBanRemove operation.
//
// Given the account is suspended, remove the suspended state.
//
// DELETE /v1/admin/bans/{account_handle}
func (UnimplementedHandler) AdminAccountBanRemove(ctx context.Context, params AdminAccountBanRemoveParams) (r AdminAccountBanRemoveRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AdminSettingsUpdate implements AdminSettingsUpdate operation.
//
// Update non-env configuration settings for installation.
//
// PATCH /v1/admin
func (UnimplementedHandler) AdminSettingsUpdate(ctx context.Context, req OptAdminSettingsMutableProps) (r AdminSettingsUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AssetGet implements AssetGet operation.
//
// Download an asset by its ID.
//
// GET /v1/assets/{asset_filename}
func (UnimplementedHandler) AssetGet(ctx context.Context, params AssetGetParams) (r AssetGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AssetUpload implements AssetUpload operation.
//
// Upload and process a media file.
//
// POST /v1/assets
func (UnimplementedHandler) AssetUpload(ctx context.Context, req AssetUploadReq, params AssetUploadParams) (r AssetUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthEmailPasswordSignin implements AuthEmailPasswordSignin operation.
//
// Sign in to an existing account with a email and password.
//
// POST /v1/auth/email-password/signin
func (UnimplementedHandler) AuthEmailPasswordSignin(ctx context.Context, req OptAuthEmailPasswordInitialProps) (r AuthEmailPasswordSigninRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthEmailPasswordSignup implements AuthEmailPasswordSignup operation.
//
// Register a new account with a email and password.
//
// POST /v1/auth/email-password/signup
func (UnimplementedHandler) AuthEmailPasswordSignup(ctx context.Context, req OptAuthEmailPasswordInitialProps) (r AuthEmailPasswordSignupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthEmailSignin implements AuthEmailSignin operation.
//
// Sign in to an existing account with an email and optional password. The
// behaviour of this endpoint depends on how the instance is configured. If
// email+password is the preferred method, a cookie is returned on success
// but if magic links are preferred, the endpoint will start the code flow.
//
// POST /v1/auth/email/signin
func (UnimplementedHandler) AuthEmailSignin(ctx context.Context, req OptAuthEmailInitialProps) (r AuthEmailSigninRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthEmailSignup implements AuthEmailSignup operation.
//
// Register a new account with an email and optional password. The password
// requirement is dependent on how the instance is configured for account
// authentication with email addresses (password vs magic link.)
// When the email address has not been registered, this endpoint will send
// a verification email however it will also return a session cookie to
// facilitate pre-verification usage of the platform. If the email address
// already exists, no session cookie will be returned in order to prevent
// arbitrary account control by a malicious actor. In this case, the email
// will be sent again with the same OTP for the case where the user has
// cleared their cookies or switched device but hasn't yet verified due to
// missing the email or a delivery failure. In this sense, the endpoint can
// act as a "resend verification email" operation as well as registration.
// In the first case, a 200 response is provided with the session cookie,
// in the second case, a 422 response is provided without a session cookie.
// Given that this is an unauthenticated endpoint that triggers an email to
// be sent to any public address, it MUST be heavily rate limited.
//
// POST /v1/auth/email/signup
func (UnimplementedHandler) AuthEmailSignup(ctx context.Context, req OptAuthEmailInitialProps) (r AuthEmailSignupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthEmailVerify implements AuthEmailVerify operation.
//
// Verify an email address using a token that was emailed to one of the
// account's email addresses either set via sign up or added later.
//
// POST /v1/auth/email/verify
func (UnimplementedHandler) AuthEmailVerify(ctx context.Context, req OptAuthEmailVerifyProps) (r AuthEmailVerifyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthPasswordCreate implements AuthPasswordCreate operation.
//
// Given the requesting account does not have a password authentication,
// add a password authentication method to it with the given password.
//
// POST /v1/auth/password
func (UnimplementedHandler) AuthPasswordCreate(ctx context.Context, req OptAuthPasswordInitialProps) (r AuthPasswordCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthPasswordSignin implements AuthPasswordSignin operation.
//
// Sign in to an existing account with a username and password.
//
// POST /v1/auth/password/signin
func (UnimplementedHandler) AuthPasswordSignin(ctx context.Context, req OptAuthPair) (r AuthPasswordSigninRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthPasswordSignup implements AuthPasswordSignup operation.
//
// Register a new account with a username and password.
//
// POST /v1/auth/password/signup
func (UnimplementedHandler) AuthPasswordSignup(ctx context.Context, req OptAuthPair) (r AuthPasswordSignupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthPasswordUpdate implements AuthPasswordUpdate operation.
//
// Given the requesting account has a password authentication, update the
// password on file.
//
// PATCH /v1/auth/password
func (UnimplementedHandler) AuthPasswordUpdate(ctx context.Context, req OptAuthPasswordMutableProps) (r AuthPasswordUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthProviderList implements AuthProviderList operation.
//
// Retrieve a list of authentication providers. Storyden supports a few
// ways to authenticate, from simple passwords to OAuth and WebAuthn. This
// endpoint tells a client which auth capabilities are enabled.
//
// GET /v1/auth
func (UnimplementedHandler) AuthProviderList(ctx context.Context) (r AuthProviderListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthProviderLogout implements AuthProviderLogout operation.
//
// Remove cookies from requesting client.
//
// GET /v1/auth/logout
func (UnimplementedHandler) AuthProviderLogout(ctx context.Context) (r AuthProviderLogoutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CategoryCreate implements CategoryCreate operation.
//
// Create a category for organising posts.
//
// POST /v1/categories
func (UnimplementedHandler) CategoryCreate(ctx context.Context, req OptCategoryInitialProps) (r CategoryCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CategoryList implements CategoryList operation.
//
// Get a list of all categories on the site.
//
// GET /v1/categories
func (UnimplementedHandler) CategoryList(ctx context.Context) (r *CategoryList, _ error) {
	return r, ht.ErrNotImplemented
}

// CategoryUpdate implements CategoryUpdate operation.
//
// Create a category for organising posts.
//
// PATCH /v1/categories/{category_id}
func (UnimplementedHandler) CategoryUpdate(ctx context.Context, req OptCategoryMutableProps, params CategoryUpdateParams) (r CategoryUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CategoryUpdateOrder implements CategoryUpdateOrder operation.
//
// Update the sort order of categories.
//
// PATCH /v1/categories
func (UnimplementedHandler) CategoryUpdateOrder(ctx context.Context, req CategoryIdentifierList) (r *CategoryList, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionAddNode implements CollectionAddNode operation.
//
// Add a node to a collection. The collection must be owned by the account
// making the request. The node can be any published node or any node
// not published but owned by the collection owner.
//
// PUT /v1/collections/{collection_id}/nodes/{node_id}
func (UnimplementedHandler) CollectionAddNode(ctx context.Context, params CollectionAddNodeParams) (r CollectionAddNodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionAddPost implements CollectionAddPost operation.
//
// Add a post to a collection. The collection must be owned by the account
// making the request. The post can be any published post of any kind.
//
// PUT /v1/collections/{collection_id}/posts/{post_id}
func (UnimplementedHandler) CollectionAddPost(ctx context.Context, params CollectionAddPostParams) (r CollectionAddPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionCreate implements CollectionCreate operation.
//
// Create a collection for curating posts under the authenticated account.
//
// POST /v1/collections
func (UnimplementedHandler) CollectionCreate(ctx context.Context, req OptCollectionInitialProps) (r CollectionCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionDelete implements CollectionDelete operation.
//
// Delete a collection owned by the authenticated account.
//
// DELETE /v1/collections/{collection_id}
func (UnimplementedHandler) CollectionDelete(ctx context.Context, params CollectionDeleteParams) (r CollectionDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionGet implements CollectionGet operation.
//
// Get a collection by its ID. Collections can be public or private so the
// response will depend on which account is making the request and if the
// target collection is public, private, owned or not owned by the account.
//
// GET /v1/collections/{collection_id}
func (UnimplementedHandler) CollectionGet(ctx context.Context, params CollectionGetParams) (r CollectionGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionList implements CollectionList operation.
//
// List all collections using the filtering options.
//
// GET /v1/collections
func (UnimplementedHandler) CollectionList(ctx context.Context, params CollectionListParams) (r CollectionListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionRemoveNode implements CollectionRemoveNode operation.
//
// Remove a node from a collection. The collection must be owned by the
// account making the request.
//
// DELETE /v1/collections/{collection_id}/nodes/{node_id}
func (UnimplementedHandler) CollectionRemoveNode(ctx context.Context, params CollectionRemoveNodeParams) (r CollectionRemoveNodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionRemovePost implements CollectionRemovePost operation.
//
// Remove a post from a collection. The collection must be owned by the
// account making the request.
//
// DELETE /v1/collections/{collection_id}/posts/{post_id}
func (UnimplementedHandler) CollectionRemovePost(ctx context.Context, params CollectionRemovePostParams) (r CollectionRemovePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CollectionUpdate implements CollectionUpdate operation.
//
// Update a collection owned by the authenticated account.
//
// PATCH /v1/collections/{collection_id}
func (UnimplementedHandler) CollectionUpdate(ctx context.Context, req OptCollectionMutableProps, params CollectionUpdateParams) (r CollectionUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DatagraphSearch implements DatagraphSearch operation.
//
// Query and search content.
//
// GET /v1/datagraph
func (UnimplementedHandler) DatagraphSearch(ctx context.Context, params DatagraphSearchParams) (r DatagraphSearchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetInfo implements GetInfo operation.
//
// Get the basic forum installation info such as title, description, etc.
//
// GET /v1/info
func (UnimplementedHandler) GetInfo(ctx context.Context) (r *Info, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSpec implements GetSpec operation.
//
// Note: the generator creates a `map[string]interface{}` if this is set to
// `application/json`... so I'm just using plain text for now.
//
// GET /openapi.json
func (UnimplementedHandler) GetSpec(ctx context.Context) (r GetSpecOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersion implements GetVersion operation.
//
// The version number includes the date and time of the release build as
// well as a short representation of the Git commit hash.
//
// GET /version
func (UnimplementedHandler) GetVersion(ctx context.Context) (r GetVersionOK, _ error) {
	return r, ht.ErrNotImplemented
}

// IconGet implements IconGet operation.
//
// Get the logo icon image.
//
// GET /v1/info/icon/{icon_size}
func (UnimplementedHandler) IconGet(ctx context.Context, params IconGetParams) (r *AssetGetOKHeaders, _ error) {
	return r, ht.ErrNotImplemented
}

// IconUpload implements IconUpload operation.
//
// Upload and process the installation's logo image.
//
// POST /v1/info/icon
func (UnimplementedHandler) IconUpload(ctx context.Context, req IconUploadReq, params IconUploadParams) (r IconUploadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LinkCreate implements LinkCreate operation.
//
// Add a link to the community bookmarks. This will also scrape the content
// at the site the link points to, if possible. If the submitted link is an
// invalid link for whatever reason (invalid URL structure or page is dead)
// then the API will fail. The metadata for the link is indexed on success.
// If the submitted link already exists it will be an idempotent operation,
// unless the body contains additional metadata. In these cases, the link's
// metadata will be updated with the new metadata and the URL is unchanged.
// When a link is submitted, it is first "cleaned" to remove any fragments.
//
// POST /v1/links
func (UnimplementedHandler) LinkCreate(ctx context.Context, req OptLinkInitialProps) (r LinkCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LinkGet implements LinkGet operation.
//
// Get the details for a specific link. Such as where it's been posted,
// which resources it's linked to and how many times it's been opened.
//
// GET /v1/links/{link_slug}
func (UnimplementedHandler) LinkGet(ctx context.Context, params LinkGetParams) (r LinkGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LinkList implements LinkList operation.
//
// List all links using the filtering options.
//
// GET /v1/links
func (UnimplementedHandler) LinkList(ctx context.Context, params LinkListParams) (r LinkListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeAddAsset implements NodeAddAsset operation.
//
// Add an asset to a node.
//
// PUT /v1/nodes/{node_slug}/assets/{asset_id}
func (UnimplementedHandler) NodeAddAsset(ctx context.Context, params NodeAddAssetParams) (r NodeAddAssetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeAddNode implements NodeAddNode operation.
//
// Set a node's parent to the specified node.
//
// PUT /v1/nodes/{node_slug}/nodes/{node_slug_child}
func (UnimplementedHandler) NodeAddNode(ctx context.Context, params NodeAddNodeParams) (r NodeAddNodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeCreate implements NodeCreate operation.
//
// Create a node for curating structured knowledge together.
//
// POST /v1/nodes
func (UnimplementedHandler) NodeCreate(ctx context.Context, req OptNodeInitialProps) (r NodeCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeDelete implements NodeDelete operation.
//
// Delete a node and move all children to its parent or root.
//
// DELETE /v1/nodes/{node_slug}
func (UnimplementedHandler) NodeDelete(ctx context.Context, params NodeDeleteParams) (r NodeDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeGet implements NodeGet operation.
//
// Get a node by its URL slug.
//
// GET /v1/nodes/{node_slug}
func (UnimplementedHandler) NodeGet(ctx context.Context, params NodeGetParams) (r NodeGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeList implements NodeList operation.
//
// List nodes using the given filters. Can be used to get a full tree.
//
// GET /v1/nodes
func (UnimplementedHandler) NodeList(ctx context.Context, params NodeListParams) (r NodeListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeRemoveAsset implements NodeRemoveAsset operation.
//
// Remove an asset from a node.
//
// DELETE /v1/nodes/{node_slug}/assets/{asset_id}
func (UnimplementedHandler) NodeRemoveAsset(ctx context.Context, params NodeRemoveAssetParams) (r NodeRemoveAssetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeRemoveNode implements NodeRemoveNode operation.
//
// Remove a node from its parent node and back to the top level.
//
// DELETE /v1/nodes/{node_slug}/nodes/{node_slug_child}
func (UnimplementedHandler) NodeRemoveNode(ctx context.Context, params NodeRemoveNodeParams) (r NodeRemoveNodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeUpdate implements NodeUpdate operation.
//
// Update a node.
//
// PATCH /v1/nodes/{node_slug}
func (UnimplementedHandler) NodeUpdate(ctx context.Context, req OptNodeMutableProps, params NodeUpdateParams) (r NodeUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NodeUpdateVisibility implements NodeUpdateVisibility operation.
//
// Update the visibility of a node. When changed, this may trigger other
// operations such as notifications/newsletters. Changing the visibility of
// anything to "published" is often accompanied by some other side effects.
//
// PATCH /v1/nodes/{node_slug}/visibility
func (UnimplementedHandler) NodeUpdateVisibility(ctx context.Context, req OptVisibilityMutationProps, params NodeUpdateVisibilityParams) (r NodeUpdateVisibilityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// OAuthProviderCallback implements OAuthProviderCallback operation.
//
// OAuth2 callback.
//
// POST /v1/auth/oauth/{oauth_provider}/callback
func (UnimplementedHandler) OAuthProviderCallback(ctx context.Context, req OptOAuthCallback, params OAuthProviderCallbackParams) (r OAuthProviderCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PhoneRequestCode implements PhoneRequestCode operation.
//
// Start the authentication flow with a phone number. The handler will send
// a one-time code to the provided phone number which must then be sent to
// the other phone endpoint to verify the number and validate the account.
//
// POST /v1/auth/phone
func (UnimplementedHandler) PhoneRequestCode(ctx context.Context, req OptPhoneRequestCodeProps) (r PhoneRequestCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PhoneSubmitCode implements PhoneSubmitCode operation.
//
// Complete the phone number authentication flow by submitting the one-time
// code that was sent to the user's phone.
//
// PUT /v1/auth/phone/{account_handle}
func (UnimplementedHandler) PhoneSubmitCode(ctx context.Context, req OptPhoneSubmitCodeProps, params PhoneSubmitCodeParams) (r PhoneSubmitCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostCreate implements PostCreate operation.
//
// Create a new post within a thread.
//
// POST /v1/threads/{thread_mark}/posts
func (UnimplementedHandler) PostCreate(ctx context.Context, req OptPostInitialProps, params PostCreateParams) (r PostCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostDelete implements PostDelete operation.
//
// Archive a post using soft-delete.
//
// DELETE /v1/posts/{post_id}
func (UnimplementedHandler) PostDelete(ctx context.Context, params PostDeleteParams) (r PostDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostReactAdd implements PostReactAdd operation.
//
// Add a reaction to a post.
//
// PUT /v1/posts/{post_id}/reacts
func (UnimplementedHandler) PostReactAdd(ctx context.Context, req OptPostReactProps, params PostReactAddParams) (r PostReactAddRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostSearch implements PostSearch operation.
//
// Search through posts using various queries and filters.
//
// GET /v1/posts/search
func (UnimplementedHandler) PostSearch(ctx context.Context, params PostSearchParams) (r PostSearchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostUpdate implements PostUpdate operation.
//
// Publish changes to a single post.
//
// PATCH /v1/posts/{post_id}
func (UnimplementedHandler) PostUpdate(ctx context.Context, req OptPostMutableProps, params PostUpdateParams) (r PostUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ProfileGet implements ProfileGet operation.
//
// Get a public profile by ID.
//
// GET /v1/profiles/{account_handle}
func (UnimplementedHandler) ProfileGet(ctx context.Context, params ProfileGetParams) (r ProfileGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ProfileList implements ProfileList operation.
//
// Query and search profiles.
//
// GET /v1/profiles
func (UnimplementedHandler) ProfileList(ctx context.Context, params ProfileListParams) (r ProfileListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadCreate implements ThreadCreate operation.
//
// Create a new thread within the specified category.
//
// POST /v1/threads
func (UnimplementedHandler) ThreadCreate(ctx context.Context, req OptThreadInitialProps) (r ThreadCreateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadDelete implements ThreadDelete operation.
//
// Archive a thread using soft-delete.
//
// DELETE /v1/threads/{thread_mark}
func (UnimplementedHandler) ThreadDelete(ctx context.Context, params ThreadDeleteParams) (r ThreadDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadGet implements ThreadGet operation.
//
// Get information about a thread such as its title, author, when it was
// created as well as a list of the posts within the thread.
//
// GET /v1/threads/{thread_mark}
func (UnimplementedHandler) ThreadGet(ctx context.Context, params ThreadGetParams) (r ThreadGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadList implements ThreadList operation.
//
// Get a list of all threads.
//
// GET /v1/threads
func (UnimplementedHandler) ThreadList(ctx context.Context, params ThreadListParams) (r ThreadListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ThreadUpdate implements ThreadUpdate operation.
//
// Publish changes to a thread.
//
// PATCH /v1/threads/{thread_mark}
func (UnimplementedHandler) ThreadUpdate(ctx context.Context, req OptThreadMutableProps, params ThreadUpdateParams) (r ThreadUpdateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnGetAssertion implements WebAuthnGetAssertion operation.
//
// Start the WebAuthn assertion for an existing account.
//
// GET /v1/auth/webauthn/assert/{account_handle}
func (UnimplementedHandler) WebAuthnGetAssertion(ctx context.Context, params WebAuthnGetAssertionParams) (r WebAuthnGetAssertionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnMakeAssertion implements WebAuthnMakeAssertion operation.
//
// Complete the credential assertion and sign in to an account.
//
// POST /v1/auth/webauthn/assert
func (UnimplementedHandler) WebAuthnMakeAssertion(ctx context.Context, req OptPublicKeyCredential) (r WebAuthnMakeAssertionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnMakeCredential implements WebAuthnMakeCredential operation.
//
// Complete WebAuthn registration by creating a new credential.
//
// POST /v1/auth/webauthn/make
func (UnimplementedHandler) WebAuthnMakeCredential(ctx context.Context, req OptPublicKeyCredential) (r WebAuthnMakeCredentialRes, _ error) {
	return r, ht.ErrNotImplemented
}

// WebAuthnRequestCredential implements WebAuthnRequestCredential operation.
//
// Start the WebAuthn registration process by requesting a credential.
//
// GET /v1/auth/webauthn/make/{account_handle}
func (UnimplementedHandler) WebAuthnRequestCredential(ctx context.Context, params WebAuthnRequestCredentialParams) (r WebAuthnRequestCredentialRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *InternalServerErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *InternalServerErrorStatusCode) {
	r = new(InternalServerErrorStatusCode)
	return r
}
