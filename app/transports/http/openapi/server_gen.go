// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	Access_keyScopes = "access_key.Scopes"
	BrowserScopes    = "browser.Scopes"
	WebauthnScopes   = "webauthn.Scopes"
)

// Defines values for AccountVerifiedStatus.
const (
	AccountVerifiedStatusNone          AccountVerifiedStatus = "none"
	AccountVerifiedStatusVerifiedEmail AccountVerifiedStatus = "verified_email"
)

// Defines values for AttestationConveyancePreference.
const (
	AttestationConveyancePreferenceDirect     AttestationConveyancePreference = "direct"
	AttestationConveyancePreferenceEnterprise AttestationConveyancePreference = "enterprise"
	AttestationConveyancePreferenceIndirect   AttestationConveyancePreference = "indirect"
	AttestationConveyancePreferenceNone       AttestationConveyancePreference = "none"
)

// Defines values for AuthMode.
const (
	Email  AuthMode = "email"
	Handle AuthMode = "handle"
	Phone  AuthMode = "phone"
)

// Defines values for AuthenticatorAttachment.
const (
	CrossPlatform AuthenticatorAttachment = "cross-platform"
	Platform      AuthenticatorAttachment = "platform"
)

// Defines values for CollectionItemMembershipType.
const (
	Normal             CollectionItemMembershipType = "normal"
	SubmissionAccepted CollectionItemMembershipType = "submission_accepted"
	SubmissionReview   CollectionItemMembershipType = "submission_review"
)

// Defines values for DatagraphItemKind.
const (
	DatagraphItemKindCollection DatagraphItemKind = "collection"
	DatagraphItemKindEvent      DatagraphItemKind = "event"
	DatagraphItemKindNode       DatagraphItemKind = "node"
	DatagraphItemKindPost       DatagraphItemKind = "post"
	DatagraphItemKindProfile    DatagraphItemKind = "profile"
	DatagraphItemKindReply      DatagraphItemKind = "reply"
	DatagraphItemKindThread     DatagraphItemKind = "thread"
)

// Defines values for EventLocationType.
const (
	Physical EventLocationType = "physical"
	Virtual  EventLocationType = "virtual"
)

// Defines values for EventParticipantRole.
const (
	Attendee EventParticipantRole = "attendee"
	Host     EventParticipantRole = "host"
)

// Defines values for EventParticipationPolicy.
const (
	Closed     EventParticipationPolicy = "closed"
	InviteOnly EventParticipationPolicy = "invite_only"
	Open       EventParticipationPolicy = "open"
)

// Defines values for EventParticipationStatus.
const (
	Attending EventParticipationStatus = "attending"
	Declined  EventParticipationStatus = "declined"
	Invited   EventParticipationStatus = "invited"
	Requested EventParticipationStatus = "requested"
)

// Defines values for InstanceCapability.
const (
	EmailClient InstanceCapability = "email_client"
	GenAi       InstanceCapability = "gen_ai"
	Semdex      InstanceCapability = "semdex"
	SmsClient   InstanceCapability = "sms_client"
)

// Defines values for NotificationEvent.
const (
	Follow         NotificationEvent = "follow"
	PostLike       NotificationEvent = "post_like"
	ProfileMention NotificationEvent = "profile_mention"
	ThreadReply    NotificationEvent = "thread_reply"
)

// Defines values for NotificationStatus.
const (
	Read   NotificationStatus = "read"
	Unread NotificationStatus = "unread"
)

// Defines values for OnboardingStatus.
const (
	Complete             OnboardingStatus = "complete"
	RequiresCategory     OnboardingStatus = "requires_category"
	RequiresFirstAccount OnboardingStatus = "requires_first_account"
	RequiresFirstPost    OnboardingStatus = "requires_first_post"
	RequiresMoreAccounts OnboardingStatus = "requires_more_accounts"
)

// Defines values for Permission.
const (
	ADMINISTRATOR         Permission = "ADMINISTRATOR"
	COLLECTIONSUBMIT      Permission = "COLLECTION_SUBMIT"
	CREATECOLLECTION      Permission = "CREATE_COLLECTION"
	CREATEINVITATION      Permission = "CREATE_INVITATION"
	CREATEPOST            Permission = "CREATE_POST"
	CREATEREACTION        Permission = "CREATE_REACTION"
	LISTCOLLECTIONS       Permission = "LIST_COLLECTIONS"
	LISTPROFILES          Permission = "LIST_PROFILES"
	MANAGECATEGORIES      Permission = "MANAGE_CATEGORIES"
	MANAGECOLLECTIONS     Permission = "MANAGE_COLLECTIONS"
	MANAGEEVENTS          Permission = "MANAGE_EVENTS"
	MANAGELIBRARY         Permission = "MANAGE_LIBRARY"
	MANAGEPOSTS           Permission = "MANAGE_POSTS"
	MANAGEROLES           Permission = "MANAGE_ROLES"
	MANAGESETTINGS        Permission = "MANAGE_SETTINGS"
	MANAGESUSPENSIONS     Permission = "MANAGE_SUSPENSIONS"
	READCOLLECTION        Permission = "READ_COLLECTION"
	READPROFILE           Permission = "READ_PROFILE"
	READPUBLISHEDLIBRARY  Permission = "READ_PUBLISHED_LIBRARY"
	READPUBLISHEDTHREADS  Permission = "READ_PUBLISHED_THREADS"
	SUBMITLIBRARYNODE     Permission = "SUBMIT_LIBRARY_NODE"
	UPLOADASSET           Permission = "UPLOAD_ASSET"
	USEPERSONALACCESSKEYS Permission = "USE_PERSONAL_ACCESS_KEYS"
	VIEWACCOUNTS          Permission = "VIEW_ACCOUNTS"
)

// Defines values for PropertyType.
const (
	Boolean   PropertyType = "boolean"
	Number    PropertyType = "number"
	Text      PropertyType = "text"
	Timestamp PropertyType = "timestamp"
)

// Defines values for PublicKeyCredentialDescriptorTransports.
const (
	Ble      PublicKeyCredentialDescriptorTransports = "ble"
	Cable    PublicKeyCredentialDescriptorTransports = "cable"
	Hybrid   PublicKeyCredentialDescriptorTransports = "hybrid"
	Internal PublicKeyCredentialDescriptorTransports = "internal"
	Nfc      PublicKeyCredentialDescriptorTransports = "nfc"
	Usb      PublicKeyCredentialDescriptorTransports = "usb"
)

// Defines values for PublicKeyCredentialRequestOptionsUserVerification.
const (
	PublicKeyCredentialRequestOptionsUserVerificationDiscouraged PublicKeyCredentialRequestOptionsUserVerification = "discouraged"
	PublicKeyCredentialRequestOptionsUserVerificationPreferred   PublicKeyCredentialRequestOptionsUserVerification = "preferred"
	PublicKeyCredentialRequestOptionsUserVerificationRequired    PublicKeyCredentialRequestOptionsUserVerification = "required"
)

// Defines values for PublicKeyCredentialType.
const (
	PublicKey PublicKeyCredentialType = "public-key"
)

// Defines values for ResidentKeyRequirement.
const (
	ResidentKeyRequirementDiscouraged ResidentKeyRequirement = "discouraged"
	ResidentKeyRequirementPreferred   ResidentKeyRequirement = "preferred"
	ResidentKeyRequirementRequired    ResidentKeyRequirement = "required"
)

// Defines values for UserVerificationRequirement.
const (
	Discouraged UserVerificationRequirement = "discouraged"
	Preferred   UserVerificationRequirement = "preferred"
	Required    UserVerificationRequirement = "required"
)

// Defines values for Visibility.
const (
	Draft     Visibility = "draft"
	Published Visibility = "published"
	Review    Visibility = "review"
	Unlisted  Visibility = "unlisted"
)

// Defines values for IconSize.
const (
	IconSizeN120x120 IconSize = "120x120"
	IconSizeN152x152 IconSize = "152x152"
	IconSizeN167x167 IconSize = "167x167"
	IconSizeN180x180 IconSize = "180x180"
	IconSizeN32x32   IconSize = "32x32"
	IconSizeN512x512 IconSize = "512x512"
)

// Defines values for NodeListFormatParam.
const (
	NodeListFormatParamFlat NodeListFormatParam = "flat"
	NodeListFormatParamTree NodeListFormatParam = "tree"
)

// Defines values for IconGetParamsIconSize.
const (
	IconGetParamsIconSizeN120x120 IconGetParamsIconSize = "120x120"
	IconGetParamsIconSizeN152x152 IconGetParamsIconSize = "152x152"
	IconGetParamsIconSizeN167x167 IconGetParamsIconSize = "167x167"
	IconGetParamsIconSizeN180x180 IconGetParamsIconSize = "180x180"
	IconGetParamsIconSizeN32x32   IconGetParamsIconSize = "32x32"
	IconGetParamsIconSizeN512x512 IconGetParamsIconSize = "512x512"
)

// Defines values for NodeListParamsFormat.
const (
	NodeListParamsFormatFlat NodeListParamsFormat = "flat"
	NodeListParamsFormatTree NodeListParamsFormat = "tree"
)

// APIError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type APIError struct {
	// Error The internal error, not intended for end-user display.
	Error string `json:"error"`

	// Message A human-readable message intended for end-user display.
	Message *string `json:"message,omitempty"`

	// Metadata Any additional metadata related to the error.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Suggested A suggested action for the user.
	Suggested *string `json:"suggested,omitempty"`
}

// AccessKey defines model for AccessKey.
type AccessKey struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	Enabled   bool       `json:"enabled"`

	// ExpiresAt When the access key expires, if null, it never expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The name of the access key.
	Name string `json:"name"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccessKeyInitialProps defines model for AccessKeyInitialProps.
type AccessKeyInitialProps struct {
	// ExpiresAt When the access key expires, if null, it never expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Name The name of the access key.
	Name string `json:"name"`
}

// AccessKeyIssued defines model for AccessKeyIssued.
type AccessKeyIssued struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	Enabled   bool       `json:"enabled"`

	// ExpiresAt When the access key expires, if null, it never expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The name of the access key.
	Name string `json:"name"`

	// Secret The secret key used to authenticate with the API.
	//
	// Keys are prefixed with a kind identifier, "sdpak" refers to a
	// Storyden Personal Access Key and "sdbak" refers to a Storyden
	// Bot Access Key. The two kinds are not interchangeable however they
	// do not have behavioural differences and is merely a visual cue.
	Secret string `json:"secret"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccessKeyList defines model for AccessKeyList.
type AccessKeyList = []AccessKey

// AccessKeyListResult defines model for AccessKeyListResult.
type AccessKeyListResult struct {
	Keys AccessKeyList `json:"keys"`
}

// AccessKeyProps defines model for AccessKeyProps.
type AccessKeyProps struct {
	Enabled bool `json:"enabled"`

	// ExpiresAt When the access key expires, if null, it never expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Name The name of the access key.
	Name string `json:"name"`
}

// AccessKeySecret defines model for AccessKeySecret.
type AccessKeySecret struct {
	// Secret The secret key used to authenticate with the API.
	//
	// Keys are prefixed with a kind identifier, "sdpak" refers to a
	// Storyden Personal Access Key and "sdbak" refers to a Storyden
	// Bot Access Key. The two kinds are not interchangeable however they
	// do not have behavioural differences and is merely a visual cue.
	Secret string `json:"secret"`
}

// Account defines model for Account.
type Account struct {
	Admin bool `json:"admin"`

	// Bio The rich-text bio for an account's public profile.
	Bio AccountBio `json:"bio"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// EmailAddresses If the instance is configured to not use any email features for auth or
	// transactional/content communications, this will always be empty.
	EmailAddresses AccountEmailAddressList `json:"email_addresses"`

	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// InvitedBy A minimal reference to an account.
	InvitedBy *ProfileReference `json:"invited_by,omitempty"`

	// Joined The time the resource was created.
	Joined MemberJoinedDate        `json:"joined"`
	Links  ProfileExternalLinkList `json:"links"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name          AccountName        `json:"name"`
	Notifications *NotificationCount `json:"notifications,omitempty"`
	Roles         AccountRoleList    `json:"roles"`

	// Suspended The time the resource was created.
	Suspended *MemberSuspendedDate `json:"suspended,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt      time.Time             `json:"updatedAt"`
	VerifiedStatus AccountVerifiedStatus `json:"verified_status"`
}

// AccountAuthMethod An authentication method is an active instance of an authentication
// provider associated with an account. Use this to display a user's active
// authentication methods so they can edit or remove it.
type AccountAuthMethod struct {
	// CreatedAt When this auth method was registered to the account.
	CreatedAt time.Time `json:"created_at"`

	// Id The internal unique ID this method has.
	Id string `json:"id"`

	// Identifier The external identifier (third party ID or device ID)
	Identifier string `json:"identifier"`

	// Name The personal name given to the method.
	Name     string       `json:"name"`
	Provider AuthProvider `json:"provider"`
}

// AccountAuthMethodList defines model for AccountAuthMethodList.
type AccountAuthMethodList = []AccountAuthMethod

// AccountAuthMethods defines model for AccountAuthMethods.
type AccountAuthMethods struct {
	Active    AccountAuthMethodList `json:"active"`
	Available AuthProviderList      `json:"available"`
}

// AccountBio The rich-text bio for an account's public profile.
type AccountBio = string

// AccountCommonProps defines model for AccountCommonProps.
type AccountCommonProps struct {
	Admin bool `json:"admin"`

	// Bio The rich-text bio for an account's public profile.
	Bio AccountBio `json:"bio"`

	// EmailAddresses If the instance is configured to not use any email features for auth or
	// transactional/content communications, this will always be empty.
	EmailAddresses AccountEmailAddressList `json:"email_addresses"`

	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// InvitedBy A minimal reference to an account.
	InvitedBy *ProfileReference `json:"invited_by,omitempty"`

	// Joined The time the resource was created.
	Joined MemberJoinedDate        `json:"joined"`
	Links  ProfileExternalLinkList `json:"links"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Name The account owners display name.
	Name          AccountName        `json:"name"`
	Notifications *NotificationCount `json:"notifications,omitempty"`
	Roles         AccountRoleList    `json:"roles"`

	// Suspended The time the resource was created.
	Suspended      *MemberSuspendedDate  `json:"suspended,omitempty"`
	VerifiedStatus AccountVerifiedStatus `json:"verified_status"`
}

// AccountEmailAddress defines model for AccountEmailAddress.
type AccountEmailAddress struct {
	// EmailAddress A valid email address.
	EmailAddress EmailAddress `json:"email_address"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Verified Is the email address verified to be owned by the account?
	Verified bool `json:"verified"`
}

// AccountEmailAddressList If the instance is configured to not use any email features for auth or
// transactional/content communications, this will always be empty.
type AccountEmailAddressList = []AccountEmailAddress

// AccountEmailInitialProps defines model for AccountEmailInitialProps.
type AccountEmailInitialProps struct {
	// EmailAddress A valid email address.
	EmailAddress EmailAddress `json:"email_address"`
}

// AccountHandle The unique @ handle of an account.
type AccountHandle = string

// AccountMutableProps defines model for AccountMutableProps.
type AccountMutableProps struct {
	// Bio The rich-text bio for an account's public profile.
	Bio *AccountBio `json:"bio,omitempty"`

	// Handle The unique @ handle of an account.
	Handle    *AccountHandle           `json:"handle,omitempty"`
	Interests *TagNameList             `json:"interests,omitempty"`
	Links     *ProfileExternalLinkList `json:"links,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`
}

// AccountName The account owners display name.
type AccountName = string

// AccountRole defines model for AccountRole.
type AccountRole struct {
	// Badge One role may be designated as a badge for the account. If ture, it
	// should be displayed prominently on the profile or in other contexts.
	Badge  bool   `json:"badge"`
	Colour string `json:"colour"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Default There are two built-in roles: everyone and admin, this boolean flag
	// is set if this role is one of the default built-in roles.
	Default bool `json:"default"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc        *map[string]interface{} `json:"misc,omitempty"`
	Name        string                  `json:"name"`
	Permissions PermissionList          `json:"permissions"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccountRoleList defines model for AccountRoleList.
type AccountRoleList = []AccountRole

// AccountRoleProps defines model for AccountRoleProps.
type AccountRoleProps struct {
	// Badge One role may be designated as a badge for the account. If ture, it
	// should be displayed prominently on the profile or in other contexts.
	Badge bool `json:"badge"`

	// Default There are two built-in roles: everyone and admin, this boolean flag
	// is set if this role is one of the default built-in roles.
	Default bool `json:"default"`
}

// AccountVerifiedStatus defines model for AccountVerifiedStatus.
type AccountVerifiedStatus string

// AdminSettingsMutableProps defines model for AdminSettingsMutableProps.
type AdminSettingsMutableProps struct {
	AccentColour       *string   `json:"accent_colour,omitempty"`
	AuthenticationMode *AuthMode `json:"authentication_mode,omitempty"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content     *PostContent `json:"content,omitempty"`
	Description *string      `json:"description,omitempty"`

	// Metadata Arbitrary metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`
	Title    *string   `json:"title,omitempty"`
}

// AdminSettingsProps Storyden installation and administration settings.
type AdminSettingsProps struct {
	AccentColour       string   `json:"accent_colour"`
	AuthenticationMode AuthMode `json:"authentication_mode"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content     PostContent `json:"content"`
	Description string      `json:"description"`

	// Metadata Arbitrary metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`
	Title    string    `json:"title"`
}

// Asset defines model for Asset.
type Asset struct {
	Filename string  `json:"filename"`
	Height   float32 `json:"height"`

	// Id A unique identifier for this resource.
	Id       AssetID `json:"id"`
	MimeType string  `json:"mime_type"`
	Parent   *Asset  `json:"parent,omitempty"`

	// Path The API path of the asset, conforms to the schema's GET `/assets`.
	Path  string  `json:"path"`
	Width float32 `json:"width"`
}

// AssetID A unique identifier for this resource.
type AssetID = Identifier

// AssetIDs defines model for AssetIDs.
type AssetIDs = []AssetID

// AssetList defines model for AssetList.
type AssetList = []Asset

// AssetSourceList defines model for AssetSourceList.
type AssetSourceList = []AssetSourceURL

// AssetSourceURL An asset source URL holds the address of an off-platform media asset which is not hosted on a Storyden instance. It may represent a source URL for an intended download or an asset which is stored elsewhere.
type AssetSourceURL = string

// AttestationConveyancePreference https://www.w3.org/TR/webauthn-2/#enum-attestation-convey
type AttestationConveyancePreference string

// AuthEmailInitialProps defines model for AuthEmailInitialProps.
type AuthEmailInitialProps struct {
	// Email A valid email address.
	Email EmailAddress `json:"email"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`
}

// AuthEmailPasswordInitialProps defines model for AuthEmailPasswordInitialProps.
type AuthEmailPasswordInitialProps struct {
	// Email A valid email address.
	Email EmailAddress `json:"email"`

	// Handle The unique @ handle of an account.
	Handle   *AccountHandle `json:"handle,omitempty"`
	Password string         `json:"password"`
}

// AuthEmailPasswordReset defines model for AuthEmailPasswordReset.
type AuthEmailPasswordReset struct {
	// Email A valid email address.
	Email    EmailAddress `json:"email"`
	TokenUrl struct {
		// Query The query parameters to store the reset token in. This is a
		// frontend client specific value.
		Query string `json:"query"`

		// Url The URL to include in the password reset email. This URL's host
		// must match the configured Storyden instance's web address value.
		Url string `json:"url"`
	} `json:"token_url"`
}

// AuthEmailVerifyProps defines model for AuthEmailVerifyProps.
type AuthEmailVerifyProps struct {
	Code string `json:"code"`

	// Email A valid email address.
	Email EmailAddress `json:"email"`
}

// AuthMode defines model for AuthMode.
type AuthMode string

// AuthPair defines model for AuthPair.
type AuthPair struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthPasswordInitialProps defines model for AuthPasswordInitialProps.
type AuthPasswordInitialProps struct {
	Password string `json:"password"`
}

// AuthPasswordMutableProps defines model for AuthPasswordMutableProps.
type AuthPasswordMutableProps struct {
	New string `json:"new"`
	Old string `json:"old"`
}

// AuthPasswordResetProps defines model for AuthPasswordResetProps.
type AuthPasswordResetProps struct {
	New   string `json:"new"`
	Token string `json:"token"`
}

// AuthProvider defines model for AuthProvider.
type AuthProvider struct {
	// Link The hyperlink to render for the user.
	Link *string `json:"link,omitempty"`

	// Name The human-readable name of the provider.
	Name string `json:"name"`

	// Provider The slug name of the provider.
	Provider string `json:"provider"`
}

// AuthProviderList defines model for AuthProviderList.
type AuthProviderList = []AuthProvider

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// AuthenticationExtensionsClientInputs https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs
type AuthenticationExtensionsClientInputs map[string]interface{}

// AuthenticatorAttachment https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment
type AuthenticatorAttachment string

// AuthenticatorResponse https://www.w3.org/TR/webauthn-2/#authenticatorresponse
type AuthenticatorResponse struct {
	AttestationObject *string   `json:"attestationObject,omitempty"`
	AuthenticatorData *string   `json:"authenticatorData,omitempty"`
	ClientDataJSON    string    `json:"clientDataJSON"`
	Signature         *string   `json:"signature,omitempty"`
	Transports        *[]string `json:"transports,omitempty"`
	UserHandle        *string   `json:"userHandle,omitempty"`
}

// AuthenticatorSelectionCriteria https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria
type AuthenticatorSelectionCriteria struct {
	// AuthenticatorAttachment https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment
	AuthenticatorAttachment AuthenticatorAttachment `json:"authenticatorAttachment"`
	RequireResidentKey      *bool                   `json:"requireResidentKey,omitempty"`

	// ResidentKey https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement
	ResidentKey ResidentKeyRequirement `json:"residentKey"`

	// UserVerification https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement
	UserVerification *UserVerificationRequirement `json:"userVerification,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Children   CategoryList `json:"children"`
	Colour     string       `json:"colour"`
	CoverImage *Asset       `json:"cover_image,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	Description string     `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name A category's user-facing name.
	Name CategoryName `json:"name"`

	// Parent A unique identifier for this resource.
	Parent    *Identifier `json:"parent,omitempty"`
	PostCount int         `json:"postCount"`

	// Slug A category's URL-safe slug.
	Slug CategorySlug `json:"slug"`
	Sort int          `json:"sort"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CategoryAdditional defines model for CategoryAdditional.
type CategoryAdditional struct {
	PostCount int `json:"postCount"`
}

// CategoryCommonProps defines model for CategoryCommonProps.
type CategoryCommonProps struct {
	Children    CategoryList `json:"children"`
	Colour      string       `json:"colour"`
	CoverImage  *Asset       `json:"cover_image,omitempty"`
	Description string       `json:"description"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Name A category's user-facing name.
	Name CategoryName `json:"name"`

	// Parent A unique identifier for this resource.
	Parent *Identifier `json:"parent,omitempty"`

	// Slug A category's URL-safe slug.
	Slug CategorySlug `json:"slug"`
	Sort int          `json:"sort"`
}

// CategoryDeleteProps defines model for CategoryDeleteProps.
type CategoryDeleteProps struct {
	// MoveTo A unique identifier for this resource.
	MoveTo Identifier `json:"move_to"`
}

// CategoryInitialProps defines model for CategoryInitialProps.
type CategoryInitialProps struct {
	Colour string `json:"colour"`

	// CoverImageAssetId A unique identifier for this resource.
	CoverImageAssetId *Identifier `json:"cover_image_asset_id,omitempty"`
	Description       string      `json:"description"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Name A category's user-facing name.
	Name CategoryName `json:"name"`

	// Parent A unique identifier for this resource.
	Parent *Identifier `json:"parent,omitempty"`

	// Slug A category's URL-safe slug.
	Slug *CategorySlug `json:"slug,omitempty"`
}

// CategoryList defines model for CategoryList.
type CategoryList = []Category

// CategoryListResult defines model for CategoryListResult.
type CategoryListResult struct {
	Categories CategoryList `json:"categories"`
}

// CategoryMutableProps defines model for CategoryMutableProps.
type CategoryMutableProps struct {
	Colour *string `json:"colour,omitempty"`

	// CoverImageAssetId Optional cover image asset identifier for the category.
	CoverImageAssetId nullable.Nullable[NullableIdentifier] `json:"cover_image_asset_id,omitempty"`
	Description       *string                               `json:"description,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Name A category's user-facing name.
	Name *CategoryName `json:"name,omitempty"`

	// Slug A category's URL-safe slug.
	Slug *CategorySlug `json:"slug,omitempty"`
}

// CategoryName A category's user-facing name.
type CategoryName = string

// CategoryPositionMutableProps Parameters for repositioning a category in the hierarchy. Update the
// parent using `parent`, and/or reposition among siblings using `before`
// or `after`. Using both `before` and `after` is not allowed.
type CategoryPositionMutableProps struct {
	// After A unique identifier for this resource.
	After *Identifier `json:"after,omitempty"`

	// Before A unique identifier for this resource.
	Before *Identifier `json:"before,omitempty"`

	// Parent A unique identifier for this resource.
	Parent nullable.Nullable[NullableIdentifier] `json:"parent,omitempty"`
}

// CategoryReference defines model for CategoryReference.
type CategoryReference struct {
	Children   CategoryList `json:"children"`
	Colour     string       `json:"colour"`
	CoverImage *Asset       `json:"cover_image,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	Description string     `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name A category's user-facing name.
	Name CategoryName `json:"name"`

	// Parent A unique identifier for this resource.
	Parent *Identifier `json:"parent,omitempty"`

	// Slug A category's URL-safe slug.
	Slug CategorySlug `json:"slug"`
	Sort int          `json:"sort"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CategorySlug A category's URL-safe slug.
type CategorySlug = string

// CategorySlugList A list of category names.
type CategorySlugList = []CategorySlug

// Collection defines model for Collection.
type Collection struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt      *time.Time             `json:"deletedAt,omitempty"`
	Description    *CollectionDescription `json:"description,omitempty"`
	HasQueriedItem bool                   `json:"has_queried_item"`

	// Id A unique identifier for this resource.
	Id        Identifier `json:"id"`
	ItemCount int        `json:"item_count"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name CollectionName          `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Slug A polymorphic identifier which is either a raw ID, a slug or both values
	// combined and separated by a hyphen. This allows endpoints to respond to
	// varying forms of a resource's ID which may be present in different app
	// contexts. For example, a slug may be used in a URL but raw IDs are often
	// exposed as part of API responses or in certain endpoint parameters. This
	// type allows flexibility in user experience as well as the API surface
	// while ensuring performance during database queries and other operations.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
	// `top-10-movies-thread` as the identifier for that thread.
	//
	// Marks are only ever used on the read path as they are a derivative data
	// type and are not stored in the database as-is, while IDs and slugs are.
	// The write path typically exposes slugs as writable and IDs as immutable.
	Slug CollectionSlug `json:"slug"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CollectionAdditionalProps defines model for CollectionAdditionalProps.
type CollectionAdditionalProps struct {
	HasQueriedItem bool `json:"has_queried_item"`
	ItemCount      int  `json:"item_count"`
}

// CollectionCommonProps A reference to the collection
type CollectionCommonProps struct {
	Description *CollectionDescription `json:"description,omitempty"`
	Name        CollectionName         `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Slug A polymorphic identifier which is either a raw ID, a slug or both values
	// combined and separated by a hyphen. This allows endpoints to respond to
	// varying forms of a resource's ID which may be present in different app
	// contexts. For example, a slug may be used in a URL but raw IDs are often
	// exposed as part of API responses or in certain endpoint parameters. This
	// type allows flexibility in user experience as well as the API surface
	// while ensuring performance during database queries and other operations.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
	// `top-10-movies-thread` as the identifier for that thread.
	//
	// Marks are only ever used on the read path as they are a derivative data
	// type and are not stored in the database as-is, while IDs and slugs are.
	// The write path typically exposes slugs as writable and IDs as immutable.
	Slug CollectionSlug `json:"slug"`
}

// CollectionCount How many collections has this item been added to?
type CollectionCount = int

// CollectionDescription defines model for CollectionDescription.
type CollectionDescription = string

// CollectionInitialProps defines model for CollectionInitialProps.
type CollectionInitialProps struct {
	Description *CollectionDescription `json:"description,omitempty"`
	Name        CollectionName         `json:"name"`

	// Slug A polymorphic identifier which is either a raw ID, a slug or both values
	// combined and separated by a hyphen. This allows endpoints to respond to
	// varying forms of a resource's ID which may be present in different app
	// contexts. For example, a slug may be used in a URL but raw IDs are often
	// exposed as part of API responses or in certain endpoint parameters. This
	// type allows flexibility in user experience as well as the API surface
	// while ensuring performance during database queries and other operations.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
	// `top-10-movies-thread` as the identifier for that thread.
	//
	// Marks are only ever used on the read path as they are a derivative data
	// type and are not stored in the database as-is, while IDs and slugs are.
	// The write path typically exposes slugs as writable and IDs as immutable.
	Slug *CollectionSlug `json:"slug,omitempty"`
}

// CollectionItem defines model for CollectionItem.
type CollectionItem struct {
	// AddedAt The time that the item was added to the collection.
	AddedAt time.Time `json:"added_at"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id             Identifier                   `json:"id"`
	Item           DatagraphItem                `json:"item"`
	MembershipType CollectionItemMembershipType `json:"membership_type"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// RelevanceScore For recommendations and other uses, only available when a Semdex is
	// configured for content indexing and contextual relativity scoring.
	RelevanceScore *RelevanceScore `json:"relevance_score,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CollectionItemList defines model for CollectionItemList.
type CollectionItemList = []CollectionItem

// CollectionItemMembershipType defines model for CollectionItemMembershipType.
type CollectionItemMembershipType string

// CollectionItemMetadata defines model for CollectionItemMetadata.
type CollectionItemMetadata struct {
	// AddedAt The time that the item was added to the collection.
	AddedAt        time.Time                    `json:"added_at"`
	MembershipType CollectionItemMembershipType `json:"membership_type"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// RelevanceScore For recommendations and other uses, only available when a Semdex is
	// configured for content indexing and contextual relativity scoring.
	RelevanceScore *RelevanceScore `json:"relevance_score,omitempty"`
}

// CollectionList defines model for CollectionList.
type CollectionList = []Collection

// CollectionMutableProps defines model for CollectionMutableProps.
type CollectionMutableProps struct {
	Description *CollectionDescription `json:"description,omitempty"`
	Name        *CollectionName        `json:"name,omitempty"`

	// Slug A polymorphic identifier which is either a raw ID, a slug or both values
	// combined and separated by a hyphen. This allows endpoints to respond to
	// varying forms of a resource's ID which may be present in different app
	// contexts. For example, a slug may be used in a URL but raw IDs are often
	// exposed as part of API responses or in certain endpoint parameters. This
	// type allows flexibility in user experience as well as the API surface
	// while ensuring performance during database queries and other operations.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
	// `top-10-movies-thread` as the identifier for that thread.
	//
	// Marks are only ever used on the read path as they are a derivative data
	// type and are not stored in the database as-is, while IDs and slugs are.
	// The write path typically exposes slugs as writable and IDs as immutable.
	Slug *CollectionSlug `json:"slug,omitempty"`
}

// CollectionName defines model for CollectionName.
type CollectionName = string

// CollectionSlug A polymorphic identifier which is either a raw ID, a slug or both values
// combined and separated by a hyphen. This allows endpoints to respond to
// varying forms of a resource's ID which may be present in different app
// contexts. For example, a slug may be used in a URL but raw IDs are often
// exposed as part of API responses or in certain endpoint parameters. This
// type allows flexibility in user experience as well as the API surface
// while ensuring performance during database queries and other operations.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
// `top-10-movies-thread` as the identifier for that thread.
//
// Marks are only ever used on the read path as they are a derivative data
// type and are not stored in the database as-is, while IDs and slugs are.
// The write path typically exposes slugs as writable and IDs as immutable.
type CollectionSlug = Mark

// CollectionStatus defines model for CollectionStatus.
type CollectionStatus struct {
	// HasCollected A boolean indicating if the account in context has collected this item.
	HasCollected HasCollected `json:"has_collected"`

	// InCollections How many collections has this item been added to?
	InCollections CollectionCount `json:"in_collections"`
}

// CollectionWithItems defines model for CollectionWithItems.
type CollectionWithItems struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time             `json:"deletedAt,omitempty"`
	Description *CollectionDescription `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id    Identifier         `json:"id"`
	Items CollectionItemList `json:"items"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name CollectionName          `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Slug A polymorphic identifier which is either a raw ID, a slug or both values
	// combined and separated by a hyphen. This allows endpoints to respond to
	// varying forms of a resource's ID which may be present in different app
	// contexts. For example, a slug may be used in a URL but raw IDs are often
	// exposed as part of API responses or in certain endpoint parameters. This
	// type allows flexibility in user experience as well as the API surface
	// while ensuring performance during database queries and other operations.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
	// `top-10-movies-thread` as the identifier for that thread.
	//
	// Marks are only ever used on the read path as they are a derivative data
	// type and are not stored in the database as-is, while IDs and slugs are.
	// The write path typically exposes slugs as writable and IDs as immutable.
	Slug CollectionSlug `json:"slug"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CredentialRequestOptions https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension
type CredentialRequestOptions struct {
	// PublicKey https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
	PublicKey PublicKeyCredentialRequestOptions `json:"publicKey"`
}

// DatagraphItem defines model for DatagraphItem.
type DatagraphItem struct {
	union json.RawMessage
}

// DatagraphItemKind defines model for DatagraphItemKind.
type DatagraphItemKind string

// DatagraphItemList defines model for DatagraphItemList.
type DatagraphItemList = []DatagraphItem

// DatagraphItemNode defines model for DatagraphItemNode.
type DatagraphItemNode struct {
	Kind DatagraphItemKind `json:"kind"`

	// Ref A node is a text document with children and assets. It serves as an
	// abstraction for grouping structured data objects. It can represent
	// things such as brands, manufacturers, authors, directors, etc. Nodes
	// can be referenced in content posts and they also have their own content.
	Ref Node `json:"ref"`
}

// DatagraphItemPost defines model for DatagraphItemPost.
type DatagraphItemPost struct {
	Kind DatagraphItemKind `json:"kind"`

	// Ref A post represents a temporal piece of content, it can be a thread, or a
	// reply to a thread or something else such as a blog, announcement, etc.
	// Post is used in generic use-cases where it may not matter whether you
	// want a thread or a reply, such as search results or recommendations.
	Ref Post `json:"ref"`
}

// DatagraphItemProfile defines model for DatagraphItemProfile.
type DatagraphItemProfile struct {
	Kind DatagraphItemKind `json:"kind"`
	Ref  PublicProfile     `json:"ref"`
}

// DatagraphItemReply defines model for DatagraphItemReply.
type DatagraphItemReply struct {
	Kind DatagraphItemKind `json:"kind"`

	// Ref A new post within a thread of posts. A post may reply to another post in
	// the thread by specifying the `reply_to` property. The identifier in the
	// `reply_to` value must be post within the same thread.
	Ref Reply `json:"ref"`
}

// DatagraphItemThread defines model for DatagraphItemThread.
type DatagraphItemThread struct {
	Kind DatagraphItemKind `json:"kind"`
	Ref  Thread            `json:"ref"`
}

// DatagraphRecommendations defines model for DatagraphRecommendations.
type DatagraphRecommendations struct {
	Recomentations DatagraphItemList `json:"recomentations"`
}

// DatagraphSearchResult defines model for DatagraphSearchResult.
type DatagraphSearchResult struct {
	CurrentPage int               `json:"current_page"`
	Items       DatagraphItemList `json:"items"`
	NextPage    *int              `json:"next_page,omitempty"`
	PageSize    int               `json:"page_size"`
	Results     int               `json:"results"`
	TotalPages  int               `json:"total_pages"`
}

// EmailAddress A valid email address.
type EmailAddress = string

// Event defines model for Event.
type Event struct {
	// Capacity The maximum number of attendees that can attend the event.
	Capacity *EventCapacity `json:"capacity,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time       `json:"deletedAt,omitempty"`
	Description EventDescription `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Location An event location can be either physical or virtual. A physical location
	// may have an address or coordinates. A virtual location may have a link.
	Location EventLocation `json:"location"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name EventName               `json:"name"`

	// Participants A list of attendees, hosts and invites for an event.
	Participants        EventParticipantList     `json:"participants"`
	ParticipationPolicy EventParticipationPolicy `json:"participation_policy"`
	PrimaryImage        *Asset                   `json:"primary_image,omitempty"`
	Slug                EventSlug                `json:"slug"`
	Thread              Thread                   `json:"thread"`

	// TimeRange A time range for an event, which may span multiple days or times of day.
	TimeRange EventTimeRange `json:"time_range"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt  time.Time  `json:"updatedAt"`
	Visibility Visibility `json:"visibility"`
}

// EventCapacity The maximum number of attendees that can attend the event.
type EventCapacity = int

// EventDescription defines model for EventDescription.
type EventDescription = string

// EventInitialProps defines model for EventInitialProps.
type EventInitialProps struct {
	// Capacity The maximum number of attendees that can attend the event.
	Capacity *EventCapacity `json:"capacity,omitempty"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content     PostContent       `json:"content"`
	Description *EventDescription `json:"description,omitempty"`

	// Location An event location can be either physical or virtual. A physical location
	// may have an address or coordinates. A virtual location may have a link.
	Location *EventLocation `json:"location,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta                *Metadata                `json:"meta,omitempty"`
	Name                EventName                `json:"name"`
	ParticipationPolicy EventParticipationPolicy `json:"participation_policy"`

	// PrimaryImageAssetId A unique identifier for this resource.
	PrimaryImageAssetId *AssetID   `json:"primary_image_asset_id,omitempty"`
	Slug                *EventSlug `json:"slug,omitempty"`

	// ThreadCategoryId A unique identifier for this resource.
	ThreadCategoryId Identifier `json:"thread_category_id"`

	// TimeRange A time range for an event, which may span multiple days or times of day.
	TimeRange  EventTimeRange `json:"time_range"`
	Visibility Visibility     `json:"visibility"`
}

// EventList defines model for EventList.
type EventList = []EventReference

// EventListResult defines model for EventListResult.
type EventListResult struct {
	CurrentPage int       `json:"current_page"`
	Events      EventList `json:"events"`
	NextPage    *int      `json:"next_page,omitempty"`
	PageSize    int       `json:"page_size"`
	Results     int       `json:"results"`
	TotalPages  int       `json:"total_pages"`
}

// EventLocation An event location can be either physical or virtual. A physical location
// may have an address or coordinates. A virtual location may have a link.
type EventLocation struct {
	union json.RawMessage
}

// EventLocationPhysical A physical location for an event, such as a venue, a park, a street
// address, etc. This location may have a name, address, and coordinates.
// A URL may also be added for a Google maps link etc.
type EventLocationPhysical struct {
	Address      *string           `json:"address,omitempty"`
	Latitude     *float32          `json:"latitude,omitempty"`
	LocationType EventLocationType `json:"location_type"`
	Longitude    *float32          `json:"longitude,omitempty"`
	Name         string            `json:"name"`
	Url          *string           `json:"url,omitempty"`
}

// EventLocationType defines model for EventLocationType.
type EventLocationType string

// EventLocationVirtual A virtual location for an event, such as a URL, a video conference
// link, a Discord server, etc. This location may have a URL.
type EventLocationVirtual struct {
	LocationType EventLocationType `json:"location_type"`
	Name         string            `json:"name"`
	Url          *string           `json:"url,omitempty"`
}

// EventMutableProps defines model for EventMutableProps.
type EventMutableProps struct {
	// Capacity The maximum number of attendees that can attend the event.
	Capacity *EventCapacity `json:"capacity,omitempty"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content     *PostContent      `json:"content,omitempty"`
	Description *EventDescription `json:"description,omitempty"`

	// Location An event location can be either physical or virtual. A physical location
	// may have an address or coordinates. A virtual location may have a link.
	Location *EventLocation `json:"location,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta                *Metadata                 `json:"meta,omitempty"`
	Name                *EventName                `json:"name,omitempty"`
	ParticipationPolicy *EventParticipationPolicy `json:"participation_policy,omitempty"`

	// PrimaryImageAssetId A unique identifier for this resource.
	PrimaryImageAssetId *AssetID   `json:"primary_image_asset_id,omitempty"`
	Slug                *EventSlug `json:"slug,omitempty"`

	// TimeRange A time range for an event, which may span multiple days or times of day.
	TimeRange  *EventTimeRange `json:"time_range,omitempty"`
	Visibility *Visibility     `json:"visibility,omitempty"`
}

// EventName defines model for EventName.
type EventName = string

// EventParticipant defines model for EventParticipant.
type EventParticipant struct {
	// Profile A minimal reference to an account.
	Profile ProfileReference         `json:"profile"`
	Role    EventParticipantRole     `json:"role"`
	Status  EventParticipationStatus `json:"status"`
}

// EventParticipantList A list of attendees, hosts and invites for an event.
type EventParticipantList = []EventParticipant

// EventParticipantMutableProps defines model for EventParticipantMutableProps.
type EventParticipantMutableProps struct {
	Role   *EventParticipantRole     `json:"role,omitempty"`
	Status *EventParticipationStatus `json:"status,omitempty"`
}

// EventParticipantRole defines model for EventParticipantRole.
type EventParticipantRole string

// EventParticipationPolicy defines model for EventParticipationPolicy.
type EventParticipationPolicy string

// EventParticipationStatus defines model for EventParticipationStatus.
type EventParticipationStatus string

// EventProps defines model for EventProps.
type EventProps struct {
	Thread Thread `json:"thread"`
}

// EventReference defines model for EventReference.
type EventReference struct {
	// Capacity The maximum number of attendees that can attend the event.
	Capacity *EventCapacity `json:"capacity,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time       `json:"deletedAt,omitempty"`
	Description EventDescription `json:"description"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Location An event location can be either physical or virtual. A physical location
	// may have an address or coordinates. A virtual location may have a link.
	Location EventLocation `json:"location"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name EventName               `json:"name"`

	// Participants A list of attendees, hosts and invites for an event.
	Participants        EventParticipantList     `json:"participants"`
	ParticipationPolicy EventParticipationPolicy `json:"participation_policy"`
	PrimaryImage        *Asset                   `json:"primary_image,omitempty"`
	Slug                EventSlug                `json:"slug"`

	// TimeRange A time range for an event, which may span multiple days or times of day.
	TimeRange EventTimeRange `json:"time_range"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt  time.Time  `json:"updatedAt"`
	Visibility Visibility `json:"visibility"`
}

// EventReferenceProps defines model for EventReferenceProps.
type EventReferenceProps struct {
	// Capacity The maximum number of attendees that can attend the event.
	Capacity    *EventCapacity   `json:"capacity,omitempty"`
	Description EventDescription `json:"description"`

	// Location An event location can be either physical or virtual. A physical location
	// may have an address or coordinates. A virtual location may have a link.
	Location EventLocation `json:"location"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`
	Name EventName `json:"name"`

	// Participants A list of attendees, hosts and invites for an event.
	Participants        EventParticipantList     `json:"participants"`
	ParticipationPolicy EventParticipationPolicy `json:"participation_policy"`
	PrimaryImage        *Asset                   `json:"primary_image,omitempty"`
	Slug                EventSlug                `json:"slug"`

	// TimeRange A time range for an event, which may span multiple days or times of day.
	TimeRange  EventTimeRange `json:"time_range"`
	Visibility Visibility     `json:"visibility"`
}

// EventSlug defines model for EventSlug.
type EventSlug = string

// EventTimeRange A time range for an event, which may span multiple days or times of day.
type EventTimeRange struct {
	End   time.Time `json:"end"`
	Start time.Time `json:"start"`
}

// HasCollected A boolean indicating if the account in context has collected this item.
type HasCollected = bool

// Identifier A unique identifier for this resource.
type Identifier = string

// Info Basic public information about the Storyden installation.
type Info struct {
	AccentColour       string                 `json:"accent_colour"`
	AuthenticationMode AuthMode               `json:"authentication_mode"`
	Capabilities       InstanceCapabilityList `json:"capabilities"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content     PostContent `json:"content"`
	Description string      `json:"description"`

	// Metadata Arbitrary metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// OnboardingStatus Derived from data state, indicates what stage in the onboarding process
	// the Storyden installation is in for directing first-time setup steps.
	OnboardingStatus OnboardingStatus `json:"onboarding_status"`
	Title            string           `json:"title"`
}

// InstanceCapability defines model for InstanceCapability.
type InstanceCapability string

// InstanceCapabilityList defines model for InstanceCapabilityList.
type InstanceCapabilityList = []InstanceCapability

// Invitation defines model for Invitation.
type Invitation struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Creator A minimal reference to an account.
	Creator ProfileReference `json:"creator"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id      Identifier `json:"id"`
	Message *string    `json:"message,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvitationInitialProps defines model for InvitationInitialProps.
type InvitationInitialProps struct {
	Message *string `json:"message,omitempty"`
}

// InvitationList defines model for InvitationList.
type InvitationList = []Invitation

// InvitationListResult defines model for InvitationListResult.
type InvitationListResult struct {
	CurrentPage int            `json:"current_page"`
	Invitations InvitationList `json:"invitations"`
	NextPage    *int           `json:"next_page,omitempty"`
	PageSize    int            `json:"page_size"`
	Results     int            `json:"results"`
	TotalPages  int            `json:"total_pages"`
}

// InvitationProps defines model for InvitationProps.
type InvitationProps struct {
	// Creator A minimal reference to an account.
	Creator ProfileReference `json:"creator"`
	Message *string          `json:"message,omitempty"`
}

// ItemLike defines model for ItemLike.
type ItemLike struct {
	CreatedAt time.Time `json:"created_at"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`
}

// ItemLikeList defines model for ItemLikeList.
type ItemLikeList = []ItemLike

// LikeCount A simple count of likes for contexts where pulling the full list would
// be overkill. For use on minimal item reference schemas.
type LikeCount = int

// LikeData defines model for LikeData.
type LikeData struct {
	// Liked A boolean indicating if the account in context has liked this item.
	Liked LikeStatus `json:"liked"`

	// Likes A simple count of likes for contexts where pulling the full list would
	// be overkill. For use on minimal item reference schemas.
	Likes LikeCount `json:"likes"`
}

// LikeProps defines model for LikeProps.
type LikeProps struct {
	CreatedAt time.Time `json:"created_at"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`
}

// LikeScore The total number of likes received by a member.
type LikeScore = int

// LikeStatus A boolean indicating if the account in context has liked this item.
type LikeStatus = bool

// Link defines model for Link.
type Link struct {
	Assets AssetList `json:"assets"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt    *time.Time       `json:"deletedAt,omitempty"`
	Description  *LinkDescription `json:"description,omitempty"`
	Domain       LinkDomain       `json:"domain"`
	FaviconImage *Asset           `json:"favicon_image,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc           *map[string]interface{} `json:"misc,omitempty"`
	Nodes          NodeList                `json:"nodes"`
	Posts          PostReferenceList       `json:"posts"`
	PrimaryImage   *Asset                  `json:"primary_image,omitempty"`
	Recomentations DatagraphItemList       `json:"recomentations"`
	Slug           LinkSlug                `json:"slug"`
	Title          *LinkTitle              `json:"title,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url A web address
	Url URL `json:"url"`
}

// LinkDescription defines model for LinkDescription.
type LinkDescription = string

// LinkDomain defines model for LinkDomain.
type LinkDomain = string

// LinkInitialProps defines model for LinkInitialProps.
type LinkInitialProps struct {
	Description *LinkDescription `json:"description,omitempty"`
	Title       *LinkTitle       `json:"title,omitempty"`

	// Url A web address
	Url URL `json:"url"`
}

// LinkListResult defines model for LinkListResult.
type LinkListResult struct {
	CurrentPage int               `json:"current_page"`
	Links       LinkReferenceList `json:"links"`
	NextPage    *int              `json:"next_page,omitempty"`
	PageSize    int               `json:"page_size"`
	Results     int               `json:"results"`
	TotalPages  int               `json:"total_pages"`
}

// LinkProps All the resources that a link has been referenced in. May be large.
type LinkProps struct {
	Assets AssetList         `json:"assets"`
	Nodes  NodeList          `json:"nodes"`
	Posts  PostReferenceList `json:"posts"`
}

// LinkReference defines model for LinkReference.
type LinkReference struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt    *time.Time       `json:"deletedAt,omitempty"`
	Description  *LinkDescription `json:"description,omitempty"`
	Domain       LinkDomain       `json:"domain"`
	FaviconImage *Asset           `json:"favicon_image,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc         *map[string]interface{} `json:"misc,omitempty"`
	PrimaryImage *Asset                  `json:"primary_image,omitempty"`
	Slug         LinkSlug                `json:"slug"`
	Title        *LinkTitle              `json:"title,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url A web address
	Url URL `json:"url"`
}

// LinkReferenceList defines model for LinkReferenceList.
type LinkReferenceList = []LinkReference

// LinkReferenceProps defines model for LinkReferenceProps.
type LinkReferenceProps struct {
	Description  *LinkDescription `json:"description,omitempty"`
	Domain       LinkDomain       `json:"domain"`
	FaviconImage *Asset           `json:"favicon_image,omitempty"`
	PrimaryImage *Asset           `json:"primary_image,omitempty"`
	Slug         LinkSlug         `json:"slug"`
	Title        *LinkTitle       `json:"title,omitempty"`

	// Url A web address
	Url URL `json:"url"`
}

// LinkSlug defines model for LinkSlug.
type LinkSlug = string

// LinkTitle defines model for LinkTitle.
type LinkTitle = string

// Mark A polymorphic identifier which is either a raw ID, a slug or both values
// combined and separated by a hyphen. This allows endpoints to respond to
// varying forms of a resource's ID which may be present in different app
// contexts. For example, a slug may be used in a URL but raw IDs are often
// exposed as part of API responses or in certain endpoint parameters. This
// type allows flexibility in user experience as well as the API surface
// while ensuring performance during database queries and other operations.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
// `top-10-movies-thread` as the identifier for that thread.
//
// Marks are only ever used on the read path as they are a derivative data
// type and are not stored in the database as-is, while IDs and slugs are.
// The write path typically exposes slugs as writable and IDs as immutable.
type Mark = string

// MemberJoinedDate The time the resource was created.
type MemberJoinedDate = time.Time

// MemberSuspendedDate The time the resource was created.
type MemberSuspendedDate = time.Time

// Metadata Arbitrary metadata for the resource.
type Metadata map[string]interface{}

// Node defines model for Node.
type Node struct {
	Assets AssetList `json:"assets"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content *PostContent `json:"content,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time      `json:"deletedAt,omitempty"`
	Description NodeDescription `json:"description"`

	// HideChildTree A boolean indicating if the children of this node tree are hidden
	// when querying the full tree. This is useful for nodes that contain
	// a large amount of children and do not need to be rendered in a tree
	// view (such as a sidebar navigation). These children can still be
	// accessed via the node or node children GET operations for rendering.
	HideChildTree bool `json:"hide_child_tree"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Link A minimal object used to refer to a link without sending too much data.
	Link *LinkReference `json:"link,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name NodeName                `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Parent A node is a text document with children and assets. It serves as an
	// abstraction for grouping structured data objects. It can represent
	// things such as brands, manufacturers, authors, directors, etc. Nodes
	// can be referenced in content posts and they also have their own content.
	Parent       *Node  `json:"parent,omitempty"`
	PrimaryImage *Asset `json:"primary_image,omitempty"`

	// RelevanceScore For recommendations and other uses, only available when a Semdex is
	// configured for content indexing and contextual relativity scoring.
	RelevanceScore *RelevanceScore `json:"relevance_score,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug NodeSlug `json:"slug"`

	// Tags A list of tags.
	Tags TagReferenceList `json:"tags"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt  time.Time  `json:"updatedAt"`
	Visibility Visibility `json:"visibility"`
}

// NodeCommonProps The main properties of a node.
type NodeCommonProps struct {
	Assets AssetList `json:"assets"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content     *PostContent    `json:"content,omitempty"`
	Description NodeDescription `json:"description"`

	// HideChildTree A boolean indicating if the children of this node tree are hidden
	// when querying the full tree. This is useful for nodes that contain
	// a large amount of children and do not need to be rendered in a tree
	// view (such as a sidebar navigation). These children can still be
	// accessed via the node or node children GET operations for rendering.
	HideChildTree bool `json:"hide_child_tree"`

	// Link A minimal object used to refer to a link without sending too much data.
	Link *LinkReference `json:"link,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`
	Name NodeName `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Parent A node is a text document with children and assets. It serves as an
	// abstraction for grouping structured data objects. It can represent
	// things such as brands, manufacturers, authors, directors, etc. Nodes
	// can be referenced in content posts and they also have their own content.
	Parent       *Node  `json:"parent,omitempty"`
	PrimaryImage *Asset `json:"primary_image,omitempty"`

	// RelevanceScore For recommendations and other uses, only available when a Semdex is
	// configured for content indexing and contextual relativity scoring.
	RelevanceScore *RelevanceScore `json:"relevance_score,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug NodeSlug `json:"slug"`

	// Tags A list of tags.
	Tags       TagReferenceList `json:"tags"`
	Visibility Visibility       `json:"visibility"`
}

// NodeDescription defines model for NodeDescription.
type NodeDescription = string

// NodeGenerateContentRequest A request for generated content for a node. A request for generated content
// does not use the existing content on a node but takes the current
// client's content state (from an "edit mode" text box for example) and
// sends that in order to generate potential content using an LLM.
type NodeGenerateContentRequest struct {
	Content string `json:"content"`
}

// NodeGenerateContentResult The result of a content generation request from an LLM.
type NodeGenerateContentResult struct {
	Content string `json:"content"`
}

// NodeGenerateTagsRequest A request for generated tags for a node. A request for generated tags
// does not use the existing content on a node but takes the current
// client's content state (from an "edit mode" text box for example) and
// sends that in order to generate potential tags using an LLM.
type NodeGenerateTagsRequest struct {
	Content string `json:"content"`
}

// NodeGenerateTagsResult The result of a tag generation request from an LLM.
type NodeGenerateTagsResult struct {
	Tags TagNameList `json:"tags"`
}

// NodeGenerateTitleRequest A request for a generated title for a node. A request for a generated
// title does not use the existing content on a node but takes the current
// client's content state (from an "edit mode" text box for example) and
// sends that in order to generate a potential title using an LLM.
type NodeGenerateTitleRequest struct {
	Content string `json:"content"`
}

// NodeGenerateTitleResult The result of a title generation request from an LLM.
type NodeGenerateTitleResult struct {
	Title string `json:"title"`
}

// NodeInitialProps defines model for NodeInitialProps.
type NodeInitialProps struct {
	AssetIds     *AssetIDs        `json:"asset_ids,omitempty"`
	AssetSources *AssetSourceList `json:"asset_sources,omitempty"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content       *PostContent     `json:"content,omitempty"`
	Description   *NodeDescription `json:"description,omitempty"`
	HideChildTree *bool            `json:"hide_child_tree,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`
	Name NodeName  `json:"name"`

	// Parent A URL-safe slug for uniquely identifying resources.
	Parent *NodeSlug `json:"parent,omitempty"`

	// PrimaryImageAssetId A unique identifier for this resource.
	PrimaryImageAssetId *AssetID              `json:"primary_image_asset_id,omitempty"`
	Properties          *PropertyMutationList `json:"properties,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug *NodeSlug    `json:"slug,omitempty"`
	Tags *TagNameList `json:"tags,omitempty"`

	// Url A web address
	Url        *URL        `json:"url,omitempty"`
	Visibility *Visibility `json:"visibility,omitempty"`
}

// NodeList defines model for NodeList.
type NodeList = []Node

// NodeListResult defines model for NodeListResult.
type NodeListResult struct {
	CurrentPage int      `json:"current_page"`
	NextPage    *int     `json:"next_page,omitempty"`
	Nodes       NodeTree `json:"nodes"`
	PageSize    int      `json:"page_size"`
	Results     int      `json:"results"`
	TotalPages  int      `json:"total_pages"`
}

// NodeMutableProps Note: Properties are replace-all and are not merged with existing.
type NodeMutableProps struct {
	AssetIds     *AssetIDs        `json:"asset_ids,omitempty"`
	AssetSources *AssetSourceList `json:"asset_sources,omitempty"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content       *PostContent     `json:"content,omitempty"`
	Description   *NodeDescription `json:"description,omitempty"`
	HideChildTree *bool            `json:"hide_child_tree,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`
	Name *NodeName `json:"name,omitempty"`

	// Parent A URL-safe slug for uniquely identifying resources.
	Parent *NodeSlug `json:"parent,omitempty"`

	// PrimaryImageAssetId A unique identifier for this resource.
	PrimaryImageAssetId nullable.Nullable[NullableIdentifier] `json:"primary_image_asset_id,omitempty"`
	Properties          *PropertyMutationList                 `json:"properties,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug *NodeSlug                 `json:"slug,omitempty"`
	Tags *TagNameList              `json:"tags,omitempty"`
	Url  nullable.Nullable[string] `json:"url,omitempty"`
}

// NodeName defines model for NodeName.
type NodeName = string

// NodePositionMutableProps Parameters for repositioning a node in the hierarchy. You may change the
// node's parent using `parent`, and/or reposition it among its siblings
// using one of: `before`, `after`, or `index`. Using multiple reordering
// properties is not allowed.
type NodePositionMutableProps struct {
	// After Move this node after the sibling with this ID.
	After *string `json:"after,omitempty"`

	// Before Move this node before the sibling with this ID.
	Before *string `json:"before,omitempty"`

	// Parent Optional new parent node slug. Set to null to move node to the root.
	Parent nullable.Nullable[string] `json:"parent,omitempty"`
}

// NodeSlug A URL-safe slug for uniquely identifying resources.
type NodeSlug = Slug

// NodeTree defines model for NodeTree.
type NodeTree = []NodeWithChildren

// NodeWithChildren defines model for NodeWithChildren.
type NodeWithChildren struct {
	Assets              AssetList          `json:"assets"`
	ChildPropertySchema PropertySchemaList `json:"child_property_schema"`
	Children            []NodeWithChildren `json:"children"`

	// Content The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Content *PostContent `json:"content,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt   *time.Time      `json:"deletedAt,omitempty"`
	Description NodeDescription `json:"description"`

	// HideChildTree A boolean indicating if the children of this node tree are hidden
	// when querying the full tree. This is useful for nodes that contain
	// a large amount of children and do not need to be rendered in a tree
	// view (such as a sidebar navigation). These children can still be
	// accessed via the node or node children GET operations for rendering.
	HideChildTree bool `json:"hide_child_tree"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Link A minimal object used to refer to a link without sending too much data.
	Link *LinkReference `json:"link,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`
	Name NodeName                `json:"name"`

	// Owner A minimal reference to an account.
	Owner ProfileReference `json:"owner"`

	// Parent A node is a text document with children and assets. It serves as an
	// abstraction for grouping structured data objects. It can represent
	// things such as brands, manufacturers, authors, directors, etc. Nodes
	// can be referenced in content posts and they also have their own content.
	Parent         *Node             `json:"parent,omitempty"`
	PrimaryImage   *Asset            `json:"primary_image,omitempty"`
	Properties     PropertyList      `json:"properties"`
	Recomentations DatagraphItemList `json:"recomentations"`

	// RelevanceScore For recommendations and other uses, only available when a Semdex is
	// configured for content indexing and contextual relativity scoring.
	RelevanceScore *RelevanceScore `json:"relevance_score,omitempty"`

	// Slug A URL-safe slug for uniquely identifying resources.
	Slug NodeSlug `json:"slug"`

	// Tags A list of tags.
	Tags TagReferenceList `json:"tags"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt  time.Time  `json:"updatedAt"`
	Visibility Visibility `json:"visibility"`
}

// Notification defines model for Notification.
type Notification struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"created_at"`

	// Event The kind of event that triggered the notification.
	// Identical to the `notification.Event` enumerated type.
	Event NotificationEvent `json:"event"`

	// Id A unique identifier for this resource.
	Id   Identifier     `json:"id"`
	Item *DatagraphItem `json:"item,omitempty"`

	// Source A minimal reference to an account.
	Source *ProfileReference  `json:"source,omitempty"`
	Status NotificationStatus `json:"status"`
}

// NotificationCount defines model for NotificationCount.
type NotificationCount = int

// NotificationEvent The kind of event that triggered the notification.
// Identical to the `notification.Event` enumerated type.
type NotificationEvent string

// NotificationList defines model for NotificationList.
type NotificationList = []Notification

// NotificationListResult defines model for NotificationListResult.
type NotificationListResult struct {
	CurrentPage   int              `json:"current_page"`
	NextPage      *int             `json:"next_page,omitempty"`
	Notifications NotificationList `json:"notifications"`
	PageSize      int              `json:"page_size"`
	Results       int              `json:"results"`
	TotalPages    int              `json:"total_pages"`
}

// NotificationMutableProps defines model for NotificationMutableProps.
type NotificationMutableProps struct {
	Status *NotificationStatus `json:"status,omitempty"`
}

// NotificationStatus defines model for NotificationStatus.
type NotificationStatus string

// NotificationStatusList defines model for NotificationStatusList.
type NotificationStatusList = []NotificationStatus

// NullableIdentifier A unique identifier for this resource.
type NullableIdentifier = string

// OAuthCallback defines model for OAuthCallback.
type OAuthCallback struct {
	Code  string `json:"code"`
	State string `json:"state"`
}

// OnboardingStatus Derived from data state, indicates what stage in the onboarding process
// the Storyden installation is in for directing first-time setup steps.
type OnboardingStatus string

// OwnedAccessKey defines model for OwnedAccessKey.
type OwnedAccessKey struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CreatedBy A minimal reference to an account.
	CreatedBy ProfileReference `json:"created_by"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	Enabled   bool       `json:"enabled"`

	// ExpiresAt When the access key expires, if null, it never expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The name of the access key.
	Name string `json:"name"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// OwnedAccessKeyList defines model for OwnedAccessKeyList.
type OwnedAccessKeyList = []OwnedAccessKey

// OwnedAccessKeyListResult defines model for OwnedAccessKeyListResult.
type OwnedAccessKeyListResult struct {
	Keys OwnedAccessKeyList `json:"keys"`
}

// PaginatedReplyList defines model for PaginatedReplyList.
type PaginatedReplyList struct {
	CurrentPage int       `json:"current_page"`
	NextPage    *int      `json:"next_page,omitempty"`
	PageSize    int       `json:"page_size"`
	Replies     ReplyList `json:"replies"`
	Results     int       `json:"results"`
	TotalPages  int       `json:"total_pages"`
}

// PaginatedResult To be composed with paginated resource responses.
type PaginatedResult struct {
	CurrentPage int  `json:"current_page"`
	NextPage    *int `json:"next_page,omitempty"`
	PageSize    int  `json:"page_size"`
	Results     int  `json:"results"`
	TotalPages  int  `json:"total_pages"`
}

// Permission defines model for Permission.
type Permission string

// PermissionList defines model for PermissionList.
type PermissionList = []Permission

// PhoneRequestCodeProps The phone number request payload.
type PhoneRequestCodeProps struct {
	// Identifier The desired username to link to the phone number.
	Identifier string `json:"identifier"`

	// PhoneNumber The phone number to receive the one-time code on.
	PhoneNumber string `json:"phone_number"`
}

// PhoneSubmitCodeProps The Phone submit code payload.
type PhoneSubmitCodeProps struct {
	Code string `json:"code"`
}

// Post defines model for Post.
type Post struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body        PostContent       `json:"body"`
	BodyLinks   LinkReferenceList `json:"body_links"`
	Collections CollectionStatus  `json:"collections"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description A short version of the post's body text for use in previews.
	Description *PostDescription `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Likes LikeData   `json:"likes"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostContent The body text of a post within a thread. The type is either a string or
// an object, depending on what was used during creation. Strings can be
// used for basic plain text or markdown content and objects are used for
// more complex types such as Slate.js editor documents.
type PostContent = string

// PostDescription A short version of the post's body text for use in previews.
type PostDescription = string

// PostMutableProps defines model for PostMutableProps.
type PostMutableProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body *PostContent `json:"body,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// PostProps The general properties required for any post-like resource. Is composed
// with Threads or Replies to provide the basic common properties.
type PostProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body      PostContent       `json:"body"`
	BodyLinks LinkReferenceList `json:"body_links"`
}

// PostReference defines model for PostReference.
type PostReference struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author      ProfileReference `json:"author"`
	Collections CollectionStatus `json:"collections"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description A short version of the post's body text for use in previews.
	Description *PostDescription `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Likes LikeData   `json:"likes"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostReferenceList defines model for PostReferenceList.
type PostReferenceList = []PostReference

// PostReferenceProps defines model for PostReferenceProps.
type PostReferenceProps struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author      ProfileReference `json:"author"`
	Collections CollectionStatus `json:"collections"`

	// Description A short version of the post's body text for use in previews.
	Description *PostDescription `json:"description,omitempty"`
	Likes       LikeData         `json:"likes"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`
}

// ProfileExternalLink defines model for ProfileExternalLink.
type ProfileExternalLink struct {
	Text string `json:"text"`
	Url  string `json:"url"`
}

// ProfileExternalLinkList defines model for ProfileExternalLinkList.
type ProfileExternalLinkList = []ProfileExternalLink

// ProfileFollowersCount defines model for ProfileFollowersCount.
type ProfileFollowersCount = int

// ProfileFollowersList defines model for ProfileFollowersList.
type ProfileFollowersList = []ProfileReference

// ProfileFollowingCount defines model for ProfileFollowingCount.
type ProfileFollowingCount = int

// ProfileFollowingList defines model for ProfileFollowingList.
type ProfileFollowingList = []ProfileReference

// ProfileLike defines model for ProfileLike.
type ProfileLike struct {
	CreatedAt time.Time `json:"created_at"`

	// Id A unique identifier for this resource.
	Id   Identifier    `json:"id"`
	Item DatagraphItem `json:"item"`
}

// ProfileLikeList defines model for ProfileLikeList.
type ProfileLikeList = []ProfileLike

// ProfileLikeListResult defines model for ProfileLikeListResult.
type ProfileLikeListResult struct {
	CurrentPage int             `json:"current_page"`
	Likes       ProfileLikeList `json:"likes"`
	NextPage    *int            `json:"next_page,omitempty"`
	PageSize    int             `json:"page_size"`
	Results     int             `json:"results"`
	TotalPages  int             `json:"total_pages"`
}

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Joined The time the resource was created.
	Joined MemberJoinedDate `json:"joined"`

	// Name The account owners display name.
	Name AccountName `json:"name"`

	// Suspended The time the resource was created.
	Suspended *MemberSuspendedDate `json:"suspended,omitempty"`
}

// Property defines model for Property.
type Property struct {
	// Fid A unique identifier for this resource.
	Fid   Identifier    `json:"fid"`
	Name  PropertyName  `json:"name"`
	Sort  string        `json:"sort"`
	Type  PropertyType  `json:"type"`
	Value PropertyValue `json:"value"`
}

// PropertyList defines model for PropertyList.
type PropertyList = []Property

// PropertyMutableProps Note: Properties are replace-all and are not merged with existing.
type PropertyMutableProps struct {
	Properties PropertyMutationList `json:"properties"`
}

// PropertyMutation A property mutation is a change to a property on a node. It can be used
// to update existing properties or add new properties to a node. When a
// property already exists by name/fid, type and sort columns are optional.
type PropertyMutation struct {
	// Fid A unique identifier for this resource.
	Fid   *Identifier      `json:"fid,omitempty"`
	Name  PropertyName     `json:"name"`
	Sort  *PropertySortKey `json:"sort,omitempty"`
	Type  *PropertyType    `json:"type,omitempty"`
	Value PropertyValue    `json:"value"`
}

// PropertyMutationList defines model for PropertyMutationList.
type PropertyMutationList = []PropertyMutation

// PropertyName defines model for PropertyName.
type PropertyName = string

// PropertySchema defines model for PropertySchema.
type PropertySchema struct {
	// Fid A unique identifier for this resource.
	Fid  Identifier   `json:"fid"`
	Name PropertyName `json:"name"`
	Sort string       `json:"sort"`
	Type PropertyType `json:"type"`
}

// PropertySchemaList defines model for PropertySchemaList.
type PropertySchemaList = []PropertySchema

// PropertySchemaMutableProps Mutating property schemas permits updating existing fields as well as
// adding new fields. The discinction is determined by the presence of the
// `id` field. When an `id` field is provided, the operation is treated as
// an update operation where any of the other fields will be used to write
// new values. If an `id` field is omitted, the schema is considered a new
// field and is subject to a uniqueness constraint on the `name` field.
type PropertySchemaMutableProps struct {
	// Fid A unique identifier for this resource.
	Fid  *Identifier  `json:"fid,omitempty"`
	Name PropertyName `json:"name"`
	Sort string       `json:"sort"`
	Type PropertyType `json:"type"`
}

// PropertySortKey defines model for PropertySortKey.
type PropertySortKey = string

// PropertyType defines model for PropertyType.
type PropertyType string

// PropertyValue defines model for PropertyValue.
type PropertyValue = string

// PublicKeyCredential https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type PublicKeyCredential struct {
	AuthenticatorAttachment *string                 `json:"authenticatorAttachment,omitempty"`
	ClientExtensionResults  *map[string]interface{} `json:"clientExtensionResults,omitempty"`
	Id                      string                  `json:"id"`
	RawId                   string                  `json:"rawId"`

	// Response https://www.w3.org/TR/webauthn-2/#authenticatorresponse
	Response AuthenticatorResponse `json:"response"`
	Type     string                `json:"type"`
}

// PublicKeyCredentialCreationOptions https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions
type PublicKeyCredentialCreationOptions struct {
	// Attestation https://www.w3.org/TR/webauthn-2/#enum-attestation-convey
	Attestation *AttestationConveyancePreference `json:"attestation,omitempty"`

	// AuthenticatorSelection https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria
	AuthenticatorSelection *AuthenticatorSelectionCriteria `json:"authenticatorSelection,omitempty"`
	Challenge              string                          `json:"challenge"`
	ExcludeCredentials     []PublicKeyCredentialDescriptor `json:"excludeCredentials"`

	// Extensions https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs
	Extensions       *AuthenticationExtensionsClientInputs `json:"extensions,omitempty"`
	PubKeyCredParams []PublicKeyCredentialParameters       `json:"pubKeyCredParams"`

	// Rp https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity
	Rp      PublicKeyCredentialRpEntity `json:"rp"`
	Timeout *int                        `json:"timeout,omitempty"`

	// User https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
	User PublicKeyCredentialUserEntity `json:"user"`
}

// PublicKeyCredentialDescriptor https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor
type PublicKeyCredentialDescriptor struct {
	Id         string                                     `json:"id"`
	Transports *[]PublicKeyCredentialDescriptorTransports `json:"transports,omitempty"`

	// Type https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
	Type PublicKeyCredentialType `json:"type"`
}

// PublicKeyCredentialDescriptorTransports defines model for PublicKeyCredentialDescriptor.Transports.
type PublicKeyCredentialDescriptorTransports string

// PublicKeyCredentialParameters https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters
type PublicKeyCredentialParameters struct {
	Alg float32 `json:"alg"`

	// Type https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
	Type PublicKeyCredentialType `json:"type"`
}

// PublicKeyCredentialRequestOptions https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
type PublicKeyCredentialRequestOptions struct {
	AllowCredentials *[]PublicKeyCredentialDescriptor                   `json:"allowCredentials,omitempty"`
	Challenge        string                                             `json:"challenge"`
	RpId             *string                                            `json:"rpId,omitempty"`
	Timeout          *int                                               `json:"timeout,omitempty"`
	UserVerification *PublicKeyCredentialRequestOptionsUserVerification `json:"userVerification,omitempty"`
}

// PublicKeyCredentialRequestOptionsUserVerification defines model for PublicKeyCredentialRequestOptions.UserVerification.
type PublicKeyCredentialRequestOptionsUserVerification string

// PublicKeyCredentialRpEntity https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity
type PublicKeyCredentialRpEntity struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PublicKeyCredentialType https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
type PublicKeyCredentialType string

// PublicKeyCredentialUserEntity https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
type PublicKeyCredentialUserEntity struct {
	DisplayName string `json:"displayName"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}

// PublicProfile defines model for PublicProfile.
type PublicProfile struct {
	// Bio The rich-text bio for an account's public profile.
	Bio AccountBio `json:"bio"`
	// Deprecated:
	CreatedAt string `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time            `json:"deletedAt,omitempty"`
	Followers ProfileFollowersCount `json:"followers"`
	Following ProfileFollowingCount `json:"following"`

	// Handle The unique @ handle of an account.
	Handle AccountHandle `json:"handle"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Image *string    `json:"image,omitempty"`

	// Interests A list of tags.
	Interests TagReferenceList `json:"interests"`

	// InvitedBy A minimal reference to an account.
	InvitedBy *ProfileReference `json:"invited_by,omitempty"`

	// Joined The time the resource was created.
	Joined MemberJoinedDate `json:"joined"`

	// LikeScore The total number of likes received by a member.
	LikeScore LikeScore               `json:"like_score"`
	Links     ProfileExternalLinkList `json:"links"`

	// Meta Arbitrary metadata for the resource.
	Meta Metadata `json:"meta"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name  AccountName     `json:"name"`
	Roles AccountRoleList `json:"roles"`

	// Suspended The time the resource was created.
	Suspended *MemberSuspendedDate `json:"suspended,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PublicProfileFollowersResult defines model for PublicProfileFollowersResult.
type PublicProfileFollowersResult struct {
	CurrentPage int                  `json:"current_page"`
	Followers   ProfileFollowersList `json:"followers"`
	NextPage    *int                 `json:"next_page,omitempty"`
	PageSize    int                  `json:"page_size"`
	Results     int                  `json:"results"`
	TotalPages  int                  `json:"total_pages"`
}

// PublicProfileFollowingResult defines model for PublicProfileFollowingResult.
type PublicProfileFollowingResult struct {
	CurrentPage int                  `json:"current_page"`
	Following   ProfileFollowingList `json:"following"`
	NextPage    *int                 `json:"next_page,omitempty"`
	PageSize    int                  `json:"page_size"`
	Results     int                  `json:"results"`
	TotalPages  int                  `json:"total_pages"`
}

// PublicProfileList defines model for PublicProfileList.
type PublicProfileList = []PublicProfile

// PublicProfileListResult defines model for PublicProfileListResult.
type PublicProfileListResult struct {
	CurrentPage int               `json:"current_page"`
	NextPage    *int              `json:"next_page,omitempty"`
	PageSize    int               `json:"page_size"`
	Profiles    PublicProfileList `json:"profiles"`
	Results     int               `json:"results"`
	TotalPages  int               `json:"total_pages"`
}

// React defines model for React.
type React struct {
	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Emoji A single emoji character representing a reaction. In future, this will
	// be augmented with a more fully fledged custom emoji system.
	Emoji ReactEmoji `json:"emoji"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`
}

// ReactEmoji A single emoji character representing a reaction. In future, this will
// be augmented with a more fully fledged custom emoji system.
type ReactEmoji = string

// ReactInitialProps Reactions are currently just simple emoji characters.
type ReactInitialProps struct {
	// Emoji A single emoji character representing a reaction. In future, this will
	// be augmented with a more fully fledged custom emoji system.
	Emoji ReactEmoji `json:"emoji"`
}

// ReactList A list of reactions this post has had from people.
type ReactList = []React

// RelevanceScore For recommendations and other uses, only available when a Semdex is
// configured for content indexing and contextual relativity scoring.
type RelevanceScore = float32

// Reply defines model for Reply.
type Reply struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body        PostContent       `json:"body"`
	BodyLinks   LinkReferenceList `json:"body_links"`
	Collections CollectionStatus  `json:"collections"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description A short version of the post's body text for use in previews.
	Description *PostDescription `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Likes LikeData   `json:"likes"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts ReactList `json:"reacts"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// RootId A unique identifier for this resource.
	RootId Identifier `json:"root_id"`

	// RootSlug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	RootSlug ThreadMark `json:"root_slug"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ReplyInitialProps defines model for ReplyInitialProps.
type ReplyInitialProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body PostContent `json:"body"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// Url A web address
	Url *URL `json:"url,omitempty"`
}

// ReplyList defines model for ReplyList.
type ReplyList = []Reply

// ReplyProps defines model for ReplyProps.
type ReplyProps struct {
	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// RootId A unique identifier for this resource.
	RootId Identifier `json:"root_id"`

	// RootSlug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	RootSlug ThreadMark `json:"root_slug"`
}

// ReplyStatus defines model for ReplyStatus.
type ReplyStatus struct {
	// Replied If requested by an authenticated account, the number of replies that
	// were made by that account to the thread.
	Replied int `json:"replied"`

	// Replies The total number of replies to the thread.
	Replies int `json:"replies"`
}

// ResidentKeyRequirement https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement
type ResidentKeyRequirement string

// Role defines model for Role.
type Role struct {
	Colour string `json:"colour"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc        *map[string]interface{} `json:"misc,omitempty"`
	Name        string                  `json:"name"`
	Permissions PermissionList          `json:"permissions"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// RoleInitialProps defines model for RoleInitialProps.
type RoleInitialProps struct {
	Colour      string         `json:"colour"`
	Name        string         `json:"name"`
	Permissions PermissionList `json:"permissions"`
}

// RoleList defines model for RoleList.
type RoleList = []Role

// RoleListResult defines model for RoleListResult.
type RoleListResult struct {
	Roles RoleList `json:"roles"`
}

// RoleMutableProps defines model for RoleMutableProps.
type RoleMutableProps struct {
	Colour      *string         `json:"colour,omitempty"`
	Name        *string         `json:"name,omitempty"`
	Permissions *PermissionList `json:"permissions,omitempty"`
}

// RoleProps defines model for RoleProps.
type RoleProps struct {
	Colour      string         `json:"colour"`
	Name        string         `json:"name"`
	Permissions PermissionList `json:"permissions"`
}

// Slug A URL-safe slug for uniquely identifying resources.
type Slug = string

// Tag defines model for Tag.
type Tag struct {
	// Colour The colour of a tag.
	Colour TagColour `json:"colour"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// ItemCount The number of items tagged with this tag.
	ItemCount TagItemCount      `json:"item_count"`
	Items     DatagraphItemList `json:"items"`

	// Name The name of a tag.
	Name TagName `json:"name"`
}

// TagColour The colour of a tag.
type TagColour = string

// TagItemCount The number of items tagged with this tag.
type TagItemCount = int

// TagListIDs A list of tags IDs.
type TagListIDs = []Identifier

// TagListResult defines model for TagListResult.
type TagListResult struct {
	// Tags A list of tags.
	Tags TagReferenceList `json:"tags"`
}

// TagName The name of a tag.
type TagName = string

// TagNameList defines model for TagNameList.
type TagNameList = []TagName

// TagProps defines model for TagProps.
type TagProps struct {
	// Id A unique identifier for this resource.
	Id    Identifier        `json:"id"`
	Items DatagraphItemList `json:"items"`
}

// TagReference defines model for TagReference.
type TagReference = TagReferenceProps

// TagReferenceList A list of tags.
type TagReferenceList = []TagReference

// TagReferenceProps defines model for TagReferenceProps.
type TagReferenceProps struct {
	// Colour The colour of a tag.
	Colour TagColour `json:"colour"`

	// ItemCount The number of items tagged with this tag.
	ItemCount TagItemCount `json:"item_count"`

	// Name The name of a tag.
	Name TagName `json:"name"`
}

// Thread defines model for Thread.
type Thread struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body        PostContent        `json:"body"`
	BodyLinks   LinkReferenceList  `json:"body_links"`
	Category    *CategoryReference `json:"category,omitempty"`
	Collections CollectionStatus   `json:"collections"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description A short version of the post's body text for use in previews.
	Description *PostDescription `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// LastReplyAt The time of the last reply to the thread.
	LastReplyAt *time.Time `json:"last_reply_at,omitempty"`
	Likes       LikeData   `json:"likes"`

	// Link A minimal object used to refer to a link without sending too much data.
	Link *LinkReference `json:"link,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// Reacts A list of reactions this post has had from people.
	Reacts         ReactList          `json:"reacts"`
	Recomentations DatagraphItemList  `json:"recomentations"`
	Replies        PaginatedReplyList `json:"replies"`
	ReplyStatus    ReplyStatus        `json:"reply_status"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Tags A list of tags.
	Tags TagReferenceList `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt  time.Time  `json:"updatedAt"`
	Visibility Visibility `json:"visibility"`
}

// ThreadInitialProps defines model for ThreadInitialProps.
type ThreadInitialProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body *PostContent `json:"body,omitempty"`

	// Category A unique identifier for this resource.
	Category *Identifier `json:"category,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata    `json:"meta,omitempty"`
	Tags *TagNameList `json:"tags,omitempty"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`

	// Url A web address
	Url        *URL        `json:"url,omitempty"`
	Visibility *Visibility `json:"visibility,omitempty"`
}

// ThreadList defines model for ThreadList.
type ThreadList = []ThreadReference

// ThreadListResult defines model for ThreadListResult.
type ThreadListResult struct {
	CurrentPage int        `json:"current_page"`
	NextPage    *int       `json:"next_page,omitempty"`
	PageSize    int        `json:"page_size"`
	Results     int        `json:"results"`
	Threads     ThreadList `json:"threads"`
	TotalPages  int        `json:"total_pages"`
}

// ThreadMark A thread's ID and optional slug separated by a dash = it's unique mark.
// This allows endpoints to respond to varying forms of a thread's ID.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
//
//	as the identifier for that thread.
type ThreadMark = string

// ThreadMutableProps defines model for ThreadMutableProps.
type ThreadMutableProps struct {
	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body *PostContent `json:"body,omitempty"`

	// Category A unique identifier for this resource.
	Category *Identifier `json:"category,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata    `json:"meta,omitempty"`
	Tags *TagNameList `json:"tags,omitempty"`

	// Title The title of a thread.
	Title *ThreadTitle `json:"title,omitempty"`

	// Url A web address
	Url        *URL        `json:"url,omitempty"`
	Visibility *Visibility `json:"visibility,omitempty"`
}

// ThreadReference defines model for ThreadReference.
type ThreadReference struct {
	Assets AssetList `json:"assets"`

	// Author A minimal reference to an account.
	Author ProfileReference `json:"author"`

	// Body The body text of a post within a thread. The type is either a string or
	// an object, depending on what was used during creation. Strings can be
	// used for basic plain text or markdown content and objects are used for
	// more complex types such as Slate.js editor documents.
	Body        PostContent        `json:"body"`
	BodyLinks   LinkReferenceList  `json:"body_links"`
	Category    *CategoryReference `json:"category,omitempty"`
	Collections CollectionStatus   `json:"collections"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description A short version of the post's body text for use in previews.
	Description *PostDescription `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// LastReplyAt The time of the last reply to the thread.
	LastReplyAt *time.Time `json:"last_reply_at,omitempty"`
	Likes       LikeData   `json:"likes"`

	// Link A minimal object used to refer to a link without sending too much data.
	Link *LinkReference `json:"link,omitempty"`

	// Meta Arbitrary metadata for the resource.
	Meta *Metadata `json:"meta,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// Reacts A list of reactions this post has had from people.
	Reacts      ReactList   `json:"reacts"`
	ReplyStatus ReplyStatus `json:"reply_status"`

	// Slug A thread's ID and optional slug separated by a dash = it's unique mark.
	// This allows endpoints to respond to varying forms of a thread's ID.
	//
	// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
	// slug `top-10-movies-thread`, Storyden will understand both the forms:
	// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
	//  as the identifier for that thread.
	Slug ThreadMark `json:"slug"`

	// Tags A list of tags.
	Tags TagReferenceList `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt  time.Time  `json:"updatedAt"`
	Visibility Visibility `json:"visibility"`
}

// ThreadReferenceProps defines model for ThreadReferenceProps.
type ThreadReferenceProps struct {
	Category *CategoryReference `json:"category,omitempty"`

	// LastReplyAt The time of the last reply to the thread.
	LastReplyAt *time.Time `json:"last_reply_at,omitempty"`

	// Link A minimal object used to refer to a link without sending too much data.
	Link *LinkReference `json:"link,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned      bool        `json:"pinned"`
	ReplyStatus ReplyStatus `json:"reply_status"`

	// Tags A list of tags.
	Tags       TagReferenceList `json:"tags"`
	Visibility Visibility       `json:"visibility"`
}

// ThreadTitle The title of a thread.
type ThreadTitle = string

// URL A web address
type URL = string

// UserVerificationRequirement https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement
type UserVerificationRequirement string

// Visibility defines model for Visibility.
type Visibility string

// VisibilityMutationProps defines model for VisibilityMutationProps.
type VisibilityMutationProps struct {
	Visibility Visibility `json:"visibility"`
}

// WebAuthnPublicKeyCreationOptions https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension
type WebAuthnPublicKeyCreationOptions struct {
	// PublicKey https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions
	PublicKey PublicKeyCredentialCreationOptions `json:"publicKey"`
}

// AccessKeyIDParam A unique identifier for this resource.
type AccessKeyIDParam = Identifier

// AccountHandleParam The unique @ handle of an account.
type AccountHandleParam = AccountHandle

// AccountHandleQueryParam The unique @ handle of an account.
type AccountHandleQueryParam = AccountHandle

// AccountIDParam A unique identifier for this resource.
type AccountIDParam = Identifier

// AccountIDQueryParam A unique identifier for this resource.
type AccountIDQueryParam = Identifier

// AssetIDParam defines model for AssetIDParam.
type AssetIDParam = string

// AssetNameQuery defines model for AssetNameQuery.
type AssetNameQuery = string

// AssetPathParam defines model for AssetPathParam.
type AssetPathParam = string

// CategorySlugListQuery A list of category names.
type CategorySlugListQuery = CategorySlugList

// CategorySlugParam defines model for CategorySlugParam.
type CategorySlugParam = string

// CollectionHasItemQueryParam A unique identifier for this resource.
type CollectionHasItemQueryParam = Identifier

// CollectionMarkParam A polymorphic identifier which is either a raw ID, a slug or both values
// combined and separated by a hyphen. This allows endpoints to respond to
// varying forms of a resource's ID which may be present in different app
// contexts. For example, a slug may be used in a URL but raw IDs are often
// exposed as part of API responses or in certain endpoint parameters. This
// type allows flexibility in user experience as well as the API surface
// while ensuring performance during database queries and other operations.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
// `top-10-movies-thread` as the identifier for that thread.
//
// Marks are only ever used on the read path as they are a derivative data
// type and are not stored in the database as-is, while IDs and slugs are.
// The write path typically exposes slugs as writable and IDs as immutable.
type CollectionMarkParam = Mark

// ContentLength defines model for ContentLength.
type ContentLength = int64

// DatagraphKindQuery defines model for DatagraphKindQuery.
type DatagraphKindQuery = []DatagraphItemKind

// EmailAddressIDParam A unique identifier for this resource.
type EmailAddressIDParam = Identifier

// EventMarkParam A polymorphic identifier which is either a raw ID, a slug or both values
// combined and separated by a hyphen. This allows endpoints to respond to
// varying forms of a resource's ID which may be present in different app
// contexts. For example, a slug may be used in a URL but raw IDs are often
// exposed as part of API responses or in certain endpoint parameters. This
// type allows flexibility in user experience as well as the API surface
// while ensuring performance during database queries and other operations.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` or `cc5lnd2s1s4652adtu50` or
// `top-10-movies-thread` as the identifier for that thread.
//
// Marks are only ever used on the read path as they are a derivative data
// type and are not stored in the database as-is, while IDs and slugs are.
// The write path typically exposes slugs as writable and IDs as immutable.
type EventMarkParam = Mark

// IconSize defines model for IconSize.
type IconSize string

// InvitationIDParam A unique identifier for this resource.
type InvitationIDParam = Identifier

// InvitationIDQueryParam A unique identifier for this resource.
type InvitationIDQueryParam = Identifier

// LinkSlugParam defines model for LinkSlugParam.
type LinkSlugParam = string

// NodeChildrenSortParam defines model for NodeChildrenSortParam.
type NodeChildrenSortParam = string

// NodeIDParam A unique identifier for this resource.
type NodeIDParam = Identifier

// NodeListFormatParam defines model for NodeListFormatParam.
type NodeListFormatParam string

// NodeSlugChildParam A unique identifier for this resource.
type NodeSlugChildParam = Identifier

// NodeSlugParam A unique identifier for this resource.
type NodeSlugParam = Identifier

// NotificationIDParam A unique identifier for this resource.
type NotificationIDParam = Identifier

// NotificationStatusQuery defines model for NotificationStatusQuery.
type NotificationStatusQuery = NotificationStatusList

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// PaginationQuery defines model for PaginationQuery.
type PaginationQuery = string

// ParentAssetIDQuery defines model for ParentAssetIDQuery.
type ParentAssetIDQuery = string

// ParentQuestionID defines model for ParentQuestionID.
type ParentQuestionID = string

// PostIDParam A unique identifier for this resource.
type PostIDParam = Identifier

// ReactIDParam A unique identifier for this resource.
type ReactIDParam = Identifier

// RequiredSearchQuery defines model for RequiredSearchQuery.
type RequiredSearchQuery = string

// RoleIDParam A unique identifier for this resource.
type RoleIDParam = Identifier

// SearchQuery defines model for SearchQuery.
type SearchQuery = string

// TagNameListQueryParam defines model for TagNameListQueryParam.
type TagNameListQueryParam = TagNameList

// TagNameParam defines model for TagNameParam.
type TagNameParam = string

// TargetNodeSlugQuery defines model for TargetNodeSlugQuery.
type TargetNodeSlugQuery = string

// ThreadMarkParam A thread's ID and optional slug separated by a dash = it's unique mark.
// This allows endpoints to respond to varying forms of a thread's ID.
//
// For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
// slug `top-10-movies-thread`, Storyden will understand both the forms:
// `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
//
//	as the identifier for that thread.
type ThreadMarkParam = ThreadMark

// TreeDepthParam defines model for TreeDepthParam.
type TreeDepthParam = string

// VisibilityParam defines model for VisibilityParam.
type VisibilityParam = []Visibility

// AccessKeyCreateOK An access key issued to an account, this is the full access key object
// including the secret. This is only exposed upon creation of the key and
// the secret value is never stored. The caller that receives this object
// is responsible for securely storing the secret value for later use.
type AccessKeyCreateOK = AccessKeyIssued

// AccessKeyListOK defines model for AccessKeyListOK.
type AccessKeyListOK = AccessKeyListResult

// AccountAuthProviderListOK defines model for AccountAuthProviderListOK.
type AccountAuthProviderListOK = AccountAuthMethods

// AccountEmailUpdateOK defines model for AccountEmailUpdateOK.
type AccountEmailUpdateOK = AccountEmailAddress

// AccountGetOK defines model for AccountGetOK.
type AccountGetOK = Account

// AccountUpdateOK defines model for AccountUpdateOK.
type AccountUpdateOK = Account

// AdminAccessKeyListOK defines model for AdminAccessKeyListOK.
type AdminAccessKeyListOK = OwnedAccessKeyListResult

// AdminSettingsUpdateOK Storyden installation and administration settings.
type AdminSettingsUpdateOK = AdminSettingsProps

// AssetUploadOK defines model for AssetUploadOK.
type AssetUploadOK = Asset

// AuthProviderListOK defines model for AuthProviderListOK.
type AuthProviderListOK struct {
	Mode      AuthMode         `json:"mode"`
	Providers AuthProviderList `json:"providers"`
}

// AuthSuccessOK defines model for AuthSuccessOK.
type AuthSuccessOK = AuthSuccess

// CategoryCreateOK defines model for CategoryCreateOK.
type CategoryCreateOK = Category

// CategoryDeleteOK defines model for CategoryDeleteOK.
type CategoryDeleteOK = Category

// CategoryGetOK defines model for CategoryGetOK.
type CategoryGetOK = Category

// CategoryListOK defines model for CategoryListOK.
type CategoryListOK = CategoryListResult

// CategoryUpdateOK defines model for CategoryUpdateOK.
type CategoryUpdateOK = Category

// CollectionAddNodeOK The full properties of a collection, for rendering a single collection
// somewhere where you can afford to show all the items in the collection.
type CollectionAddNodeOK = CollectionWithItems

// CollectionAddPostOK The full properties of a collection, for rendering a single collection
// somewhere where you can afford to show all the items in the collection.
type CollectionAddPostOK = CollectionWithItems

// CollectionCreateOK A collection is a group of threads owned by a user. It allows users to
// curate their own lists of content from the site. Collections can only
// contain root level posts (threads) with titles and slugs to link to.
type CollectionCreateOK = Collection

// CollectionGetOK The full properties of a collection, for rendering a single collection
// somewhere where you can afford to show all the items in the collection.
type CollectionGetOK = CollectionWithItems

// CollectionListOK defines model for CollectionListOK.
type CollectionListOK struct {
	Collections CollectionList `json:"collections"`
}

// CollectionRemoveNodeOK The full properties of a collection, for rendering a single collection
// somewhere where you can afford to show all the items in the collection.
type CollectionRemoveNodeOK = CollectionWithItems

// CollectionRemovePostOK The full properties of a collection, for rendering a single collection
// somewhere where you can afford to show all the items in the collection.
type CollectionRemovePostOK = CollectionWithItems

// CollectionUpdateOK A collection is a group of threads owned by a user. It allows users to
// curate their own lists of content from the site. Collections can only
// contain root level posts (threads) with titles and slugs to link to.
type CollectionUpdateOK = Collection

// DatagraphSearchOK defines model for DatagraphSearchOK.
type DatagraphSearchOK = DatagraphSearchResult

// EventCreateOK An event represents any kind of event, such as an online or in-person
// gathering, a conference, a workshop, a webinar, etc. Events will contain
// a start and end timestamp and may have a location and other metadata.
//
// Each event also gets its own thread for discussion and planning. This is
// automatically created for every new event and is linked to the event.
type EventCreateOK = Event

// EventGetOK An event represents any kind of event, such as an online or in-person
// gathering, a conference, a workshop, a webinar, etc. Events will contain
// a start and end timestamp and may have a location and other metadata.
//
// Each event also gets its own thread for discussion and planning. This is
// automatically created for every new event and is linked to the event.
type EventGetOK = Event

// EventListOK defines model for EventListOK.
type EventListOK = EventListResult

// EventUpdateOK An event represents any kind of event, such as an online or in-person
// gathering, a conference, a workshop, a webinar, etc. Events will contain
// a start and end timestamp and may have a location and other metadata.
//
// Each event also gets its own thread for discussion and planning. This is
// automatically created for every new event and is linked to the event.
type EventUpdateOK = Event

// GetInfoOK Basic public information about the Storyden installation.
type GetInfoOK = Info

// InternalServerError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type InternalServerError = APIError

// InvitationCreateOK defines model for InvitationCreateOK.
type InvitationCreateOK = Invitation

// InvitationGetOK defines model for InvitationGetOK.
type InvitationGetOK = Invitation

// InvitationListOK defines model for InvitationListOK.
type InvitationListOK = InvitationListResult

// LikePostGetOK defines model for LikePostGetOK.
type LikePostGetOK struct {
	Likes ItemLikeList `json:"likes"`
}

// LikeProfileGetOK defines model for LikeProfileGetOK.
type LikeProfileGetOK = ProfileLikeListResult

// LinkCreateOK A minimal object used to refer to a link without sending too much data.
type LinkCreateOK = LinkReference

// LinkGetOK A web address with content information such as title, description, etc.
type LinkGetOK = Link

// LinkListOK defines model for LinkListOK.
type LinkListOK = LinkListResult

// NodeAddChildOK A node is a text document with children and assets. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Nodes
// can be referenced in content posts and they also have their own content.
type NodeAddChildOK = Node

// NodeCreateOK A node is a text document with children and assets. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Nodes
// can be referenced in content posts and they also have their own content.
type NodeCreateOK = Node

// NodeDeleteOK defines model for NodeDeleteOK.
type NodeDeleteOK struct {
	// Destination A node is a text document with children and assets. It serves as an
	// abstraction for grouping structured data objects. It can represent
	// things such as brands, manufacturers, authors, directors, etc. Nodes
	// can be referenced in content posts and they also have their own content.
	Destination *Node `json:"destination,omitempty"`
}

// NodeGenerateContentOK The result of a content generation request from an LLM.
type NodeGenerateContentOK = NodeGenerateContentResult

// NodeGenerateTagsOK The result of a tag generation request from an LLM.
type NodeGenerateTagsOK = NodeGenerateTagsResult

// NodeGenerateTitleOK The result of a title generation request from an LLM.
type NodeGenerateTitleOK = NodeGenerateTitleResult

// NodeGetOK The full properties of a node including all child nodes.
type NodeGetOK = NodeWithChildren

// NodeListOK defines model for NodeListOK.
type NodeListOK = NodeListResult

// NodeRemoveChildOK A node is a text document with children and assets. It serves as an
// abstraction for grouping structured data objects. It can represent
// things such as brands, manufacturers, authors, directors, etc. Nodes
// can be referenced in content posts and they also have their own content.
type NodeRemoveChildOK = Node

// NodeUpdateOK The full properties of a node including all child nodes.
type NodeUpdateOK = NodeWithChildren

// NodeUpdatePropertiesOK defines model for NodeUpdatePropertiesOK.
type NodeUpdatePropertiesOK struct {
	Properties PropertyList `json:"properties"`
}

// NodeUpdatePropertySchemaOK defines model for NodeUpdatePropertySchemaOK.
type NodeUpdatePropertySchemaOK struct {
	Properties PropertySchemaList `json:"properties"`
}

// NotificationListOK defines model for NotificationListOK.
type NotificationListOK = NotificationListResult

// NotificationUpdateOK defines model for NotificationUpdateOK.
type NotificationUpdateOK = Notification

// PostReactAddOK defines model for PostReactAddOK.
type PostReactAddOK = React

// PostUpdateOK A post represents a temporal piece of content, it can be a thread, or a
// reply to a thread or something else such as a blog, announcement, etc.
// Post is used in generic use-cases where it may not matter whether you
// want a thread or a reply, such as search results or recommendations.
type PostUpdateOK = Post

// ProfileFollowersGetOK defines model for ProfileFollowersGetOK.
type ProfileFollowersGetOK = PublicProfileFollowersResult

// ProfileFollowingGetOK defines model for ProfileFollowingGetOK.
type ProfileFollowingGetOK = PublicProfileFollowingResult

// ProfileGetOK defines model for ProfileGetOK.
type ProfileGetOK = PublicProfile

// ProfileListOK defines model for ProfileListOK.
type ProfileListOK = PublicProfileListResult

// ReplyCreateOK A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type ReplyCreateOK = Reply

// RoleCreateOK defines model for RoleCreateOK.
type RoleCreateOK = Role

// RoleGetOK defines model for RoleGetOK.
type RoleGetOK = Role

// RoleListOK defines model for RoleListOK.
type RoleListOK = RoleListResult

// TagGetOK A tag is a label that can be applied to posts or pages to organise
// related content. They can be used to filter and search for content.
// The Tag schema provides all the data for a tag including its items, so
// it's quite a heavy object if referencing a lot of items. For a lighter
// weight version, use a TagReference for use-cases such as tag searches.
type TagGetOK = Tag

// TagListOK defines model for TagListOK.
type TagListOK = TagListResult

// ThreadCreateOK defines model for ThreadCreateOK.
type ThreadCreateOK = Thread

// ThreadGet defines model for ThreadGet.
type ThreadGet = Thread

// ThreadListOK defines model for ThreadListOK.
type ThreadListOK = ThreadListResult

// ThreadUpdateOK defines model for ThreadUpdateOK.
type ThreadUpdateOK = Thread

// WebAuthnGetAssertionOK https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension
type WebAuthnGetAssertionOK = CredentialRequestOptions

// WebAuthnRequestCredentialOK https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension
type WebAuthnRequestCredentialOK = WebAuthnPublicKeyCreationOptions

// AccessKeyCreate defines model for AccessKeyCreate.
type AccessKeyCreate = AccessKeyInitialProps

// AccountEmailAdd defines model for AccountEmailAdd.
type AccountEmailAdd = AccountEmailInitialProps

// AccountUpdate defines model for AccountUpdate.
type AccountUpdate = AccountMutableProps

// AdminSettingsUpdate defines model for AdminSettingsUpdate.
type AdminSettingsUpdate = AdminSettingsMutableProps

// AuthEmail defines model for AuthEmail.
type AuthEmail = AuthEmailInitialProps

// AuthEmailPassword defines model for AuthEmailPassword.
type AuthEmailPassword = AuthEmailPasswordInitialProps

// AuthEmailVerify defines model for AuthEmailVerify.
type AuthEmailVerify = AuthEmailVerifyProps

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthPair

// AuthPasswordCreate defines model for AuthPasswordCreate.
type AuthPasswordCreate = AuthPasswordInitialProps

// AuthPasswordReset defines model for AuthPasswordReset.
type AuthPasswordReset = AuthPasswordResetProps

// AuthPasswordUpdate defines model for AuthPasswordUpdate.
type AuthPasswordUpdate = AuthPasswordMutableProps

// CategoryCreate defines model for CategoryCreate.
type CategoryCreate = CategoryInitialProps

// CategoryDelete defines model for CategoryDelete.
type CategoryDelete = CategoryDeleteProps

// CategoryUpdate defines model for CategoryUpdate.
type CategoryUpdate = CategoryMutableProps

// CategoryUpdatePosition Parameters for repositioning a category in the hierarchy. Update the
// parent using `parent`, and/or reposition among siblings using `before`
// or `after`. Using both `before` and `after` is not allowed.
type CategoryUpdatePosition = CategoryPositionMutableProps

// CollectionCreate defines model for CollectionCreate.
type CollectionCreate = CollectionInitialProps

// CollectionUpdate defines model for CollectionUpdate.
type CollectionUpdate = CollectionMutableProps

// EventCreate defines model for EventCreate.
type EventCreate = EventInitialProps

// EventParticipantUpdate defines model for EventParticipantUpdate.
type EventParticipantUpdate = EventParticipantMutableProps

// EventUpdate defines model for EventUpdate.
type EventUpdate = EventMutableProps

// InvitationCreate defines model for InvitationCreate.
type InvitationCreate = InvitationInitialProps

// LinkCreate defines model for LinkCreate.
type LinkCreate = LinkInitialProps

// NodeCreate defines model for NodeCreate.
type NodeCreate = NodeInitialProps

// NodeGenerateContent A request for generated content for a node. A request for generated content
// does not use the existing content on a node but takes the current
// client's content state (from an "edit mode" text box for example) and
// sends that in order to generate potential content using an LLM.
type NodeGenerateContent = NodeGenerateContentRequest

// NodeGenerateTags A request for generated tags for a node. A request for generated tags
// does not use the existing content on a node but takes the current
// client's content state (from an "edit mode" text box for example) and
// sends that in order to generate potential tags using an LLM.
type NodeGenerateTags = NodeGenerateTagsRequest

// NodeGenerateTitle A request for a generated title for a node. A request for a generated
// title does not use the existing content on a node but takes the current
// client's content state (from an "edit mode" text box for example) and
// sends that in order to generate a potential title using an LLM.
type NodeGenerateTitle = NodeGenerateTitleRequest

// NodeUpdate Note: Properties are replace-all and are not merged with existing.
type NodeUpdate = NodeMutableProps

// NodeUpdatePosition Parameters for repositioning a node in the hierarchy. You may change the
// node's parent using `parent`, and/or reposition it among its siblings
// using one of: `before`, `after`, or `index`. Using multiple reordering
// properties is not allowed.
type NodeUpdatePosition = NodePositionMutableProps

// NodeUpdateProperties Note: Properties are replace-all and are not merged with existing.
type NodeUpdateProperties = PropertyMutableProps

// NodeUpdatePropertySchema defines model for NodeUpdatePropertySchema.
type NodeUpdatePropertySchema = []PropertySchemaMutableProps

// NotificationUpdate defines model for NotificationUpdate.
type NotificationUpdate = NotificationMutableProps

// OAuthProviderCallback defines model for OAuthProviderCallback.
type OAuthProviderCallback = OAuthCallback

// PhoneRequestCode The phone number request payload.
type PhoneRequestCode = PhoneRequestCodeProps

// PhoneSubmitCode The Phone submit code payload.
type PhoneSubmitCode = PhoneSubmitCodeProps

// PostReactAdd Reactions are currently just simple emoji characters.
type PostReactAdd = ReactInitialProps

// PostUpdate defines model for PostUpdate.
type PostUpdate = PostMutableProps

// ReplyCreate defines model for ReplyCreate.
type ReplyCreate = ReplyInitialProps

// RoleCreate defines model for RoleCreate.
type RoleCreate = RoleInitialProps

// RoleUpdate defines model for RoleUpdate.
type RoleUpdate = RoleMutableProps

// ThreadCreate defines model for ThreadCreate.
type ThreadCreate = ThreadInitialProps

// ThreadUpdate defines model for ThreadUpdate.
type ThreadUpdate = ThreadMutableProps

// VisibilityUpdate defines model for VisibilityUpdate.
type VisibilityUpdate = VisibilityMutationProps

// WebAuthnMakeAssertion https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type WebAuthnMakeAssertion = PublicKeyCredential

// WebAuthnMakeCredential https://www.w3.org/TR/webauthn-2/#iface-pkcredential
type WebAuthnMakeCredential = PublicKeyCredential

// AccountSetAvatarParams defines parameters for AccountSetAvatar.
type AccountSetAvatarParams struct {
	// ContentLength Body content length in bytes.
	ContentLength ContentLength `json:"Content-Length"`
}

// AssetUploadParams defines parameters for AssetUpload.
type AssetUploadParams struct {
	// Filename The client-provided file name for the asset.
	Filename *AssetNameQuery `form:"filename,omitempty" json:"filename,omitempty"`

	// ParentAssetId For uploading new versions of an existing asset, set this parameter to
	// the asset ID of the parent asset. This must be an ID and not a filename.
	// This feature is used for situations where you want to replace an asset
	// in its usage context, but retain the original with a way to reference it
	// for features such as editable/croppable images or file version history.
	ParentAssetId *ParentAssetIDQuery `form:"parent_asset_id,omitempty" json:"parent_asset_id,omitempty"`

	// ContentLength Body content length in bytes.
	ContentLength ContentLength `json:"Content-Length"`
}

// AuthEmailPasswordSignupParams defines parameters for AuthEmailPasswordSignup.
type AuthEmailPasswordSignupParams struct {
	// InvitationId Unique invitation ID.
	InvitationId *InvitationIDQueryParam `form:"invitation_id,omitempty" json:"invitation_id,omitempty"`
}

// AuthEmailSignupParams defines parameters for AuthEmailSignup.
type AuthEmailSignupParams struct {
	// InvitationId Unique invitation ID.
	InvitationId *InvitationIDQueryParam `form:"invitation_id,omitempty" json:"invitation_id,omitempty"`
}

// AuthPasswordSignupParams defines parameters for AuthPasswordSignup.
type AuthPasswordSignupParams struct {
	// InvitationId Unique invitation ID.
	InvitationId *InvitationIDQueryParam `form:"invitation_id,omitempty" json:"invitation_id,omitempty"`
}

// PhoneRequestCodeParams defines parameters for PhoneRequestCode.
type PhoneRequestCodeParams struct {
	// InvitationId Unique invitation ID.
	InvitationId *InvitationIDQueryParam `form:"invitation_id,omitempty" json:"invitation_id,omitempty"`
}

// WebAuthnMakeCredentialParams defines parameters for WebAuthnMakeCredential.
type WebAuthnMakeCredentialParams struct {
	// InvitationId Unique invitation ID.
	InvitationId *InvitationIDQueryParam `form:"invitation_id,omitempty" json:"invitation_id,omitempty"`
}

// CollectionListParams defines parameters for CollectionList.
type CollectionListParams struct {
	// AccountHandle Account handle.
	AccountHandle *AccountHandleQueryParam `form:"account_handle,omitempty" json:"account_handle,omitempty"`

	// HasItem When specified, will include a field in the response indicating whether
	// or not the specified item is present in the collection. This saves you
	// needing to make two queries to check if an item is in a collection.
	HasItem *CollectionHasItemQueryParam `form:"has_item,omitempty" json:"has_item,omitempty"`
}

// DatagraphSearchParams defines parameters for DatagraphSearch.
type DatagraphSearchParams struct {
	// Q Search query string.
	Q RequiredSearchQuery `form:"q" json:"q"`

	// Kind Datagraph item kind query.
	Kind *DatagraphKindQuery `form:"kind,omitempty" json:"kind,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// DatagraphAskParams defines parameters for DatagraphAsk.
type DatagraphAskParams struct {
	// Q Search query string.
	Q RequiredSearchQuery `form:"q" json:"q"`

	// ParentQuestionId If a follow-up question, the parent question ID.
	ParentQuestionId *ParentQuestionID `form:"parent_question_id,omitempty" json:"parent_question_id,omitempty"`
}

// EventListParams defines parameters for EventList.
type EventListParams struct {
	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// IconGetParamsIconSize defines parameters for IconGet.
type IconGetParamsIconSize string

// InvitationListParams defines parameters for InvitationList.
type InvitationListParams struct {
	// AccountId Account ID.
	AccountId *AccountIDQueryParam `form:"account_id,omitempty" json:"account_id,omitempty"`
}

// LikeProfileGetParams defines parameters for LikeProfileGet.
type LikeProfileGetParams struct {
	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// LinkListParams defines parameters for LinkList.
type LinkListParams struct {
	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// NodeListParams defines parameters for NodeList.
type NodeListParams struct {
	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`

	// NodeId List this node and all child nodes.
	NodeId *Identifier `form:"node_id,omitempty" json:"node_id,omitempty"`

	// Author Show only results owned by this account.
	Author *AccountHandle `form:"author,omitempty" json:"author,omitempty"`

	// Visibility Filter content with specific visibility values. Note that by default,
	// only published items are returned. When 'draft' is specified, only
	// drafts owned by the requesting account are included. When 'review' is
	// specified, the request will fail if the requesting account does not have
	// the necessary permission to view in-review items.
	Visibility *VisibilityParam `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Depth When set to a positive value, the nodes in the response will include all
	// child nodes up to the specified depth. When set to zero, then if the
	// request includes a node ID only that node will be returned, otherwise
	// only top-level (root) nodes will be returned.
	Depth *TreeDepthParam `form:"depth,omitempty" json:"depth,omitempty"`

	// Format List format, either a tree where each item contains a children array or
	// flat where children items contain an ID that references their parent.
	Format *NodeListParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// NodeListParamsFormat defines parameters for NodeList.
type NodeListParamsFormat string

// NodeDeleteParams defines parameters for NodeDelete.
type NodeDeleteParams struct {
	// TargetNode If set, child nodes will be moved to the target node. If not set, child
	// nodes will be moved to the root.
	TargetNode *TargetNodeSlugQuery `form:"target_node,omitempty" json:"target_node,omitempty"`
}

// NodeGetParams defines parameters for NodeGet.
type NodeGetParams struct {
	// ChildrenSort The field (either in schema or in property schema) to sort by.
	ChildrenSort *NodeChildrenSortParam `form:"children_sort,omitempty" json:"children_sort,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// NodeListChildrenParams defines parameters for NodeListChildren.
type NodeListChildrenParams struct {
	// ChildrenSort The field (either in schema or in property schema) to sort by.
	ChildrenSort *NodeChildrenSortParam `form:"children_sort,omitempty" json:"children_sort,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`

	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`

	// Tags Tags to filter by.
	Tags *TagNameListQueryParam `form:"tags,omitempty" json:"tags,omitempty"`
}

// NodeUpdateChildrenPropertySchemaJSONBody defines parameters for NodeUpdateChildrenPropertySchema.
type NodeUpdateChildrenPropertySchemaJSONBody = []PropertySchemaMutableProps

// NodeUpdatePropertySchemaJSONBody defines parameters for NodeUpdatePropertySchema.
type NodeUpdatePropertySchemaJSONBody = []PropertySchemaMutableProps

// NotificationListParams defines parameters for NotificationList.
type NotificationListParams struct {
	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`

	// Status Notification status.
	Status *NotificationStatusQuery `form:"status,omitempty" json:"status,omitempty"`
}

// ProfileListParams defines parameters for ProfileList.
type ProfileListParams struct {
	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// ProfileFollowersGetParams defines parameters for ProfileFollowersGet.
type ProfileFollowersGetParams struct {
	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// ProfileFollowingGetParams defines parameters for ProfileFollowingGet.
type ProfileFollowingGetParams struct {
	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// TagListParams defines parameters for TagList.
type TagListParams struct {
	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`
}

// ThreadListParams defines parameters for ThreadList.
type ThreadListParams struct {
	// Q Search query string.
	Q *SearchQuery `form:"q,omitempty" json:"q,omitempty"`

	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`

	// Author Show only results creeated by this user.
	Author *AccountHandle `form:"author,omitempty" json:"author,omitempty"`

	// Visibility Filter content with specific visibility values. Note that by default,
	// only published items are returned. When 'draft' is specified, only
	// drafts owned by the requesting account are included. When 'review' is
	// specified, the request will fail if the requesting account does not have
	// the necessary permission to view in-review items.
	Visibility *VisibilityParam `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Tags Show only results with these tags
	Tags *TagListIDs `form:"tags,omitempty" json:"tags,omitempty"`

	// Categories Category slugs to filter by. Multiple instances of this parameter can be
	// used to filter by many categories. If not provided, no filtering will be
	// applied and all threads will be returned. If ANY of the provided values
	// is set to the exact value of "null" then only uncategorised threads will
	// be returned. When filtering for uncategorised threads, all other values
	// will be ignored, only the value containing "null" will be considered.
	Categories *CategorySlugListQuery `form:"categories,omitempty" json:"categories,omitempty"`
}

// ThreadGetParams defines parameters for ThreadGet.
type ThreadGetParams struct {
	// Page Pagination query parameters.
	Page *PaginationQuery `form:"page,omitempty" json:"page,omitempty"`
}

// AccountUpdateJSONRequestBody defines body for AccountUpdate for application/json ContentType.
type AccountUpdateJSONRequestBody = AccountMutableProps

// AccountEmailAddJSONRequestBody defines body for AccountEmailAdd for application/json ContentType.
type AccountEmailAddJSONRequestBody = AccountEmailInitialProps

// AdminSettingsUpdateJSONRequestBody defines body for AdminSettingsUpdate for application/json ContentType.
type AdminSettingsUpdateJSONRequestBody = AdminSettingsMutableProps

// AccessKeyCreateJSONRequestBody defines body for AccessKeyCreate for application/json ContentType.
type AccessKeyCreateJSONRequestBody = AccessKeyInitialProps

// AuthPasswordResetRequestEmailJSONRequestBody defines body for AuthPasswordResetRequestEmail for application/json ContentType.
type AuthPasswordResetRequestEmailJSONRequestBody = AuthEmailPasswordReset

// AuthEmailPasswordSigninJSONRequestBody defines body for AuthEmailPasswordSignin for application/json ContentType.
type AuthEmailPasswordSigninJSONRequestBody = AuthEmailPasswordInitialProps

// AuthEmailPasswordSignupJSONRequestBody defines body for AuthEmailPasswordSignup for application/json ContentType.
type AuthEmailPasswordSignupJSONRequestBody = AuthEmailPasswordInitialProps

// AuthEmailSigninJSONRequestBody defines body for AuthEmailSignin for application/json ContentType.
type AuthEmailSigninJSONRequestBody = AuthEmailInitialProps

// AuthEmailSignupJSONRequestBody defines body for AuthEmailSignup for application/json ContentType.
type AuthEmailSignupJSONRequestBody = AuthEmailInitialProps

// AuthEmailVerifyJSONRequestBody defines body for AuthEmailVerify for application/json ContentType.
type AuthEmailVerifyJSONRequestBody = AuthEmailVerifyProps

// OAuthProviderCallbackJSONRequestBody defines body for OAuthProviderCallback for application/json ContentType.
type OAuthProviderCallbackJSONRequestBody = OAuthCallback

// AuthPasswordUpdateJSONRequestBody defines body for AuthPasswordUpdate for application/json ContentType.
type AuthPasswordUpdateJSONRequestBody = AuthPasswordMutableProps

// AuthPasswordCreateJSONRequestBody defines body for AuthPasswordCreate for application/json ContentType.
type AuthPasswordCreateJSONRequestBody = AuthPasswordInitialProps

// AuthPasswordResetJSONRequestBody defines body for AuthPasswordReset for application/json ContentType.
type AuthPasswordResetJSONRequestBody = AuthPasswordResetProps

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthPair

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthPair

// PhoneRequestCodeJSONRequestBody defines body for PhoneRequestCode for application/json ContentType.
type PhoneRequestCodeJSONRequestBody = PhoneRequestCodeProps

// PhoneSubmitCodeJSONRequestBody defines body for PhoneSubmitCode for application/json ContentType.
type PhoneSubmitCodeJSONRequestBody = PhoneSubmitCodeProps

// WebAuthnMakeAssertionJSONRequestBody defines body for WebAuthnMakeAssertion for application/json ContentType.
type WebAuthnMakeAssertionJSONRequestBody = PublicKeyCredential

// WebAuthnMakeCredentialJSONRequestBody defines body for WebAuthnMakeCredential for application/json ContentType.
type WebAuthnMakeCredentialJSONRequestBody = PublicKeyCredential

// CategoryCreateJSONRequestBody defines body for CategoryCreate for application/json ContentType.
type CategoryCreateJSONRequestBody = CategoryInitialProps

// CategoryDeleteJSONRequestBody defines body for CategoryDelete for application/json ContentType.
type CategoryDeleteJSONRequestBody = CategoryDeleteProps

// CategoryUpdateJSONRequestBody defines body for CategoryUpdate for application/json ContentType.
type CategoryUpdateJSONRequestBody = CategoryMutableProps

// CategoryUpdatePositionJSONRequestBody defines body for CategoryUpdatePosition for application/json ContentType.
type CategoryUpdatePositionJSONRequestBody = CategoryPositionMutableProps

// CollectionCreateJSONRequestBody defines body for CollectionCreate for application/json ContentType.
type CollectionCreateJSONRequestBody = CollectionInitialProps

// CollectionUpdateJSONRequestBody defines body for CollectionUpdate for application/json ContentType.
type CollectionUpdateJSONRequestBody = CollectionMutableProps

// EventCreateJSONRequestBody defines body for EventCreate for application/json ContentType.
type EventCreateJSONRequestBody = EventInitialProps

// EventUpdateJSONRequestBody defines body for EventUpdate for application/json ContentType.
type EventUpdateJSONRequestBody = EventMutableProps

// EventParticipantUpdateJSONRequestBody defines body for EventParticipantUpdate for application/json ContentType.
type EventParticipantUpdateJSONRequestBody = EventParticipantMutableProps

// InvitationCreateJSONRequestBody defines body for InvitationCreate for application/json ContentType.
type InvitationCreateJSONRequestBody = InvitationInitialProps

// LinkCreateJSONRequestBody defines body for LinkCreate for application/json ContentType.
type LinkCreateJSONRequestBody = LinkInitialProps

// NodeCreateJSONRequestBody defines body for NodeCreate for application/json ContentType.
type NodeCreateJSONRequestBody = NodeInitialProps

// NodeUpdateJSONRequestBody defines body for NodeUpdate for application/json ContentType.
type NodeUpdateJSONRequestBody = NodeMutableProps

// NodeUpdateChildrenPropertySchemaJSONRequestBody defines body for NodeUpdateChildrenPropertySchema for application/json ContentType.
type NodeUpdateChildrenPropertySchemaJSONRequestBody = NodeUpdateChildrenPropertySchemaJSONBody

// NodeGenerateContentJSONRequestBody defines body for NodeGenerateContent for application/json ContentType.
type NodeGenerateContentJSONRequestBody = NodeGenerateContentRequest

// NodeUpdatePositionJSONRequestBody defines body for NodeUpdatePosition for application/json ContentType.
type NodeUpdatePositionJSONRequestBody = NodePositionMutableProps

// NodeUpdatePropertiesJSONRequestBody defines body for NodeUpdateProperties for application/json ContentType.
type NodeUpdatePropertiesJSONRequestBody = PropertyMutableProps

// NodeUpdatePropertySchemaJSONRequestBody defines body for NodeUpdatePropertySchema for application/json ContentType.
type NodeUpdatePropertySchemaJSONRequestBody = NodeUpdatePropertySchemaJSONBody

// NodeGenerateTagsJSONRequestBody defines body for NodeGenerateTags for application/json ContentType.
type NodeGenerateTagsJSONRequestBody = NodeGenerateTagsRequest

// NodeGenerateTitleJSONRequestBody defines body for NodeGenerateTitle for application/json ContentType.
type NodeGenerateTitleJSONRequestBody = NodeGenerateTitleRequest

// NodeUpdateVisibilityJSONRequestBody defines body for NodeUpdateVisibility for application/json ContentType.
type NodeUpdateVisibilityJSONRequestBody = VisibilityMutationProps

// NotificationUpdateJSONRequestBody defines body for NotificationUpdate for application/json ContentType.
type NotificationUpdateJSONRequestBody = NotificationMutableProps

// PostUpdateJSONRequestBody defines body for PostUpdate for application/json ContentType.
type PostUpdateJSONRequestBody = PostMutableProps

// PostReactAddJSONRequestBody defines body for PostReactAdd for application/json ContentType.
type PostReactAddJSONRequestBody = ReactInitialProps

// RoleCreateJSONRequestBody defines body for RoleCreate for application/json ContentType.
type RoleCreateJSONRequestBody = RoleInitialProps

// RoleUpdateJSONRequestBody defines body for RoleUpdate for application/json ContentType.
type RoleUpdateJSONRequestBody = RoleMutableProps

// ThreadCreateJSONRequestBody defines body for ThreadCreate for application/json ContentType.
type ThreadCreateJSONRequestBody = ThreadInitialProps

// ThreadUpdateJSONRequestBody defines body for ThreadUpdate for application/json ContentType.
type ThreadUpdateJSONRequestBody = ThreadMutableProps

// ReplyCreateJSONRequestBody defines body for ReplyCreate for application/json ContentType.
type ReplyCreateJSONRequestBody = ReplyInitialProps

// AsDatagraphItemPost returns the union data inside the DatagraphItem as a DatagraphItemPost
func (t DatagraphItem) AsDatagraphItemPost() (DatagraphItemPost, error) {
	var body DatagraphItemPost
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatagraphItemPost overwrites any union data inside the DatagraphItem as the provided DatagraphItemPost
func (t *DatagraphItem) FromDatagraphItemPost(v DatagraphItemPost) error {
	v.Kind = "post"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatagraphItemPost performs a merge with any union data inside the DatagraphItem, using the provided DatagraphItemPost
func (t *DatagraphItem) MergeDatagraphItemPost(v DatagraphItemPost) error {
	v.Kind = "post"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatagraphItemThread returns the union data inside the DatagraphItem as a DatagraphItemThread
func (t DatagraphItem) AsDatagraphItemThread() (DatagraphItemThread, error) {
	var body DatagraphItemThread
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatagraphItemThread overwrites any union data inside the DatagraphItem as the provided DatagraphItemThread
func (t *DatagraphItem) FromDatagraphItemThread(v DatagraphItemThread) error {
	v.Kind = "thread"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatagraphItemThread performs a merge with any union data inside the DatagraphItem, using the provided DatagraphItemThread
func (t *DatagraphItem) MergeDatagraphItemThread(v DatagraphItemThread) error {
	v.Kind = "thread"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatagraphItemReply returns the union data inside the DatagraphItem as a DatagraphItemReply
func (t DatagraphItem) AsDatagraphItemReply() (DatagraphItemReply, error) {
	var body DatagraphItemReply
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatagraphItemReply overwrites any union data inside the DatagraphItem as the provided DatagraphItemReply
func (t *DatagraphItem) FromDatagraphItemReply(v DatagraphItemReply) error {
	v.Kind = "reply"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatagraphItemReply performs a merge with any union data inside the DatagraphItem, using the provided DatagraphItemReply
func (t *DatagraphItem) MergeDatagraphItemReply(v DatagraphItemReply) error {
	v.Kind = "reply"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatagraphItemNode returns the union data inside the DatagraphItem as a DatagraphItemNode
func (t DatagraphItem) AsDatagraphItemNode() (DatagraphItemNode, error) {
	var body DatagraphItemNode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatagraphItemNode overwrites any union data inside the DatagraphItem as the provided DatagraphItemNode
func (t *DatagraphItem) FromDatagraphItemNode(v DatagraphItemNode) error {
	v.Kind = "node"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatagraphItemNode performs a merge with any union data inside the DatagraphItem, using the provided DatagraphItemNode
func (t *DatagraphItem) MergeDatagraphItemNode(v DatagraphItemNode) error {
	v.Kind = "node"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatagraphItemProfile returns the union data inside the DatagraphItem as a DatagraphItemProfile
func (t DatagraphItem) AsDatagraphItemProfile() (DatagraphItemProfile, error) {
	var body DatagraphItemProfile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatagraphItemProfile overwrites any union data inside the DatagraphItem as the provided DatagraphItemProfile
func (t *DatagraphItem) FromDatagraphItemProfile(v DatagraphItemProfile) error {
	v.Kind = "profile"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatagraphItemProfile performs a merge with any union data inside the DatagraphItem, using the provided DatagraphItemProfile
func (t *DatagraphItem) MergeDatagraphItemProfile(v DatagraphItemProfile) error {
	v.Kind = "profile"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatagraphItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"kind"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DatagraphItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "node":
		return t.AsDatagraphItemNode()
	case "post":
		return t.AsDatagraphItemPost()
	case "profile":
		return t.AsDatagraphItemProfile()
	case "reply":
		return t.AsDatagraphItemReply()
	case "thread":
		return t.AsDatagraphItemThread()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DatagraphItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatagraphItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEventLocationPhysical returns the union data inside the EventLocation as a EventLocationPhysical
func (t EventLocation) AsEventLocationPhysical() (EventLocationPhysical, error) {
	var body EventLocationPhysical
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventLocationPhysical overwrites any union data inside the EventLocation as the provided EventLocationPhysical
func (t *EventLocation) FromEventLocationPhysical(v EventLocationPhysical) error {
	v.LocationType = "physical"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventLocationPhysical performs a merge with any union data inside the EventLocation, using the provided EventLocationPhysical
func (t *EventLocation) MergeEventLocationPhysical(v EventLocationPhysical) error {
	v.LocationType = "physical"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventLocationVirtual returns the union data inside the EventLocation as a EventLocationVirtual
func (t EventLocation) AsEventLocationVirtual() (EventLocationVirtual, error) {
	var body EventLocationVirtual
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventLocationVirtual overwrites any union data inside the EventLocation as the provided EventLocationVirtual
func (t *EventLocation) FromEventLocationVirtual(v EventLocationVirtual) error {
	v.LocationType = "virtual"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventLocationVirtual performs a merge with any union data inside the EventLocation, using the provided EventLocationVirtual
func (t *EventLocation) MergeEventLocationVirtual(v EventLocationVirtual) error {
	v.LocationType = "virtual"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EventLocation) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"location_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t EventLocation) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "physical":
		return t.AsEventLocationPhysical()
	case "virtual":
		return t.AsEventLocationVirtual()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t EventLocation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EventLocation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccountGet request
	AccountGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountUpdateWithBody request with any body
	AccountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountUpdate(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountAuthProviderList request
	AccountAuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountAuthMethodDelete request
	AccountAuthMethodDelete(ctx context.Context, authMethodId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountSetAvatarWithBody request with any body
	AccountSetAvatarWithBody(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountEmailAddWithBody request with any body
	AccountEmailAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountEmailAdd(ctx context.Context, body AccountEmailAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountEmailRemove request
	AccountEmailRemove(ctx context.Context, emailAddressId EmailAddressIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountGetAvatar request
	AccountGetAvatar(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountRemoveRole request
	AccountRemoveRole(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountAddRole request
	AccountAddRole(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountRoleRemoveBadge request
	AccountRoleRemoveBadge(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountRoleSetBadge request
	AccountRoleSetBadge(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountView request
	AccountView(ctx context.Context, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminSettingsUpdateWithBody request with any body
	AdminSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminSettingsUpdate(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAccessKeyList request
	AdminAccessKeyList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAccessKeyDelete request
	AdminAccessKeyDelete(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAccountBanRemove request
	AdminAccountBanRemove(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAccountBanCreate request
	AdminAccountBanCreate(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssetUploadWithBody request with any body
	AssetUploadWithBody(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssetGet request
	AssetGet(ctx context.Context, assetFilename AssetPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthProviderList request
	AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessKeyList request
	AccessKeyList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessKeyCreateWithBody request with any body
	AccessKeyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessKeyCreate(ctx context.Context, body AccessKeyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessKeyDelete request
	AccessKeyDelete(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordResetRequestEmailWithBody request with any body
	AuthPasswordResetRequestEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordResetRequestEmail(ctx context.Context, body AuthPasswordResetRequestEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthEmailPasswordSigninWithBody request with any body
	AuthEmailPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthEmailPasswordSignin(ctx context.Context, body AuthEmailPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthEmailPasswordSignupWithBody request with any body
	AuthEmailPasswordSignupWithBody(ctx context.Context, params *AuthEmailPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthEmailPasswordSignup(ctx context.Context, params *AuthEmailPasswordSignupParams, body AuthEmailPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthEmailSigninWithBody request with any body
	AuthEmailSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthEmailSignin(ctx context.Context, body AuthEmailSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthEmailSignupWithBody request with any body
	AuthEmailSignupWithBody(ctx context.Context, params *AuthEmailSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthEmailSignup(ctx context.Context, params *AuthEmailSignupParams, body AuthEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthEmailVerifyWithBody request with any body
	AuthEmailVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthEmailVerify(ctx context.Context, body AuthEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthProviderLogout request
	AuthProviderLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OAuthProviderCallbackWithBody request with any body
	OAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordUpdateWithBody request with any body
	AuthPasswordUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordUpdate(ctx context.Context, body AuthPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordCreateWithBody request with any body
	AuthPasswordCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordCreate(ctx context.Context, body AuthPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordResetWithBody request with any body
	AuthPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordReset(ctx context.Context, body AuthPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSigninWithBody request with any body
	AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordSignupWithBody request with any body
	AuthPasswordSignupWithBody(ctx context.Context, params *AuthPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordSignup(ctx context.Context, params *AuthPasswordSignupParams, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PhoneRequestCodeWithBody request with any body
	PhoneRequestCodeWithBody(ctx context.Context, params *PhoneRequestCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PhoneRequestCode(ctx context.Context, params *PhoneRequestCodeParams, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PhoneSubmitCodeWithBody request with any body
	PhoneSubmitCodeWithBody(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PhoneSubmitCode(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeAssertionWithBody request with any body
	WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnGetAssertion request
	WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnMakeCredentialWithBody request with any body
	WebAuthnMakeCredentialWithBody(ctx context.Context, params *WebAuthnMakeCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebAuthnMakeCredential(ctx context.Context, params *WebAuthnMakeCredentialParams, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebAuthnRequestCredential request
	WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryList request
	CategoryList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryCreateWithBody request with any body
	CategoryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoryCreate(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryDeleteWithBody request with any body
	CategoryDeleteWithBody(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoryDelete(ctx context.Context, categorySlug CategorySlugParam, body CategoryDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryGet request
	CategoryGet(ctx context.Context, categorySlug CategorySlugParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryUpdateWithBody request with any body
	CategoryUpdateWithBody(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoryUpdate(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoryUpdatePositionWithBody request with any body
	CategoryUpdatePositionWithBody(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoryUpdatePosition(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionList request
	CollectionList(ctx context.Context, params *CollectionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionCreateWithBody request with any body
	CollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionCreate(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionDelete request
	CollectionDelete(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionGet request
	CollectionGet(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionUpdateWithBody request with any body
	CollectionUpdateWithBody(ctx context.Context, collectionMark CollectionMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionUpdate(ctx context.Context, collectionMark CollectionMarkParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionRemoveNode request
	CollectionRemoveNode(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionAddNode request
	CollectionAddNode(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionRemovePost request
	CollectionRemovePost(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionAddPost request
	CollectionAddPost(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatagraphSearch request
	DatagraphSearch(ctx context.Context, params *DatagraphSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatagraphAsk request
	DatagraphAsk(ctx context.Context, params *DatagraphAskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocs request
	GetDocs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventList request
	EventList(ctx context.Context, params *EventListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventCreateWithBody request with any body
	EventCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventCreate(ctx context.Context, body EventCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventDelete request
	EventDelete(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventGet request
	EventGet(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventUpdateWithBody request with any body
	EventUpdateWithBody(ctx context.Context, eventMark EventMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventUpdate(ctx context.Context, eventMark EventMarkParam, body EventUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventParticipantRemove request
	EventParticipantRemove(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventParticipantUpdateWithBody request with any body
	EventParticipantUpdateWithBody(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventParticipantUpdate(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, body EventParticipantUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInfo request
	GetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BannerGet request
	BannerGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BannerUploadWithBody request with any body
	BannerUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IconUploadWithBody request with any body
	IconUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IconGet request
	IconGet(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvitationList request
	InvitationList(ctx context.Context, params *InvitationListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvitationCreateWithBody request with any body
	InvitationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InvitationCreate(ctx context.Context, body InvitationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvitationDelete request
	InvitationDelete(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvitationGet request
	InvitationGet(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LikePostRemove request
	LikePostRemove(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LikePostGet request
	LikePostGet(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LikePostAdd request
	LikePostAdd(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LikeProfileGet request
	LikeProfileGet(ctx context.Context, accountHandle AccountHandleParam, params *LikeProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LinkList request
	LinkList(ctx context.Context, params *LinkListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LinkCreateWithBody request with any body
	LinkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LinkCreate(ctx context.Context, body LinkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LinkGet request
	LinkGet(ctx context.Context, linkSlug LinkSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeList request
	NodeList(ctx context.Context, params *NodeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeCreateWithBody request with any body
	NodeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeCreate(ctx context.Context, body NodeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeDelete request
	NodeDelete(ctx context.Context, nodeSlug NodeSlugParam, params *NodeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeGet request
	NodeGet(ctx context.Context, nodeSlug NodeSlugParam, params *NodeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeUpdateWithBody request with any body
	NodeUpdateWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeUpdate(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeRemoveAsset request
	NodeRemoveAsset(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeAddAsset request
	NodeAddAsset(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeListChildren request
	NodeListChildren(ctx context.Context, nodeSlug NodeSlugParam, params *NodeListChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeUpdateChildrenPropertySchemaWithBody request with any body
	NodeUpdateChildrenPropertySchemaWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeUpdateChildrenPropertySchema(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateChildrenPropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeGenerateContentWithBody request with any body
	NodeGenerateContentWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeGenerateContent(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeRemoveNode request
	NodeRemoveNode(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeAddNode request
	NodeAddNode(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeUpdatePositionWithBody request with any body
	NodeUpdatePositionWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeUpdatePosition(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeUpdatePropertiesWithBody request with any body
	NodeUpdatePropertiesWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeUpdateProperties(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeUpdatePropertySchemaWithBody request with any body
	NodeUpdatePropertySchemaWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeUpdatePropertySchema(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeGenerateTagsWithBody request with any body
	NodeGenerateTagsWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeGenerateTags(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeGenerateTitleWithBody request with any body
	NodeGenerateTitleWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeGenerateTitle(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeUpdateVisibilityWithBody request with any body
	NodeUpdateVisibilityWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeUpdateVisibility(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationList request
	NotificationList(ctx context.Context, params *NotificationListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationUpdateWithBody request with any body
	NotificationUpdateWithBody(ctx context.Context, notificationId NotificationIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationUpdate(ctx context.Context, notificationId NotificationIDParam, body NotificationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpec request
	GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDelete request
	PostDelete(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateWithBody request with any body
	PostUpdateWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdate(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReactAddWithBody request with any body
	PostReactAddWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReactAdd(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReactRemove request
	PostReactRemove(ctx context.Context, postId PostIDParam, reactId ReactIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileList request
	ProfileList(ctx context.Context, params *ProfileListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGet request
	ProfileGet(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileFollowersRemove request
	ProfileFollowersRemove(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileFollowersGet request
	ProfileFollowersGet(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileFollowersAdd request
	ProfileFollowersAdd(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileFollowingGet request
	ProfileFollowingGet(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowingGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoleList request
	RoleList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoleCreateWithBody request with any body
	RoleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RoleCreate(ctx context.Context, body RoleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoleDelete request
	RoleDelete(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoleGet request
	RoleGet(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoleUpdateWithBody request with any body
	RoleUpdateWithBody(ctx context.Context, roleId RoleIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RoleUpdate(ctx context.Context, roleId RoleIDParam, body RoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagList request
	TagList(ctx context.Context, params *TagListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagGet request
	TagGet(ctx context.Context, tagName TagNameParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadList request
	ThreadList(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadCreateWithBody request with any body
	ThreadCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadCreate(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadDelete request
	ThreadDelete(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadGet request
	ThreadGet(ctx context.Context, threadMark ThreadMarkParam, params *ThreadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreadUpdateWithBody request with any body
	ThreadUpdateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreadUpdate(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplyCreateWithBody request with any body
	ReplyCreateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplyCreate(ctx context.Context, threadMark ThreadMarkParam, body ReplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccountGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountUpdate(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountAuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountAuthProviderListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountAuthMethodDelete(ctx context.Context, authMethodId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountAuthMethodDeleteRequest(c.Server, authMethodId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountSetAvatarWithBody(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountSetAvatarRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountEmailAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountEmailAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountEmailAdd(ctx context.Context, body AccountEmailAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountEmailAddRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountEmailRemove(ctx context.Context, emailAddressId EmailAddressIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountEmailRemoveRequest(c.Server, emailAddressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountGetAvatar(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountGetAvatarRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountRemoveRole(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountRemoveRoleRequest(c.Server, accountHandle, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountAddRole(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountAddRoleRequest(c.Server, accountHandle, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountRoleRemoveBadge(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountRoleRemoveBadgeRequest(c.Server, accountHandle, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountRoleSetBadge(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountRoleSetBadgeRequest(c.Server, accountHandle, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountView(ctx context.Context, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountViewRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminSettingsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminSettingsUpdate(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminSettingsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAccessKeyList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAccessKeyListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAccessKeyDelete(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAccessKeyDeleteRequest(c.Server, accessKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAccountBanRemove(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAccountBanRemoveRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAccountBanCreate(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAccountBanCreateRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssetUploadWithBody(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssetUploadRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssetGet(ctx context.Context, assetFilename AssetPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssetGetRequest(c.Server, assetFilename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthProviderList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthProviderListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessKeyList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessKeyListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessKeyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessKeyCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessKeyCreate(ctx context.Context, body AccessKeyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessKeyCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessKeyDelete(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessKeyDeleteRequest(c.Server, accessKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordResetRequestEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetRequestEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordResetRequestEmail(ctx context.Context, body AuthPasswordResetRequestEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetRequestEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailPasswordSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailPasswordSignin(ctx context.Context, body AuthEmailPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailPasswordSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailPasswordSignupWithBody(ctx context.Context, params *AuthEmailPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailPasswordSignupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailPasswordSignup(ctx context.Context, params *AuthEmailPasswordSignupParams, body AuthEmailPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailPasswordSignupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailSignin(ctx context.Context, body AuthEmailSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailSignupWithBody(ctx context.Context, params *AuthEmailSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailSignupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailSignup(ctx context.Context, params *AuthEmailSignupParams, body AuthEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailSignupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthEmailVerify(ctx context.Context, body AuthEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthEmailVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthProviderLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthProviderLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OAuthProviderCallbackWithBody(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOAuthProviderCallbackRequestWithBody(c.Server, oauthProvider, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OAuthProviderCallback(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOAuthProviderCallbackRequest(c.Server, oauthProvider, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordUpdate(ctx context.Context, body AuthPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordCreate(ctx context.Context, body AuthPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordReset(ctx context.Context, body AuthPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignin(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignupWithBody(ctx context.Context, params *AuthPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordSignup(ctx context.Context, params *AuthPasswordSignupParams, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordSignupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneRequestCodeWithBody(ctx context.Context, params *PhoneRequestCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneRequestCodeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneRequestCode(ctx context.Context, params *PhoneRequestCodeParams, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneRequestCodeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneSubmitCodeWithBody(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneSubmitCodeRequestWithBody(c.Server, accountHandle, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PhoneSubmitCode(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPhoneSubmitCodeRequest(c.Server, accountHandle, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeAssertion(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeAssertionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnGetAssertion(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnGetAssertionRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredentialWithBody(ctx context.Context, params *WebAuthnMakeCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnMakeCredential(ctx context.Context, params *WebAuthnMakeCredentialParams, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnMakeCredentialRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebAuthnRequestCredential(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebAuthnRequestCredentialRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryCreate(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryDeleteWithBody(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryDeleteRequestWithBody(c.Server, categorySlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryDelete(ctx context.Context, categorySlug CategorySlugParam, body CategoryDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryDeleteRequest(c.Server, categorySlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryGet(ctx context.Context, categorySlug CategorySlugParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryGetRequest(c.Server, categorySlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdateWithBody(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdateRequestWithBody(c.Server, categorySlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdate(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdateRequest(c.Server, categorySlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdatePositionWithBody(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdatePositionRequestWithBody(c.Server, categorySlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoryUpdatePosition(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoryUpdatePositionRequest(c.Server, categorySlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionList(ctx context.Context, params *CollectionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionCreate(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionDelete(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionDeleteRequest(c.Server, collectionMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionGet(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionGetRequest(c.Server, collectionMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionUpdateWithBody(ctx context.Context, collectionMark CollectionMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionUpdateRequestWithBody(c.Server, collectionMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionUpdate(ctx context.Context, collectionMark CollectionMarkParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionUpdateRequest(c.Server, collectionMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionRemoveNode(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionRemoveNodeRequest(c.Server, collectionMark, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionAddNode(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionAddNodeRequest(c.Server, collectionMark, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionRemovePost(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionRemovePostRequest(c.Server, collectionMark, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionAddPost(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionAddPostRequest(c.Server, collectionMark, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatagraphSearch(ctx context.Context, params *DatagraphSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatagraphSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatagraphAsk(ctx context.Context, params *DatagraphAskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatagraphAskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventList(ctx context.Context, params *EventListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventCreate(ctx context.Context, body EventCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventDelete(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventDeleteRequest(c.Server, eventMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventGet(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventGetRequest(c.Server, eventMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventUpdateWithBody(ctx context.Context, eventMark EventMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventUpdateRequestWithBody(c.Server, eventMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventUpdate(ctx context.Context, eventMark EventMarkParam, body EventUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventUpdateRequest(c.Server, eventMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventParticipantRemove(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventParticipantRemoveRequest(c.Server, eventMark, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventParticipantUpdateWithBody(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventParticipantUpdateRequestWithBody(c.Server, eventMark, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventParticipantUpdate(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, body EventParticipantUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventParticipantUpdateRequest(c.Server, eventMark, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BannerGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBannerGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BannerUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBannerUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IconUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIconUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IconGet(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIconGetRequest(c.Server, iconSize)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvitationList(ctx context.Context, params *InvitationListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvitationListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvitationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvitationCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvitationCreate(ctx context.Context, body InvitationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvitationCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvitationDelete(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvitationDeleteRequest(c.Server, invitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvitationGet(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvitationGetRequest(c.Server, invitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LikePostRemove(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLikePostRemoveRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LikePostGet(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLikePostGetRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LikePostAdd(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLikePostAddRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LikeProfileGet(ctx context.Context, accountHandle AccountHandleParam, params *LikeProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLikeProfileGetRequest(c.Server, accountHandle, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkList(ctx context.Context, params *LinkListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkCreate(ctx context.Context, body LinkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkGet(ctx context.Context, linkSlug LinkSlugParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkGetRequest(c.Server, linkSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeList(ctx context.Context, params *NodeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeCreate(ctx context.Context, body NodeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeDelete(ctx context.Context, nodeSlug NodeSlugParam, params *NodeDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeDeleteRequest(c.Server, nodeSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeGet(ctx context.Context, nodeSlug NodeSlugParam, params *NodeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeGetRequest(c.Server, nodeSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdateWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdateRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdate(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdateRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeRemoveAsset(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeRemoveAssetRequest(c.Server, nodeSlug, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeAddAsset(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeAddAssetRequest(c.Server, nodeSlug, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeListChildren(ctx context.Context, nodeSlug NodeSlugParam, params *NodeListChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeListChildrenRequest(c.Server, nodeSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdateChildrenPropertySchemaWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdateChildrenPropertySchemaRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdateChildrenPropertySchema(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateChildrenPropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdateChildrenPropertySchemaRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeGenerateContentWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeGenerateContentRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeGenerateContent(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeGenerateContentRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeRemoveNode(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeRemoveNodeRequest(c.Server, nodeSlug, nodeSlugChild)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeAddNode(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeAddNodeRequest(c.Server, nodeSlug, nodeSlugChild)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdatePositionWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdatePositionRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdatePosition(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdatePositionRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdatePropertiesWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdatePropertiesRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdateProperties(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdatePropertiesRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdatePropertySchemaWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdatePropertySchemaRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdatePropertySchema(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdatePropertySchemaRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeGenerateTagsWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeGenerateTagsRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeGenerateTags(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeGenerateTagsRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeGenerateTitleWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeGenerateTitleRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeGenerateTitle(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeGenerateTitleRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdateVisibilityWithBody(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdateVisibilityRequestWithBody(c.Server, nodeSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeUpdateVisibility(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeUpdateVisibilityRequest(c.Server, nodeSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationList(ctx context.Context, params *NotificationListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationUpdateWithBody(ctx context.Context, notificationId NotificationIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationUpdateRequestWithBody(c.Server, notificationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationUpdate(ctx context.Context, notificationId NotificationIDParam, body NotificationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationUpdateRequest(c.Server, notificationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDelete(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdate(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReactAddWithBody(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReactAddRequestWithBody(c.Server, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReactAdd(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReactAddRequest(c.Server, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReactRemove(ctx context.Context, postId PostIDParam, reactId ReactIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReactRemoveRequest(c.Server, postId, reactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileList(ctx context.Context, params *ProfileListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGet(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGetRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileFollowersRemove(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileFollowersRemoveRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileFollowersGet(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileFollowersGetRequest(c.Server, accountHandle, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileFollowersAdd(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileFollowersAddRequest(c.Server, accountHandle)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileFollowingGet(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowingGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileFollowingGetRequest(c.Server, accountHandle, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleCreate(ctx context.Context, body RoleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleDelete(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleDeleteRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleGet(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleGetRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleUpdateWithBody(ctx context.Context, roleId RoleIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleUpdateRequestWithBody(c.Server, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleUpdate(ctx context.Context, roleId RoleIDParam, body RoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleUpdateRequest(c.Server, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagList(ctx context.Context, params *TagListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagGet(ctx context.Context, tagName TagNameParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagGetRequest(c.Server, tagName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadList(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadCreate(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadDelete(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadDeleteRequest(c.Server, threadMark)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadGet(ctx context.Context, threadMark ThreadMarkParam, params *ThreadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadGetRequest(c.Server, threadMark, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadUpdateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadUpdateRequestWithBody(c.Server, threadMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreadUpdate(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreadUpdateRequest(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplyCreateWithBody(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplyCreateRequestWithBody(c.Server, threadMark, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplyCreate(ctx context.Context, threadMark ThreadMarkParam, body ReplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplyCreateRequest(c.Server, threadMark, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccountGetRequest generates requests for AccountGet
func NewAccountGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountUpdateRequest calls the generic AccountUpdate builder with application/json body
func NewAccountUpdateRequest(server string, body AccountUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountUpdateRequestWithBody generates requests for AccountUpdate with any type of body
func NewAccountUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountAuthProviderListRequest generates requests for AccountAuthProviderList
func NewAccountAuthProviderListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/self/auth-methods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountAuthMethodDeleteRequest generates requests for AccountAuthMethodDelete
func NewAccountAuthMethodDeleteRequest(server string, authMethodId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auth_method_id", runtime.ParamLocationPath, authMethodId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/self/auth-methods/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountSetAvatarRequestWithBody generates requests for AccountSetAvatar with any type of body
func NewAccountSetAvatarRequestWithBody(server string, params *AccountSetAvatarParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/self/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, params.ContentLength)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Length", headerParam0)

	}

	return req, nil
}

// NewAccountEmailAddRequest calls the generic AccountEmailAdd builder with application/json body
func NewAccountEmailAddRequest(server string, body AccountEmailAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountEmailAddRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountEmailAddRequestWithBody generates requests for AccountEmailAdd with any type of body
func NewAccountEmailAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/self/emails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountEmailRemoveRequest generates requests for AccountEmailRemove
func NewAccountEmailRemoveRequest(server string, emailAddressId EmailAddressIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email_address_id", runtime.ParamLocationPath, emailAddressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/self/emails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountGetAvatarRequest generates requests for AccountGetAvatar
func NewAccountGetAvatarRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/avatar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountRemoveRoleRequest generates requests for AccountRemoveRole
func NewAccountRemoveRoleRequest(server string, accountHandle AccountHandleParam, roleId RoleIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountAddRoleRequest generates requests for AccountAddRole
func NewAccountAddRoleRequest(server string, accountHandle AccountHandleParam, roleId RoleIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountRoleRemoveBadgeRequest generates requests for AccountRoleRemoveBadge
func NewAccountRoleRemoveBadgeRequest(server string, accountHandle AccountHandleParam, roleId RoleIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/roles/%s/badge", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountRoleSetBadgeRequest generates requests for AccountRoleSetBadge
func NewAccountRoleSetBadgeRequest(server string, accountHandle AccountHandleParam, roleId RoleIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/roles/%s/badge", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountViewRequest generates requests for AccountView
func NewAccountViewRequest(server string, accountId AccountIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminSettingsUpdateRequest calls the generic AdminSettingsUpdate builder with application/json body
func NewAdminSettingsUpdateRequest(server string, body AdminSettingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminSettingsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminSettingsUpdateRequestWithBody generates requests for AdminSettingsUpdate with any type of body
func NewAdminSettingsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminAccessKeyListRequest generates requests for AdminAccessKeyList
func NewAdminAccessKeyListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/access-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminAccessKeyDeleteRequest generates requests for AdminAccessKeyDelete
func NewAdminAccessKeyDeleteRequest(server string, accessKeyId AccessKeyIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "access_key_id", runtime.ParamLocationPath, accessKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/access-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminAccountBanRemoveRequest generates requests for AdminAccountBanRemove
func NewAdminAccountBanRemoveRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/bans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminAccountBanCreateRequest generates requests for AdminAccountBanCreate
func NewAdminAccountBanCreateRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/bans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssetUploadRequestWithBody generates requests for AssetUpload with any type of body
func NewAssetUploadRequestWithBody(server string, params *AssetUploadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filename != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_asset_id", runtime.ParamLocationQuery, *params.ParentAssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, params.ContentLength)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Length", headerParam0)

	}

	return req, nil
}

// NewAssetGetRequest generates requests for AssetGet
func NewAssetGetRequest(server string, assetFilename AssetPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_filename", runtime.ParamLocationPath, assetFilename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthProviderListRequest generates requests for AuthProviderList
func NewAuthProviderListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessKeyListRequest generates requests for AccessKeyList
func NewAccessKeyListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/access-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessKeyCreateRequest calls the generic AccessKeyCreate builder with application/json body
func NewAccessKeyCreateRequest(server string, body AccessKeyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessKeyCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccessKeyCreateRequestWithBody generates requests for AccessKeyCreate with any type of body
func NewAccessKeyCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/access-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessKeyDeleteRequest generates requests for AccessKeyDelete
func NewAccessKeyDeleteRequest(server string, accessKeyId AccessKeyIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "access_key_id", runtime.ParamLocationPath, accessKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/access-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthPasswordResetRequestEmailRequest calls the generic AuthPasswordResetRequestEmail builder with application/json body
func NewAuthPasswordResetRequestEmailRequest(server string, body AuthPasswordResetRequestEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordResetRequestEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordResetRequestEmailRequestWithBody generates requests for AuthPasswordResetRequestEmail with any type of body
func NewAuthPasswordResetRequestEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/email-password/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthEmailPasswordSigninRequest calls the generic AuthEmailPasswordSignin builder with application/json body
func NewAuthEmailPasswordSigninRequest(server string, body AuthEmailPasswordSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthEmailPasswordSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthEmailPasswordSigninRequestWithBody generates requests for AuthEmailPasswordSignin with any type of body
func NewAuthEmailPasswordSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/email-password/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthEmailPasswordSignupRequest calls the generic AuthEmailPasswordSignup builder with application/json body
func NewAuthEmailPasswordSignupRequest(server string, params *AuthEmailPasswordSignupParams, body AuthEmailPasswordSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthEmailPasswordSignupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAuthEmailPasswordSignupRequestWithBody generates requests for AuthEmailPasswordSignup with any type of body
func NewAuthEmailPasswordSignupRequestWithBody(server string, params *AuthEmailPasswordSignupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/email-password/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InvitationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitation_id", runtime.ParamLocationQuery, *params.InvitationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthEmailSigninRequest calls the generic AuthEmailSignin builder with application/json body
func NewAuthEmailSigninRequest(server string, body AuthEmailSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthEmailSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthEmailSigninRequestWithBody generates requests for AuthEmailSignin with any type of body
func NewAuthEmailSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/email/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthEmailSignupRequest calls the generic AuthEmailSignup builder with application/json body
func NewAuthEmailSignupRequest(server string, params *AuthEmailSignupParams, body AuthEmailSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthEmailSignupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAuthEmailSignupRequestWithBody generates requests for AuthEmailSignup with any type of body
func NewAuthEmailSignupRequestWithBody(server string, params *AuthEmailSignupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/email/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InvitationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitation_id", runtime.ParamLocationQuery, *params.InvitationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthEmailVerifyRequest calls the generic AuthEmailVerify builder with application/json body
func NewAuthEmailVerifyRequest(server string, body AuthEmailVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthEmailVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthEmailVerifyRequestWithBody generates requests for AuthEmailVerify with any type of body
func NewAuthEmailVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/email/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthProviderLogoutRequest generates requests for AuthProviderLogout
func NewAuthProviderLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOAuthProviderCallbackRequest calls the generic OAuthProviderCallback builder with application/json body
func NewOAuthProviderCallbackRequest(server string, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOAuthProviderCallbackRequestWithBody(server, oauthProvider, "application/json", bodyReader)
}

// NewOAuthProviderCallbackRequestWithBody generates requests for OAuthProviderCallback with any type of body
func NewOAuthProviderCallbackRequestWithBody(server string, oauthProvider OAuthProvider, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, oauthProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/oauth/%s/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordUpdateRequest calls the generic AuthPasswordUpdate builder with application/json body
func NewAuthPasswordUpdateRequest(server string, body AuthPasswordUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordUpdateRequestWithBody generates requests for AuthPasswordUpdate with any type of body
func NewAuthPasswordUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordCreateRequest calls the generic AuthPasswordCreate builder with application/json body
func NewAuthPasswordCreateRequest(server string, body AuthPasswordCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordCreateRequestWithBody generates requests for AuthPasswordCreate with any type of body
func NewAuthPasswordCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordResetRequest calls the generic AuthPasswordReset builder with application/json body
func NewAuthPasswordResetRequest(server string, body AuthPasswordResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordResetRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordResetRequestWithBody generates requests for AuthPasswordReset with any type of body
func NewAuthPasswordResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/password/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSigninRequest calls the generic AuthPasswordSignin builder with application/json body
func NewAuthPasswordSigninRequest(server string, body AuthPasswordSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordSigninRequestWithBody generates requests for AuthPasswordSignin with any type of body
func NewAuthPasswordSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/password/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordSignupRequest calls the generic AuthPasswordSignup builder with application/json body
func NewAuthPasswordSignupRequest(server string, params *AuthPasswordSignupParams, body AuthPasswordSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordSignupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAuthPasswordSignupRequestWithBody generates requests for AuthPasswordSignup with any type of body
func NewAuthPasswordSignupRequestWithBody(server string, params *AuthPasswordSignupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/password/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InvitationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitation_id", runtime.ParamLocationQuery, *params.InvitationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPhoneRequestCodeRequest calls the generic PhoneRequestCode builder with application/json body
func NewPhoneRequestCodeRequest(server string, params *PhoneRequestCodeParams, body PhoneRequestCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPhoneRequestCodeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPhoneRequestCodeRequestWithBody generates requests for PhoneRequestCode with any type of body
func NewPhoneRequestCodeRequestWithBody(server string, params *PhoneRequestCodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/phone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InvitationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitation_id", runtime.ParamLocationQuery, *params.InvitationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPhoneSubmitCodeRequest calls the generic PhoneSubmitCode builder with application/json body
func NewPhoneSubmitCodeRequest(server string, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPhoneSubmitCodeRequestWithBody(server, accountHandle, "application/json", bodyReader)
}

// NewPhoneSubmitCodeRequestWithBody generates requests for PhoneSubmitCode with any type of body
func NewPhoneSubmitCodeRequestWithBody(server string, accountHandle AccountHandleParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/phone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnMakeAssertionRequest calls the generic WebAuthnMakeAssertion builder with application/json body
func NewWebAuthnMakeAssertionRequest(server string, body WebAuthnMakeAssertionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeAssertionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebAuthnMakeAssertionRequestWithBody generates requests for WebAuthnMakeAssertion with any type of body
func NewWebAuthnMakeAssertionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/webauthn/assert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnGetAssertionRequest generates requests for WebAuthnGetAssertion
func NewWebAuthnGetAssertionRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/webauthn/assert/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebAuthnMakeCredentialRequest calls the generic WebAuthnMakeCredential builder with application/json body
func NewWebAuthnMakeCredentialRequest(server string, params *WebAuthnMakeCredentialParams, body WebAuthnMakeCredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebAuthnMakeCredentialRequestWithBody(server, params, "application/json", bodyReader)
}

// NewWebAuthnMakeCredentialRequestWithBody generates requests for WebAuthnMakeCredential with any type of body
func NewWebAuthnMakeCredentialRequestWithBody(server string, params *WebAuthnMakeCredentialParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/webauthn/make")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InvitationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitation_id", runtime.ParamLocationQuery, *params.InvitationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebAuthnRequestCredentialRequest generates requests for WebAuthnRequestCredential
func NewWebAuthnRequestCredentialRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/webauthn/make/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoryListRequest generates requests for CategoryList
func NewCategoryListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoryCreateRequest calls the generic CategoryCreate builder with application/json body
func NewCategoryCreateRequest(server string, body CategoryCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoryCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCategoryCreateRequestWithBody generates requests for CategoryCreate with any type of body
func NewCategoryCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoryDeleteRequest calls the generic CategoryDelete builder with application/json body
func NewCategoryDeleteRequest(server string, categorySlug CategorySlugParam, body CategoryDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoryDeleteRequestWithBody(server, categorySlug, "application/json", bodyReader)
}

// NewCategoryDeleteRequestWithBody generates requests for CategoryDelete with any type of body
func NewCategoryDeleteRequestWithBody(server string, categorySlug CategorySlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_slug", runtime.ParamLocationPath, categorySlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoryGetRequest generates requests for CategoryGet
func NewCategoryGetRequest(server string, categorySlug CategorySlugParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_slug", runtime.ParamLocationPath, categorySlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoryUpdateRequest calls the generic CategoryUpdate builder with application/json body
func NewCategoryUpdateRequest(server string, categorySlug CategorySlugParam, body CategoryUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoryUpdateRequestWithBody(server, categorySlug, "application/json", bodyReader)
}

// NewCategoryUpdateRequestWithBody generates requests for CategoryUpdate with any type of body
func NewCategoryUpdateRequestWithBody(server string, categorySlug CategorySlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_slug", runtime.ParamLocationPath, categorySlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoryUpdatePositionRequest calls the generic CategoryUpdatePosition builder with application/json body
func NewCategoryUpdatePositionRequest(server string, categorySlug CategorySlugParam, body CategoryUpdatePositionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoryUpdatePositionRequestWithBody(server, categorySlug, "application/json", bodyReader)
}

// NewCategoryUpdatePositionRequestWithBody generates requests for CategoryUpdatePosition with any type of body
func NewCategoryUpdatePositionRequestWithBody(server string, categorySlug CategorySlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_slug", runtime.ParamLocationPath, categorySlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s/position", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionListRequest generates requests for CollectionList
func NewCollectionListRequest(server string, params *CollectionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccountHandle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_handle", runtime.ParamLocationQuery, *params.AccountHandle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HasItem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_item", runtime.ParamLocationQuery, *params.HasItem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionCreateRequest calls the generic CollectionCreate builder with application/json body
func NewCollectionCreateRequest(server string, body CollectionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCollectionCreateRequestWithBody generates requests for CollectionCreate with any type of body
func NewCollectionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionDeleteRequest generates requests for CollectionDelete
func NewCollectionDeleteRequest(server string, collectionMark CollectionMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_mark", runtime.ParamLocationPath, collectionMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionGetRequest generates requests for CollectionGet
func NewCollectionGetRequest(server string, collectionMark CollectionMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_mark", runtime.ParamLocationPath, collectionMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionUpdateRequest calls the generic CollectionUpdate builder with application/json body
func NewCollectionUpdateRequest(server string, collectionMark CollectionMarkParam, body CollectionUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionUpdateRequestWithBody(server, collectionMark, "application/json", bodyReader)
}

// NewCollectionUpdateRequestWithBody generates requests for CollectionUpdate with any type of body
func NewCollectionUpdateRequestWithBody(server string, collectionMark CollectionMarkParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_mark", runtime.ParamLocationPath, collectionMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionRemoveNodeRequest generates requests for CollectionRemoveNode
func NewCollectionRemoveNodeRequest(server string, collectionMark CollectionMarkParam, nodeId NodeIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_mark", runtime.ParamLocationPath, collectionMark)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionAddNodeRequest generates requests for CollectionAddNode
func NewCollectionAddNodeRequest(server string, collectionMark CollectionMarkParam, nodeId NodeIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_mark", runtime.ParamLocationPath, collectionMark)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionRemovePostRequest generates requests for CollectionRemovePost
func NewCollectionRemovePostRequest(server string, collectionMark CollectionMarkParam, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_mark", runtime.ParamLocationPath, collectionMark)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s/posts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionAddPostRequest generates requests for CollectionAddPost
func NewCollectionAddPostRequest(server string, collectionMark CollectionMarkParam, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_mark", runtime.ParamLocationPath, collectionMark)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s/posts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatagraphSearchRequest generates requests for DatagraphSearch
func NewDatagraphSearchRequest(server string, params *DatagraphSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/datagraph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Kind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatagraphAskRequest generates requests for DatagraphAsk
func NewDatagraphAskRequest(server string, params *DatagraphAskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/datagraph/ask")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ParentQuestionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_question_id", runtime.ParamLocationQuery, *params.ParentQuestionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDocsRequest generates requests for GetDocs
func NewGetDocsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventListRequest generates requests for EventList
func NewEventListRequest(server string, params *EventListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventCreateRequest calls the generic EventCreate builder with application/json body
func NewEventCreateRequest(server string, body EventCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventCreateRequestWithBody generates requests for EventCreate with any type of body
func NewEventCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventDeleteRequest generates requests for EventDelete
func NewEventDeleteRequest(server string, eventMark EventMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_mark", runtime.ParamLocationPath, eventMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventGetRequest generates requests for EventGet
func NewEventGetRequest(server string, eventMark EventMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_mark", runtime.ParamLocationPath, eventMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventUpdateRequest calls the generic EventUpdate builder with application/json body
func NewEventUpdateRequest(server string, eventMark EventMarkParam, body EventUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventUpdateRequestWithBody(server, eventMark, "application/json", bodyReader)
}

// NewEventUpdateRequestWithBody generates requests for EventUpdate with any type of body
func NewEventUpdateRequestWithBody(server string, eventMark EventMarkParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_mark", runtime.ParamLocationPath, eventMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventParticipantRemoveRequest generates requests for EventParticipantRemove
func NewEventParticipantRemoveRequest(server string, eventMark EventMarkParam, accountId AccountIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_mark", runtime.ParamLocationPath, eventMark)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/participants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventParticipantUpdateRequest calls the generic EventParticipantUpdate builder with application/json body
func NewEventParticipantUpdateRequest(server string, eventMark EventMarkParam, accountId AccountIDParam, body EventParticipantUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventParticipantUpdateRequestWithBody(server, eventMark, accountId, "application/json", bodyReader)
}

// NewEventParticipantUpdateRequestWithBody generates requests for EventParticipantUpdate with any type of body
func NewEventParticipantUpdateRequestWithBody(server string, eventMark EventMarkParam, accountId AccountIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_mark", runtime.ParamLocationPath, eventMark)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/participants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInfoRequest generates requests for GetInfo
func NewGetInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBannerGetRequest generates requests for BannerGet
func NewBannerGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info/banner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBannerUploadRequestWithBody generates requests for BannerUpload with any type of body
func NewBannerUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info/banner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIconUploadRequestWithBody generates requests for IconUpload with any type of body
func NewIconUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info/icon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIconGetRequest generates requests for IconGet
func NewIconGetRequest(server string, iconSize IconGetParamsIconSize) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "icon_size", runtime.ParamLocationPath, iconSize)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info/icon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvitationListRequest generates requests for InvitationList
func NewInvitationListRequest(server string, params *InvitationListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_id", runtime.ParamLocationQuery, *params.AccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvitationCreateRequest calls the generic InvitationCreate builder with application/json body
func NewInvitationCreateRequest(server string, body InvitationCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInvitationCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewInvitationCreateRequestWithBody generates requests for InvitationCreate with any type of body
func NewInvitationCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInvitationDeleteRequest generates requests for InvitationDelete
func NewInvitationDeleteRequest(server string, invitationId InvitationIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitation_id", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvitationGetRequest generates requests for InvitationGet
func NewInvitationGetRequest(server string, invitationId InvitationIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitation_id", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLikePostRemoveRequest generates requests for LikePostRemove
func NewLikePostRemoveRequest(server string, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/likes/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLikePostGetRequest generates requests for LikePostGet
func NewLikePostGetRequest(server string, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/likes/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLikePostAddRequest generates requests for LikePostAdd
func NewLikePostAddRequest(server string, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/likes/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLikeProfileGetRequest generates requests for LikeProfileGet
func NewLikeProfileGetRequest(server string, accountHandle AccountHandleParam, params *LikeProfileGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/likes/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLinkListRequest generates requests for LinkList
func NewLinkListRequest(server string, params *LinkListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLinkCreateRequest calls the generic LinkCreate builder with application/json body
func NewLinkCreateRequest(server string, body LinkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLinkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLinkCreateRequestWithBody generates requests for LinkCreate with any type of body
func NewLinkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLinkGetRequest generates requests for LinkGet
func NewLinkGetRequest(server string, linkSlug LinkSlugParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "link_slug", runtime.ParamLocationPath, linkSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeListRequest generates requests for NodeList
func NewNodeListRequest(server string, params *NodeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node_id", runtime.ParamLocationQuery, *params.NodeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Depth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeCreateRequest calls the generic NodeCreate builder with application/json body
func NewNodeCreateRequest(server string, body NodeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNodeCreateRequestWithBody generates requests for NodeCreate with any type of body
func NewNodeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeDeleteRequest generates requests for NodeDelete
func NewNodeDeleteRequest(server string, nodeSlug NodeSlugParam, params *NodeDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TargetNode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_node", runtime.ParamLocationQuery, *params.TargetNode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeGetRequest generates requests for NodeGet
func NewNodeGetRequest(server string, nodeSlug NodeSlugParam, params *NodeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChildrenSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children_sort", runtime.ParamLocationQuery, *params.ChildrenSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeUpdateRequest calls the generic NodeUpdate builder with application/json body
func NewNodeUpdateRequest(server string, nodeSlug NodeSlugParam, body NodeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeUpdateRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeUpdateRequestWithBody generates requests for NodeUpdate with any type of body
func NewNodeUpdateRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeRemoveAssetRequest generates requests for NodeRemoveAsset
func NewNodeRemoveAssetRequest(server string, nodeSlug NodeSlugParam, assetId AssetIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "asset_id", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeAddAssetRequest generates requests for NodeAddAsset
func NewNodeAddAssetRequest(server string, nodeSlug NodeSlugParam, assetId AssetIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "asset_id", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeListChildrenRequest generates requests for NodeListChildren
func NewNodeListChildrenRequest(server string, nodeSlug NodeSlugParam, params *NodeListChildrenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/children", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChildrenSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children_sort", runtime.ParamLocationQuery, *params.ChildrenSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeUpdateChildrenPropertySchemaRequest calls the generic NodeUpdateChildrenPropertySchema builder with application/json body
func NewNodeUpdateChildrenPropertySchemaRequest(server string, nodeSlug NodeSlugParam, body NodeUpdateChildrenPropertySchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeUpdateChildrenPropertySchemaRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeUpdateChildrenPropertySchemaRequestWithBody generates requests for NodeUpdateChildrenPropertySchema with any type of body
func NewNodeUpdateChildrenPropertySchemaRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/children/property-schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeGenerateContentRequest calls the generic NodeGenerateContent builder with application/json body
func NewNodeGenerateContentRequest(server string, nodeSlug NodeSlugParam, body NodeGenerateContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeGenerateContentRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeGenerateContentRequestWithBody generates requests for NodeGenerateContent with any type of body
func NewNodeGenerateContentRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeRemoveNodeRequest generates requests for NodeRemoveNode
func NewNodeRemoveNodeRequest(server string, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "node_slug_child", runtime.ParamLocationPath, nodeSlugChild)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeAddNodeRequest generates requests for NodeAddNode
func NewNodeAddNodeRequest(server string, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "node_slug_child", runtime.ParamLocationPath, nodeSlugChild)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeUpdatePositionRequest calls the generic NodeUpdatePosition builder with application/json body
func NewNodeUpdatePositionRequest(server string, nodeSlug NodeSlugParam, body NodeUpdatePositionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeUpdatePositionRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeUpdatePositionRequestWithBody generates requests for NodeUpdatePosition with any type of body
func NewNodeUpdatePositionRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/position", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeUpdatePropertiesRequest calls the generic NodeUpdateProperties builder with application/json body
func NewNodeUpdatePropertiesRequest(server string, nodeSlug NodeSlugParam, body NodeUpdatePropertiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeUpdatePropertiesRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeUpdatePropertiesRequestWithBody generates requests for NodeUpdateProperties with any type of body
func NewNodeUpdatePropertiesRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/properties", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeUpdatePropertySchemaRequest calls the generic NodeUpdatePropertySchema builder with application/json body
func NewNodeUpdatePropertySchemaRequest(server string, nodeSlug NodeSlugParam, body NodeUpdatePropertySchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeUpdatePropertySchemaRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeUpdatePropertySchemaRequestWithBody generates requests for NodeUpdatePropertySchema with any type of body
func NewNodeUpdatePropertySchemaRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/property-schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeGenerateTagsRequest calls the generic NodeGenerateTags builder with application/json body
func NewNodeGenerateTagsRequest(server string, nodeSlug NodeSlugParam, body NodeGenerateTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeGenerateTagsRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeGenerateTagsRequestWithBody generates requests for NodeGenerateTags with any type of body
func NewNodeGenerateTagsRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeGenerateTitleRequest calls the generic NodeGenerateTitle builder with application/json body
func NewNodeGenerateTitleRequest(server string, nodeSlug NodeSlugParam, body NodeGenerateTitleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeGenerateTitleRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeGenerateTitleRequestWithBody generates requests for NodeGenerateTitle with any type of body
func NewNodeGenerateTitleRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/title", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeUpdateVisibilityRequest calls the generic NodeUpdateVisibility builder with application/json body
func NewNodeUpdateVisibilityRequest(server string, nodeSlug NodeSlugParam, body NodeUpdateVisibilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeUpdateVisibilityRequestWithBody(server, nodeSlug, "application/json", bodyReader)
}

// NewNodeUpdateVisibilityRequestWithBody generates requests for NodeUpdateVisibility with any type of body
func NewNodeUpdateVisibilityRequestWithBody(server string, nodeSlug NodeSlugParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_slug", runtime.ParamLocationPath, nodeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s/visibility", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationListRequest generates requests for NotificationList
func NewNotificationListRequest(server string, params *NotificationListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationUpdateRequest calls the generic NotificationUpdate builder with application/json body
func NewNotificationUpdateRequest(server string, notificationId NotificationIDParam, body NotificationUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationUpdateRequestWithBody(server, notificationId, "application/json", bodyReader)
}

// NewNotificationUpdateRequestWithBody generates requests for NotificationUpdate with any type of body
func NewNotificationUpdateRequestWithBody(server string, notificationId NotificationIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notification_id", runtime.ParamLocationPath, notificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpecRequest generates requests for GetSpec
func NewGetSpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeleteRequest generates requests for PostDelete
func NewPostDeleteRequest(server string, postId PostIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateRequest calls the generic PostUpdate builder with application/json body
func NewPostUpdateRequest(server string, postId PostIDParam, body PostUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostUpdateRequestWithBody generates requests for PostUpdate with any type of body
func NewPostUpdateRequestWithBody(server string, postId PostIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReactAddRequest calls the generic PostReactAdd builder with application/json body
func NewPostReactAddRequest(server string, postId PostIDParam, body PostReactAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReactAddRequestWithBody(server, postId, "application/json", bodyReader)
}

// NewPostReactAddRequestWithBody generates requests for PostReactAdd with any type of body
func NewPostReactAddRequestWithBody(server string, postId PostIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s/reacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReactRemoveRequest generates requests for PostReactRemove
func NewPostReactRemoveRequest(server string, postId PostIDParam, reactId ReactIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "react_id", runtime.ParamLocationPath, reactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s/reacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileListRequest generates requests for ProfileList
func NewProfileListRequest(server string, params *ProfileListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileGetRequest generates requests for ProfileGet
func NewProfileGetRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileFollowersRemoveRequest generates requests for ProfileFollowersRemove
func NewProfileFollowersRemoveRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileFollowersGetRequest generates requests for ProfileFollowersGet
func NewProfileFollowersGetRequest(server string, accountHandle AccountHandleParam, params *ProfileFollowersGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileFollowersAddRequest generates requests for ProfileFollowersAdd
func NewProfileFollowersAddRequest(server string, accountHandle AccountHandleParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileFollowingGetRequest generates requests for ProfileFollowingGet
func NewProfileFollowingGetRequest(server string, accountHandle AccountHandleParam, params *ProfileFollowingGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, accountHandle)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profiles/%s/following", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoleListRequest generates requests for RoleList
func NewRoleListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoleCreateRequest calls the generic RoleCreate builder with application/json body
func NewRoleCreateRequest(server string, body RoleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRoleCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRoleCreateRequestWithBody generates requests for RoleCreate with any type of body
func NewRoleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRoleDeleteRequest generates requests for RoleDelete
func NewRoleDeleteRequest(server string, roleId RoleIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoleGetRequest generates requests for RoleGet
func NewRoleGetRequest(server string, roleId RoleIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoleUpdateRequest calls the generic RoleUpdate builder with application/json body
func NewRoleUpdateRequest(server string, roleId RoleIDParam, body RoleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRoleUpdateRequestWithBody(server, roleId, "application/json", bodyReader)
}

// NewRoleUpdateRequestWithBody generates requests for RoleUpdate with any type of body
func NewRoleUpdateRequestWithBody(server string, roleId RoleIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTagListRequest generates requests for TagList
func NewTagListRequest(server string, params *TagListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagGetRequest generates requests for TagGet
func NewTagGetRequest(server string, tagName TagNameParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tag_name", runtime.ParamLocationPath, tagName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadListRequest generates requests for ThreadList
func NewThreadListRequest(server string, params *ThreadListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Categories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categories", runtime.ParamLocationQuery, *params.Categories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadCreateRequest calls the generic ThreadCreate builder with application/json body
func NewThreadCreateRequest(server string, body ThreadCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreadCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewThreadCreateRequestWithBody generates requests for ThreadCreate with any type of body
func NewThreadCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThreadDeleteRequest generates requests for ThreadDelete
func NewThreadDeleteRequest(server string, threadMark ThreadMarkParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadGetRequest generates requests for ThreadGet
func NewThreadGetRequest(server string, threadMark ThreadMarkParam, params *ThreadGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewThreadUpdateRequest calls the generic ThreadUpdate builder with application/json body
func NewThreadUpdateRequest(server string, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreadUpdateRequestWithBody(server, threadMark, "application/json", bodyReader)
}

// NewThreadUpdateRequestWithBody generates requests for ThreadUpdate with any type of body
func NewThreadUpdateRequestWithBody(server string, threadMark ThreadMarkParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplyCreateRequest calls the generic ReplyCreate builder with application/json body
func NewReplyCreateRequest(server string, threadMark ThreadMarkParam, body ReplyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplyCreateRequestWithBody(server, threadMark, "application/json", bodyReader)
}

// NewReplyCreateRequestWithBody generates requests for ReplyCreate with any type of body
func NewReplyCreateRequestWithBody(server string, threadMark ThreadMarkParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_mark", runtime.ParamLocationPath, threadMark)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/replies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccountGetWithResponse request
	AccountGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountGetResponse, error)

	// AccountUpdateWithBodyWithResponse request with any body
	AccountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error)

	AccountUpdateWithResponse(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error)

	// AccountAuthProviderListWithResponse request
	AccountAuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountAuthProviderListResponse, error)

	// AccountAuthMethodDeleteWithResponse request
	AccountAuthMethodDeleteWithResponse(ctx context.Context, authMethodId string, reqEditors ...RequestEditorFn) (*AccountAuthMethodDeleteResponse, error)

	// AccountSetAvatarWithBodyWithResponse request with any body
	AccountSetAvatarWithBodyWithResponse(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountSetAvatarResponse, error)

	// AccountEmailAddWithBodyWithResponse request with any body
	AccountEmailAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountEmailAddResponse, error)

	AccountEmailAddWithResponse(ctx context.Context, body AccountEmailAddJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountEmailAddResponse, error)

	// AccountEmailRemoveWithResponse request
	AccountEmailRemoveWithResponse(ctx context.Context, emailAddressId EmailAddressIDParam, reqEditors ...RequestEditorFn) (*AccountEmailRemoveResponse, error)

	// AccountGetAvatarWithResponse request
	AccountGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AccountGetAvatarResponse, error)

	// AccountRemoveRoleWithResponse request
	AccountRemoveRoleWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountRemoveRoleResponse, error)

	// AccountAddRoleWithResponse request
	AccountAddRoleWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountAddRoleResponse, error)

	// AccountRoleRemoveBadgeWithResponse request
	AccountRoleRemoveBadgeWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountRoleRemoveBadgeResponse, error)

	// AccountRoleSetBadgeWithResponse request
	AccountRoleSetBadgeWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountRoleSetBadgeResponse, error)

	// AccountViewWithResponse request
	AccountViewWithResponse(ctx context.Context, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*AccountViewResponse, error)

	// AdminSettingsUpdateWithBodyWithResponse request with any body
	AdminSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error)

	AdminSettingsUpdateWithResponse(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error)

	// AdminAccessKeyListWithResponse request
	AdminAccessKeyListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminAccessKeyListResponse, error)

	// AdminAccessKeyDeleteWithResponse request
	AdminAccessKeyDeleteWithResponse(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*AdminAccessKeyDeleteResponse, error)

	// AdminAccountBanRemoveWithResponse request
	AdminAccountBanRemoveWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AdminAccountBanRemoveResponse, error)

	// AdminAccountBanCreateWithResponse request
	AdminAccountBanCreateWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AdminAccountBanCreateResponse, error)

	// AssetUploadWithBodyWithResponse request with any body
	AssetUploadWithBodyWithResponse(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssetUploadResponse, error)

	// AssetGetWithResponse request
	AssetGetWithResponse(ctx context.Context, assetFilename AssetPathParam, reqEditors ...RequestEditorFn) (*AssetGetResponse, error)

	// AuthProviderListWithResponse request
	AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error)

	// AccessKeyListWithResponse request
	AccessKeyListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccessKeyListResponse, error)

	// AccessKeyCreateWithBodyWithResponse request with any body
	AccessKeyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessKeyCreateResponse, error)

	AccessKeyCreateWithResponse(ctx context.Context, body AccessKeyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessKeyCreateResponse, error)

	// AccessKeyDeleteWithResponse request
	AccessKeyDeleteWithResponse(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*AccessKeyDeleteResponse, error)

	// AuthPasswordResetRequestEmailWithBodyWithResponse request with any body
	AuthPasswordResetRequestEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetRequestEmailResponse, error)

	AuthPasswordResetRequestEmailWithResponse(ctx context.Context, body AuthPasswordResetRequestEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetRequestEmailResponse, error)

	// AuthEmailPasswordSigninWithBodyWithResponse request with any body
	AuthEmailPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSigninResponse, error)

	AuthEmailPasswordSigninWithResponse(ctx context.Context, body AuthEmailPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSigninResponse, error)

	// AuthEmailPasswordSignupWithBodyWithResponse request with any body
	AuthEmailPasswordSignupWithBodyWithResponse(ctx context.Context, params *AuthEmailPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSignupResponse, error)

	AuthEmailPasswordSignupWithResponse(ctx context.Context, params *AuthEmailPasswordSignupParams, body AuthEmailPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSignupResponse, error)

	// AuthEmailSigninWithBodyWithResponse request with any body
	AuthEmailSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailSigninResponse, error)

	AuthEmailSigninWithResponse(ctx context.Context, body AuthEmailSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailSigninResponse, error)

	// AuthEmailSignupWithBodyWithResponse request with any body
	AuthEmailSignupWithBodyWithResponse(ctx context.Context, params *AuthEmailSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailSignupResponse, error)

	AuthEmailSignupWithResponse(ctx context.Context, params *AuthEmailSignupParams, body AuthEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailSignupResponse, error)

	// AuthEmailVerifyWithBodyWithResponse request with any body
	AuthEmailVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailVerifyResponse, error)

	AuthEmailVerifyWithResponse(ctx context.Context, body AuthEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailVerifyResponse, error)

	// AuthProviderLogoutWithResponse request
	AuthProviderLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderLogoutResponse, error)

	// OAuthProviderCallbackWithBodyWithResponse request with any body
	OAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error)

	OAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error)

	// AuthPasswordUpdateWithBodyWithResponse request with any body
	AuthPasswordUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordUpdateResponse, error)

	AuthPasswordUpdateWithResponse(ctx context.Context, body AuthPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordUpdateResponse, error)

	// AuthPasswordCreateWithBodyWithResponse request with any body
	AuthPasswordCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordCreateResponse, error)

	AuthPasswordCreateWithResponse(ctx context.Context, body AuthPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordCreateResponse, error)

	// AuthPasswordResetWithBodyWithResponse request with any body
	AuthPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetResponse, error)

	AuthPasswordResetWithResponse(ctx context.Context, body AuthPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetResponse, error)

	// AuthPasswordSigninWithBodyWithResponse request with any body
	AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error)

	// AuthPasswordSignupWithBodyWithResponse request with any body
	AuthPasswordSignupWithBodyWithResponse(ctx context.Context, params *AuthPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	AuthPasswordSignupWithResponse(ctx context.Context, params *AuthPasswordSignupParams, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error)

	// PhoneRequestCodeWithBodyWithResponse request with any body
	PhoneRequestCodeWithBodyWithResponse(ctx context.Context, params *PhoneRequestCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error)

	PhoneRequestCodeWithResponse(ctx context.Context, params *PhoneRequestCodeParams, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error)

	// PhoneSubmitCodeWithBodyWithResponse request with any body
	PhoneSubmitCodeWithBodyWithResponse(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error)

	PhoneSubmitCodeWithResponse(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error)

	// WebAuthnMakeAssertionWithBodyWithResponse request with any body
	WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error)

	// WebAuthnGetAssertionWithResponse request
	WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error)

	// WebAuthnMakeCredentialWithBodyWithResponse request with any body
	WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, params *WebAuthnMakeCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	WebAuthnMakeCredentialWithResponse(ctx context.Context, params *WebAuthnMakeCredentialParams, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error)

	// WebAuthnRequestCredentialWithResponse request
	WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error)

	// CategoryListWithResponse request
	CategoryListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoryListResponse, error)

	// CategoryCreateWithBodyWithResponse request with any body
	CategoryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error)

	CategoryCreateWithResponse(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error)

	// CategoryDeleteWithBodyWithResponse request with any body
	CategoryDeleteWithBodyWithResponse(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryDeleteResponse, error)

	CategoryDeleteWithResponse(ctx context.Context, categorySlug CategorySlugParam, body CategoryDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryDeleteResponse, error)

	// CategoryGetWithResponse request
	CategoryGetWithResponse(ctx context.Context, categorySlug CategorySlugParam, reqEditors ...RequestEditorFn) (*CategoryGetResponse, error)

	// CategoryUpdateWithBodyWithResponse request with any body
	CategoryUpdateWithBodyWithResponse(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error)

	CategoryUpdateWithResponse(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error)

	// CategoryUpdatePositionWithBodyWithResponse request with any body
	CategoryUpdatePositionWithBodyWithResponse(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdatePositionResponse, error)

	CategoryUpdatePositionWithResponse(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdatePositionResponse, error)

	// CollectionListWithResponse request
	CollectionListWithResponse(ctx context.Context, params *CollectionListParams, reqEditors ...RequestEditorFn) (*CollectionListResponse, error)

	// CollectionCreateWithBodyWithResponse request with any body
	CollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error)

	CollectionCreateWithResponse(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error)

	// CollectionDeleteWithResponse request
	CollectionDeleteWithResponse(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*CollectionDeleteResponse, error)

	// CollectionGetWithResponse request
	CollectionGetWithResponse(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*CollectionGetResponse, error)

	// CollectionUpdateWithBodyWithResponse request with any body
	CollectionUpdateWithBodyWithResponse(ctx context.Context, collectionMark CollectionMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error)

	CollectionUpdateWithResponse(ctx context.Context, collectionMark CollectionMarkParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error)

	// CollectionRemoveNodeWithResponse request
	CollectionRemoveNodeWithResponse(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*CollectionRemoveNodeResponse, error)

	// CollectionAddNodeWithResponse request
	CollectionAddNodeWithResponse(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*CollectionAddNodeResponse, error)

	// CollectionRemovePostWithResponse request
	CollectionRemovePostWithResponse(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionRemovePostResponse, error)

	// CollectionAddPostWithResponse request
	CollectionAddPostWithResponse(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionAddPostResponse, error)

	// DatagraphSearchWithResponse request
	DatagraphSearchWithResponse(ctx context.Context, params *DatagraphSearchParams, reqEditors ...RequestEditorFn) (*DatagraphSearchResponse, error)

	// DatagraphAskWithResponse request
	DatagraphAskWithResponse(ctx context.Context, params *DatagraphAskParams, reqEditors ...RequestEditorFn) (*DatagraphAskResponse, error)

	// GetDocsWithResponse request
	GetDocsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocsResponse, error)

	// EventListWithResponse request
	EventListWithResponse(ctx context.Context, params *EventListParams, reqEditors ...RequestEditorFn) (*EventListResponse, error)

	// EventCreateWithBodyWithResponse request with any body
	EventCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventCreateResponse, error)

	EventCreateWithResponse(ctx context.Context, body EventCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventCreateResponse, error)

	// EventDeleteWithResponse request
	EventDeleteWithResponse(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*EventDeleteResponse, error)

	// EventGetWithResponse request
	EventGetWithResponse(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*EventGetResponse, error)

	// EventUpdateWithBodyWithResponse request with any body
	EventUpdateWithBodyWithResponse(ctx context.Context, eventMark EventMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventUpdateResponse, error)

	EventUpdateWithResponse(ctx context.Context, eventMark EventMarkParam, body EventUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventUpdateResponse, error)

	// EventParticipantRemoveWithResponse request
	EventParticipantRemoveWithResponse(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*EventParticipantRemoveResponse, error)

	// EventParticipantUpdateWithBodyWithResponse request with any body
	EventParticipantUpdateWithBodyWithResponse(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventParticipantUpdateResponse, error)

	EventParticipantUpdateWithResponse(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, body EventParticipantUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventParticipantUpdateResponse, error)

	// GetInfoWithResponse request
	GetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoResponse, error)

	// BannerGetWithResponse request
	BannerGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BannerGetResponse, error)

	// BannerUploadWithBodyWithResponse request with any body
	BannerUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BannerUploadResponse, error)

	// IconUploadWithBodyWithResponse request with any body
	IconUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IconUploadResponse, error)

	// IconGetWithResponse request
	IconGetWithResponse(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*IconGetResponse, error)

	// InvitationListWithResponse request
	InvitationListWithResponse(ctx context.Context, params *InvitationListParams, reqEditors ...RequestEditorFn) (*InvitationListResponse, error)

	// InvitationCreateWithBodyWithResponse request with any body
	InvitationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvitationCreateResponse, error)

	InvitationCreateWithResponse(ctx context.Context, body InvitationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InvitationCreateResponse, error)

	// InvitationDeleteWithResponse request
	InvitationDeleteWithResponse(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*InvitationDeleteResponse, error)

	// InvitationGetWithResponse request
	InvitationGetWithResponse(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*InvitationGetResponse, error)

	// LikePostRemoveWithResponse request
	LikePostRemoveWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*LikePostRemoveResponse, error)

	// LikePostGetWithResponse request
	LikePostGetWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*LikePostGetResponse, error)

	// LikePostAddWithResponse request
	LikePostAddWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*LikePostAddResponse, error)

	// LikeProfileGetWithResponse request
	LikeProfileGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, params *LikeProfileGetParams, reqEditors ...RequestEditorFn) (*LikeProfileGetResponse, error)

	// LinkListWithResponse request
	LinkListWithResponse(ctx context.Context, params *LinkListParams, reqEditors ...RequestEditorFn) (*LinkListResponse, error)

	// LinkCreateWithBodyWithResponse request with any body
	LinkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LinkCreateResponse, error)

	LinkCreateWithResponse(ctx context.Context, body LinkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LinkCreateResponse, error)

	// LinkGetWithResponse request
	LinkGetWithResponse(ctx context.Context, linkSlug LinkSlugParam, reqEditors ...RequestEditorFn) (*LinkGetResponse, error)

	// NodeListWithResponse request
	NodeListWithResponse(ctx context.Context, params *NodeListParams, reqEditors ...RequestEditorFn) (*NodeListResponse, error)

	// NodeCreateWithBodyWithResponse request with any body
	NodeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeCreateResponse, error)

	NodeCreateWithResponse(ctx context.Context, body NodeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeCreateResponse, error)

	// NodeDeleteWithResponse request
	NodeDeleteWithResponse(ctx context.Context, nodeSlug NodeSlugParam, params *NodeDeleteParams, reqEditors ...RequestEditorFn) (*NodeDeleteResponse, error)

	// NodeGetWithResponse request
	NodeGetWithResponse(ctx context.Context, nodeSlug NodeSlugParam, params *NodeGetParams, reqEditors ...RequestEditorFn) (*NodeGetResponse, error)

	// NodeUpdateWithBodyWithResponse request with any body
	NodeUpdateWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdateResponse, error)

	NodeUpdateWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdateResponse, error)

	// NodeRemoveAssetWithResponse request
	NodeRemoveAssetWithResponse(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*NodeRemoveAssetResponse, error)

	// NodeAddAssetWithResponse request
	NodeAddAssetWithResponse(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*NodeAddAssetResponse, error)

	// NodeListChildrenWithResponse request
	NodeListChildrenWithResponse(ctx context.Context, nodeSlug NodeSlugParam, params *NodeListChildrenParams, reqEditors ...RequestEditorFn) (*NodeListChildrenResponse, error)

	// NodeUpdateChildrenPropertySchemaWithBodyWithResponse request with any body
	NodeUpdateChildrenPropertySchemaWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdateChildrenPropertySchemaResponse, error)

	NodeUpdateChildrenPropertySchemaWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateChildrenPropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdateChildrenPropertySchemaResponse, error)

	// NodeGenerateContentWithBodyWithResponse request with any body
	NodeGenerateContentWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeGenerateContentResponse, error)

	NodeGenerateContentWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeGenerateContentResponse, error)

	// NodeRemoveNodeWithResponse request
	NodeRemoveNodeWithResponse(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*NodeRemoveNodeResponse, error)

	// NodeAddNodeWithResponse request
	NodeAddNodeWithResponse(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*NodeAddNodeResponse, error)

	// NodeUpdatePositionWithBodyWithResponse request with any body
	NodeUpdatePositionWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdatePositionResponse, error)

	NodeUpdatePositionWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdatePositionResponse, error)

	// NodeUpdatePropertiesWithBodyWithResponse request with any body
	NodeUpdatePropertiesWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdatePropertiesResponse, error)

	NodeUpdatePropertiesWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdatePropertiesResponse, error)

	// NodeUpdatePropertySchemaWithBodyWithResponse request with any body
	NodeUpdatePropertySchemaWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdatePropertySchemaResponse, error)

	NodeUpdatePropertySchemaWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdatePropertySchemaResponse, error)

	// NodeGenerateTagsWithBodyWithResponse request with any body
	NodeGenerateTagsWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeGenerateTagsResponse, error)

	NodeGenerateTagsWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeGenerateTagsResponse, error)

	// NodeGenerateTitleWithBodyWithResponse request with any body
	NodeGenerateTitleWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeGenerateTitleResponse, error)

	NodeGenerateTitleWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeGenerateTitleResponse, error)

	// NodeUpdateVisibilityWithBodyWithResponse request with any body
	NodeUpdateVisibilityWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdateVisibilityResponse, error)

	NodeUpdateVisibilityWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdateVisibilityResponse, error)

	// NotificationListWithResponse request
	NotificationListWithResponse(ctx context.Context, params *NotificationListParams, reqEditors ...RequestEditorFn) (*NotificationListResponse, error)

	// NotificationUpdateWithBodyWithResponse request with any body
	NotificationUpdateWithBodyWithResponse(ctx context.Context, notificationId NotificationIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationUpdateResponse, error)

	NotificationUpdateWithResponse(ctx context.Context, notificationId NotificationIDParam, body NotificationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationUpdateResponse, error)

	// GetSpecWithResponse request
	GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error)

	// PostDeleteWithResponse request
	PostDeleteWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*PostDeleteResponse, error)

	// PostUpdateWithBodyWithResponse request with any body
	PostUpdateWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error)

	PostUpdateWithResponse(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error)

	// PostReactAddWithBodyWithResponse request with any body
	PostReactAddWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error)

	PostReactAddWithResponse(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error)

	// PostReactRemoveWithResponse request
	PostReactRemoveWithResponse(ctx context.Context, postId PostIDParam, reactId ReactIDParam, reqEditors ...RequestEditorFn) (*PostReactRemoveResponse, error)

	// ProfileListWithResponse request
	ProfileListWithResponse(ctx context.Context, params *ProfileListParams, reqEditors ...RequestEditorFn) (*ProfileListResponse, error)

	// ProfileGetWithResponse request
	ProfileGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileGetResponse, error)

	// ProfileFollowersRemoveWithResponse request
	ProfileFollowersRemoveWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileFollowersRemoveResponse, error)

	// ProfileFollowersGetWithResponse request
	ProfileFollowersGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowersGetParams, reqEditors ...RequestEditorFn) (*ProfileFollowersGetResponse, error)

	// ProfileFollowersAddWithResponse request
	ProfileFollowersAddWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileFollowersAddResponse, error)

	// ProfileFollowingGetWithResponse request
	ProfileFollowingGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowingGetParams, reqEditors ...RequestEditorFn) (*ProfileFollowingGetResponse, error)

	// RoleListWithResponse request
	RoleListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RoleListResponse, error)

	// RoleCreateWithBodyWithResponse request with any body
	RoleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoleCreateResponse, error)

	RoleCreateWithResponse(ctx context.Context, body RoleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RoleCreateResponse, error)

	// RoleDeleteWithResponse request
	RoleDeleteWithResponse(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*RoleDeleteResponse, error)

	// RoleGetWithResponse request
	RoleGetWithResponse(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*RoleGetResponse, error)

	// RoleUpdateWithBodyWithResponse request with any body
	RoleUpdateWithBodyWithResponse(ctx context.Context, roleId RoleIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoleUpdateResponse, error)

	RoleUpdateWithResponse(ctx context.Context, roleId RoleIDParam, body RoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RoleUpdateResponse, error)

	// TagListWithResponse request
	TagListWithResponse(ctx context.Context, params *TagListParams, reqEditors ...RequestEditorFn) (*TagListResponse, error)

	// TagGetWithResponse request
	TagGetWithResponse(ctx context.Context, tagName TagNameParam, reqEditors ...RequestEditorFn) (*TagGetResponse, error)

	// ThreadListWithResponse request
	ThreadListWithResponse(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*ThreadListResponse, error)

	// ThreadCreateWithBodyWithResponse request with any body
	ThreadCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error)

	ThreadCreateWithResponse(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error)

	// ThreadDeleteWithResponse request
	ThreadDeleteWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadDeleteResponse, error)

	// ThreadGetWithResponse request
	ThreadGetWithResponse(ctx context.Context, threadMark ThreadMarkParam, params *ThreadGetParams, reqEditors ...RequestEditorFn) (*ThreadGetResponse, error)

	// ThreadUpdateWithBodyWithResponse request with any body
	ThreadUpdateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error)

	ThreadUpdateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error)

	// ReplyCreateWithBodyWithResponse request with any body
	ReplyCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplyCreateResponse, error)

	ReplyCreateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body ReplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplyCreateResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type AccountGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountAuthProviderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountAuthProviderListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountAuthProviderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountAuthProviderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountAuthMethodDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountAuthProviderListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountAuthMethodDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountAuthMethodDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountSetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountSetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountSetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountEmailAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountEmailUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountEmailAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountEmailAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountEmailRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountEmailRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountEmailRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountGetAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountGetAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountGetAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountRoleRemoveBadgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountRoleRemoveBadgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountRoleRemoveBadgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountRoleSetBadgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountRoleSetBadgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountRoleSetBadgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccountViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminSettingsUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AdminSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAccessKeyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminAccessKeyListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AdminAccessKeyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAccessKeyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAccessKeyDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AdminAccessKeyDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAccessKeyDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAccountBanRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AdminAccountBanRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAccountBanRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAccountBanCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AdminAccountBanCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAccountBanCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssetUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetUploadOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AssetUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssetUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssetGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AssetGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssetGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthProviderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthProviderListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthProviderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessKeyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessKeyListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccessKeyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessKeyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessKeyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessKeyCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccessKeyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessKeyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessKeyDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AccessKeyDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessKeyDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordResetRequestEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordResetRequestEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordResetRequestEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthEmailPasswordSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthEmailPasswordSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthEmailPasswordSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthEmailPasswordSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthEmailPasswordSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthEmailPasswordSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthEmailSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthEmailSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthEmailSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthEmailSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthEmailSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthEmailSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthEmailVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthEmailVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthEmailVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthProviderLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthProviderLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OAuthProviderCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r OAuthProviderCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OAuthProviderCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AuthPasswordSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PhoneRequestCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PhoneRequestCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PhoneRequestCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PhoneSubmitCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PhoneSubmitCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PhoneSubmitCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnGetAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebAuthnGetAssertionOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r WebAuthnGetAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnGetAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnMakeCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthSuccessOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r WebAuthnMakeCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnMakeCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebAuthnRequestCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebAuthnRequestCredentialOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r WebAuthnRequestCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebAuthnRequestCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CategoryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CategoryCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryDeleteOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CategoryDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CategoryGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CategoryUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoryUpdatePositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CategoryUpdatePositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoryUpdatePositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionRemoveNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionRemoveNodeOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionRemoveNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionRemoveNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionAddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionAddNodeOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionAddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionAddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionRemovePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionRemovePostOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionRemovePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionRemovePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionAddPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionAddPostOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CollectionAddPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionAddPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatagraphSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatagraphSearchOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DatagraphSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatagraphSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatagraphAskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DatagraphAskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatagraphAskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDocsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r EventListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r EventCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r EventDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r EventGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r EventUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventParticipantRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r EventParticipantRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventParticipantRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventParticipantUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r EventParticipantUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventParticipantUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetInfoOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BannerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r BannerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BannerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BannerUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r BannerUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BannerUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IconUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r IconUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IconUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IconGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r IconGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IconGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvitationListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvitationListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r InvitationListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvitationListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvitationCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvitationCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r InvitationCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvitationCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvitationDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r InvitationDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvitationDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvitationGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvitationGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r InvitationGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvitationGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LikePostRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LikePostRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LikePostRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LikePostGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LikePostGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LikePostGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LikePostGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LikePostAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LikePostAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LikePostAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LikeProfileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LikeProfileGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LikeProfileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LikeProfileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LinkListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LinkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LinkGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeDeleteOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeRemoveAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeRemoveAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeRemoveAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeAddAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeAddAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeAddAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeListChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeListChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeListChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeUpdateChildrenPropertySchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdatePropertySchemaOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeUpdateChildrenPropertySchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeUpdateChildrenPropertySchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeGenerateContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeGenerateContentOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeGenerateContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeGenerateContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeRemoveNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeRemoveChildOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeRemoveNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeRemoveNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeAddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeAddChildOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeAddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeAddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeUpdatePositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeUpdatePositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeUpdatePositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeUpdatePropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdatePropertiesOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeUpdatePropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeUpdatePropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeUpdatePropertySchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdatePropertySchemaOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeUpdatePropertySchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeUpdatePropertySchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeGenerateTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeGenerateTagsOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeGenerateTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeGenerateTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeGenerateTitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeGenerateTitleOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeGenerateTitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeGenerateTitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeUpdateVisibilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NodeUpdateVisibilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeUpdateVisibilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NotificationListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r NotificationUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpecResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	ApplicationvndOaiOpenapiJSONVersion310200 *map[string]interface{}
	JSONDefault                               *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReactAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostReactAddOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostReactAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReactAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReactRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostReactRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReactRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ProfileListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ProfileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileFollowersRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ProfileFollowersRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileFollowersRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileFollowersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileFollowersGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ProfileFollowersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileFollowersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileFollowersAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ProfileFollowersAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileFollowersAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileFollowingGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileFollowingGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ProfileFollowingGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileFollowingGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r RoleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r RoleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoleDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r RoleDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoleDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoleGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r RoleGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoleGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r RoleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r TagListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagGetOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r TagGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreadListOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ThreadListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreadCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ThreadCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ThreadDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreadGet
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ThreadGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreadUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreadUpdateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ThreadUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreadUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReplyCreateOK
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ReplyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccountGetWithResponse request returning *AccountGetResponse
func (c *ClientWithResponses) AccountGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountGetResponse, error) {
	rsp, err := c.AccountGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountGetResponse(rsp)
}

// AccountUpdateWithBodyWithResponse request with arbitrary body returning *AccountUpdateResponse
func (c *ClientWithResponses) AccountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error) {
	rsp, err := c.AccountUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountUpdateWithResponse(ctx context.Context, body AccountUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountUpdateResponse, error) {
	rsp, err := c.AccountUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountUpdateResponse(rsp)
}

// AccountAuthProviderListWithResponse request returning *AccountAuthProviderListResponse
func (c *ClientWithResponses) AccountAuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountAuthProviderListResponse, error) {
	rsp, err := c.AccountAuthProviderList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountAuthProviderListResponse(rsp)
}

// AccountAuthMethodDeleteWithResponse request returning *AccountAuthMethodDeleteResponse
func (c *ClientWithResponses) AccountAuthMethodDeleteWithResponse(ctx context.Context, authMethodId string, reqEditors ...RequestEditorFn) (*AccountAuthMethodDeleteResponse, error) {
	rsp, err := c.AccountAuthMethodDelete(ctx, authMethodId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountAuthMethodDeleteResponse(rsp)
}

// AccountSetAvatarWithBodyWithResponse request with arbitrary body returning *AccountSetAvatarResponse
func (c *ClientWithResponses) AccountSetAvatarWithBodyWithResponse(ctx context.Context, params *AccountSetAvatarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountSetAvatarResponse, error) {
	rsp, err := c.AccountSetAvatarWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountSetAvatarResponse(rsp)
}

// AccountEmailAddWithBodyWithResponse request with arbitrary body returning *AccountEmailAddResponse
func (c *ClientWithResponses) AccountEmailAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountEmailAddResponse, error) {
	rsp, err := c.AccountEmailAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountEmailAddResponse(rsp)
}

func (c *ClientWithResponses) AccountEmailAddWithResponse(ctx context.Context, body AccountEmailAddJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountEmailAddResponse, error) {
	rsp, err := c.AccountEmailAdd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountEmailAddResponse(rsp)
}

// AccountEmailRemoveWithResponse request returning *AccountEmailRemoveResponse
func (c *ClientWithResponses) AccountEmailRemoveWithResponse(ctx context.Context, emailAddressId EmailAddressIDParam, reqEditors ...RequestEditorFn) (*AccountEmailRemoveResponse, error) {
	rsp, err := c.AccountEmailRemove(ctx, emailAddressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountEmailRemoveResponse(rsp)
}

// AccountGetAvatarWithResponse request returning *AccountGetAvatarResponse
func (c *ClientWithResponses) AccountGetAvatarWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AccountGetAvatarResponse, error) {
	rsp, err := c.AccountGetAvatar(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountGetAvatarResponse(rsp)
}

// AccountRemoveRoleWithResponse request returning *AccountRemoveRoleResponse
func (c *ClientWithResponses) AccountRemoveRoleWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountRemoveRoleResponse, error) {
	rsp, err := c.AccountRemoveRole(ctx, accountHandle, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountRemoveRoleResponse(rsp)
}

// AccountAddRoleWithResponse request returning *AccountAddRoleResponse
func (c *ClientWithResponses) AccountAddRoleWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountAddRoleResponse, error) {
	rsp, err := c.AccountAddRole(ctx, accountHandle, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountAddRoleResponse(rsp)
}

// AccountRoleRemoveBadgeWithResponse request returning *AccountRoleRemoveBadgeResponse
func (c *ClientWithResponses) AccountRoleRemoveBadgeWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountRoleRemoveBadgeResponse, error) {
	rsp, err := c.AccountRoleRemoveBadge(ctx, accountHandle, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountRoleRemoveBadgeResponse(rsp)
}

// AccountRoleSetBadgeWithResponse request returning *AccountRoleSetBadgeResponse
func (c *ClientWithResponses) AccountRoleSetBadgeWithResponse(ctx context.Context, accountHandle AccountHandleParam, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*AccountRoleSetBadgeResponse, error) {
	rsp, err := c.AccountRoleSetBadge(ctx, accountHandle, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountRoleSetBadgeResponse(rsp)
}

// AccountViewWithResponse request returning *AccountViewResponse
func (c *ClientWithResponses) AccountViewWithResponse(ctx context.Context, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*AccountViewResponse, error) {
	rsp, err := c.AccountView(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountViewResponse(rsp)
}

// AdminSettingsUpdateWithBodyWithResponse request with arbitrary body returning *AdminSettingsUpdateResponse
func (c *ClientWithResponses) AdminSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error) {
	rsp, err := c.AdminSettingsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) AdminSettingsUpdateWithResponse(ctx context.Context, body AdminSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminSettingsUpdateResponse, error) {
	rsp, err := c.AdminSettingsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminSettingsUpdateResponse(rsp)
}

// AdminAccessKeyListWithResponse request returning *AdminAccessKeyListResponse
func (c *ClientWithResponses) AdminAccessKeyListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminAccessKeyListResponse, error) {
	rsp, err := c.AdminAccessKeyList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAccessKeyListResponse(rsp)
}

// AdminAccessKeyDeleteWithResponse request returning *AdminAccessKeyDeleteResponse
func (c *ClientWithResponses) AdminAccessKeyDeleteWithResponse(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*AdminAccessKeyDeleteResponse, error) {
	rsp, err := c.AdminAccessKeyDelete(ctx, accessKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAccessKeyDeleteResponse(rsp)
}

// AdminAccountBanRemoveWithResponse request returning *AdminAccountBanRemoveResponse
func (c *ClientWithResponses) AdminAccountBanRemoveWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AdminAccountBanRemoveResponse, error) {
	rsp, err := c.AdminAccountBanRemove(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAccountBanRemoveResponse(rsp)
}

// AdminAccountBanCreateWithResponse request returning *AdminAccountBanCreateResponse
func (c *ClientWithResponses) AdminAccountBanCreateWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*AdminAccountBanCreateResponse, error) {
	rsp, err := c.AdminAccountBanCreate(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAccountBanCreateResponse(rsp)
}

// AssetUploadWithBodyWithResponse request with arbitrary body returning *AssetUploadResponse
func (c *ClientWithResponses) AssetUploadWithBodyWithResponse(ctx context.Context, params *AssetUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssetUploadResponse, error) {
	rsp, err := c.AssetUploadWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssetUploadResponse(rsp)
}

// AssetGetWithResponse request returning *AssetGetResponse
func (c *ClientWithResponses) AssetGetWithResponse(ctx context.Context, assetFilename AssetPathParam, reqEditors ...RequestEditorFn) (*AssetGetResponse, error) {
	rsp, err := c.AssetGet(ctx, assetFilename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssetGetResponse(rsp)
}

// AuthProviderListWithResponse request returning *AuthProviderListResponse
func (c *ClientWithResponses) AuthProviderListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderListResponse, error) {
	rsp, err := c.AuthProviderList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthProviderListResponse(rsp)
}

// AccessKeyListWithResponse request returning *AccessKeyListResponse
func (c *ClientWithResponses) AccessKeyListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccessKeyListResponse, error) {
	rsp, err := c.AccessKeyList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessKeyListResponse(rsp)
}

// AccessKeyCreateWithBodyWithResponse request with arbitrary body returning *AccessKeyCreateResponse
func (c *ClientWithResponses) AccessKeyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessKeyCreateResponse, error) {
	rsp, err := c.AccessKeyCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessKeyCreateResponse(rsp)
}

func (c *ClientWithResponses) AccessKeyCreateWithResponse(ctx context.Context, body AccessKeyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessKeyCreateResponse, error) {
	rsp, err := c.AccessKeyCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessKeyCreateResponse(rsp)
}

// AccessKeyDeleteWithResponse request returning *AccessKeyDeleteResponse
func (c *ClientWithResponses) AccessKeyDeleteWithResponse(ctx context.Context, accessKeyId AccessKeyIDParam, reqEditors ...RequestEditorFn) (*AccessKeyDeleteResponse, error) {
	rsp, err := c.AccessKeyDelete(ctx, accessKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessKeyDeleteResponse(rsp)
}

// AuthPasswordResetRequestEmailWithBodyWithResponse request with arbitrary body returning *AuthPasswordResetRequestEmailResponse
func (c *ClientWithResponses) AuthPasswordResetRequestEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetRequestEmailResponse, error) {
	rsp, err := c.AuthPasswordResetRequestEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetRequestEmailResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordResetRequestEmailWithResponse(ctx context.Context, body AuthPasswordResetRequestEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetRequestEmailResponse, error) {
	rsp, err := c.AuthPasswordResetRequestEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetRequestEmailResponse(rsp)
}

// AuthEmailPasswordSigninWithBodyWithResponse request with arbitrary body returning *AuthEmailPasswordSigninResponse
func (c *ClientWithResponses) AuthEmailPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSigninResponse, error) {
	rsp, err := c.AuthEmailPasswordSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailPasswordSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthEmailPasswordSigninWithResponse(ctx context.Context, body AuthEmailPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSigninResponse, error) {
	rsp, err := c.AuthEmailPasswordSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailPasswordSigninResponse(rsp)
}

// AuthEmailPasswordSignupWithBodyWithResponse request with arbitrary body returning *AuthEmailPasswordSignupResponse
func (c *ClientWithResponses) AuthEmailPasswordSignupWithBodyWithResponse(ctx context.Context, params *AuthEmailPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSignupResponse, error) {
	rsp, err := c.AuthEmailPasswordSignupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailPasswordSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthEmailPasswordSignupWithResponse(ctx context.Context, params *AuthEmailPasswordSignupParams, body AuthEmailPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailPasswordSignupResponse, error) {
	rsp, err := c.AuthEmailPasswordSignup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailPasswordSignupResponse(rsp)
}

// AuthEmailSigninWithBodyWithResponse request with arbitrary body returning *AuthEmailSigninResponse
func (c *ClientWithResponses) AuthEmailSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailSigninResponse, error) {
	rsp, err := c.AuthEmailSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthEmailSigninWithResponse(ctx context.Context, body AuthEmailSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailSigninResponse, error) {
	rsp, err := c.AuthEmailSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailSigninResponse(rsp)
}

// AuthEmailSignupWithBodyWithResponse request with arbitrary body returning *AuthEmailSignupResponse
func (c *ClientWithResponses) AuthEmailSignupWithBodyWithResponse(ctx context.Context, params *AuthEmailSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailSignupResponse, error) {
	rsp, err := c.AuthEmailSignupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthEmailSignupWithResponse(ctx context.Context, params *AuthEmailSignupParams, body AuthEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailSignupResponse, error) {
	rsp, err := c.AuthEmailSignup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailSignupResponse(rsp)
}

// AuthEmailVerifyWithBodyWithResponse request with arbitrary body returning *AuthEmailVerifyResponse
func (c *ClientWithResponses) AuthEmailVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthEmailVerifyResponse, error) {
	rsp, err := c.AuthEmailVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailVerifyResponse(rsp)
}

func (c *ClientWithResponses) AuthEmailVerifyWithResponse(ctx context.Context, body AuthEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthEmailVerifyResponse, error) {
	rsp, err := c.AuthEmailVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthEmailVerifyResponse(rsp)
}

// AuthProviderLogoutWithResponse request returning *AuthProviderLogoutResponse
func (c *ClientWithResponses) AuthProviderLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthProviderLogoutResponse, error) {
	rsp, err := c.AuthProviderLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthProviderLogoutResponse(rsp)
}

// OAuthProviderCallbackWithBodyWithResponse request with arbitrary body returning *OAuthProviderCallbackResponse
func (c *ClientWithResponses) OAuthProviderCallbackWithBodyWithResponse(ctx context.Context, oauthProvider OAuthProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error) {
	rsp, err := c.OAuthProviderCallbackWithBody(ctx, oauthProvider, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOAuthProviderCallbackResponse(rsp)
}

func (c *ClientWithResponses) OAuthProviderCallbackWithResponse(ctx context.Context, oauthProvider OAuthProvider, body OAuthProviderCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OAuthProviderCallbackResponse, error) {
	rsp, err := c.OAuthProviderCallback(ctx, oauthProvider, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOAuthProviderCallbackResponse(rsp)
}

// AuthPasswordUpdateWithBodyWithResponse request with arbitrary body returning *AuthPasswordUpdateResponse
func (c *ClientWithResponses) AuthPasswordUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordUpdateResponse, error) {
	rsp, err := c.AuthPasswordUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordUpdateResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordUpdateWithResponse(ctx context.Context, body AuthPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordUpdateResponse, error) {
	rsp, err := c.AuthPasswordUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordUpdateResponse(rsp)
}

// AuthPasswordCreateWithBodyWithResponse request with arbitrary body returning *AuthPasswordCreateResponse
func (c *ClientWithResponses) AuthPasswordCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordCreateResponse, error) {
	rsp, err := c.AuthPasswordCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordCreateResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordCreateWithResponse(ctx context.Context, body AuthPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordCreateResponse, error) {
	rsp, err := c.AuthPasswordCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordCreateResponse(rsp)
}

// AuthPasswordResetWithBodyWithResponse request with arbitrary body returning *AuthPasswordResetResponse
func (c *ClientWithResponses) AuthPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetResponse, error) {
	rsp, err := c.AuthPasswordResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordResetWithResponse(ctx context.Context, body AuthPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetResponse, error) {
	rsp, err := c.AuthPasswordReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetResponse(rsp)
}

// AuthPasswordSigninWithBodyWithResponse request with arbitrary body returning *AuthPasswordSigninResponse
func (c *ClientWithResponses) AuthPasswordSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSigninWithResponse(ctx context.Context, body AuthPasswordSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSigninResponse, error) {
	rsp, err := c.AuthPasswordSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSigninResponse(rsp)
}

// AuthPasswordSignupWithBodyWithResponse request with arbitrary body returning *AuthPasswordSignupResponse
func (c *ClientWithResponses) AuthPasswordSignupWithBodyWithResponse(ctx context.Context, params *AuthPasswordSignupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordSignupWithResponse(ctx context.Context, params *AuthPasswordSignupParams, body AuthPasswordSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordSignupResponse, error) {
	rsp, err := c.AuthPasswordSignup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordSignupResponse(rsp)
}

// PhoneRequestCodeWithBodyWithResponse request with arbitrary body returning *PhoneRequestCodeResponse
func (c *ClientWithResponses) PhoneRequestCodeWithBodyWithResponse(ctx context.Context, params *PhoneRequestCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error) {
	rsp, err := c.PhoneRequestCodeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneRequestCodeResponse(rsp)
}

func (c *ClientWithResponses) PhoneRequestCodeWithResponse(ctx context.Context, params *PhoneRequestCodeParams, body PhoneRequestCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneRequestCodeResponse, error) {
	rsp, err := c.PhoneRequestCode(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneRequestCodeResponse(rsp)
}

// PhoneSubmitCodeWithBodyWithResponse request with arbitrary body returning *PhoneSubmitCodeResponse
func (c *ClientWithResponses) PhoneSubmitCodeWithBodyWithResponse(ctx context.Context, accountHandle AccountHandleParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error) {
	rsp, err := c.PhoneSubmitCodeWithBody(ctx, accountHandle, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneSubmitCodeResponse(rsp)
}

func (c *ClientWithResponses) PhoneSubmitCodeWithResponse(ctx context.Context, accountHandle AccountHandleParam, body PhoneSubmitCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PhoneSubmitCodeResponse, error) {
	rsp, err := c.PhoneSubmitCode(ctx, accountHandle, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePhoneSubmitCodeResponse(rsp)
}

// WebAuthnMakeAssertionWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeAssertionResponse
func (c *ClientWithResponses) WebAuthnMakeAssertionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeAssertionWithResponse(ctx context.Context, body WebAuthnMakeAssertionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeAssertionResponse, error) {
	rsp, err := c.WebAuthnMakeAssertion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeAssertionResponse(rsp)
}

// WebAuthnGetAssertionWithResponse request returning *WebAuthnGetAssertionResponse
func (c *ClientWithResponses) WebAuthnGetAssertionWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnGetAssertionResponse, error) {
	rsp, err := c.WebAuthnGetAssertion(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnGetAssertionResponse(rsp)
}

// WebAuthnMakeCredentialWithBodyWithResponse request with arbitrary body returning *WebAuthnMakeCredentialResponse
func (c *ClientWithResponses) WebAuthnMakeCredentialWithBodyWithResponse(ctx context.Context, params *WebAuthnMakeCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredentialWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

func (c *ClientWithResponses) WebAuthnMakeCredentialWithResponse(ctx context.Context, params *WebAuthnMakeCredentialParams, body WebAuthnMakeCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*WebAuthnMakeCredentialResponse, error) {
	rsp, err := c.WebAuthnMakeCredential(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnMakeCredentialResponse(rsp)
}

// WebAuthnRequestCredentialWithResponse request returning *WebAuthnRequestCredentialResponse
func (c *ClientWithResponses) WebAuthnRequestCredentialWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*WebAuthnRequestCredentialResponse, error) {
	rsp, err := c.WebAuthnRequestCredential(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebAuthnRequestCredentialResponse(rsp)
}

// CategoryListWithResponse request returning *CategoryListResponse
func (c *ClientWithResponses) CategoryListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoryListResponse, error) {
	rsp, err := c.CategoryList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryListResponse(rsp)
}

// CategoryCreateWithBodyWithResponse request with arbitrary body returning *CategoryCreateResponse
func (c *ClientWithResponses) CategoryCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error) {
	rsp, err := c.CategoryCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryCreateResponse(rsp)
}

func (c *ClientWithResponses) CategoryCreateWithResponse(ctx context.Context, body CategoryCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryCreateResponse, error) {
	rsp, err := c.CategoryCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryCreateResponse(rsp)
}

// CategoryDeleteWithBodyWithResponse request with arbitrary body returning *CategoryDeleteResponse
func (c *ClientWithResponses) CategoryDeleteWithBodyWithResponse(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryDeleteResponse, error) {
	rsp, err := c.CategoryDeleteWithBody(ctx, categorySlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryDeleteResponse(rsp)
}

func (c *ClientWithResponses) CategoryDeleteWithResponse(ctx context.Context, categorySlug CategorySlugParam, body CategoryDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryDeleteResponse, error) {
	rsp, err := c.CategoryDelete(ctx, categorySlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryDeleteResponse(rsp)
}

// CategoryGetWithResponse request returning *CategoryGetResponse
func (c *ClientWithResponses) CategoryGetWithResponse(ctx context.Context, categorySlug CategorySlugParam, reqEditors ...RequestEditorFn) (*CategoryGetResponse, error) {
	rsp, err := c.CategoryGet(ctx, categorySlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryGetResponse(rsp)
}

// CategoryUpdateWithBodyWithResponse request with arbitrary body returning *CategoryUpdateResponse
func (c *ClientWithResponses) CategoryUpdateWithBodyWithResponse(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error) {
	rsp, err := c.CategoryUpdateWithBody(ctx, categorySlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdateResponse(rsp)
}

func (c *ClientWithResponses) CategoryUpdateWithResponse(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdateResponse, error) {
	rsp, err := c.CategoryUpdate(ctx, categorySlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdateResponse(rsp)
}

// CategoryUpdatePositionWithBodyWithResponse request with arbitrary body returning *CategoryUpdatePositionResponse
func (c *ClientWithResponses) CategoryUpdatePositionWithBodyWithResponse(ctx context.Context, categorySlug CategorySlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoryUpdatePositionResponse, error) {
	rsp, err := c.CategoryUpdatePositionWithBody(ctx, categorySlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdatePositionResponse(rsp)
}

func (c *ClientWithResponses) CategoryUpdatePositionWithResponse(ctx context.Context, categorySlug CategorySlugParam, body CategoryUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoryUpdatePositionResponse, error) {
	rsp, err := c.CategoryUpdatePosition(ctx, categorySlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoryUpdatePositionResponse(rsp)
}

// CollectionListWithResponse request returning *CollectionListResponse
func (c *ClientWithResponses) CollectionListWithResponse(ctx context.Context, params *CollectionListParams, reqEditors ...RequestEditorFn) (*CollectionListResponse, error) {
	rsp, err := c.CollectionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionListResponse(rsp)
}

// CollectionCreateWithBodyWithResponse request with arbitrary body returning *CollectionCreateResponse
func (c *ClientWithResponses) CollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error) {
	rsp, err := c.CollectionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionCreateResponse(rsp)
}

func (c *ClientWithResponses) CollectionCreateWithResponse(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error) {
	rsp, err := c.CollectionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionCreateResponse(rsp)
}

// CollectionDeleteWithResponse request returning *CollectionDeleteResponse
func (c *ClientWithResponses) CollectionDeleteWithResponse(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*CollectionDeleteResponse, error) {
	rsp, err := c.CollectionDelete(ctx, collectionMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionDeleteResponse(rsp)
}

// CollectionGetWithResponse request returning *CollectionGetResponse
func (c *ClientWithResponses) CollectionGetWithResponse(ctx context.Context, collectionMark CollectionMarkParam, reqEditors ...RequestEditorFn) (*CollectionGetResponse, error) {
	rsp, err := c.CollectionGet(ctx, collectionMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionGetResponse(rsp)
}

// CollectionUpdateWithBodyWithResponse request with arbitrary body returning *CollectionUpdateResponse
func (c *ClientWithResponses) CollectionUpdateWithBodyWithResponse(ctx context.Context, collectionMark CollectionMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error) {
	rsp, err := c.CollectionUpdateWithBody(ctx, collectionMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionUpdateResponse(rsp)
}

func (c *ClientWithResponses) CollectionUpdateWithResponse(ctx context.Context, collectionMark CollectionMarkParam, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error) {
	rsp, err := c.CollectionUpdate(ctx, collectionMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionUpdateResponse(rsp)
}

// CollectionRemoveNodeWithResponse request returning *CollectionRemoveNodeResponse
func (c *ClientWithResponses) CollectionRemoveNodeWithResponse(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*CollectionRemoveNodeResponse, error) {
	rsp, err := c.CollectionRemoveNode(ctx, collectionMark, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionRemoveNodeResponse(rsp)
}

// CollectionAddNodeWithResponse request returning *CollectionAddNodeResponse
func (c *ClientWithResponses) CollectionAddNodeWithResponse(ctx context.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam, reqEditors ...RequestEditorFn) (*CollectionAddNodeResponse, error) {
	rsp, err := c.CollectionAddNode(ctx, collectionMark, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionAddNodeResponse(rsp)
}

// CollectionRemovePostWithResponse request returning *CollectionRemovePostResponse
func (c *ClientWithResponses) CollectionRemovePostWithResponse(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionRemovePostResponse, error) {
	rsp, err := c.CollectionRemovePost(ctx, collectionMark, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionRemovePostResponse(rsp)
}

// CollectionAddPostWithResponse request returning *CollectionAddPostResponse
func (c *ClientWithResponses) CollectionAddPostWithResponse(ctx context.Context, collectionMark CollectionMarkParam, postId PostIDParam, reqEditors ...RequestEditorFn) (*CollectionAddPostResponse, error) {
	rsp, err := c.CollectionAddPost(ctx, collectionMark, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionAddPostResponse(rsp)
}

// DatagraphSearchWithResponse request returning *DatagraphSearchResponse
func (c *ClientWithResponses) DatagraphSearchWithResponse(ctx context.Context, params *DatagraphSearchParams, reqEditors ...RequestEditorFn) (*DatagraphSearchResponse, error) {
	rsp, err := c.DatagraphSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatagraphSearchResponse(rsp)
}

// DatagraphAskWithResponse request returning *DatagraphAskResponse
func (c *ClientWithResponses) DatagraphAskWithResponse(ctx context.Context, params *DatagraphAskParams, reqEditors ...RequestEditorFn) (*DatagraphAskResponse, error) {
	rsp, err := c.DatagraphAsk(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatagraphAskResponse(rsp)
}

// GetDocsWithResponse request returning *GetDocsResponse
func (c *ClientWithResponses) GetDocsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocsResponse, error) {
	rsp, err := c.GetDocs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocsResponse(rsp)
}

// EventListWithResponse request returning *EventListResponse
func (c *ClientWithResponses) EventListWithResponse(ctx context.Context, params *EventListParams, reqEditors ...RequestEditorFn) (*EventListResponse, error) {
	rsp, err := c.EventList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventListResponse(rsp)
}

// EventCreateWithBodyWithResponse request with arbitrary body returning *EventCreateResponse
func (c *ClientWithResponses) EventCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventCreateResponse, error) {
	rsp, err := c.EventCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventCreateResponse(rsp)
}

func (c *ClientWithResponses) EventCreateWithResponse(ctx context.Context, body EventCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventCreateResponse, error) {
	rsp, err := c.EventCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventCreateResponse(rsp)
}

// EventDeleteWithResponse request returning *EventDeleteResponse
func (c *ClientWithResponses) EventDeleteWithResponse(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*EventDeleteResponse, error) {
	rsp, err := c.EventDelete(ctx, eventMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventDeleteResponse(rsp)
}

// EventGetWithResponse request returning *EventGetResponse
func (c *ClientWithResponses) EventGetWithResponse(ctx context.Context, eventMark EventMarkParam, reqEditors ...RequestEditorFn) (*EventGetResponse, error) {
	rsp, err := c.EventGet(ctx, eventMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventGetResponse(rsp)
}

// EventUpdateWithBodyWithResponse request with arbitrary body returning *EventUpdateResponse
func (c *ClientWithResponses) EventUpdateWithBodyWithResponse(ctx context.Context, eventMark EventMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventUpdateResponse, error) {
	rsp, err := c.EventUpdateWithBody(ctx, eventMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventUpdateWithResponse(ctx context.Context, eventMark EventMarkParam, body EventUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventUpdateResponse, error) {
	rsp, err := c.EventUpdate(ctx, eventMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventUpdateResponse(rsp)
}

// EventParticipantRemoveWithResponse request returning *EventParticipantRemoveResponse
func (c *ClientWithResponses) EventParticipantRemoveWithResponse(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, reqEditors ...RequestEditorFn) (*EventParticipantRemoveResponse, error) {
	rsp, err := c.EventParticipantRemove(ctx, eventMark, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventParticipantRemoveResponse(rsp)
}

// EventParticipantUpdateWithBodyWithResponse request with arbitrary body returning *EventParticipantUpdateResponse
func (c *ClientWithResponses) EventParticipantUpdateWithBodyWithResponse(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventParticipantUpdateResponse, error) {
	rsp, err := c.EventParticipantUpdateWithBody(ctx, eventMark, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventParticipantUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventParticipantUpdateWithResponse(ctx context.Context, eventMark EventMarkParam, accountId AccountIDParam, body EventParticipantUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventParticipantUpdateResponse, error) {
	rsp, err := c.EventParticipantUpdate(ctx, eventMark, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventParticipantUpdateResponse(rsp)
}

// GetInfoWithResponse request returning *GetInfoResponse
func (c *ClientWithResponses) GetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoResponse, error) {
	rsp, err := c.GetInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInfoResponse(rsp)
}

// BannerGetWithResponse request returning *BannerGetResponse
func (c *ClientWithResponses) BannerGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BannerGetResponse, error) {
	rsp, err := c.BannerGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBannerGetResponse(rsp)
}

// BannerUploadWithBodyWithResponse request with arbitrary body returning *BannerUploadResponse
func (c *ClientWithResponses) BannerUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BannerUploadResponse, error) {
	rsp, err := c.BannerUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBannerUploadResponse(rsp)
}

// IconUploadWithBodyWithResponse request with arbitrary body returning *IconUploadResponse
func (c *ClientWithResponses) IconUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IconUploadResponse, error) {
	rsp, err := c.IconUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIconUploadResponse(rsp)
}

// IconGetWithResponse request returning *IconGetResponse
func (c *ClientWithResponses) IconGetWithResponse(ctx context.Context, iconSize IconGetParamsIconSize, reqEditors ...RequestEditorFn) (*IconGetResponse, error) {
	rsp, err := c.IconGet(ctx, iconSize, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIconGetResponse(rsp)
}

// InvitationListWithResponse request returning *InvitationListResponse
func (c *ClientWithResponses) InvitationListWithResponse(ctx context.Context, params *InvitationListParams, reqEditors ...RequestEditorFn) (*InvitationListResponse, error) {
	rsp, err := c.InvitationList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvitationListResponse(rsp)
}

// InvitationCreateWithBodyWithResponse request with arbitrary body returning *InvitationCreateResponse
func (c *ClientWithResponses) InvitationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvitationCreateResponse, error) {
	rsp, err := c.InvitationCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvitationCreateResponse(rsp)
}

func (c *ClientWithResponses) InvitationCreateWithResponse(ctx context.Context, body InvitationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InvitationCreateResponse, error) {
	rsp, err := c.InvitationCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvitationCreateResponse(rsp)
}

// InvitationDeleteWithResponse request returning *InvitationDeleteResponse
func (c *ClientWithResponses) InvitationDeleteWithResponse(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*InvitationDeleteResponse, error) {
	rsp, err := c.InvitationDelete(ctx, invitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvitationDeleteResponse(rsp)
}

// InvitationGetWithResponse request returning *InvitationGetResponse
func (c *ClientWithResponses) InvitationGetWithResponse(ctx context.Context, invitationId InvitationIDParam, reqEditors ...RequestEditorFn) (*InvitationGetResponse, error) {
	rsp, err := c.InvitationGet(ctx, invitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvitationGetResponse(rsp)
}

// LikePostRemoveWithResponse request returning *LikePostRemoveResponse
func (c *ClientWithResponses) LikePostRemoveWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*LikePostRemoveResponse, error) {
	rsp, err := c.LikePostRemove(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLikePostRemoveResponse(rsp)
}

// LikePostGetWithResponse request returning *LikePostGetResponse
func (c *ClientWithResponses) LikePostGetWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*LikePostGetResponse, error) {
	rsp, err := c.LikePostGet(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLikePostGetResponse(rsp)
}

// LikePostAddWithResponse request returning *LikePostAddResponse
func (c *ClientWithResponses) LikePostAddWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*LikePostAddResponse, error) {
	rsp, err := c.LikePostAdd(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLikePostAddResponse(rsp)
}

// LikeProfileGetWithResponse request returning *LikeProfileGetResponse
func (c *ClientWithResponses) LikeProfileGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, params *LikeProfileGetParams, reqEditors ...RequestEditorFn) (*LikeProfileGetResponse, error) {
	rsp, err := c.LikeProfileGet(ctx, accountHandle, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLikeProfileGetResponse(rsp)
}

// LinkListWithResponse request returning *LinkListResponse
func (c *ClientWithResponses) LinkListWithResponse(ctx context.Context, params *LinkListParams, reqEditors ...RequestEditorFn) (*LinkListResponse, error) {
	rsp, err := c.LinkList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkListResponse(rsp)
}

// LinkCreateWithBodyWithResponse request with arbitrary body returning *LinkCreateResponse
func (c *ClientWithResponses) LinkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LinkCreateResponse, error) {
	rsp, err := c.LinkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkCreateResponse(rsp)
}

func (c *ClientWithResponses) LinkCreateWithResponse(ctx context.Context, body LinkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LinkCreateResponse, error) {
	rsp, err := c.LinkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkCreateResponse(rsp)
}

// LinkGetWithResponse request returning *LinkGetResponse
func (c *ClientWithResponses) LinkGetWithResponse(ctx context.Context, linkSlug LinkSlugParam, reqEditors ...RequestEditorFn) (*LinkGetResponse, error) {
	rsp, err := c.LinkGet(ctx, linkSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkGetResponse(rsp)
}

// NodeListWithResponse request returning *NodeListResponse
func (c *ClientWithResponses) NodeListWithResponse(ctx context.Context, params *NodeListParams, reqEditors ...RequestEditorFn) (*NodeListResponse, error) {
	rsp, err := c.NodeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeListResponse(rsp)
}

// NodeCreateWithBodyWithResponse request with arbitrary body returning *NodeCreateResponse
func (c *ClientWithResponses) NodeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeCreateResponse, error) {
	rsp, err := c.NodeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeCreateResponse(rsp)
}

func (c *ClientWithResponses) NodeCreateWithResponse(ctx context.Context, body NodeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeCreateResponse, error) {
	rsp, err := c.NodeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeCreateResponse(rsp)
}

// NodeDeleteWithResponse request returning *NodeDeleteResponse
func (c *ClientWithResponses) NodeDeleteWithResponse(ctx context.Context, nodeSlug NodeSlugParam, params *NodeDeleteParams, reqEditors ...RequestEditorFn) (*NodeDeleteResponse, error) {
	rsp, err := c.NodeDelete(ctx, nodeSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeDeleteResponse(rsp)
}

// NodeGetWithResponse request returning *NodeGetResponse
func (c *ClientWithResponses) NodeGetWithResponse(ctx context.Context, nodeSlug NodeSlugParam, params *NodeGetParams, reqEditors ...RequestEditorFn) (*NodeGetResponse, error) {
	rsp, err := c.NodeGet(ctx, nodeSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeGetResponse(rsp)
}

// NodeUpdateWithBodyWithResponse request with arbitrary body returning *NodeUpdateResponse
func (c *ClientWithResponses) NodeUpdateWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdateResponse, error) {
	rsp, err := c.NodeUpdateWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdateResponse(rsp)
}

func (c *ClientWithResponses) NodeUpdateWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdateResponse, error) {
	rsp, err := c.NodeUpdate(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdateResponse(rsp)
}

// NodeRemoveAssetWithResponse request returning *NodeRemoveAssetResponse
func (c *ClientWithResponses) NodeRemoveAssetWithResponse(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*NodeRemoveAssetResponse, error) {
	rsp, err := c.NodeRemoveAsset(ctx, nodeSlug, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeRemoveAssetResponse(rsp)
}

// NodeAddAssetWithResponse request returning *NodeAddAssetResponse
func (c *ClientWithResponses) NodeAddAssetWithResponse(ctx context.Context, nodeSlug NodeSlugParam, assetId AssetIDParam, reqEditors ...RequestEditorFn) (*NodeAddAssetResponse, error) {
	rsp, err := c.NodeAddAsset(ctx, nodeSlug, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeAddAssetResponse(rsp)
}

// NodeListChildrenWithResponse request returning *NodeListChildrenResponse
func (c *ClientWithResponses) NodeListChildrenWithResponse(ctx context.Context, nodeSlug NodeSlugParam, params *NodeListChildrenParams, reqEditors ...RequestEditorFn) (*NodeListChildrenResponse, error) {
	rsp, err := c.NodeListChildren(ctx, nodeSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeListChildrenResponse(rsp)
}

// NodeUpdateChildrenPropertySchemaWithBodyWithResponse request with arbitrary body returning *NodeUpdateChildrenPropertySchemaResponse
func (c *ClientWithResponses) NodeUpdateChildrenPropertySchemaWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdateChildrenPropertySchemaResponse, error) {
	rsp, err := c.NodeUpdateChildrenPropertySchemaWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdateChildrenPropertySchemaResponse(rsp)
}

func (c *ClientWithResponses) NodeUpdateChildrenPropertySchemaWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateChildrenPropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdateChildrenPropertySchemaResponse, error) {
	rsp, err := c.NodeUpdateChildrenPropertySchema(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdateChildrenPropertySchemaResponse(rsp)
}

// NodeGenerateContentWithBodyWithResponse request with arbitrary body returning *NodeGenerateContentResponse
func (c *ClientWithResponses) NodeGenerateContentWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeGenerateContentResponse, error) {
	rsp, err := c.NodeGenerateContentWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeGenerateContentResponse(rsp)
}

func (c *ClientWithResponses) NodeGenerateContentWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateContentJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeGenerateContentResponse, error) {
	rsp, err := c.NodeGenerateContent(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeGenerateContentResponse(rsp)
}

// NodeRemoveNodeWithResponse request returning *NodeRemoveNodeResponse
func (c *ClientWithResponses) NodeRemoveNodeWithResponse(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*NodeRemoveNodeResponse, error) {
	rsp, err := c.NodeRemoveNode(ctx, nodeSlug, nodeSlugChild, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeRemoveNodeResponse(rsp)
}

// NodeAddNodeWithResponse request returning *NodeAddNodeResponse
func (c *ClientWithResponses) NodeAddNodeWithResponse(ctx context.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam, reqEditors ...RequestEditorFn) (*NodeAddNodeResponse, error) {
	rsp, err := c.NodeAddNode(ctx, nodeSlug, nodeSlugChild, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeAddNodeResponse(rsp)
}

// NodeUpdatePositionWithBodyWithResponse request with arbitrary body returning *NodeUpdatePositionResponse
func (c *ClientWithResponses) NodeUpdatePositionWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdatePositionResponse, error) {
	rsp, err := c.NodeUpdatePositionWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdatePositionResponse(rsp)
}

func (c *ClientWithResponses) NodeUpdatePositionWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePositionJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdatePositionResponse, error) {
	rsp, err := c.NodeUpdatePosition(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdatePositionResponse(rsp)
}

// NodeUpdatePropertiesWithBodyWithResponse request with arbitrary body returning *NodeUpdatePropertiesResponse
func (c *ClientWithResponses) NodeUpdatePropertiesWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdatePropertiesResponse, error) {
	rsp, err := c.NodeUpdatePropertiesWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdatePropertiesResponse(rsp)
}

func (c *ClientWithResponses) NodeUpdatePropertiesWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdatePropertiesResponse, error) {
	rsp, err := c.NodeUpdateProperties(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdatePropertiesResponse(rsp)
}

// NodeUpdatePropertySchemaWithBodyWithResponse request with arbitrary body returning *NodeUpdatePropertySchemaResponse
func (c *ClientWithResponses) NodeUpdatePropertySchemaWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdatePropertySchemaResponse, error) {
	rsp, err := c.NodeUpdatePropertySchemaWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdatePropertySchemaResponse(rsp)
}

func (c *ClientWithResponses) NodeUpdatePropertySchemaWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdatePropertySchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdatePropertySchemaResponse, error) {
	rsp, err := c.NodeUpdatePropertySchema(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdatePropertySchemaResponse(rsp)
}

// NodeGenerateTagsWithBodyWithResponse request with arbitrary body returning *NodeGenerateTagsResponse
func (c *ClientWithResponses) NodeGenerateTagsWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeGenerateTagsResponse, error) {
	rsp, err := c.NodeGenerateTagsWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeGenerateTagsResponse(rsp)
}

func (c *ClientWithResponses) NodeGenerateTagsWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeGenerateTagsResponse, error) {
	rsp, err := c.NodeGenerateTags(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeGenerateTagsResponse(rsp)
}

// NodeGenerateTitleWithBodyWithResponse request with arbitrary body returning *NodeGenerateTitleResponse
func (c *ClientWithResponses) NodeGenerateTitleWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeGenerateTitleResponse, error) {
	rsp, err := c.NodeGenerateTitleWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeGenerateTitleResponse(rsp)
}

func (c *ClientWithResponses) NodeGenerateTitleWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeGenerateTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeGenerateTitleResponse, error) {
	rsp, err := c.NodeGenerateTitle(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeGenerateTitleResponse(rsp)
}

// NodeUpdateVisibilityWithBodyWithResponse request with arbitrary body returning *NodeUpdateVisibilityResponse
func (c *ClientWithResponses) NodeUpdateVisibilityWithBodyWithResponse(ctx context.Context, nodeSlug NodeSlugParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeUpdateVisibilityResponse, error) {
	rsp, err := c.NodeUpdateVisibilityWithBody(ctx, nodeSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdateVisibilityResponse(rsp)
}

func (c *ClientWithResponses) NodeUpdateVisibilityWithResponse(ctx context.Context, nodeSlug NodeSlugParam, body NodeUpdateVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeUpdateVisibilityResponse, error) {
	rsp, err := c.NodeUpdateVisibility(ctx, nodeSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeUpdateVisibilityResponse(rsp)
}

// NotificationListWithResponse request returning *NotificationListResponse
func (c *ClientWithResponses) NotificationListWithResponse(ctx context.Context, params *NotificationListParams, reqEditors ...RequestEditorFn) (*NotificationListResponse, error) {
	rsp, err := c.NotificationList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationListResponse(rsp)
}

// NotificationUpdateWithBodyWithResponse request with arbitrary body returning *NotificationUpdateResponse
func (c *ClientWithResponses) NotificationUpdateWithBodyWithResponse(ctx context.Context, notificationId NotificationIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationUpdateResponse, error) {
	rsp, err := c.NotificationUpdateWithBody(ctx, notificationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationUpdateWithResponse(ctx context.Context, notificationId NotificationIDParam, body NotificationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationUpdateResponse, error) {
	rsp, err := c.NotificationUpdate(ctx, notificationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationUpdateResponse(rsp)
}

// GetSpecWithResponse request returning *GetSpecResponse
func (c *ClientWithResponses) GetSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpecResponse, error) {
	rsp, err := c.GetSpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpecResponse(rsp)
}

// PostDeleteWithResponse request returning *PostDeleteResponse
func (c *ClientWithResponses) PostDeleteWithResponse(ctx context.Context, postId PostIDParam, reqEditors ...RequestEditorFn) (*PostDeleteResponse, error) {
	rsp, err := c.PostDelete(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteResponse(rsp)
}

// PostUpdateWithBodyWithResponse request with arbitrary body returning *PostUpdateResponse
func (c *ClientWithResponses) PostUpdateWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error) {
	rsp, err := c.PostUpdateWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateWithResponse(ctx context.Context, postId PostIDParam, body PostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateResponse, error) {
	rsp, err := c.PostUpdate(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateResponse(rsp)
}

// PostReactAddWithBodyWithResponse request with arbitrary body returning *PostReactAddResponse
func (c *ClientWithResponses) PostReactAddWithBodyWithResponse(ctx context.Context, postId PostIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error) {
	rsp, err := c.PostReactAddWithBody(ctx, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReactAddResponse(rsp)
}

func (c *ClientWithResponses) PostReactAddWithResponse(ctx context.Context, postId PostIDParam, body PostReactAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReactAddResponse, error) {
	rsp, err := c.PostReactAdd(ctx, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReactAddResponse(rsp)
}

// PostReactRemoveWithResponse request returning *PostReactRemoveResponse
func (c *ClientWithResponses) PostReactRemoveWithResponse(ctx context.Context, postId PostIDParam, reactId ReactIDParam, reqEditors ...RequestEditorFn) (*PostReactRemoveResponse, error) {
	rsp, err := c.PostReactRemove(ctx, postId, reactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReactRemoveResponse(rsp)
}

// ProfileListWithResponse request returning *ProfileListResponse
func (c *ClientWithResponses) ProfileListWithResponse(ctx context.Context, params *ProfileListParams, reqEditors ...RequestEditorFn) (*ProfileListResponse, error) {
	rsp, err := c.ProfileList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileListResponse(rsp)
}

// ProfileGetWithResponse request returning *ProfileGetResponse
func (c *ClientWithResponses) ProfileGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileGetResponse, error) {
	rsp, err := c.ProfileGet(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGetResponse(rsp)
}

// ProfileFollowersRemoveWithResponse request returning *ProfileFollowersRemoveResponse
func (c *ClientWithResponses) ProfileFollowersRemoveWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileFollowersRemoveResponse, error) {
	rsp, err := c.ProfileFollowersRemove(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileFollowersRemoveResponse(rsp)
}

// ProfileFollowersGetWithResponse request returning *ProfileFollowersGetResponse
func (c *ClientWithResponses) ProfileFollowersGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowersGetParams, reqEditors ...RequestEditorFn) (*ProfileFollowersGetResponse, error) {
	rsp, err := c.ProfileFollowersGet(ctx, accountHandle, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileFollowersGetResponse(rsp)
}

// ProfileFollowersAddWithResponse request returning *ProfileFollowersAddResponse
func (c *ClientWithResponses) ProfileFollowersAddWithResponse(ctx context.Context, accountHandle AccountHandleParam, reqEditors ...RequestEditorFn) (*ProfileFollowersAddResponse, error) {
	rsp, err := c.ProfileFollowersAdd(ctx, accountHandle, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileFollowersAddResponse(rsp)
}

// ProfileFollowingGetWithResponse request returning *ProfileFollowingGetResponse
func (c *ClientWithResponses) ProfileFollowingGetWithResponse(ctx context.Context, accountHandle AccountHandleParam, params *ProfileFollowingGetParams, reqEditors ...RequestEditorFn) (*ProfileFollowingGetResponse, error) {
	rsp, err := c.ProfileFollowingGet(ctx, accountHandle, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileFollowingGetResponse(rsp)
}

// RoleListWithResponse request returning *RoleListResponse
func (c *ClientWithResponses) RoleListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RoleListResponse, error) {
	rsp, err := c.RoleList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleListResponse(rsp)
}

// RoleCreateWithBodyWithResponse request with arbitrary body returning *RoleCreateResponse
func (c *ClientWithResponses) RoleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoleCreateResponse, error) {
	rsp, err := c.RoleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleCreateResponse(rsp)
}

func (c *ClientWithResponses) RoleCreateWithResponse(ctx context.Context, body RoleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RoleCreateResponse, error) {
	rsp, err := c.RoleCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleCreateResponse(rsp)
}

// RoleDeleteWithResponse request returning *RoleDeleteResponse
func (c *ClientWithResponses) RoleDeleteWithResponse(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*RoleDeleteResponse, error) {
	rsp, err := c.RoleDelete(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleDeleteResponse(rsp)
}

// RoleGetWithResponse request returning *RoleGetResponse
func (c *ClientWithResponses) RoleGetWithResponse(ctx context.Context, roleId RoleIDParam, reqEditors ...RequestEditorFn) (*RoleGetResponse, error) {
	rsp, err := c.RoleGet(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleGetResponse(rsp)
}

// RoleUpdateWithBodyWithResponse request with arbitrary body returning *RoleUpdateResponse
func (c *ClientWithResponses) RoleUpdateWithBodyWithResponse(ctx context.Context, roleId RoleIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoleUpdateResponse, error) {
	rsp, err := c.RoleUpdateWithBody(ctx, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleUpdateResponse(rsp)
}

func (c *ClientWithResponses) RoleUpdateWithResponse(ctx context.Context, roleId RoleIDParam, body RoleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RoleUpdateResponse, error) {
	rsp, err := c.RoleUpdate(ctx, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleUpdateResponse(rsp)
}

// TagListWithResponse request returning *TagListResponse
func (c *ClientWithResponses) TagListWithResponse(ctx context.Context, params *TagListParams, reqEditors ...RequestEditorFn) (*TagListResponse, error) {
	rsp, err := c.TagList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagListResponse(rsp)
}

// TagGetWithResponse request returning *TagGetResponse
func (c *ClientWithResponses) TagGetWithResponse(ctx context.Context, tagName TagNameParam, reqEditors ...RequestEditorFn) (*TagGetResponse, error) {
	rsp, err := c.TagGet(ctx, tagName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagGetResponse(rsp)
}

// ThreadListWithResponse request returning *ThreadListResponse
func (c *ClientWithResponses) ThreadListWithResponse(ctx context.Context, params *ThreadListParams, reqEditors ...RequestEditorFn) (*ThreadListResponse, error) {
	rsp, err := c.ThreadList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadListResponse(rsp)
}

// ThreadCreateWithBodyWithResponse request with arbitrary body returning *ThreadCreateResponse
func (c *ClientWithResponses) ThreadCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error) {
	rsp, err := c.ThreadCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadCreateResponse(rsp)
}

func (c *ClientWithResponses) ThreadCreateWithResponse(ctx context.Context, body ThreadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadCreateResponse, error) {
	rsp, err := c.ThreadCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadCreateResponse(rsp)
}

// ThreadDeleteWithResponse request returning *ThreadDeleteResponse
func (c *ClientWithResponses) ThreadDeleteWithResponse(ctx context.Context, threadMark ThreadMarkParam, reqEditors ...RequestEditorFn) (*ThreadDeleteResponse, error) {
	rsp, err := c.ThreadDelete(ctx, threadMark, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadDeleteResponse(rsp)
}

// ThreadGetWithResponse request returning *ThreadGetResponse
func (c *ClientWithResponses) ThreadGetWithResponse(ctx context.Context, threadMark ThreadMarkParam, params *ThreadGetParams, reqEditors ...RequestEditorFn) (*ThreadGetResponse, error) {
	rsp, err := c.ThreadGet(ctx, threadMark, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadGetResponse(rsp)
}

// ThreadUpdateWithBodyWithResponse request with arbitrary body returning *ThreadUpdateResponse
func (c *ClientWithResponses) ThreadUpdateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error) {
	rsp, err := c.ThreadUpdateWithBody(ctx, threadMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadUpdateResponse(rsp)
}

func (c *ClientWithResponses) ThreadUpdateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body ThreadUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreadUpdateResponse, error) {
	rsp, err := c.ThreadUpdate(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreadUpdateResponse(rsp)
}

// ReplyCreateWithBodyWithResponse request with arbitrary body returning *ReplyCreateResponse
func (c *ClientWithResponses) ReplyCreateWithBodyWithResponse(ctx context.Context, threadMark ThreadMarkParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplyCreateResponse, error) {
	rsp, err := c.ReplyCreateWithBody(ctx, threadMark, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplyCreateResponse(rsp)
}

func (c *ClientWithResponses) ReplyCreateWithResponse(ctx context.Context, threadMark ThreadMarkParam, body ReplyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplyCreateResponse, error) {
	rsp, err := c.ReplyCreate(ctx, threadMark, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplyCreateResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseAccountGetResponse parses an HTTP response from a AccountGetWithResponse call
func ParseAccountGetResponse(rsp *http.Response) (*AccountGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountUpdateResponse parses an HTTP response from a AccountUpdateWithResponse call
func ParseAccountUpdateResponse(rsp *http.Response) (*AccountUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountAuthProviderListResponse parses an HTTP response from a AccountAuthProviderListWithResponse call
func ParseAccountAuthProviderListResponse(rsp *http.Response) (*AccountAuthProviderListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountAuthProviderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountAuthProviderListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountAuthMethodDeleteResponse parses an HTTP response from a AccountAuthMethodDeleteWithResponse call
func ParseAccountAuthMethodDeleteResponse(rsp *http.Response) (*AccountAuthMethodDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountAuthMethodDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountAuthProviderListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountSetAvatarResponse parses an HTTP response from a AccountSetAvatarWithResponse call
func ParseAccountSetAvatarResponse(rsp *http.Response) (*AccountSetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountSetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountEmailAddResponse parses an HTTP response from a AccountEmailAddWithResponse call
func ParseAccountEmailAddResponse(rsp *http.Response) (*AccountEmailAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountEmailAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountEmailUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountEmailRemoveResponse parses an HTTP response from a AccountEmailRemoveWithResponse call
func ParseAccountEmailRemoveResponse(rsp *http.Response) (*AccountEmailRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountEmailRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountGetAvatarResponse parses an HTTP response from a AccountGetAvatarWithResponse call
func ParseAccountGetAvatarResponse(rsp *http.Response) (*AccountGetAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountGetAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountRemoveRoleResponse parses an HTTP response from a AccountRemoveRoleWithResponse call
func ParseAccountRemoveRoleResponse(rsp *http.Response) (*AccountRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountAddRoleResponse parses an HTTP response from a AccountAddRoleWithResponse call
func ParseAccountAddRoleResponse(rsp *http.Response) (*AccountAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountRoleRemoveBadgeResponse parses an HTTP response from a AccountRoleRemoveBadgeWithResponse call
func ParseAccountRoleRemoveBadgeResponse(rsp *http.Response) (*AccountRoleRemoveBadgeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountRoleRemoveBadgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountRoleSetBadgeResponse parses an HTTP response from a AccountRoleSetBadgeWithResponse call
func ParseAccountRoleSetBadgeResponse(rsp *http.Response) (*AccountRoleSetBadgeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountRoleSetBadgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccountViewResponse parses an HTTP response from a AccountViewWithResponse call
func ParseAccountViewResponse(rsp *http.Response) (*AccountViewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminSettingsUpdateResponse parses an HTTP response from a AdminSettingsUpdateWithResponse call
func ParseAdminSettingsUpdateResponse(rsp *http.Response) (*AdminSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminSettingsUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAccessKeyListResponse parses an HTTP response from a AdminAccessKeyListWithResponse call
func ParseAdminAccessKeyListResponse(rsp *http.Response) (*AdminAccessKeyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAccessKeyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminAccessKeyListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAccessKeyDeleteResponse parses an HTTP response from a AdminAccessKeyDeleteWithResponse call
func ParseAdminAccessKeyDeleteResponse(rsp *http.Response) (*AdminAccessKeyDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAccessKeyDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAccountBanRemoveResponse parses an HTTP response from a AdminAccountBanRemoveWithResponse call
func ParseAdminAccountBanRemoveResponse(rsp *http.Response) (*AdminAccountBanRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAccountBanRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAccountBanCreateResponse parses an HTTP response from a AdminAccountBanCreateWithResponse call
func ParseAdminAccountBanCreateResponse(rsp *http.Response) (*AdminAccountBanCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAccountBanCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAssetUploadResponse parses an HTTP response from a AssetUploadWithResponse call
func ParseAssetUploadResponse(rsp *http.Response) (*AssetUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssetUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetUploadOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAssetGetResponse parses an HTTP response from a AssetGetWithResponse call
func ParseAssetGetResponse(rsp *http.Response) (*AssetGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssetGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthProviderListResponse parses an HTTP response from a AuthProviderListWithResponse call
func ParseAuthProviderListResponse(rsp *http.Response) (*AuthProviderListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthProviderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthProviderListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccessKeyListResponse parses an HTTP response from a AccessKeyListWithResponse call
func ParseAccessKeyListResponse(rsp *http.Response) (*AccessKeyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessKeyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessKeyListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccessKeyCreateResponse parses an HTTP response from a AccessKeyCreateWithResponse call
func ParseAccessKeyCreateResponse(rsp *http.Response) (*AccessKeyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessKeyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessKeyCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccessKeyDeleteResponse parses an HTTP response from a AccessKeyDeleteWithResponse call
func ParseAccessKeyDeleteResponse(rsp *http.Response) (*AccessKeyDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessKeyDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordResetRequestEmailResponse parses an HTTP response from a AuthPasswordResetRequestEmailWithResponse call
func ParseAuthPasswordResetRequestEmailResponse(rsp *http.Response) (*AuthPasswordResetRequestEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordResetRequestEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthEmailPasswordSigninResponse parses an HTTP response from a AuthEmailPasswordSigninWithResponse call
func ParseAuthEmailPasswordSigninResponse(rsp *http.Response) (*AuthEmailPasswordSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthEmailPasswordSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthEmailPasswordSignupResponse parses an HTTP response from a AuthEmailPasswordSignupWithResponse call
func ParseAuthEmailPasswordSignupResponse(rsp *http.Response) (*AuthEmailPasswordSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthEmailPasswordSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthEmailSigninResponse parses an HTTP response from a AuthEmailSigninWithResponse call
func ParseAuthEmailSigninResponse(rsp *http.Response) (*AuthEmailSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthEmailSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthEmailSignupResponse parses an HTTP response from a AuthEmailSignupWithResponse call
func ParseAuthEmailSignupResponse(rsp *http.Response) (*AuthEmailSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthEmailSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthEmailVerifyResponse parses an HTTP response from a AuthEmailVerifyWithResponse call
func ParseAuthEmailVerifyResponse(rsp *http.Response) (*AuthEmailVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthEmailVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthProviderLogoutResponse parses an HTTP response from a AuthProviderLogoutWithResponse call
func ParseAuthProviderLogoutResponse(rsp *http.Response) (*AuthProviderLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthProviderLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOAuthProviderCallbackResponse parses an HTTP response from a OAuthProviderCallbackWithResponse call
func ParseOAuthProviderCallbackResponse(rsp *http.Response) (*OAuthProviderCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OAuthProviderCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordUpdateResponse parses an HTTP response from a AuthPasswordUpdateWithResponse call
func ParseAuthPasswordUpdateResponse(rsp *http.Response) (*AuthPasswordUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordCreateResponse parses an HTTP response from a AuthPasswordCreateWithResponse call
func ParseAuthPasswordCreateResponse(rsp *http.Response) (*AuthPasswordCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordResetResponse parses an HTTP response from a AuthPasswordResetWithResponse call
func ParseAuthPasswordResetResponse(rsp *http.Response) (*AuthPasswordResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSigninResponse parses an HTTP response from a AuthPasswordSigninWithResponse call
func ParseAuthPasswordSigninResponse(rsp *http.Response) (*AuthPasswordSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthPasswordSignupResponse parses an HTTP response from a AuthPasswordSignupWithResponse call
func ParseAuthPasswordSignupResponse(rsp *http.Response) (*AuthPasswordSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePhoneRequestCodeResponse parses an HTTP response from a PhoneRequestCodeWithResponse call
func ParsePhoneRequestCodeResponse(rsp *http.Response) (*PhoneRequestCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PhoneRequestCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePhoneSubmitCodeResponse parses an HTTP response from a PhoneSubmitCodeWithResponse call
func ParsePhoneSubmitCodeResponse(rsp *http.Response) (*PhoneSubmitCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PhoneSubmitCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeAssertionResponse parses an HTTP response from a WebAuthnMakeAssertionWithResponse call
func ParseWebAuthnMakeAssertionResponse(rsp *http.Response) (*WebAuthnMakeAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnGetAssertionResponse parses an HTTP response from a WebAuthnGetAssertionWithResponse call
func ParseWebAuthnGetAssertionResponse(rsp *http.Response) (*WebAuthnGetAssertionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnGetAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebAuthnGetAssertionOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnMakeCredentialResponse parses an HTTP response from a WebAuthnMakeCredentialWithResponse call
func ParseWebAuthnMakeCredentialResponse(rsp *http.Response) (*WebAuthnMakeCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnMakeCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthSuccessOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebAuthnRequestCredentialResponse parses an HTTP response from a WebAuthnRequestCredentialWithResponse call
func ParseWebAuthnRequestCredentialResponse(rsp *http.Response) (*WebAuthnRequestCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebAuthnRequestCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebAuthnRequestCredentialOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryListResponse parses an HTTP response from a CategoryListWithResponse call
func ParseCategoryListResponse(rsp *http.Response) (*CategoryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryCreateResponse parses an HTTP response from a CategoryCreateWithResponse call
func ParseCategoryCreateResponse(rsp *http.Response) (*CategoryCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryDeleteResponse parses an HTTP response from a CategoryDeleteWithResponse call
func ParseCategoryDeleteResponse(rsp *http.Response) (*CategoryDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryDeleteOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryGetResponse parses an HTTP response from a CategoryGetWithResponse call
func ParseCategoryGetResponse(rsp *http.Response) (*CategoryGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryUpdateResponse parses an HTTP response from a CategoryUpdateWithResponse call
func ParseCategoryUpdateResponse(rsp *http.Response) (*CategoryUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCategoryUpdatePositionResponse parses an HTTP response from a CategoryUpdatePositionWithResponse call
func ParseCategoryUpdatePositionResponse(rsp *http.Response) (*CategoryUpdatePositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoryUpdatePositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionListResponse parses an HTTP response from a CollectionListWithResponse call
func ParseCollectionListResponse(rsp *http.Response) (*CollectionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionCreateResponse parses an HTTP response from a CollectionCreateWithResponse call
func ParseCollectionCreateResponse(rsp *http.Response) (*CollectionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionDeleteResponse parses an HTTP response from a CollectionDeleteWithResponse call
func ParseCollectionDeleteResponse(rsp *http.Response) (*CollectionDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionGetResponse parses an HTTP response from a CollectionGetWithResponse call
func ParseCollectionGetResponse(rsp *http.Response) (*CollectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionUpdateResponse parses an HTTP response from a CollectionUpdateWithResponse call
func ParseCollectionUpdateResponse(rsp *http.Response) (*CollectionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionRemoveNodeResponse parses an HTTP response from a CollectionRemoveNodeWithResponse call
func ParseCollectionRemoveNodeResponse(rsp *http.Response) (*CollectionRemoveNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionRemoveNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionRemoveNodeOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionAddNodeResponse parses an HTTP response from a CollectionAddNodeWithResponse call
func ParseCollectionAddNodeResponse(rsp *http.Response) (*CollectionAddNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionAddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionAddNodeOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionRemovePostResponse parses an HTTP response from a CollectionRemovePostWithResponse call
func ParseCollectionRemovePostResponse(rsp *http.Response) (*CollectionRemovePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionRemovePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionRemovePostOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionAddPostResponse parses an HTTP response from a CollectionAddPostWithResponse call
func ParseCollectionAddPostResponse(rsp *http.Response) (*CollectionAddPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionAddPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionAddPostOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDatagraphSearchResponse parses an HTTP response from a DatagraphSearchWithResponse call
func ParseDatagraphSearchResponse(rsp *http.Response) (*DatagraphSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatagraphSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatagraphSearchOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDatagraphAskResponse parses an HTTP response from a DatagraphAskWithResponse call
func ParseDatagraphAskResponse(rsp *http.Response) (*DatagraphAskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatagraphAskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDocsResponse parses an HTTP response from a GetDocsWithResponse call
func ParseGetDocsResponse(rsp *http.Response) (*GetDocsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventListResponse parses an HTTP response from a EventListWithResponse call
func ParseEventListResponse(rsp *http.Response) (*EventListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventCreateResponse parses an HTTP response from a EventCreateWithResponse call
func ParseEventCreateResponse(rsp *http.Response) (*EventCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventDeleteResponse parses an HTTP response from a EventDeleteWithResponse call
func ParseEventDeleteResponse(rsp *http.Response) (*EventDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventGetResponse parses an HTTP response from a EventGetWithResponse call
func ParseEventGetResponse(rsp *http.Response) (*EventGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventUpdateResponse parses an HTTP response from a EventUpdateWithResponse call
func ParseEventUpdateResponse(rsp *http.Response) (*EventUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventParticipantRemoveResponse parses an HTTP response from a EventParticipantRemoveWithResponse call
func ParseEventParticipantRemoveResponse(rsp *http.Response) (*EventParticipantRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventParticipantRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventParticipantUpdateResponse parses an HTTP response from a EventParticipantUpdateWithResponse call
func ParseEventParticipantUpdateResponse(rsp *http.Response) (*EventParticipantUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventParticipantUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInfoResponse parses an HTTP response from a GetInfoWithResponse call
func ParseGetInfoResponse(rsp *http.Response) (*GetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetInfoOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBannerGetResponse parses an HTTP response from a BannerGetWithResponse call
func ParseBannerGetResponse(rsp *http.Response) (*BannerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BannerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBannerUploadResponse parses an HTTP response from a BannerUploadWithResponse call
func ParseBannerUploadResponse(rsp *http.Response) (*BannerUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BannerUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIconUploadResponse parses an HTTP response from a IconUploadWithResponse call
func ParseIconUploadResponse(rsp *http.Response) (*IconUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IconUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIconGetResponse parses an HTTP response from a IconGetWithResponse call
func ParseIconGetResponse(rsp *http.Response) (*IconGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IconGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInvitationListResponse parses an HTTP response from a InvitationListWithResponse call
func ParseInvitationListResponse(rsp *http.Response) (*InvitationListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvitationListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvitationListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInvitationCreateResponse parses an HTTP response from a InvitationCreateWithResponse call
func ParseInvitationCreateResponse(rsp *http.Response) (*InvitationCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvitationCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvitationCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInvitationDeleteResponse parses an HTTP response from a InvitationDeleteWithResponse call
func ParseInvitationDeleteResponse(rsp *http.Response) (*InvitationDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvitationDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInvitationGetResponse parses an HTTP response from a InvitationGetWithResponse call
func ParseInvitationGetResponse(rsp *http.Response) (*InvitationGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvitationGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvitationGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLikePostRemoveResponse parses an HTTP response from a LikePostRemoveWithResponse call
func ParseLikePostRemoveResponse(rsp *http.Response) (*LikePostRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LikePostRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLikePostGetResponse parses an HTTP response from a LikePostGetWithResponse call
func ParseLikePostGetResponse(rsp *http.Response) (*LikePostGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LikePostGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LikePostGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLikePostAddResponse parses an HTTP response from a LikePostAddWithResponse call
func ParseLikePostAddResponse(rsp *http.Response) (*LikePostAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LikePostAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLikeProfileGetResponse parses an HTTP response from a LikeProfileGetWithResponse call
func ParseLikeProfileGetResponse(rsp *http.Response) (*LikeProfileGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LikeProfileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LikeProfileGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLinkListResponse parses an HTTP response from a LinkListWithResponse call
func ParseLinkListResponse(rsp *http.Response) (*LinkListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LinkListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLinkCreateResponse parses an HTTP response from a LinkCreateWithResponse call
func ParseLinkCreateResponse(rsp *http.Response) (*LinkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LinkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLinkGetResponse parses an HTTP response from a LinkGetWithResponse call
func ParseLinkGetResponse(rsp *http.Response) (*LinkGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LinkGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeListResponse parses an HTTP response from a NodeListWithResponse call
func ParseNodeListResponse(rsp *http.Response) (*NodeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeCreateResponse parses an HTTP response from a NodeCreateWithResponse call
func ParseNodeCreateResponse(rsp *http.Response) (*NodeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeDeleteResponse parses an HTTP response from a NodeDeleteWithResponse call
func ParseNodeDeleteResponse(rsp *http.Response) (*NodeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeDeleteOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeGetResponse parses an HTTP response from a NodeGetWithResponse call
func ParseNodeGetResponse(rsp *http.Response) (*NodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeUpdateResponse parses an HTTP response from a NodeUpdateWithResponse call
func ParseNodeUpdateResponse(rsp *http.Response) (*NodeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeRemoveAssetResponse parses an HTTP response from a NodeRemoveAssetWithResponse call
func ParseNodeRemoveAssetResponse(rsp *http.Response) (*NodeRemoveAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeRemoveAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeAddAssetResponse parses an HTTP response from a NodeAddAssetWithResponse call
func ParseNodeAddAssetResponse(rsp *http.Response) (*NodeAddAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeAddAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeListChildrenResponse parses an HTTP response from a NodeListChildrenWithResponse call
func ParseNodeListChildrenResponse(rsp *http.Response) (*NodeListChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeListChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeUpdateChildrenPropertySchemaResponse parses an HTTP response from a NodeUpdateChildrenPropertySchemaWithResponse call
func ParseNodeUpdateChildrenPropertySchemaResponse(rsp *http.Response) (*NodeUpdateChildrenPropertySchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeUpdateChildrenPropertySchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdatePropertySchemaOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeGenerateContentResponse parses an HTTP response from a NodeGenerateContentWithResponse call
func ParseNodeGenerateContentResponse(rsp *http.Response) (*NodeGenerateContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeGenerateContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeGenerateContentOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeRemoveNodeResponse parses an HTTP response from a NodeRemoveNodeWithResponse call
func ParseNodeRemoveNodeResponse(rsp *http.Response) (*NodeRemoveNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeRemoveNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeRemoveChildOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeAddNodeResponse parses an HTTP response from a NodeAddNodeWithResponse call
func ParseNodeAddNodeResponse(rsp *http.Response) (*NodeAddNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeAddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeAddChildOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeUpdatePositionResponse parses an HTTP response from a NodeUpdatePositionWithResponse call
func ParseNodeUpdatePositionResponse(rsp *http.Response) (*NodeUpdatePositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeUpdatePositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeUpdatePropertiesResponse parses an HTTP response from a NodeUpdatePropertiesWithResponse call
func ParseNodeUpdatePropertiesResponse(rsp *http.Response) (*NodeUpdatePropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeUpdatePropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdatePropertiesOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeUpdatePropertySchemaResponse parses an HTTP response from a NodeUpdatePropertySchemaWithResponse call
func ParseNodeUpdatePropertySchemaResponse(rsp *http.Response) (*NodeUpdatePropertySchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeUpdatePropertySchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdatePropertySchemaOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeGenerateTagsResponse parses an HTTP response from a NodeGenerateTagsWithResponse call
func ParseNodeGenerateTagsResponse(rsp *http.Response) (*NodeGenerateTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeGenerateTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeGenerateTagsOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeGenerateTitleResponse parses an HTTP response from a NodeGenerateTitleWithResponse call
func ParseNodeGenerateTitleResponse(rsp *http.Response) (*NodeGenerateTitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeGenerateTitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeGenerateTitleOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeUpdateVisibilityResponse parses an HTTP response from a NodeUpdateVisibilityWithResponse call
func ParseNodeUpdateVisibilityResponse(rsp *http.Response) (*NodeUpdateVisibilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeUpdateVisibilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNotificationListResponse parses an HTTP response from a NotificationListWithResponse call
func ParseNotificationListResponse(rsp *http.Response) (*NotificationListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNotificationUpdateResponse parses an HTTP response from a NotificationUpdateWithResponse call
func ParseNotificationUpdateResponse(rsp *http.Response) (*NotificationUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSpecResponse parses an HTTP response from a GetSpecWithResponse call
func ParseGetSpecResponse(rsp *http.Response) (*GetSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOaiOpenapiJSONVersion310200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteResponse parses an HTTP response from a PostDeleteWithResponse call
func ParsePostDeleteResponse(rsp *http.Response) (*PostDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUpdateResponse parses an HTTP response from a PostUpdateWithResponse call
func ParsePostUpdateResponse(rsp *http.Response) (*PostUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostReactAddResponse parses an HTTP response from a PostReactAddWithResponse call
func ParsePostReactAddResponse(rsp *http.Response) (*PostReactAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReactAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostReactAddOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostReactRemoveResponse parses an HTTP response from a PostReactRemoveWithResponse call
func ParsePostReactRemoveResponse(rsp *http.Response) (*PostReactRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReactRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfileListResponse parses an HTTP response from a ProfileListWithResponse call
func ParseProfileListResponse(rsp *http.Response) (*ProfileListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfileGetResponse parses an HTTP response from a ProfileGetWithResponse call
func ParseProfileGetResponse(rsp *http.Response) (*ProfileGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfileFollowersRemoveResponse parses an HTTP response from a ProfileFollowersRemoveWithResponse call
func ParseProfileFollowersRemoveResponse(rsp *http.Response) (*ProfileFollowersRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileFollowersRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfileFollowersGetResponse parses an HTTP response from a ProfileFollowersGetWithResponse call
func ParseProfileFollowersGetResponse(rsp *http.Response) (*ProfileFollowersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileFollowersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileFollowersGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfileFollowersAddResponse parses an HTTP response from a ProfileFollowersAddWithResponse call
func ParseProfileFollowersAddResponse(rsp *http.Response) (*ProfileFollowersAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileFollowersAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProfileFollowingGetResponse parses an HTTP response from a ProfileFollowingGetWithResponse call
func ParseProfileFollowingGetResponse(rsp *http.Response) (*ProfileFollowingGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileFollowingGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileFollowingGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRoleListResponse parses an HTTP response from a RoleListWithResponse call
func ParseRoleListResponse(rsp *http.Response) (*RoleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRoleCreateResponse parses an HTTP response from a RoleCreateWithResponse call
func ParseRoleCreateResponse(rsp *http.Response) (*RoleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRoleDeleteResponse parses an HTTP response from a RoleDeleteWithResponse call
func ParseRoleDeleteResponse(rsp *http.Response) (*RoleDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoleDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRoleGetResponse parses an HTTP response from a RoleGetWithResponse call
func ParseRoleGetResponse(rsp *http.Response) (*RoleGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoleGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRoleUpdateResponse parses an HTTP response from a RoleUpdateWithResponse call
func ParseRoleUpdateResponse(rsp *http.Response) (*RoleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTagListResponse parses an HTTP response from a TagListWithResponse call
func ParseTagListResponse(rsp *http.Response) (*TagListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTagGetResponse parses an HTTP response from a TagGetWithResponse call
func ParseTagGetResponse(rsp *http.Response) (*TagGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagGetOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadListResponse parses an HTTP response from a ThreadListWithResponse call
func ParseThreadListResponse(rsp *http.Response) (*ThreadListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreadListOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadCreateResponse parses an HTTP response from a ThreadCreateWithResponse call
func ParseThreadCreateResponse(rsp *http.Response) (*ThreadCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreadCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadDeleteResponse parses an HTTP response from a ThreadDeleteWithResponse call
func ParseThreadDeleteResponse(rsp *http.Response) (*ThreadDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadGetResponse parses an HTTP response from a ThreadGetWithResponse call
func ParseThreadGetResponse(rsp *http.Response) (*ThreadGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreadGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreadUpdateResponse parses an HTTP response from a ThreadUpdateWithResponse call
func ParseThreadUpdateResponse(rsp *http.Response) (*ThreadUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreadUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreadUpdateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplyCreateResponse parses an HTTP response from a ReplyCreateWithResponse call
func ParseReplyCreateResponse(rsp *http.Response) (*ReplyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplyCreateOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	AccountGet(ctx echo.Context) error

	// (PATCH /accounts)
	AccountUpdate(ctx echo.Context) error

	// (GET /accounts/self/auth-methods)
	AccountAuthProviderList(ctx echo.Context) error

	// (DELETE /accounts/self/auth-methods/{auth_method_id})
	AccountAuthMethodDelete(ctx echo.Context, authMethodId string) error

	// (POST /accounts/self/avatar)
	AccountSetAvatar(ctx echo.Context, params AccountSetAvatarParams) error

	// (POST /accounts/self/emails)
	AccountEmailAdd(ctx echo.Context) error

	// (DELETE /accounts/self/emails/{email_address_id})
	AccountEmailRemove(ctx echo.Context, emailAddressId EmailAddressIDParam) error

	// (GET /accounts/{account_handle}/avatar)
	AccountGetAvatar(ctx echo.Context, accountHandle AccountHandleParam) error

	// (DELETE /accounts/{account_handle}/roles/{role_id})
	AccountRemoveRole(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error

	// (PUT /accounts/{account_handle}/roles/{role_id})
	AccountAddRole(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error

	// (DELETE /accounts/{account_handle}/roles/{role_id}/badge)
	AccountRoleRemoveBadge(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error

	// (PUT /accounts/{account_handle}/roles/{role_id}/badge)
	AccountRoleSetBadge(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error

	// (GET /accounts/{account_id})
	AccountView(ctx echo.Context, accountId AccountIDParam) error

	// (PATCH /admin)
	AdminSettingsUpdate(ctx echo.Context) error

	// (GET /admin/access-keys)
	AdminAccessKeyList(ctx echo.Context) error

	// (DELETE /admin/access-keys/{access_key_id})
	AdminAccessKeyDelete(ctx echo.Context, accessKeyId AccessKeyIDParam) error

	// (DELETE /admin/bans/{account_handle})
	AdminAccountBanRemove(ctx echo.Context, accountHandle AccountHandleParam) error

	// (POST /admin/bans/{account_handle})
	AdminAccountBanCreate(ctx echo.Context, accountHandle AccountHandleParam) error

	// (POST /assets)
	AssetUpload(ctx echo.Context, params AssetUploadParams) error

	// (GET /assets/{asset_filename})
	AssetGet(ctx echo.Context, assetFilename AssetPathParam) error

	// (GET /auth)
	AuthProviderList(ctx echo.Context) error

	// (GET /auth/access-keys)
	AccessKeyList(ctx echo.Context) error

	// (POST /auth/access-keys)
	AccessKeyCreate(ctx echo.Context) error

	// (DELETE /auth/access-keys/{access_key_id})
	AccessKeyDelete(ctx echo.Context, accessKeyId AccessKeyIDParam) error

	// (POST /auth/email-password/reset)
	AuthPasswordResetRequestEmail(ctx echo.Context) error

	// (POST /auth/email-password/signin)
	AuthEmailPasswordSignin(ctx echo.Context) error

	// (POST /auth/email-password/signup)
	AuthEmailPasswordSignup(ctx echo.Context, params AuthEmailPasswordSignupParams) error

	// (POST /auth/email/signin)
	AuthEmailSignin(ctx echo.Context) error

	// (POST /auth/email/signup)
	AuthEmailSignup(ctx echo.Context, params AuthEmailSignupParams) error

	// (POST /auth/email/verify)
	AuthEmailVerify(ctx echo.Context) error

	// (GET /auth/logout)
	AuthProviderLogout(ctx echo.Context) error

	// (POST /auth/oauth/{oauth_provider}/callback)
	OAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error

	// (PATCH /auth/password)
	AuthPasswordUpdate(ctx echo.Context) error

	// (POST /auth/password)
	AuthPasswordCreate(ctx echo.Context) error

	// (POST /auth/password/reset)
	AuthPasswordReset(ctx echo.Context) error

	// (POST /auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error

	// (POST /auth/password/signup)
	AuthPasswordSignup(ctx echo.Context, params AuthPasswordSignupParams) error

	// (POST /auth/phone)
	PhoneRequestCode(ctx echo.Context, params PhoneRequestCodeParams) error

	// (PUT /auth/phone/{account_handle})
	PhoneSubmitCode(ctx echo.Context, accountHandle AccountHandleParam) error

	// (POST /auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx echo.Context) error

	// (GET /auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandleParam) error

	// (POST /auth/webauthn/make)
	WebAuthnMakeCredential(ctx echo.Context, params WebAuthnMakeCredentialParams) error

	// (GET /auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /categories)
	CategoryList(ctx echo.Context) error

	// (POST /categories)
	CategoryCreate(ctx echo.Context) error

	// (DELETE /categories/{category_slug})
	CategoryDelete(ctx echo.Context, categorySlug CategorySlugParam) error

	// (GET /categories/{category_slug})
	CategoryGet(ctx echo.Context, categorySlug CategorySlugParam) error

	// (PATCH /categories/{category_slug})
	CategoryUpdate(ctx echo.Context, categorySlug CategorySlugParam) error

	// (PATCH /categories/{category_slug}/position)
	CategoryUpdatePosition(ctx echo.Context, categorySlug CategorySlugParam) error

	// (GET /collections)
	CollectionList(ctx echo.Context, params CollectionListParams) error

	// (POST /collections)
	CollectionCreate(ctx echo.Context) error

	// (DELETE /collections/{collection_mark})
	CollectionDelete(ctx echo.Context, collectionMark CollectionMarkParam) error

	// (GET /collections/{collection_mark})
	CollectionGet(ctx echo.Context, collectionMark CollectionMarkParam) error

	// (PATCH /collections/{collection_mark})
	CollectionUpdate(ctx echo.Context, collectionMark CollectionMarkParam) error

	// (DELETE /collections/{collection_mark}/nodes/{node_id})
	CollectionRemoveNode(ctx echo.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam) error

	// (PUT /collections/{collection_mark}/nodes/{node_id})
	CollectionAddNode(ctx echo.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam) error

	// (DELETE /collections/{collection_mark}/posts/{post_id})
	CollectionRemovePost(ctx echo.Context, collectionMark CollectionMarkParam, postId PostIDParam) error

	// (PUT /collections/{collection_mark}/posts/{post_id})
	CollectionAddPost(ctx echo.Context, collectionMark CollectionMarkParam, postId PostIDParam) error

	// (GET /datagraph)
	DatagraphSearch(ctx echo.Context, params DatagraphSearchParams) error

	// (GET /datagraph/ask)
	DatagraphAsk(ctx echo.Context, params DatagraphAskParams) error
	// API documentation
	// (GET /docs)
	GetDocs(ctx echo.Context) error

	// (GET /events)
	EventList(ctx echo.Context, params EventListParams) error

	// (POST /events)
	EventCreate(ctx echo.Context) error

	// (DELETE /events/{event_mark})
	EventDelete(ctx echo.Context, eventMark EventMarkParam) error

	// (GET /events/{event_mark})
	EventGet(ctx echo.Context, eventMark EventMarkParam) error

	// (PATCH /events/{event_mark})
	EventUpdate(ctx echo.Context, eventMark EventMarkParam) error

	// (DELETE /events/{event_mark}/participants/{account_id})
	EventParticipantRemove(ctx echo.Context, eventMark EventMarkParam, accountId AccountIDParam) error

	// (PUT /events/{event_mark}/participants/{account_id})
	EventParticipantUpdate(ctx echo.Context, eventMark EventMarkParam, accountId AccountIDParam) error

	// (GET /info)
	GetInfo(ctx echo.Context) error

	// (GET /info/banner)
	BannerGet(ctx echo.Context) error

	// (POST /info/banner)
	BannerUpload(ctx echo.Context) error

	// (POST /info/icon)
	IconUpload(ctx echo.Context) error

	// (GET /info/icon/{icon_size})
	IconGet(ctx echo.Context, iconSize IconGetParamsIconSize) error

	// (GET /invitations)
	InvitationList(ctx echo.Context, params InvitationListParams) error

	// (POST /invitations)
	InvitationCreate(ctx echo.Context) error

	// (DELETE /invitations/{invitation_id})
	InvitationDelete(ctx echo.Context, invitationId InvitationIDParam) error

	// (GET /invitations/{invitation_id})
	InvitationGet(ctx echo.Context, invitationId InvitationIDParam) error

	// (DELETE /likes/posts/{post_id})
	LikePostRemove(ctx echo.Context, postId PostIDParam) error

	// (GET /likes/posts/{post_id})
	LikePostGet(ctx echo.Context, postId PostIDParam) error

	// (PUT /likes/posts/{post_id})
	LikePostAdd(ctx echo.Context, postId PostIDParam) error

	// (GET /likes/profiles/{account_handle})
	LikeProfileGet(ctx echo.Context, accountHandle AccountHandleParam, params LikeProfileGetParams) error

	// (GET /links)
	LinkList(ctx echo.Context, params LinkListParams) error

	// (POST /links)
	LinkCreate(ctx echo.Context) error

	// (GET /links/{link_slug})
	LinkGet(ctx echo.Context, linkSlug LinkSlugParam) error

	// (GET /nodes)
	NodeList(ctx echo.Context, params NodeListParams) error

	// (POST /nodes)
	NodeCreate(ctx echo.Context) error

	// (DELETE /nodes/{node_slug})
	NodeDelete(ctx echo.Context, nodeSlug NodeSlugParam, params NodeDeleteParams) error

	// (GET /nodes/{node_slug})
	NodeGet(ctx echo.Context, nodeSlug NodeSlugParam, params NodeGetParams) error

	// (PATCH /nodes/{node_slug})
	NodeUpdate(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (DELETE /nodes/{node_slug}/assets/{asset_id})
	NodeRemoveAsset(ctx echo.Context, nodeSlug NodeSlugParam, assetId AssetIDParam) error

	// (PUT /nodes/{node_slug}/assets/{asset_id})
	NodeAddAsset(ctx echo.Context, nodeSlug NodeSlugParam, assetId AssetIDParam) error

	// (GET /nodes/{node_slug}/children)
	NodeListChildren(ctx echo.Context, nodeSlug NodeSlugParam, params NodeListChildrenParams) error

	// (PATCH /nodes/{node_slug}/children/property-schema)
	NodeUpdateChildrenPropertySchema(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (POST /nodes/{node_slug}/content)
	NodeGenerateContent(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (DELETE /nodes/{node_slug}/nodes/{node_slug_child})
	NodeRemoveNode(ctx echo.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam) error

	// (PUT /nodes/{node_slug}/nodes/{node_slug_child})
	NodeAddNode(ctx echo.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam) error

	// (PATCH /nodes/{node_slug}/position)
	NodeUpdatePosition(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (PATCH /nodes/{node_slug}/properties)
	NodeUpdateProperties(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (PATCH /nodes/{node_slug}/property-schema)
	NodeUpdatePropertySchema(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (POST /nodes/{node_slug}/tags)
	NodeGenerateTags(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (POST /nodes/{node_slug}/title)
	NodeGenerateTitle(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (PATCH /nodes/{node_slug}/visibility)
	NodeUpdateVisibility(ctx echo.Context, nodeSlug NodeSlugParam) error

	// (GET /notifications)
	NotificationList(ctx echo.Context, params NotificationListParams) error

	// (PATCH /notifications/{notification_id})
	NotificationUpdate(ctx echo.Context, notificationId NotificationIDParam) error
	// OpenAPI specification
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error

	// (DELETE /posts/{post_id})
	PostDelete(ctx echo.Context, postId PostIDParam) error

	// (PATCH /posts/{post_id})
	PostUpdate(ctx echo.Context, postId PostIDParam) error

	// (PUT /posts/{post_id}/reacts)
	PostReactAdd(ctx echo.Context, postId PostIDParam) error

	// (DELETE /posts/{post_id}/reacts/{react_id})
	PostReactRemove(ctx echo.Context, postId PostIDParam, reactId ReactIDParam) error

	// (GET /profiles)
	ProfileList(ctx echo.Context, params ProfileListParams) error

	// (GET /profiles/{account_handle})
	ProfileGet(ctx echo.Context, accountHandle AccountHandleParam) error

	// (DELETE /profiles/{account_handle}/followers)
	ProfileFollowersRemove(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /profiles/{account_handle}/followers)
	ProfileFollowersGet(ctx echo.Context, accountHandle AccountHandleParam, params ProfileFollowersGetParams) error

	// (PUT /profiles/{account_handle}/followers)
	ProfileFollowersAdd(ctx echo.Context, accountHandle AccountHandleParam) error

	// (GET /profiles/{account_handle}/following)
	ProfileFollowingGet(ctx echo.Context, accountHandle AccountHandleParam, params ProfileFollowingGetParams) error

	// (GET /roles)
	RoleList(ctx echo.Context) error

	// (POST /roles)
	RoleCreate(ctx echo.Context) error

	// (DELETE /roles/{role_id})
	RoleDelete(ctx echo.Context, roleId RoleIDParam) error

	// (GET /roles/{role_id})
	RoleGet(ctx echo.Context, roleId RoleIDParam) error

	// (PATCH /roles/{role_id})
	RoleUpdate(ctx echo.Context, roleId RoleIDParam) error

	// (GET /tags)
	TagList(ctx echo.Context, params TagListParams) error

	// (GET /tags/{tag_name})
	TagGet(ctx echo.Context, tagName TagNameParam) error

	// (GET /threads)
	ThreadList(ctx echo.Context, params ThreadListParams) error

	// (POST /threads)
	ThreadCreate(ctx echo.Context) error

	// (DELETE /threads/{thread_mark})
	ThreadDelete(ctx echo.Context, threadMark ThreadMarkParam) error
	// Get information about a thread and the posts within the thread.
	// (GET /threads/{thread_mark})
	ThreadGet(ctx echo.Context, threadMark ThreadMarkParam, params ThreadGetParams) error

	// (PATCH /threads/{thread_mark})
	ThreadUpdate(ctx echo.Context, threadMark ThreadMarkParam) error

	// (POST /threads/{thread_mark}/replies)
	ReplyCreate(ctx echo.Context, threadMark ThreadMarkParam) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountGet(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountGet(ctx)
	return err
}

// AccountUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AccountUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountUpdate(ctx)
	return err
}

// AccountAuthProviderList converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAuthProviderList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountAuthProviderList(ctx)
	return err
}

// AccountAuthMethodDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAuthMethodDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "auth_method_id" -------------
	var authMethodId string

	err = runtime.BindStyledParameterWithOptions("simple", "auth_method_id", ctx.Param("auth_method_id"), &authMethodId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth_method_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountAuthMethodDelete(ctx, authMethodId)
	return err
}

// AccountSetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountSetAvatar(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountSetAvatarParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Length" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Length")]; found {
		var ContentLength ContentLength
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Length, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Length", valueList[0], &ContentLength, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Length: %s", err))
		}

		params.ContentLength = ContentLength
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Length is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountSetAvatar(ctx, params)
	return err
}

// AccountEmailAdd converts echo context to params.
func (w *ServerInterfaceWrapper) AccountEmailAdd(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountEmailAdd(ctx)
	return err
}

// AccountEmailRemove converts echo context to params.
func (w *ServerInterfaceWrapper) AccountEmailRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "email_address_id" -------------
	var emailAddressId EmailAddressIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "email_address_id", ctx.Param("email_address_id"), &emailAddressId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email_address_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountEmailRemove(ctx, emailAddressId)
	return err
}

// AccountGetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountGetAvatar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountGetAvatar(ctx, accountHandle)
	return err
}

// AccountRemoveRole converts echo context to params.
func (w *ServerInterfaceWrapper) AccountRemoveRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// ------------- Path parameter "role_id" -------------
	var roleId RoleIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", ctx.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountRemoveRole(ctx, accountHandle, roleId)
	return err
}

// AccountAddRole converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAddRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// ------------- Path parameter "role_id" -------------
	var roleId RoleIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", ctx.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountAddRole(ctx, accountHandle, roleId)
	return err
}

// AccountRoleRemoveBadge converts echo context to params.
func (w *ServerInterfaceWrapper) AccountRoleRemoveBadge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// ------------- Path parameter "role_id" -------------
	var roleId RoleIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", ctx.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountRoleRemoveBadge(ctx, accountHandle, roleId)
	return err
}

// AccountRoleSetBadge converts echo context to params.
func (w *ServerInterfaceWrapper) AccountRoleSetBadge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// ------------- Path parameter "role_id" -------------
	var roleId RoleIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", ctx.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountRoleSetBadge(ctx, accountHandle, roleId)
	return err
}

// AccountView converts echo context to params.
func (w *ServerInterfaceWrapper) AccountView(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountView(ctx, accountId)
	return err
}

// AdminSettingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AdminSettingsUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminSettingsUpdate(ctx)
	return err
}

// AdminAccessKeyList converts echo context to params.
func (w *ServerInterfaceWrapper) AdminAccessKeyList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminAccessKeyList(ctx)
	return err
}

// AdminAccessKeyDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AdminAccessKeyDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "access_key_id" -------------
	var accessKeyId AccessKeyIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "access_key_id", ctx.Param("access_key_id"), &accessKeyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_key_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminAccessKeyDelete(ctx, accessKeyId)
	return err
}

// AdminAccountBanRemove converts echo context to params.
func (w *ServerInterfaceWrapper) AdminAccountBanRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminAccountBanRemove(ctx, accountHandle)
	return err
}

// AdminAccountBanCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AdminAccountBanCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminAccountBanCreate(ctx, accountHandle)
	return err
}

// AssetUpload converts echo context to params.
func (w *ServerInterfaceWrapper) AssetUpload(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssetUploadParams
	// ------------- Optional query parameter "filename" -------------

	err = runtime.BindQueryParameter("form", true, false, "filename", ctx.QueryParams(), &params.Filename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	// ------------- Optional query parameter "parent_asset_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_asset_id", ctx.QueryParams(), &params.ParentAssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_asset_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Length" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Length")]; found {
		var ContentLength ContentLength
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Length, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Length", valueList[0], &ContentLength, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Length: %s", err))
		}

		params.ContentLength = ContentLength
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Length is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetUpload(ctx, params)
	return err
}

// AssetGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset_filename" -------------
	var assetFilename AssetPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "asset_filename", ctx.Param("asset_filename"), &assetFilename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset_filename: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetGet(ctx, assetFilename)
	return err
}

// AuthProviderList converts echo context to params.
func (w *ServerInterfaceWrapper) AuthProviderList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthProviderList(ctx)
	return err
}

// AccessKeyList converts echo context to params.
func (w *ServerInterfaceWrapper) AccessKeyList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessKeyList(ctx)
	return err
}

// AccessKeyCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AccessKeyCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessKeyCreate(ctx)
	return err
}

// AccessKeyDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AccessKeyDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "access_key_id" -------------
	var accessKeyId AccessKeyIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "access_key_id", ctx.Param("access_key_id"), &accessKeyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_key_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessKeyDelete(ctx, accessKeyId)
	return err
}

// AuthPasswordResetRequestEmail converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordResetRequestEmail(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPasswordResetRequestEmail(ctx)
	return err
}

// AuthEmailPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthEmailPasswordSignin(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthEmailPasswordSignin(ctx)
	return err
}

// AuthEmailPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthEmailPasswordSignup(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthEmailPasswordSignupParams
	// ------------- Optional query parameter "invitation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "invitation_id", ctx.QueryParams(), &params.InvitationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthEmailPasswordSignup(ctx, params)
	return err
}

// AuthEmailSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthEmailSignin(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthEmailSignin(ctx)
	return err
}

// AuthEmailSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthEmailSignup(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthEmailSignupParams
	// ------------- Optional query parameter "invitation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "invitation_id", ctx.QueryParams(), &params.InvitationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthEmailSignup(ctx, params)
	return err
}

// AuthEmailVerify converts echo context to params.
func (w *ServerInterfaceWrapper) AuthEmailVerify(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthEmailVerify(ctx)
	return err
}

// AuthProviderLogout converts echo context to params.
func (w *ServerInterfaceWrapper) AuthProviderLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthProviderLogout(ctx)
	return err
}

// OAuthProviderCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthProviderCallback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "oauth_provider" -------------
	var oauthProvider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "oauth_provider", ctx.Param("oauth_provider"), &oauthProvider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter oauth_provider: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthProviderCallback(ctx, oauthProvider)
	return err
}

// AuthPasswordUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPasswordUpdate(ctx)
	return err
}

// AuthPasswordCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPasswordCreate(ctx)
	return err
}

// AuthPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordReset(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPasswordReset(ctx)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthPasswordSignupParams
	// ------------- Optional query parameter "invitation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "invitation_id", ctx.QueryParams(), &params.InvitationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPasswordSignup(ctx, params)
	return err
}

// PhoneRequestCode converts echo context to params.
func (w *ServerInterfaceWrapper) PhoneRequestCode(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PhoneRequestCodeParams
	// ------------- Optional query parameter "invitation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "invitation_id", ctx.QueryParams(), &params.InvitationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PhoneRequestCode(ctx, params)
	return err
}

// PhoneSubmitCode converts echo context to params.
func (w *ServerInterfaceWrapper) PhoneSubmitCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PhoneSubmitCode(ctx, accountHandle)
	return err
}

// WebAuthnMakeAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeAssertion(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebAuthnMakeAssertion(ctx)
	return err
}

// WebAuthnGetAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnGetAssertion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebAuthnGetAssertion(ctx, accountHandle)
	return err
}

// WebAuthnMakeCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeCredential(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WebAuthnMakeCredentialParams
	// ------------- Optional query parameter "invitation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "invitation_id", ctx.QueryParams(), &params.InvitationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebAuthnMakeCredential(ctx, params)
	return err
}

// WebAuthnRequestCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnRequestCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebAuthnRequestCredential(ctx, accountHandle)
	return err
}

// CategoryList converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CategoryList(ctx)
	return err
}

// CategoryCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CategoryCreate(ctx)
	return err
}

// CategoryDelete converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_slug" -------------
	var categorySlug CategorySlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "category_slug", ctx.Param("category_slug"), &categorySlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CategoryDelete(ctx, categorySlug)
	return err
}

// CategoryGet converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_slug" -------------
	var categorySlug CategorySlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "category_slug", ctx.Param("category_slug"), &categorySlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CategoryGet(ctx, categorySlug)
	return err
}

// CategoryUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_slug" -------------
	var categorySlug CategorySlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "category_slug", ctx.Param("category_slug"), &categorySlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CategoryUpdate(ctx, categorySlug)
	return err
}

// CategoryUpdatePosition converts echo context to params.
func (w *ServerInterfaceWrapper) CategoryUpdatePosition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_slug" -------------
	var categorySlug CategorySlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "category_slug", ctx.Param("category_slug"), &categorySlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CategoryUpdatePosition(ctx, categorySlug)
	return err
}

// CollectionList converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CollectionListParams
	// ------------- Optional query parameter "account_handle" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_handle", ctx.QueryParams(), &params.AccountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// ------------- Optional query parameter "has_item" -------------

	err = runtime.BindQueryParameter("form", true, false, "has_item", ctx.QueryParams(), &params.HasItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter has_item: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionList(ctx, params)
	return err
}

// CollectionCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionCreate(ctx)
	return err
}

// CollectionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_mark" -------------
	var collectionMark CollectionMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "collection_mark", ctx.Param("collection_mark"), &collectionMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionDelete(ctx, collectionMark)
	return err
}

// CollectionGet converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_mark" -------------
	var collectionMark CollectionMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "collection_mark", ctx.Param("collection_mark"), &collectionMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionGet(ctx, collectionMark)
	return err
}

// CollectionUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_mark" -------------
	var collectionMark CollectionMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "collection_mark", ctx.Param("collection_mark"), &collectionMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionUpdate(ctx, collectionMark)
	return err
}

// CollectionRemoveNode converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionRemoveNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_mark" -------------
	var collectionMark CollectionMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "collection_mark", ctx.Param("collection_mark"), &collectionMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_mark: %s", err))
	}

	// ------------- Path parameter "node_id" -------------
	var nodeId NodeIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_id", ctx.Param("node_id"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionRemoveNode(ctx, collectionMark, nodeId)
	return err
}

// CollectionAddNode converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionAddNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_mark" -------------
	var collectionMark CollectionMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "collection_mark", ctx.Param("collection_mark"), &collectionMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_mark: %s", err))
	}

	// ------------- Path parameter "node_id" -------------
	var nodeId NodeIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_id", ctx.Param("node_id"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionAddNode(ctx, collectionMark, nodeId)
	return err
}

// CollectionRemovePost converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionRemovePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_mark" -------------
	var collectionMark CollectionMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "collection_mark", ctx.Param("collection_mark"), &collectionMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_mark: %s", err))
	}

	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionRemovePost(ctx, collectionMark, postId)
	return err
}

// CollectionAddPost converts echo context to params.
func (w *ServerInterfaceWrapper) CollectionAddPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "collection_mark" -------------
	var collectionMark CollectionMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "collection_mark", ctx.Param("collection_mark"), &collectionMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collection_mark: %s", err))
	}

	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CollectionAddPost(ctx, collectionMark, postId)
	return err
}

// DatagraphSearch converts echo context to params.
func (w *ServerInterfaceWrapper) DatagraphSearch(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DatagraphSearchParams
	// ------------- Required query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, true, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DatagraphSearch(ctx, params)
	return err
}

// DatagraphAsk converts echo context to params.
func (w *ServerInterfaceWrapper) DatagraphAsk(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DatagraphAskParams
	// ------------- Required query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, true, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "parent_question_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_question_id", ctx.QueryParams(), &params.ParentQuestionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_question_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DatagraphAsk(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// EventList converts echo context to params.
func (w *ServerInterfaceWrapper) EventList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EventListParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventList(ctx, params)
	return err
}

// EventCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EventCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventCreate(ctx)
	return err
}

// EventDelete converts echo context to params.
func (w *ServerInterfaceWrapper) EventDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_mark" -------------
	var eventMark EventMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "event_mark", ctx.Param("event_mark"), &eventMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventDelete(ctx, eventMark)
	return err
}

// EventGet converts echo context to params.
func (w *ServerInterfaceWrapper) EventGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_mark" -------------
	var eventMark EventMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "event_mark", ctx.Param("event_mark"), &eventMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventGet(ctx, eventMark)
	return err
}

// EventUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EventUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_mark" -------------
	var eventMark EventMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "event_mark", ctx.Param("event_mark"), &eventMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventUpdate(ctx, eventMark)
	return err
}

// EventParticipantRemove converts echo context to params.
func (w *ServerInterfaceWrapper) EventParticipantRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_mark" -------------
	var eventMark EventMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "event_mark", ctx.Param("event_mark"), &eventMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_mark: %s", err))
	}

	// ------------- Path parameter "account_id" -------------
	var accountId AccountIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventParticipantRemove(ctx, eventMark, accountId)
	return err
}

// EventParticipantUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EventParticipantUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_mark" -------------
	var eventMark EventMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "event_mark", ctx.Param("event_mark"), &eventMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_mark: %s", err))
	}

	// ------------- Path parameter "account_id" -------------
	var accountId AccountIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EventParticipantUpdate(ctx, eventMark, accountId)
	return err
}

// GetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInfo(ctx)
	return err
}

// BannerGet converts echo context to params.
func (w *ServerInterfaceWrapper) BannerGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BannerGet(ctx)
	return err
}

// BannerUpload converts echo context to params.
func (w *ServerInterfaceWrapper) BannerUpload(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BannerUpload(ctx)
	return err
}

// IconUpload converts echo context to params.
func (w *ServerInterfaceWrapper) IconUpload(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IconUpload(ctx)
	return err
}

// IconGet converts echo context to params.
func (w *ServerInterfaceWrapper) IconGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "icon_size" -------------
	var iconSize IconGetParamsIconSize

	err = runtime.BindStyledParameterWithOptions("simple", "icon_size", ctx.Param("icon_size"), &iconSize, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter icon_size: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IconGet(ctx, iconSize)
	return err
}

// InvitationList converts echo context to params.
func (w *ServerInterfaceWrapper) InvitationList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params InvitationListParams
	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvitationList(ctx, params)
	return err
}

// InvitationCreate converts echo context to params.
func (w *ServerInterfaceWrapper) InvitationCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvitationCreate(ctx)
	return err
}

// InvitationDelete converts echo context to params.
func (w *ServerInterfaceWrapper) InvitationDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invitation_id" -------------
	var invitationId InvitationIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "invitation_id", ctx.Param("invitation_id"), &invitationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvitationDelete(ctx, invitationId)
	return err
}

// InvitationGet converts echo context to params.
func (w *ServerInterfaceWrapper) InvitationGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invitation_id" -------------
	var invitationId InvitationIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "invitation_id", ctx.Param("invitation_id"), &invitationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvitationGet(ctx, invitationId)
	return err
}

// LikePostRemove converts echo context to params.
func (w *ServerInterfaceWrapper) LikePostRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LikePostRemove(ctx, postId)
	return err
}

// LikePostGet converts echo context to params.
func (w *ServerInterfaceWrapper) LikePostGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LikePostGet(ctx, postId)
	return err
}

// LikePostAdd converts echo context to params.
func (w *ServerInterfaceWrapper) LikePostAdd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LikePostAdd(ctx, postId)
	return err
}

// LikeProfileGet converts echo context to params.
func (w *ServerInterfaceWrapper) LikeProfileGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LikeProfileGetParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LikeProfileGet(ctx, accountHandle, params)
	return err
}

// LinkList converts echo context to params.
func (w *ServerInterfaceWrapper) LinkList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LinkListParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LinkList(ctx, params)
	return err
}

// LinkCreate converts echo context to params.
func (w *ServerInterfaceWrapper) LinkCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LinkCreate(ctx)
	return err
}

// LinkGet converts echo context to params.
func (w *ServerInterfaceWrapper) LinkGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "link_slug" -------------
	var linkSlug LinkSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "link_slug", ctx.Param("link_slug"), &linkSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter link_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LinkGet(ctx, linkSlug)
	return err
}

// NodeList converts echo context to params.
func (w *ServerInterfaceWrapper) NodeList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NodeListParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "node_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "node_id", ctx.QueryParams(), &params.NodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_id: %s", err))
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "visibility" -------------

	err = runtime.BindQueryParameter("form", true, false, "visibility", ctx.QueryParams(), &params.Visibility)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter visibility: %s", err))
	}

	// ------------- Optional query parameter "depth" -------------

	err = runtime.BindQueryParameter("form", true, false, "depth", ctx.QueryParams(), &params.Depth)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter depth: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeList(ctx, params)
	return err
}

// NodeCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NodeCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeCreate(ctx)
	return err
}

// NodeDelete converts echo context to params.
func (w *ServerInterfaceWrapper) NodeDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NodeDeleteParams
	// ------------- Optional query parameter "target_node" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_node", ctx.QueryParams(), &params.TargetNode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeDelete(ctx, nodeSlug, params)
	return err
}

// NodeGet converts echo context to params.
func (w *ServerInterfaceWrapper) NodeGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NodeGetParams
	// ------------- Optional query parameter "children_sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "children_sort", ctx.QueryParams(), &params.ChildrenSort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter children_sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeGet(ctx, nodeSlug, params)
	return err
}

// NodeUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NodeUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeUpdate(ctx, nodeSlug)
	return err
}

// NodeRemoveAsset converts echo context to params.
func (w *ServerInterfaceWrapper) NodeRemoveAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId AssetIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", ctx.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeRemoveAsset(ctx, nodeSlug, assetId)
	return err
}

// NodeAddAsset converts echo context to params.
func (w *ServerInterfaceWrapper) NodeAddAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId AssetIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", ctx.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeAddAsset(ctx, nodeSlug, assetId)
	return err
}

// NodeListChildren converts echo context to params.
func (w *ServerInterfaceWrapper) NodeListChildren(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NodeListChildrenParams
	// ------------- Optional query parameter "children_sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "children_sort", ctx.QueryParams(), &params.ChildrenSort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter children_sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeListChildren(ctx, nodeSlug, params)
	return err
}

// NodeUpdateChildrenPropertySchema converts echo context to params.
func (w *ServerInterfaceWrapper) NodeUpdateChildrenPropertySchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeUpdateChildrenPropertySchema(ctx, nodeSlug)
	return err
}

// NodeGenerateContent converts echo context to params.
func (w *ServerInterfaceWrapper) NodeGenerateContent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeGenerateContent(ctx, nodeSlug)
	return err
}

// NodeRemoveNode converts echo context to params.
func (w *ServerInterfaceWrapper) NodeRemoveNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	// ------------- Path parameter "node_slug_child" -------------
	var nodeSlugChild NodeSlugChildParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug_child", ctx.Param("node_slug_child"), &nodeSlugChild, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug_child: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeRemoveNode(ctx, nodeSlug, nodeSlugChild)
	return err
}

// NodeAddNode converts echo context to params.
func (w *ServerInterfaceWrapper) NodeAddNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	// ------------- Path parameter "node_slug_child" -------------
	var nodeSlugChild NodeSlugChildParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug_child", ctx.Param("node_slug_child"), &nodeSlugChild, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug_child: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeAddNode(ctx, nodeSlug, nodeSlugChild)
	return err
}

// NodeUpdatePosition converts echo context to params.
func (w *ServerInterfaceWrapper) NodeUpdatePosition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeUpdatePosition(ctx, nodeSlug)
	return err
}

// NodeUpdateProperties converts echo context to params.
func (w *ServerInterfaceWrapper) NodeUpdateProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeUpdateProperties(ctx, nodeSlug)
	return err
}

// NodeUpdatePropertySchema converts echo context to params.
func (w *ServerInterfaceWrapper) NodeUpdatePropertySchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeUpdatePropertySchema(ctx, nodeSlug)
	return err
}

// NodeGenerateTags converts echo context to params.
func (w *ServerInterfaceWrapper) NodeGenerateTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeGenerateTags(ctx, nodeSlug)
	return err
}

// NodeGenerateTitle converts echo context to params.
func (w *ServerInterfaceWrapper) NodeGenerateTitle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeGenerateTitle(ctx, nodeSlug)
	return err
}

// NodeUpdateVisibility converts echo context to params.
func (w *ServerInterfaceWrapper) NodeUpdateVisibility(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "node_slug" -------------
	var nodeSlug NodeSlugParam

	err = runtime.BindStyledParameterWithOptions("simple", "node_slug", ctx.Param("node_slug"), &nodeSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_slug: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NodeUpdateVisibility(ctx, nodeSlug)
	return err
}

// NotificationList converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotificationListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotificationList(ctx, params)
	return err
}

// NotificationUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "notification_id" -------------
	var notificationId NotificationIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "notification_id", ctx.Param("notification_id"), &notificationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter notification_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotificationUpdate(ctx, notificationId)
	return err
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// PostDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDelete(ctx, postId)
	return err
}

// PostUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUpdate(ctx, postId)
	return err
}

// PostReactAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostReactAdd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReactAdd(ctx, postId)
	return err
}

// PostReactRemove converts echo context to params.
func (w *ServerInterfaceWrapper) PostReactRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId PostIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	// ------------- Path parameter "react_id" -------------
	var reactId ReactIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "react_id", ctx.Param("react_id"), &reactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter react_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReactRemove(ctx, postId, reactId)
	return err
}

// ProfileList converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileListParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileList(ctx, params)
	return err
}

// ProfileGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileGet(ctx, accountHandle)
	return err
}

// ProfileFollowersRemove converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileFollowersRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileFollowersRemove(ctx, accountHandle)
	return err
}

// ProfileFollowersGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileFollowersGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileFollowersGetParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileFollowersGet(ctx, accountHandle, params)
	return err
}

// ProfileFollowersAdd converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileFollowersAdd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileFollowersAdd(ctx, accountHandle)
	return err
}

// ProfileFollowingGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileFollowingGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandleParam

	err = runtime.BindStyledParameterWithOptions("simple", "account_handle", ctx.Param("account_handle"), &accountHandle, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileFollowingGetParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileFollowingGet(ctx, accountHandle, params)
	return err
}

// RoleList converts echo context to params.
func (w *ServerInterfaceWrapper) RoleList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleList(ctx)
	return err
}

// RoleCreate converts echo context to params.
func (w *ServerInterfaceWrapper) RoleCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleCreate(ctx)
	return err
}

// RoleDelete converts echo context to params.
func (w *ServerInterfaceWrapper) RoleDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_id" -------------
	var roleId RoleIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", ctx.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleDelete(ctx, roleId)
	return err
}

// RoleGet converts echo context to params.
func (w *ServerInterfaceWrapper) RoleGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_id" -------------
	var roleId RoleIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", ctx.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleGet(ctx, roleId)
	return err
}

// RoleUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) RoleUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role_id" -------------
	var roleId RoleIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", ctx.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleUpdate(ctx, roleId)
	return err
}

// TagList converts echo context to params.
func (w *ServerInterfaceWrapper) TagList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TagListParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TagList(ctx, params)
	return err
}

// TagGet converts echo context to params.
func (w *ServerInterfaceWrapper) TagGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag_name" -------------
	var tagName TagNameParam

	err = runtime.BindStyledParameterWithOptions("simple", "tag_name", ctx.Param("tag_name"), &tagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_name: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TagGet(ctx, tagName)
	return err
}

// ThreadList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadList(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ThreadListParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "visibility" -------------

	err = runtime.BindQueryParameter("form", true, false, "visibility", ctx.QueryParams(), &params.Visibility)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter visibility: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", ctx.QueryParams(), &params.Categories)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categories: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ThreadList(ctx, params)
	return err
}

// ThreadCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ThreadCreate(ctx)
	return err
}

// ThreadDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "thread_mark", ctx.Param("thread_mark"), &threadMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ThreadDelete(ctx, threadMark)
	return err
}

// ThreadGet converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "thread_mark", ctx.Param("thread_mark"), &threadMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ThreadGetParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ThreadGet(ctx, threadMark, params)
	return err
}

// ThreadUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "thread_mark", ctx.Param("thread_mark"), &threadMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ThreadUpdate(ctx, threadMark)
	return err
}

// ReplyCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ReplyCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_mark" -------------
	var threadMark ThreadMarkParam

	err = runtime.BindStyledParameterWithOptions("simple", "thread_mark", ctx.Param("thread_mark"), &threadMark, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_mark: %s", err))
	}

	ctx.Set(BrowserScopes, []string{})

	ctx.Set(Access_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReplyCreate(ctx, threadMark)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.AccountGet)
	router.PATCH(baseURL+"/accounts", wrapper.AccountUpdate)
	router.GET(baseURL+"/accounts/self/auth-methods", wrapper.AccountAuthProviderList)
	router.DELETE(baseURL+"/accounts/self/auth-methods/:auth_method_id", wrapper.AccountAuthMethodDelete)
	router.POST(baseURL+"/accounts/self/avatar", wrapper.AccountSetAvatar)
	router.POST(baseURL+"/accounts/self/emails", wrapper.AccountEmailAdd)
	router.DELETE(baseURL+"/accounts/self/emails/:email_address_id", wrapper.AccountEmailRemove)
	router.GET(baseURL+"/accounts/:account_handle/avatar", wrapper.AccountGetAvatar)
	router.DELETE(baseURL+"/accounts/:account_handle/roles/:role_id", wrapper.AccountRemoveRole)
	router.PUT(baseURL+"/accounts/:account_handle/roles/:role_id", wrapper.AccountAddRole)
	router.DELETE(baseURL+"/accounts/:account_handle/roles/:role_id/badge", wrapper.AccountRoleRemoveBadge)
	router.PUT(baseURL+"/accounts/:account_handle/roles/:role_id/badge", wrapper.AccountRoleSetBadge)
	router.GET(baseURL+"/accounts/:account_id", wrapper.AccountView)
	router.PATCH(baseURL+"/admin", wrapper.AdminSettingsUpdate)
	router.GET(baseURL+"/admin/access-keys", wrapper.AdminAccessKeyList)
	router.DELETE(baseURL+"/admin/access-keys/:access_key_id", wrapper.AdminAccessKeyDelete)
	router.DELETE(baseURL+"/admin/bans/:account_handle", wrapper.AdminAccountBanRemove)
	router.POST(baseURL+"/admin/bans/:account_handle", wrapper.AdminAccountBanCreate)
	router.POST(baseURL+"/assets", wrapper.AssetUpload)
	router.GET(baseURL+"/assets/:asset_filename", wrapper.AssetGet)
	router.GET(baseURL+"/auth", wrapper.AuthProviderList)
	router.GET(baseURL+"/auth/access-keys", wrapper.AccessKeyList)
	router.POST(baseURL+"/auth/access-keys", wrapper.AccessKeyCreate)
	router.DELETE(baseURL+"/auth/access-keys/:access_key_id", wrapper.AccessKeyDelete)
	router.POST(baseURL+"/auth/email-password/reset", wrapper.AuthPasswordResetRequestEmail)
	router.POST(baseURL+"/auth/email-password/signin", wrapper.AuthEmailPasswordSignin)
	router.POST(baseURL+"/auth/email-password/signup", wrapper.AuthEmailPasswordSignup)
	router.POST(baseURL+"/auth/email/signin", wrapper.AuthEmailSignin)
	router.POST(baseURL+"/auth/email/signup", wrapper.AuthEmailSignup)
	router.POST(baseURL+"/auth/email/verify", wrapper.AuthEmailVerify)
	router.GET(baseURL+"/auth/logout", wrapper.AuthProviderLogout)
	router.POST(baseURL+"/auth/oauth/:oauth_provider/callback", wrapper.OAuthProviderCallback)
	router.PATCH(baseURL+"/auth/password", wrapper.AuthPasswordUpdate)
	router.POST(baseURL+"/auth/password", wrapper.AuthPasswordCreate)
	router.POST(baseURL+"/auth/password/reset", wrapper.AuthPasswordReset)
	router.POST(baseURL+"/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/auth/password/signup", wrapper.AuthPasswordSignup)
	router.POST(baseURL+"/auth/phone", wrapper.PhoneRequestCode)
	router.PUT(baseURL+"/auth/phone/:account_handle", wrapper.PhoneSubmitCode)
	router.POST(baseURL+"/auth/webauthn/assert", wrapper.WebAuthnMakeAssertion)
	router.GET(baseURL+"/auth/webauthn/assert/:account_handle", wrapper.WebAuthnGetAssertion)
	router.POST(baseURL+"/auth/webauthn/make", wrapper.WebAuthnMakeCredential)
	router.GET(baseURL+"/auth/webauthn/make/:account_handle", wrapper.WebAuthnRequestCredential)
	router.GET(baseURL+"/categories", wrapper.CategoryList)
	router.POST(baseURL+"/categories", wrapper.CategoryCreate)
	router.DELETE(baseURL+"/categories/:category_slug", wrapper.CategoryDelete)
	router.GET(baseURL+"/categories/:category_slug", wrapper.CategoryGet)
	router.PATCH(baseURL+"/categories/:category_slug", wrapper.CategoryUpdate)
	router.PATCH(baseURL+"/categories/:category_slug/position", wrapper.CategoryUpdatePosition)
	router.GET(baseURL+"/collections", wrapper.CollectionList)
	router.POST(baseURL+"/collections", wrapper.CollectionCreate)
	router.DELETE(baseURL+"/collections/:collection_mark", wrapper.CollectionDelete)
	router.GET(baseURL+"/collections/:collection_mark", wrapper.CollectionGet)
	router.PATCH(baseURL+"/collections/:collection_mark", wrapper.CollectionUpdate)
	router.DELETE(baseURL+"/collections/:collection_mark/nodes/:node_id", wrapper.CollectionRemoveNode)
	router.PUT(baseURL+"/collections/:collection_mark/nodes/:node_id", wrapper.CollectionAddNode)
	router.DELETE(baseURL+"/collections/:collection_mark/posts/:post_id", wrapper.CollectionRemovePost)
	router.PUT(baseURL+"/collections/:collection_mark/posts/:post_id", wrapper.CollectionAddPost)
	router.GET(baseURL+"/datagraph", wrapper.DatagraphSearch)
	router.GET(baseURL+"/datagraph/ask", wrapper.DatagraphAsk)
	router.GET(baseURL+"/docs", wrapper.GetDocs)
	router.GET(baseURL+"/events", wrapper.EventList)
	router.POST(baseURL+"/events", wrapper.EventCreate)
	router.DELETE(baseURL+"/events/:event_mark", wrapper.EventDelete)
	router.GET(baseURL+"/events/:event_mark", wrapper.EventGet)
	router.PATCH(baseURL+"/events/:event_mark", wrapper.EventUpdate)
	router.DELETE(baseURL+"/events/:event_mark/participants/:account_id", wrapper.EventParticipantRemove)
	router.PUT(baseURL+"/events/:event_mark/participants/:account_id", wrapper.EventParticipantUpdate)
	router.GET(baseURL+"/info", wrapper.GetInfo)
	router.GET(baseURL+"/info/banner", wrapper.BannerGet)
	router.POST(baseURL+"/info/banner", wrapper.BannerUpload)
	router.POST(baseURL+"/info/icon", wrapper.IconUpload)
	router.GET(baseURL+"/info/icon/:icon_size", wrapper.IconGet)
	router.GET(baseURL+"/invitations", wrapper.InvitationList)
	router.POST(baseURL+"/invitations", wrapper.InvitationCreate)
	router.DELETE(baseURL+"/invitations/:invitation_id", wrapper.InvitationDelete)
	router.GET(baseURL+"/invitations/:invitation_id", wrapper.InvitationGet)
	router.DELETE(baseURL+"/likes/posts/:post_id", wrapper.LikePostRemove)
	router.GET(baseURL+"/likes/posts/:post_id", wrapper.LikePostGet)
	router.PUT(baseURL+"/likes/posts/:post_id", wrapper.LikePostAdd)
	router.GET(baseURL+"/likes/profiles/:account_handle", wrapper.LikeProfileGet)
	router.GET(baseURL+"/links", wrapper.LinkList)
	router.POST(baseURL+"/links", wrapper.LinkCreate)
	router.GET(baseURL+"/links/:link_slug", wrapper.LinkGet)
	router.GET(baseURL+"/nodes", wrapper.NodeList)
	router.POST(baseURL+"/nodes", wrapper.NodeCreate)
	router.DELETE(baseURL+"/nodes/:node_slug", wrapper.NodeDelete)
	router.GET(baseURL+"/nodes/:node_slug", wrapper.NodeGet)
	router.PATCH(baseURL+"/nodes/:node_slug", wrapper.NodeUpdate)
	router.DELETE(baseURL+"/nodes/:node_slug/assets/:asset_id", wrapper.NodeRemoveAsset)
	router.PUT(baseURL+"/nodes/:node_slug/assets/:asset_id", wrapper.NodeAddAsset)
	router.GET(baseURL+"/nodes/:node_slug/children", wrapper.NodeListChildren)
	router.PATCH(baseURL+"/nodes/:node_slug/children/property-schema", wrapper.NodeUpdateChildrenPropertySchema)
	router.POST(baseURL+"/nodes/:node_slug/content", wrapper.NodeGenerateContent)
	router.DELETE(baseURL+"/nodes/:node_slug/nodes/:node_slug_child", wrapper.NodeRemoveNode)
	router.PUT(baseURL+"/nodes/:node_slug/nodes/:node_slug_child", wrapper.NodeAddNode)
	router.PATCH(baseURL+"/nodes/:node_slug/position", wrapper.NodeUpdatePosition)
	router.PATCH(baseURL+"/nodes/:node_slug/properties", wrapper.NodeUpdateProperties)
	router.PATCH(baseURL+"/nodes/:node_slug/property-schema", wrapper.NodeUpdatePropertySchema)
	router.POST(baseURL+"/nodes/:node_slug/tags", wrapper.NodeGenerateTags)
	router.POST(baseURL+"/nodes/:node_slug/title", wrapper.NodeGenerateTitle)
	router.PATCH(baseURL+"/nodes/:node_slug/visibility", wrapper.NodeUpdateVisibility)
	router.GET(baseURL+"/notifications", wrapper.NotificationList)
	router.PATCH(baseURL+"/notifications/:notification_id", wrapper.NotificationUpdate)
	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.DELETE(baseURL+"/posts/:post_id", wrapper.PostDelete)
	router.PATCH(baseURL+"/posts/:post_id", wrapper.PostUpdate)
	router.PUT(baseURL+"/posts/:post_id/reacts", wrapper.PostReactAdd)
	router.DELETE(baseURL+"/posts/:post_id/reacts/:react_id", wrapper.PostReactRemove)
	router.GET(baseURL+"/profiles", wrapper.ProfileList)
	router.GET(baseURL+"/profiles/:account_handle", wrapper.ProfileGet)
	router.DELETE(baseURL+"/profiles/:account_handle/followers", wrapper.ProfileFollowersRemove)
	router.GET(baseURL+"/profiles/:account_handle/followers", wrapper.ProfileFollowersGet)
	router.PUT(baseURL+"/profiles/:account_handle/followers", wrapper.ProfileFollowersAdd)
	router.GET(baseURL+"/profiles/:account_handle/following", wrapper.ProfileFollowingGet)
	router.GET(baseURL+"/roles", wrapper.RoleList)
	router.POST(baseURL+"/roles", wrapper.RoleCreate)
	router.DELETE(baseURL+"/roles/:role_id", wrapper.RoleDelete)
	router.GET(baseURL+"/roles/:role_id", wrapper.RoleGet)
	router.PATCH(baseURL+"/roles/:role_id", wrapper.RoleUpdate)
	router.GET(baseURL+"/tags", wrapper.TagList)
	router.GET(baseURL+"/tags/:tag_name", wrapper.TagGet)
	router.GET(baseURL+"/threads", wrapper.ThreadList)
	router.POST(baseURL+"/threads", wrapper.ThreadCreate)
	router.DELETE(baseURL+"/threads/:thread_mark", wrapper.ThreadDelete)
	router.GET(baseURL+"/threads/:thread_mark", wrapper.ThreadGet)
	router.PATCH(baseURL+"/threads/:thread_mark", wrapper.ThreadUpdate)
	router.POST(baseURL+"/threads/:thread_mark/replies", wrapper.ReplyCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccessKeyCreateOKJSONResponse AccessKeyIssued

type AccessKeyListOKJSONResponse AccessKeyListResult

type AccountAuthProviderListOKJSONResponse AccountAuthMethods

type AccountEmailUpdateOKJSONResponse AccountEmailAddress

type AccountGetAvatarResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}
type AccountGetAvatarImagepngResponse struct {
	Body io.Reader

	Headers       AccountGetAvatarResponseHeaders
	ContentLength int64
}

type AccountGetOKResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}
type AccountGetOKJSONResponse struct {
	Body Account

	Headers AccountGetOKResponseHeaders
}

type AccountUpdateOKJSONResponse Account

type AdminAccessKeyListOKJSONResponse OwnedAccessKeyListResult

type AdminSettingsUpdateOKJSONResponse AdminSettingsProps

type AssetGetOKResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}
type AssetGetOKAsteriskResponse struct {
	Body io.Reader

	Headers       AssetGetOKResponseHeaders
	ContentType   string
	ContentLength int64
}

type AssetUploadOKJSONResponse Asset

type AuthProviderListOKJSONResponse struct {
	Mode      AuthMode         `json:"mode"`
	Providers AuthProviderList `json:"providers"`
}

type AuthSuccessOKResponseHeaders struct {
	SetCookie string
}
type AuthSuccessOKJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessOKResponseHeaders
}

type BadRequestResponse struct {
}

type CategoryCreateOKJSONResponse Category

type CategoryDeleteOKJSONResponse Category

type CategoryGetOKJSONResponse Category

type CategoryListOKJSONResponse CategoryListResult

type CategoryUpdateOKJSONResponse Category

type CollectionAddNodeOKJSONResponse CollectionWithItems

type CollectionAddPostOKJSONResponse CollectionWithItems

type CollectionCreateOKJSONResponse Collection

type CollectionGetOKJSONResponse CollectionWithItems

type CollectionListOKJSONResponse struct {
	Collections CollectionList `json:"collections"`
}

type CollectionRemoveNodeOKJSONResponse CollectionWithItems

type CollectionRemovePostOKJSONResponse CollectionWithItems

type CollectionUpdateOKJSONResponse Collection

type DatagraphAskOKTexteventStreamResponse struct {
	Body io.Reader

	ContentLength int64
}

type DatagraphSearchOKJSONResponse DatagraphSearchResult

type EventCreateOKJSONResponse Event

type EventGetOKJSONResponse Event

type EventListOKJSONResponse EventListResult

type EventUpdateOKJSONResponse Event

type ForbiddenResponse struct {
}

type GetInfoOKJSONResponse Info

type InternalServerErrorJSONResponse APIError

type InvitationCreateOKJSONResponse Invitation

type InvitationGetOKJSONResponse Invitation

type InvitationListOKJSONResponse InvitationListResult

type LikePostGetOKJSONResponse struct {
	Likes ItemLikeList `json:"likes"`
}

type LikeProfileGetOKJSONResponse ProfileLikeListResult

type LinkCreateOKJSONResponse LinkReference

type LinkGetOKJSONResponse Link

type LinkListOKJSONResponse LinkListResult

type NoContentResponse struct {
}

type NodeAddChildOKJSONResponse Node

type NodeCreateOKJSONResponse Node

type NodeDeleteOKJSONResponse struct {
	// Destination A node is a text document with children and assets. It serves as an
	// abstraction for grouping structured data objects. It can represent
	// things such as brands, manufacturers, authors, directors, etc. Nodes
	// can be referenced in content posts and they also have their own content.
	Destination *Node `json:"destination,omitempty"`
}

type NodeGenerateContentOKJSONResponse NodeGenerateContentResult

type NodeGenerateTagsOKJSONResponse NodeGenerateTagsResult

type NodeGenerateTitleOKJSONResponse NodeGenerateTitleResult

type NodeGetOKJSONResponse NodeWithChildren

type NodeListOKJSONResponse NodeListResult

type NodeRemoveChildOKJSONResponse Node

type NodeUpdateOKJSONResponse NodeWithChildren

type NodeUpdatePropertiesOKJSONResponse struct {
	Properties PropertyList `json:"properties"`
}

type NodeUpdatePropertySchemaOKJSONResponse struct {
	Properties PropertySchemaList `json:"properties"`
}

type NotFoundResponse struct {
}

type NotImplementedResponse struct {
}

type NotModifiedResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}
type NotModifiedResponse struct {
	Headers NotModifiedResponseHeaders
}

type NotificationListOKJSONResponse NotificationListResult

type NotificationUpdateOKJSONResponse Notification

type PostReactAddOKJSONResponse React

type PostUpdateOKJSONResponse Post

type ProfileFollowersGetOKJSONResponse PublicProfileFollowersResult

type ProfileFollowingGetOKJSONResponse PublicProfileFollowingResult

type ProfileGetOKResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}
type ProfileGetOKJSONResponse struct {
	Body PublicProfile

	Headers ProfileGetOKResponseHeaders
}

type ProfileListOKJSONResponse PublicProfileListResult

type ReplyCreateOKJSONResponse Reply

type RoleCreateOKJSONResponse Role

type RoleGetOKJSONResponse Role

type RoleListOKJSONResponse RoleListResult

type TagGetOKJSONResponse Tag

type TagListOKJSONResponse TagListResult

type ThreadCreateOKJSONResponse Thread

type ThreadGetResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}
type ThreadGetJSONResponse struct {
	Body Thread

	Headers ThreadGetResponseHeaders
}

type ThreadListOKResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}
type ThreadListOKJSONResponse struct {
	Body ThreadListResult

	Headers ThreadListOKResponseHeaders
}

type ThreadUpdateOKJSONResponse Thread

type UnauthorisedResponse struct {
}

type WebAuthnGetAssertionOKResponseHeaders struct {
	SetCookie string
}
type WebAuthnGetAssertionOKJSONResponse struct {
	Body CredentialRequestOptions

	Headers WebAuthnGetAssertionOKResponseHeaders
}

type WebAuthnRequestCredentialOKResponseHeaders struct {
	SetCookie string
}
type WebAuthnRequestCredentialOKJSONResponse struct {
	Body WebAuthnPublicKeyCreationOptions

	Headers WebAuthnRequestCredentialOKResponseHeaders
}

type AccountGetRequestObject struct {
}

type AccountGetResponseObject interface {
	VisitAccountGetResponse(w http.ResponseWriter) error
}

type AccountGet200JSONResponse struct{ AccountGetOKJSONResponse }

func (response AccountGet200JSONResponse) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountGet304Response = NotModifiedResponse

func (response AccountGet304Response) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(304)
	return nil
}

type AccountGet401Response = UnauthorisedResponse

func (response AccountGet401Response) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountGet404Response = NotFoundResponse

func (response AccountGet404Response) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountGetdefaultJSONResponse) VisitAccountGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountUpdateRequestObject struct {
	Body *AccountUpdateJSONRequestBody
}

type AccountUpdateResponseObject interface {
	VisitAccountUpdateResponse(w http.ResponseWriter) error
}

type AccountUpdate200JSONResponse struct{ AccountUpdateOKJSONResponse }

func (response AccountUpdate200JSONResponse) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountUpdate401Response = UnauthorisedResponse

func (response AccountUpdate401Response) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountUpdate404Response = NotFoundResponse

func (response AccountUpdate404Response) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountUpdatedefaultJSONResponse) VisitAccountUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountAuthProviderListRequestObject struct {
}

type AccountAuthProviderListResponseObject interface {
	VisitAccountAuthProviderListResponse(w http.ResponseWriter) error
}

type AccountAuthProviderList200JSONResponse struct {
	AccountAuthProviderListOKJSONResponse
}

func (response AccountAuthProviderList200JSONResponse) VisitAccountAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountAuthProviderList400Response = BadRequestResponse

func (response AccountAuthProviderList400Response) VisitAccountAuthProviderListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccountAuthProviderListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountAuthProviderListdefaultJSONResponse) VisitAccountAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountAuthMethodDeleteRequestObject struct {
	AuthMethodId string `json:"auth_method_id"`
}

type AccountAuthMethodDeleteResponseObject interface {
	VisitAccountAuthMethodDeleteResponse(w http.ResponseWriter) error
}

type AccountAuthMethodDelete200JSONResponse struct {
	AccountAuthProviderListOKJSONResponse
}

func (response AccountAuthMethodDelete200JSONResponse) VisitAccountAuthMethodDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountAuthMethodDelete400Response = BadRequestResponse

func (response AccountAuthMethodDelete400Response) VisitAccountAuthMethodDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccountAuthMethodDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountAuthMethodDeletedefaultJSONResponse) VisitAccountAuthMethodDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountSetAvatarRequestObject struct {
	Params AccountSetAvatarParams
	Body   io.Reader
}

type AccountSetAvatarResponseObject interface {
	VisitAccountSetAvatarResponse(w http.ResponseWriter) error
}

type AccountSetAvatar200Response struct {
}

func (response AccountSetAvatar200Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AccountSetAvatar401Response = UnauthorisedResponse

func (response AccountSetAvatar401Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountSetAvatar404Response = NotFoundResponse

func (response AccountSetAvatar404Response) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountSetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountSetAvatardefaultJSONResponse) VisitAccountSetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountEmailAddRequestObject struct {
	Body *AccountEmailAddJSONRequestBody
}

type AccountEmailAddResponseObject interface {
	VisitAccountEmailAddResponse(w http.ResponseWriter) error
}

type AccountEmailAdd200JSONResponse struct {
	AccountEmailUpdateOKJSONResponse
}

func (response AccountEmailAdd200JSONResponse) VisitAccountEmailAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountEmailAdd400Response = BadRequestResponse

func (response AccountEmailAdd400Response) VisitAccountEmailAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccountEmailAdd401Response = UnauthorisedResponse

func (response AccountEmailAdd401Response) VisitAccountEmailAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountEmailAdddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountEmailAdddefaultJSONResponse) VisitAccountEmailAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountEmailRemoveRequestObject struct {
	EmailAddressId EmailAddressIDParam `json:"email_address_id"`
}

type AccountEmailRemoveResponseObject interface {
	VisitAccountEmailRemoveResponse(w http.ResponseWriter) error
}

type AccountEmailRemove200Response struct {
}

func (response AccountEmailRemove200Response) VisitAccountEmailRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AccountEmailRemove400Response = BadRequestResponse

func (response AccountEmailRemove400Response) VisitAccountEmailRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccountEmailRemove401Response = UnauthorisedResponse

func (response AccountEmailRemove401Response) VisitAccountEmailRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountEmailRemovedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountEmailRemovedefaultJSONResponse) VisitAccountEmailRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountGetAvatarRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type AccountGetAvatarResponseObject interface {
	VisitAccountGetAvatarResponse(w http.ResponseWriter) error
}

type AccountGetAvatar200ImagepngResponse struct {
	AccountGetAvatarImagepngResponse
}

func (response AccountGetAvatar200ImagepngResponse) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AccountGetAvatar401Response = UnauthorisedResponse

func (response AccountGetAvatar401Response) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountGetAvatar404Response = NotFoundResponse

func (response AccountGetAvatar404Response) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountGetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountGetAvatardefaultJSONResponse) VisitAccountGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountRemoveRoleRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	RoleId        RoleIDParam        `json:"role_id"`
}

type AccountRemoveRoleResponseObject interface {
	VisitAccountRemoveRoleResponse(w http.ResponseWriter) error
}

type AccountRemoveRole200JSONResponse struct{ AccountUpdateOKJSONResponse }

func (response AccountRemoveRole200JSONResponse) VisitAccountRemoveRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountRemoveRole401Response = UnauthorisedResponse

func (response AccountRemoveRole401Response) VisitAccountRemoveRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountRemoveRole404Response = NotFoundResponse

func (response AccountRemoveRole404Response) VisitAccountRemoveRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountRemoveRoledefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountRemoveRoledefaultJSONResponse) VisitAccountRemoveRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountAddRoleRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	RoleId        RoleIDParam        `json:"role_id"`
}

type AccountAddRoleResponseObject interface {
	VisitAccountAddRoleResponse(w http.ResponseWriter) error
}

type AccountAddRole200JSONResponse struct{ AccountUpdateOKJSONResponse }

func (response AccountAddRole200JSONResponse) VisitAccountAddRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountAddRole401Response = UnauthorisedResponse

func (response AccountAddRole401Response) VisitAccountAddRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountAddRole404Response = NotFoundResponse

func (response AccountAddRole404Response) VisitAccountAddRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountAddRoledefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountAddRoledefaultJSONResponse) VisitAccountAddRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountRoleRemoveBadgeRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	RoleId        RoleIDParam        `json:"role_id"`
}

type AccountRoleRemoveBadgeResponseObject interface {
	VisitAccountRoleRemoveBadgeResponse(w http.ResponseWriter) error
}

type AccountRoleRemoveBadge200JSONResponse struct{ AccountUpdateOKJSONResponse }

func (response AccountRoleRemoveBadge200JSONResponse) VisitAccountRoleRemoveBadgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountRoleRemoveBadge401Response = UnauthorisedResponse

func (response AccountRoleRemoveBadge401Response) VisitAccountRoleRemoveBadgeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountRoleRemoveBadge404Response = NotFoundResponse

func (response AccountRoleRemoveBadge404Response) VisitAccountRoleRemoveBadgeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountRoleRemoveBadgedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountRoleRemoveBadgedefaultJSONResponse) VisitAccountRoleRemoveBadgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountRoleSetBadgeRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	RoleId        RoleIDParam        `json:"role_id"`
}

type AccountRoleSetBadgeResponseObject interface {
	VisitAccountRoleSetBadgeResponse(w http.ResponseWriter) error
}

type AccountRoleSetBadge200JSONResponse struct{ AccountUpdateOKJSONResponse }

func (response AccountRoleSetBadge200JSONResponse) VisitAccountRoleSetBadgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountRoleSetBadge401Response = UnauthorisedResponse

func (response AccountRoleSetBadge401Response) VisitAccountRoleSetBadgeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountRoleSetBadge404Response = NotFoundResponse

func (response AccountRoleSetBadge404Response) VisitAccountRoleSetBadgeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountRoleSetBadgedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountRoleSetBadgedefaultJSONResponse) VisitAccountRoleSetBadgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountViewRequestObject struct {
	AccountId AccountIDParam `json:"account_id"`
}

type AccountViewResponseObject interface {
	VisitAccountViewResponse(w http.ResponseWriter) error
}

type AccountView200JSONResponse struct{ AccountGetOKJSONResponse }

func (response AccountView200JSONResponse) VisitAccountViewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountView401Response = UnauthorisedResponse

func (response AccountView401Response) VisitAccountViewResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountView403Response = ForbiddenResponse

func (response AccountView403Response) VisitAccountViewResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AccountView404Response = NotFoundResponse

func (response AccountView404Response) VisitAccountViewResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountViewdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountViewdefaultJSONResponse) VisitAccountViewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminSettingsUpdateRequestObject struct {
	Body *AdminSettingsUpdateJSONRequestBody
}

type AdminSettingsUpdateResponseObject interface {
	VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error
}

type AdminSettingsUpdate200JSONResponse struct {
	AdminSettingsUpdateOKJSONResponse
}

func (response AdminSettingsUpdate200JSONResponse) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminSettingsUpdate400Response = BadRequestResponse

func (response AdminSettingsUpdate400Response) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminSettingsUpdate401Response = UnauthorisedResponse

func (response AdminSettingsUpdate401Response) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminSettingsUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AdminSettingsUpdatedefaultJSONResponse) VisitAdminSettingsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminAccessKeyListRequestObject struct {
}

type AdminAccessKeyListResponseObject interface {
	VisitAdminAccessKeyListResponse(w http.ResponseWriter) error
}

type AdminAccessKeyList200JSONResponse struct {
	AdminAccessKeyListOKJSONResponse
}

func (response AdminAccessKeyList200JSONResponse) VisitAdminAccessKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminAccessKeyList400Response = BadRequestResponse

func (response AdminAccessKeyList400Response) VisitAdminAccessKeyListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminAccessKeyList403Response = ForbiddenResponse

func (response AdminAccessKeyList403Response) VisitAdminAccessKeyListResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminAccessKeyListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AdminAccessKeyListdefaultJSONResponse) VisitAdminAccessKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminAccessKeyDeleteRequestObject struct {
	AccessKeyId AccessKeyIDParam `json:"access_key_id"`
}

type AdminAccessKeyDeleteResponseObject interface {
	VisitAdminAccessKeyDeleteResponse(w http.ResponseWriter) error
}

type AdminAccessKeyDelete204Response = NoContentResponse

func (response AdminAccessKeyDelete204Response) VisitAdminAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AdminAccessKeyDelete400Response = BadRequestResponse

func (response AdminAccessKeyDelete400Response) VisitAdminAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminAccessKeyDelete403Response = ForbiddenResponse

func (response AdminAccessKeyDelete403Response) VisitAdminAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminAccessKeyDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AdminAccessKeyDeletedefaultJSONResponse) VisitAdminAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminAccountBanRemoveRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type AdminAccountBanRemoveResponseObject interface {
	VisitAdminAccountBanRemoveResponse(w http.ResponseWriter) error
}

type AdminAccountBanRemove200JSONResponse struct{ AccountGetOKJSONResponse }

func (response AdminAccountBanRemove200JSONResponse) VisitAdminAccountBanRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminAccountBanRemove401Response = UnauthorisedResponse

func (response AdminAccountBanRemove401Response) VisitAdminAccountBanRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminAccountBanRemove404Response = NotFoundResponse

func (response AdminAccountBanRemove404Response) VisitAdminAccountBanRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminAccountBanRemovedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AdminAccountBanRemovedefaultJSONResponse) VisitAdminAccountBanRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminAccountBanCreateRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type AdminAccountBanCreateResponseObject interface {
	VisitAdminAccountBanCreateResponse(w http.ResponseWriter) error
}

type AdminAccountBanCreate200JSONResponse struct{ AccountGetOKJSONResponse }

func (response AdminAccountBanCreate200JSONResponse) VisitAdminAccountBanCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminAccountBanCreate401Response = UnauthorisedResponse

func (response AdminAccountBanCreate401Response) VisitAdminAccountBanCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminAccountBanCreate404Response = NotFoundResponse

func (response AdminAccountBanCreate404Response) VisitAdminAccountBanCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminAccountBanCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AdminAccountBanCreatedefaultJSONResponse) VisitAdminAccountBanCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AssetUploadRequestObject struct {
	Params AssetUploadParams
	Body   io.Reader
}

type AssetUploadResponseObject interface {
	VisitAssetUploadResponse(w http.ResponseWriter) error
}

type AssetUpload200JSONResponse struct{ AssetUploadOKJSONResponse }

func (response AssetUpload200JSONResponse) VisitAssetUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetUpload401Response = UnauthorisedResponse

func (response AssetUpload401Response) VisitAssetUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetUploaddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AssetUploaddefaultJSONResponse) VisitAssetUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AssetGetRequestObject struct {
	AssetFilename AssetPathParam `json:"asset_filename"`
}

type AssetGetResponseObject interface {
	VisitAssetGetResponse(w http.ResponseWriter) error
}

type AssetGet200AsteriskResponse struct{ AssetGetOKAsteriskResponse }

func (response AssetGet200AsteriskResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AssetGet401Response = UnauthorisedResponse

func (response AssetGet401Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetGet404Response = NotFoundResponse

func (response AssetGet404Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AssetGetdefaultJSONResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthProviderListRequestObject struct {
}

type AuthProviderListResponseObject interface {
	VisitAuthProviderListResponse(w http.ResponseWriter) error
}

type AuthProviderList200JSONResponse struct{ AuthProviderListOKJSONResponse }

func (response AuthProviderList200JSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthProviderList400Response = BadRequestResponse

func (response AuthProviderList400Response) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthProviderListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthProviderListdefaultJSONResponse) VisitAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessKeyListRequestObject struct {
}

type AccessKeyListResponseObject interface {
	VisitAccessKeyListResponse(w http.ResponseWriter) error
}

type AccessKeyList200JSONResponse struct{ AccessKeyListOKJSONResponse }

func (response AccessKeyList200JSONResponse) VisitAccessKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccessKeyList400Response = BadRequestResponse

func (response AccessKeyList400Response) VisitAccessKeyListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccessKeyList403Response = ForbiddenResponse

func (response AccessKeyList403Response) VisitAccessKeyListResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AccessKeyListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccessKeyListdefaultJSONResponse) VisitAccessKeyListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessKeyCreateRequestObject struct {
	Body *AccessKeyCreateJSONRequestBody
}

type AccessKeyCreateResponseObject interface {
	VisitAccessKeyCreateResponse(w http.ResponseWriter) error
}

type AccessKeyCreate200JSONResponse struct{ AccessKeyCreateOKJSONResponse }

func (response AccessKeyCreate200JSONResponse) VisitAccessKeyCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccessKeyCreate400Response = BadRequestResponse

func (response AccessKeyCreate400Response) VisitAccessKeyCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccessKeyCreate403Response = ForbiddenResponse

func (response AccessKeyCreate403Response) VisitAccessKeyCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AccessKeyCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccessKeyCreatedefaultJSONResponse) VisitAccessKeyCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessKeyDeleteRequestObject struct {
	AccessKeyId AccessKeyIDParam `json:"access_key_id"`
}

type AccessKeyDeleteResponseObject interface {
	VisitAccessKeyDeleteResponse(w http.ResponseWriter) error
}

type AccessKeyDelete204Response = NoContentResponse

func (response AccessKeyDelete204Response) VisitAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AccessKeyDelete400Response = BadRequestResponse

func (response AccessKeyDelete400Response) VisitAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AccessKeyDelete403Response = ForbiddenResponse

func (response AccessKeyDelete403Response) VisitAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AccessKeyDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccessKeyDeletedefaultJSONResponse) VisitAccessKeyDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordResetRequestEmailRequestObject struct {
	Body *AuthPasswordResetRequestEmailJSONRequestBody
}

type AuthPasswordResetRequestEmailResponseObject interface {
	VisitAuthPasswordResetRequestEmailResponse(w http.ResponseWriter) error
}

type AuthPasswordResetRequestEmail200Response struct {
}

func (response AuthPasswordResetRequestEmail200Response) VisitAuthPasswordResetRequestEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AuthPasswordResetRequestEmail401Response = UnauthorisedResponse

func (response AuthPasswordResetRequestEmail401Response) VisitAuthPasswordResetRequestEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordResetRequestEmail404Response = NotFoundResponse

func (response AuthPasswordResetRequestEmail404Response) VisitAuthPasswordResetRequestEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordResetRequestEmaildefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordResetRequestEmaildefaultJSONResponse) VisitAuthPasswordResetRequestEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailPasswordSigninRequestObject struct {
	Body *AuthEmailPasswordSigninJSONRequestBody
}

type AuthEmailPasswordSigninResponseObject interface {
	VisitAuthEmailPasswordSigninResponse(w http.ResponseWriter) error
}

type AuthEmailPasswordSignin200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthEmailPasswordSignin200JSONResponse) VisitAuthEmailPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailPasswordSignin401Response = UnauthorisedResponse

func (response AuthEmailPasswordSignin401Response) VisitAuthEmailPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthEmailPasswordSignin404Response = NotFoundResponse

func (response AuthEmailPasswordSignin404Response) VisitAuthEmailPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthEmailPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthEmailPasswordSignindefaultJSONResponse) VisitAuthEmailPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailPasswordSignupRequestObject struct {
	Params AuthEmailPasswordSignupParams
	Body   *AuthEmailPasswordSignupJSONRequestBody
}

type AuthEmailPasswordSignupResponseObject interface {
	VisitAuthEmailPasswordSignupResponse(w http.ResponseWriter) error
}

type AuthEmailPasswordSignup200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthEmailPasswordSignup200JSONResponse) VisitAuthEmailPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailPasswordSignup400Response = BadRequestResponse

func (response AuthEmailPasswordSignup400Response) VisitAuthEmailPasswordSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthEmailPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthEmailPasswordSignupdefaultJSONResponse) VisitAuthEmailPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailSigninRequestObject struct {
	Body *AuthEmailSigninJSONRequestBody
}

type AuthEmailSigninResponseObject interface {
	VisitAuthEmailSigninResponse(w http.ResponseWriter) error
}

type AuthEmailSignin200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthEmailSignin200JSONResponse) VisitAuthEmailSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailSignin401Response = UnauthorisedResponse

func (response AuthEmailSignin401Response) VisitAuthEmailSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthEmailSignin404Response = NotFoundResponse

func (response AuthEmailSignin404Response) VisitAuthEmailSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthEmailSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthEmailSignindefaultJSONResponse) VisitAuthEmailSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailSignupRequestObject struct {
	Params AuthEmailSignupParams
	Body   *AuthEmailSignupJSONRequestBody
}

type AuthEmailSignupResponseObject interface {
	VisitAuthEmailSignupResponse(w http.ResponseWriter) error
}

type AuthEmailSignup200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthEmailSignup200JSONResponse) VisitAuthEmailSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailSignup400Response = BadRequestResponse

func (response AuthEmailSignup400Response) VisitAuthEmailSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthEmailSignup422Response struct {
}

func (response AuthEmailSignup422Response) VisitAuthEmailSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type AuthEmailSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthEmailSignupdefaultJSONResponse) VisitAuthEmailSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailVerifyRequestObject struct {
	Body *AuthEmailVerifyJSONRequestBody
}

type AuthEmailVerifyResponseObject interface {
	VisitAuthEmailVerifyResponse(w http.ResponseWriter) error
}

type AuthEmailVerify200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthEmailVerify200JSONResponse) VisitAuthEmailVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthEmailVerify401Response = UnauthorisedResponse

func (response AuthEmailVerify401Response) VisitAuthEmailVerifyResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthEmailVerify404Response = NotFoundResponse

func (response AuthEmailVerify404Response) VisitAuthEmailVerifyResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthEmailVerifydefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthEmailVerifydefaultJSONResponse) VisitAuthEmailVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthProviderLogoutRequestObject struct {
}

type AuthProviderLogoutResponseObject interface {
	VisitAuthProviderLogoutResponse(w http.ResponseWriter) error
}

type AuthProviderLogout200ResponseHeaders struct {
	SetCookie string
}

type AuthProviderLogout200Response struct {
	Headers AuthProviderLogout200ResponseHeaders
}

func (response AuthProviderLogout200Response) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type AuthProviderLogout400Response = BadRequestResponse

func (response AuthProviderLogout400Response) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthProviderLogoutdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthProviderLogoutdefaultJSONResponse) VisitAuthProviderLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthProviderCallbackRequestObject struct {
	OauthProvider OAuthProvider `json:"oauth_provider"`
	Body          *OAuthProviderCallbackJSONRequestBody
}

type OAuthProviderCallbackResponseObject interface {
	VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error
}

type OAuthProviderCallback200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response OAuthProviderCallback200JSONResponse) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthProviderCallback401Response = UnauthorisedResponse

func (response OAuthProviderCallback401Response) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type OAuthProviderCallback404Response = NotFoundResponse

func (response OAuthProviderCallback404Response) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type OAuthProviderCallbackdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response OAuthProviderCallbackdefaultJSONResponse) VisitOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordUpdateRequestObject struct {
	Body *AuthPasswordUpdateJSONRequestBody
}

type AuthPasswordUpdateResponseObject interface {
	VisitAuthPasswordUpdateResponse(w http.ResponseWriter) error
}

type AuthPasswordUpdate200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordUpdate200JSONResponse) VisitAuthPasswordUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordUpdate401Response = UnauthorisedResponse

func (response AuthPasswordUpdate401Response) VisitAuthPasswordUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordUpdate404Response = NotFoundResponse

func (response AuthPasswordUpdate404Response) VisitAuthPasswordUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordUpdatedefaultJSONResponse) VisitAuthPasswordUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordCreateRequestObject struct {
	Body *AuthPasswordCreateJSONRequestBody
}

type AuthPasswordCreateResponseObject interface {
	VisitAuthPasswordCreateResponse(w http.ResponseWriter) error
}

type AuthPasswordCreate200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordCreate200JSONResponse) VisitAuthPasswordCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordCreate401Response = UnauthorisedResponse

func (response AuthPasswordCreate401Response) VisitAuthPasswordCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordCreate404Response = NotFoundResponse

func (response AuthPasswordCreate404Response) VisitAuthPasswordCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordCreatedefaultJSONResponse) VisitAuthPasswordCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordResetRequestObject struct {
	Body *AuthPasswordResetJSONRequestBody
}

type AuthPasswordResetResponseObject interface {
	VisitAuthPasswordResetResponse(w http.ResponseWriter) error
}

type AuthPasswordReset200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordReset200JSONResponse) VisitAuthPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordReset401Response = UnauthorisedResponse

func (response AuthPasswordReset401Response) VisitAuthPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordReset404Response = NotFoundResponse

func (response AuthPasswordReset404Response) VisitAuthPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordResetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordResetdefaultJSONResponse) VisitAuthPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSigninRequestObject struct {
	Body *AuthPasswordSigninJSONRequestBody
}

type AuthPasswordSigninResponseObject interface {
	VisitAuthPasswordSigninResponse(w http.ResponseWriter) error
}

type AuthPasswordSignin200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordSignin200JSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignin401Response = UnauthorisedResponse

func (response AuthPasswordSignin401Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordSignin404Response = NotFoundResponse

func (response AuthPasswordSignin404Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignindefaultJSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignupRequestObject struct {
	Params AuthPasswordSignupParams
	Body   *AuthPasswordSignupJSONRequestBody
}

type AuthPasswordSignupResponseObject interface {
	VisitAuthPasswordSignupResponse(w http.ResponseWriter) error
}

type AuthPasswordSignup200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response AuthPasswordSignup200JSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignup400Response = BadRequestResponse

func (response AuthPasswordSignup400Response) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignupdefaultJSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneRequestCodeRequestObject struct {
	Params PhoneRequestCodeParams
	Body   *PhoneRequestCodeJSONRequestBody
}

type PhoneRequestCodeResponseObject interface {
	VisitPhoneRequestCodeResponse(w http.ResponseWriter) error
}

type PhoneRequestCode200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response PhoneRequestCode200JSONResponse) VisitPhoneRequestCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneRequestCode400Response = BadRequestResponse

func (response PhoneRequestCode400Response) VisitPhoneRequestCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PhoneRequestCodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PhoneRequestCodedefaultJSONResponse) VisitPhoneRequestCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneSubmitCodeRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	Body          *PhoneSubmitCodeJSONRequestBody
}

type PhoneSubmitCodeResponseObject interface {
	VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error
}

type PhoneSubmitCode200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response PhoneSubmitCode200JSONResponse) VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PhoneSubmitCode400Response = BadRequestResponse

func (response PhoneSubmitCode400Response) VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PhoneSubmitCodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PhoneSubmitCodedefaultJSONResponse) VisitPhoneSubmitCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertionRequestObject struct {
	Body *WebAuthnMakeAssertionJSONRequestBody
}

type WebAuthnMakeAssertionResponseObject interface {
	VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnMakeAssertion200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response WebAuthnMakeAssertion200JSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertion401Response = UnauthorisedResponse

func (response WebAuthnMakeAssertion401Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnMakeAssertion404Response = NotFoundResponse

func (response WebAuthnMakeAssertion404Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnMakeAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeAssertiondefaultJSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertionRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type WebAuthnGetAssertionResponseObject interface {
	VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnGetAssertion200JSONResponse struct {
	WebAuthnGetAssertionOKJSONResponse
}

func (response WebAuthnGetAssertion200JSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertion401Response = UnauthorisedResponse

func (response WebAuthnGetAssertion401Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnGetAssertion404Response = NotFoundResponse

func (response WebAuthnGetAssertion404Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnGetAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnGetAssertiondefaultJSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredentialRequestObject struct {
	Params WebAuthnMakeCredentialParams
	Body   *WebAuthnMakeCredentialJSONRequestBody
}

type WebAuthnMakeCredentialResponseObject interface {
	VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnMakeCredential200JSONResponse struct{ AuthSuccessOKJSONResponse }

func (response WebAuthnMakeCredential200JSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredential400Response = BadRequestResponse

func (response WebAuthnMakeCredential400Response) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnMakeCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeCredentialdefaultJSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredentialRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type WebAuthnRequestCredentialResponseObject interface {
	VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnRequestCredential200JSONResponse struct {
	WebAuthnRequestCredentialOKJSONResponse
}

func (response WebAuthnRequestCredential200JSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredential400Response = BadRequestResponse

func (response WebAuthnRequestCredential400Response) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnRequestCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnRequestCredentialdefaultJSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryListRequestObject struct {
}

type CategoryListResponseObject interface {
	VisitCategoryListResponse(w http.ResponseWriter) error
}

type CategoryList200JSONResponse struct{ CategoryListOKJSONResponse }

func (response CategoryList200JSONResponse) VisitCategoryListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryListdefaultJSONResponse) VisitCategoryListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryCreateRequestObject struct {
	Body *CategoryCreateJSONRequestBody
}

type CategoryCreateResponseObject interface {
	VisitCategoryCreateResponse(w http.ResponseWriter) error
}

type CategoryCreate200JSONResponse struct{ CategoryCreateOKJSONResponse }

func (response CategoryCreate200JSONResponse) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryCreate400Response = BadRequestResponse

func (response CategoryCreate400Response) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CategoryCreate401Response = UnauthorisedResponse

func (response CategoryCreate401Response) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CategoryCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryCreatedefaultJSONResponse) VisitCategoryCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryDeleteRequestObject struct {
	CategorySlug CategorySlugParam `json:"category_slug"`
	Body         *CategoryDeleteJSONRequestBody
}

type CategoryDeleteResponseObject interface {
	VisitCategoryDeleteResponse(w http.ResponseWriter) error
}

type CategoryDelete200JSONResponse struct{ CategoryDeleteOKJSONResponse }

func (response CategoryDelete200JSONResponse) VisitCategoryDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryDelete400Response = BadRequestResponse

func (response CategoryDelete400Response) VisitCategoryDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CategoryDelete401Response = UnauthorisedResponse

func (response CategoryDelete401Response) VisitCategoryDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CategoryDelete404Response = NotFoundResponse

func (response CategoryDelete404Response) VisitCategoryDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CategoryDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryDeletedefaultJSONResponse) VisitCategoryDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryGetRequestObject struct {
	CategorySlug CategorySlugParam `json:"category_slug"`
}

type CategoryGetResponseObject interface {
	VisitCategoryGetResponse(w http.ResponseWriter) error
}

type CategoryGet200JSONResponse struct{ CategoryGetOKJSONResponse }

func (response CategoryGet200JSONResponse) VisitCategoryGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryGet404Response = NotFoundResponse

func (response CategoryGet404Response) VisitCategoryGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CategoryGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryGetdefaultJSONResponse) VisitCategoryGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryUpdateRequestObject struct {
	CategorySlug CategorySlugParam `json:"category_slug"`
	Body         *CategoryUpdateJSONRequestBody
}

type CategoryUpdateResponseObject interface {
	VisitCategoryUpdateResponse(w http.ResponseWriter) error
}

type CategoryUpdate200JSONResponse struct{ CategoryUpdateOKJSONResponse }

func (response CategoryUpdate200JSONResponse) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryUpdate400Response = BadRequestResponse

func (response CategoryUpdate400Response) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CategoryUpdate401Response = UnauthorisedResponse

func (response CategoryUpdate401Response) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CategoryUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryUpdatedefaultJSONResponse) VisitCategoryUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CategoryUpdatePositionRequestObject struct {
	CategorySlug CategorySlugParam `json:"category_slug"`
	Body         *CategoryUpdatePositionJSONRequestBody
}

type CategoryUpdatePositionResponseObject interface {
	VisitCategoryUpdatePositionResponse(w http.ResponseWriter) error
}

type CategoryUpdatePosition200JSONResponse struct{ CategoryListOKJSONResponse }

func (response CategoryUpdatePosition200JSONResponse) VisitCategoryUpdatePositionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CategoryUpdatePosition400Response = BadRequestResponse

func (response CategoryUpdatePosition400Response) VisitCategoryUpdatePositionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CategoryUpdatePosition401Response = UnauthorisedResponse

func (response CategoryUpdatePosition401Response) VisitCategoryUpdatePositionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CategoryUpdatePosition404Response = NotFoundResponse

func (response CategoryUpdatePosition404Response) VisitCategoryUpdatePositionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CategoryUpdatePositiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CategoryUpdatePositiondefaultJSONResponse) VisitCategoryUpdatePositionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionListRequestObject struct {
	Params CollectionListParams
}

type CollectionListResponseObject interface {
	VisitCollectionListResponse(w http.ResponseWriter) error
}

type CollectionList200JSONResponse struct{ CollectionListOKJSONResponse }

func (response CollectionList200JSONResponse) VisitCollectionListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionList404Response = NotFoundResponse

func (response CollectionList404Response) VisitCollectionListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionListdefaultJSONResponse) VisitCollectionListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionCreateRequestObject struct {
	Body *CollectionCreateJSONRequestBody
}

type CollectionCreateResponseObject interface {
	VisitCollectionCreateResponse(w http.ResponseWriter) error
}

type CollectionCreate200JSONResponse struct{ CollectionCreateOKJSONResponse }

func (response CollectionCreate200JSONResponse) VisitCollectionCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionCreate401Response = UnauthorisedResponse

func (response CollectionCreate401Response) VisitCollectionCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionCreatedefaultJSONResponse) VisitCollectionCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionDeleteRequestObject struct {
	CollectionMark CollectionMarkParam `json:"collection_mark"`
}

type CollectionDeleteResponseObject interface {
	VisitCollectionDeleteResponse(w http.ResponseWriter) error
}

type CollectionDelete200Response struct {
}

func (response CollectionDelete200Response) VisitCollectionDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CollectionDelete401Response = UnauthorisedResponse

func (response CollectionDelete401Response) VisitCollectionDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionDelete404Response = NotFoundResponse

func (response CollectionDelete404Response) VisitCollectionDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionDeletedefaultJSONResponse) VisitCollectionDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionGetRequestObject struct {
	CollectionMark CollectionMarkParam `json:"collection_mark"`
}

type CollectionGetResponseObject interface {
	VisitCollectionGetResponse(w http.ResponseWriter) error
}

type CollectionGet200JSONResponse struct{ CollectionGetOKJSONResponse }

func (response CollectionGet200JSONResponse) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionGet401Response = UnauthorisedResponse

func (response CollectionGet401Response) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionGet404Response = NotFoundResponse

func (response CollectionGet404Response) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionGetdefaultJSONResponse) VisitCollectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionUpdateRequestObject struct {
	CollectionMark CollectionMarkParam `json:"collection_mark"`
	Body           *CollectionUpdateJSONRequestBody
}

type CollectionUpdateResponseObject interface {
	VisitCollectionUpdateResponse(w http.ResponseWriter) error
}

type CollectionUpdate200JSONResponse struct{ CollectionUpdateOKJSONResponse }

func (response CollectionUpdate200JSONResponse) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionUpdate401Response = UnauthorisedResponse

func (response CollectionUpdate401Response) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionUpdate404Response = NotFoundResponse

func (response CollectionUpdate404Response) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionUpdatedefaultJSONResponse) VisitCollectionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionRemoveNodeRequestObject struct {
	CollectionMark CollectionMarkParam `json:"collection_mark"`
	NodeId         NodeIDParam         `json:"node_id"`
}

type CollectionRemoveNodeResponseObject interface {
	VisitCollectionRemoveNodeResponse(w http.ResponseWriter) error
}

type CollectionRemoveNode200JSONResponse struct {
	CollectionRemoveNodeOKJSONResponse
}

func (response CollectionRemoveNode200JSONResponse) VisitCollectionRemoveNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionRemoveNode401Response = UnauthorisedResponse

func (response CollectionRemoveNode401Response) VisitCollectionRemoveNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionRemoveNode404Response = NotFoundResponse

func (response CollectionRemoveNode404Response) VisitCollectionRemoveNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionRemoveNodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionRemoveNodedefaultJSONResponse) VisitCollectionRemoveNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionAddNodeRequestObject struct {
	CollectionMark CollectionMarkParam `json:"collection_mark"`
	NodeId         NodeIDParam         `json:"node_id"`
}

type CollectionAddNodeResponseObject interface {
	VisitCollectionAddNodeResponse(w http.ResponseWriter) error
}

type CollectionAddNode200JSONResponse struct {
	CollectionAddNodeOKJSONResponse
}

func (response CollectionAddNode200JSONResponse) VisitCollectionAddNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionAddNode401Response = UnauthorisedResponse

func (response CollectionAddNode401Response) VisitCollectionAddNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionAddNode404Response = NotFoundResponse

func (response CollectionAddNode404Response) VisitCollectionAddNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionAddNodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionAddNodedefaultJSONResponse) VisitCollectionAddNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionRemovePostRequestObject struct {
	CollectionMark CollectionMarkParam `json:"collection_mark"`
	PostId         PostIDParam         `json:"post_id"`
}

type CollectionRemovePostResponseObject interface {
	VisitCollectionRemovePostResponse(w http.ResponseWriter) error
}

type CollectionRemovePost200JSONResponse struct {
	CollectionRemovePostOKJSONResponse
}

func (response CollectionRemovePost200JSONResponse) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionRemovePost401Response = UnauthorisedResponse

func (response CollectionRemovePost401Response) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionRemovePost404Response = NotFoundResponse

func (response CollectionRemovePost404Response) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionRemovePostdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionRemovePostdefaultJSONResponse) VisitCollectionRemovePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CollectionAddPostRequestObject struct {
	CollectionMark CollectionMarkParam `json:"collection_mark"`
	PostId         PostIDParam         `json:"post_id"`
}

type CollectionAddPostResponseObject interface {
	VisitCollectionAddPostResponse(w http.ResponseWriter) error
}

type CollectionAddPost200JSONResponse struct {
	CollectionAddPostOKJSONResponse
}

func (response CollectionAddPost200JSONResponse) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CollectionAddPost401Response = UnauthorisedResponse

func (response CollectionAddPost401Response) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CollectionAddPost404Response = NotFoundResponse

func (response CollectionAddPost404Response) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CollectionAddPostdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response CollectionAddPostdefaultJSONResponse) VisitCollectionAddPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DatagraphSearchRequestObject struct {
	Params DatagraphSearchParams
}

type DatagraphSearchResponseObject interface {
	VisitDatagraphSearchResponse(w http.ResponseWriter) error
}

type DatagraphSearch200JSONResponse struct{ DatagraphSearchOKJSONResponse }

func (response DatagraphSearch200JSONResponse) VisitDatagraphSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DatagraphSearch401Response = UnauthorisedResponse

func (response DatagraphSearch401Response) VisitDatagraphSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DatagraphSearch404Response = NotFoundResponse

func (response DatagraphSearch404Response) VisitDatagraphSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DatagraphSearchdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response DatagraphSearchdefaultJSONResponse) VisitDatagraphSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DatagraphAskRequestObject struct {
	Params DatagraphAskParams
}

type DatagraphAskResponseObject interface {
	VisitDatagraphAskResponse(w http.ResponseWriter) error
}

type DatagraphAsk200TexteventStreamResponse struct {
	DatagraphAskOKTexteventStreamResponse
}

func (response DatagraphAsk200TexteventStreamResponse) VisitDatagraphAskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DatagraphAsk401Response = UnauthorisedResponse

func (response DatagraphAsk401Response) VisitDatagraphAskResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DatagraphAsk404Response = NotFoundResponse

func (response DatagraphAsk404Response) VisitDatagraphAskResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DatagraphAskdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response DatagraphAskdefaultJSONResponse) VisitDatagraphAskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDocsRequestObject struct {
}

type GetDocsResponseObject interface {
	VisitGetDocsResponse(w http.ResponseWriter) error
}

type GetDocs200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetDocs200TexthtmlResponse) VisitGetDocsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetDocsdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response GetDocsdefaultJSONResponse) VisitGetDocsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EventListRequestObject struct {
	Params EventListParams
}

type EventListResponseObject interface {
	VisitEventListResponse(w http.ResponseWriter) error
}

type EventList200JSONResponse struct{ EventListOKJSONResponse }

func (response EventList200JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventList404Response = NotFoundResponse

func (response EventList404Response) VisitEventListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type EventListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response EventListdefaultJSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EventCreateRequestObject struct {
	Body *EventCreateJSONRequestBody
}

type EventCreateResponseObject interface {
	VisitEventCreateResponse(w http.ResponseWriter) error
}

type EventCreate200JSONResponse struct{ EventCreateOKJSONResponse }

func (response EventCreate200JSONResponse) VisitEventCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventCreate401Response = UnauthorisedResponse

func (response EventCreate401Response) VisitEventCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type EventCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response EventCreatedefaultJSONResponse) VisitEventCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EventDeleteRequestObject struct {
	EventMark EventMarkParam `json:"event_mark"`
}

type EventDeleteResponseObject interface {
	VisitEventDeleteResponse(w http.ResponseWriter) error
}

type EventDelete200Response struct {
}

func (response EventDelete200Response) VisitEventDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type EventDelete401Response = UnauthorisedResponse

func (response EventDelete401Response) VisitEventDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type EventDelete404Response = NotFoundResponse

func (response EventDelete404Response) VisitEventDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type EventDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response EventDeletedefaultJSONResponse) VisitEventDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EventGetRequestObject struct {
	EventMark EventMarkParam `json:"event_mark"`
}

type EventGetResponseObject interface {
	VisitEventGetResponse(w http.ResponseWriter) error
}

type EventGet200JSONResponse struct{ EventGetOKJSONResponse }

func (response EventGet200JSONResponse) VisitEventGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventGet401Response = UnauthorisedResponse

func (response EventGet401Response) VisitEventGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type EventGet404Response = NotFoundResponse

func (response EventGet404Response) VisitEventGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type EventGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response EventGetdefaultJSONResponse) VisitEventGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EventUpdateRequestObject struct {
	EventMark EventMarkParam `json:"event_mark"`
	Body      *EventUpdateJSONRequestBody
}

type EventUpdateResponseObject interface {
	VisitEventUpdateResponse(w http.ResponseWriter) error
}

type EventUpdate200JSONResponse struct{ EventUpdateOKJSONResponse }

func (response EventUpdate200JSONResponse) VisitEventUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventUpdate401Response = UnauthorisedResponse

func (response EventUpdate401Response) VisitEventUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type EventUpdate404Response = NotFoundResponse

func (response EventUpdate404Response) VisitEventUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type EventUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response EventUpdatedefaultJSONResponse) VisitEventUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EventParticipantRemoveRequestObject struct {
	EventMark EventMarkParam `json:"event_mark"`
	AccountId AccountIDParam `json:"account_id"`
}

type EventParticipantRemoveResponseObject interface {
	VisitEventParticipantRemoveResponse(w http.ResponseWriter) error
}

type EventParticipantRemove200Response struct {
}

func (response EventParticipantRemove200Response) VisitEventParticipantRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type EventParticipantRemove401Response = UnauthorisedResponse

func (response EventParticipantRemove401Response) VisitEventParticipantRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type EventParticipantRemove404Response = NotFoundResponse

func (response EventParticipantRemove404Response) VisitEventParticipantRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type EventParticipantRemovedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response EventParticipantRemovedefaultJSONResponse) VisitEventParticipantRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EventParticipantUpdateRequestObject struct {
	EventMark EventMarkParam `json:"event_mark"`
	AccountId AccountIDParam `json:"account_id"`
	Body      *EventParticipantUpdateJSONRequestBody
}

type EventParticipantUpdateResponseObject interface {
	VisitEventParticipantUpdateResponse(w http.ResponseWriter) error
}

type EventParticipantUpdate200Response struct {
}

func (response EventParticipantUpdate200Response) VisitEventParticipantUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type EventParticipantUpdate401Response = UnauthorisedResponse

func (response EventParticipantUpdate401Response) VisitEventParticipantUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type EventParticipantUpdate404Response = NotFoundResponse

func (response EventParticipantUpdate404Response) VisitEventParticipantUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type EventParticipantUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response EventParticipantUpdatedefaultJSONResponse) VisitEventParticipantUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetInfoRequestObject struct {
}

type GetInfoResponseObject interface {
	VisitGetInfoResponse(w http.ResponseWriter) error
}

type GetInfo200JSONResponse struct{ GetInfoOKJSONResponse }

func (response GetInfo200JSONResponse) VisitGetInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInfodefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response GetInfodefaultJSONResponse) VisitGetInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type BannerGetRequestObject struct {
}

type BannerGetResponseObject interface {
	VisitBannerGetResponse(w http.ResponseWriter) error
}

type BannerGet200AsteriskResponse struct{ AssetGetOKAsteriskResponse }

func (response BannerGet200AsteriskResponse) VisitBannerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type BannerGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response BannerGetdefaultJSONResponse) VisitBannerGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type BannerUploadRequestObject struct {
	Body io.Reader
}

type BannerUploadResponseObject interface {
	VisitBannerUploadResponse(w http.ResponseWriter) error
}

type BannerUpload200Response struct {
}

func (response BannerUpload200Response) VisitBannerUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type BannerUpload401Response = UnauthorisedResponse

func (response BannerUpload401Response) VisitBannerUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type BannerUploaddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response BannerUploaddefaultJSONResponse) VisitBannerUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type IconUploadRequestObject struct {
	Body io.Reader
}

type IconUploadResponseObject interface {
	VisitIconUploadResponse(w http.ResponseWriter) error
}

type IconUpload200Response struct {
}

func (response IconUpload200Response) VisitIconUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type IconUpload401Response = UnauthorisedResponse

func (response IconUpload401Response) VisitIconUploadResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type IconUploaddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response IconUploaddefaultJSONResponse) VisitIconUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type IconGetRequestObject struct {
	IconSize IconGetParamsIconSize `json:"icon_size"`
}

type IconGetResponseObject interface {
	VisitIconGetResponse(w http.ResponseWriter) error
}

type IconGet200AsteriskResponse struct{ AssetGetOKAsteriskResponse }

func (response IconGet200AsteriskResponse) VisitIconGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type IconGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response IconGetdefaultJSONResponse) VisitIconGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InvitationListRequestObject struct {
	Params InvitationListParams
}

type InvitationListResponseObject interface {
	VisitInvitationListResponse(w http.ResponseWriter) error
}

type InvitationList200JSONResponse struct{ InvitationListOKJSONResponse }

func (response InvitationList200JSONResponse) VisitInvitationListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InvitationList401Response = UnauthorisedResponse

func (response InvitationList401Response) VisitInvitationListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type InvitationList404Response = NotFoundResponse

func (response InvitationList404Response) VisitInvitationListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type InvitationListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response InvitationListdefaultJSONResponse) VisitInvitationListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InvitationCreateRequestObject struct {
	Body *InvitationCreateJSONRequestBody
}

type InvitationCreateResponseObject interface {
	VisitInvitationCreateResponse(w http.ResponseWriter) error
}

type InvitationCreate200JSONResponse struct{ InvitationCreateOKJSONResponse }

func (response InvitationCreate200JSONResponse) VisitInvitationCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InvitationCreate401Response = UnauthorisedResponse

func (response InvitationCreate401Response) VisitInvitationCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type InvitationCreate404Response = NotFoundResponse

func (response InvitationCreate404Response) VisitInvitationCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type InvitationCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response InvitationCreatedefaultJSONResponse) VisitInvitationCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InvitationDeleteRequestObject struct {
	InvitationId InvitationIDParam `json:"invitation_id"`
}

type InvitationDeleteResponseObject interface {
	VisitInvitationDeleteResponse(w http.ResponseWriter) error
}

type InvitationDelete200Response struct {
}

func (response InvitationDelete200Response) VisitInvitationDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type InvitationDelete401Response = UnauthorisedResponse

func (response InvitationDelete401Response) VisitInvitationDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type InvitationDelete404Response = NotFoundResponse

func (response InvitationDelete404Response) VisitInvitationDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type InvitationDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response InvitationDeletedefaultJSONResponse) VisitInvitationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InvitationGetRequestObject struct {
	InvitationId InvitationIDParam `json:"invitation_id"`
}

type InvitationGetResponseObject interface {
	VisitInvitationGetResponse(w http.ResponseWriter) error
}

type InvitationGet200JSONResponse struct{ InvitationGetOKJSONResponse }

func (response InvitationGet200JSONResponse) VisitInvitationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InvitationGet401Response = UnauthorisedResponse

func (response InvitationGet401Response) VisitInvitationGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type InvitationGet404Response = NotFoundResponse

func (response InvitationGet404Response) VisitInvitationGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type InvitationGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response InvitationGetdefaultJSONResponse) VisitInvitationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LikePostRemoveRequestObject struct {
	PostId PostIDParam `json:"post_id"`
}

type LikePostRemoveResponseObject interface {
	VisitLikePostRemoveResponse(w http.ResponseWriter) error
}

type LikePostRemove200Response struct {
}

func (response LikePostRemove200Response) VisitLikePostRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LikePostRemove401Response = UnauthorisedResponse

func (response LikePostRemove401Response) VisitLikePostRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LikePostRemove404Response = NotFoundResponse

func (response LikePostRemove404Response) VisitLikePostRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LikePostRemovedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response LikePostRemovedefaultJSONResponse) VisitLikePostRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LikePostGetRequestObject struct {
	PostId PostIDParam `json:"post_id"`
}

type LikePostGetResponseObject interface {
	VisitLikePostGetResponse(w http.ResponseWriter) error
}

type LikePostGet200JSONResponse struct{ LikePostGetOKJSONResponse }

func (response LikePostGet200JSONResponse) VisitLikePostGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LikePostGet401Response = UnauthorisedResponse

func (response LikePostGet401Response) VisitLikePostGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LikePostGet404Response = NotFoundResponse

func (response LikePostGet404Response) VisitLikePostGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LikePostGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response LikePostGetdefaultJSONResponse) VisitLikePostGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LikePostAddRequestObject struct {
	PostId PostIDParam `json:"post_id"`
}

type LikePostAddResponseObject interface {
	VisitLikePostAddResponse(w http.ResponseWriter) error
}

type LikePostAdd200Response struct {
}

func (response LikePostAdd200Response) VisitLikePostAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LikePostAdd401Response = UnauthorisedResponse

func (response LikePostAdd401Response) VisitLikePostAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LikePostAdd404Response = NotFoundResponse

func (response LikePostAdd404Response) VisitLikePostAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LikePostAdddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response LikePostAdddefaultJSONResponse) VisitLikePostAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LikeProfileGetRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	Params        LikeProfileGetParams
}

type LikeProfileGetResponseObject interface {
	VisitLikeProfileGetResponse(w http.ResponseWriter) error
}

type LikeProfileGet200JSONResponse struct{ LikeProfileGetOKJSONResponse }

func (response LikeProfileGet200JSONResponse) VisitLikeProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LikeProfileGet401Response = UnauthorisedResponse

func (response LikeProfileGet401Response) VisitLikeProfileGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LikeProfileGet404Response = NotFoundResponse

func (response LikeProfileGet404Response) VisitLikeProfileGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LikeProfileGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response LikeProfileGetdefaultJSONResponse) VisitLikeProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkListRequestObject struct {
	Params LinkListParams
}

type LinkListResponseObject interface {
	VisitLinkListResponse(w http.ResponseWriter) error
}

type LinkList200JSONResponse struct{ LinkListOKJSONResponse }

func (response LinkList200JSONResponse) VisitLinkListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkList404Response = NotFoundResponse

func (response LinkList404Response) VisitLinkListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LinkListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response LinkListdefaultJSONResponse) VisitLinkListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkCreateRequestObject struct {
	Body *LinkCreateJSONRequestBody
}

type LinkCreateResponseObject interface {
	VisitLinkCreateResponse(w http.ResponseWriter) error
}

type LinkCreate200JSONResponse struct{ LinkCreateOKJSONResponse }

func (response LinkCreate200JSONResponse) VisitLinkCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkCreate401Response = UnauthorisedResponse

func (response LinkCreate401Response) VisitLinkCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LinkCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response LinkCreatedefaultJSONResponse) VisitLinkCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkGetRequestObject struct {
	LinkSlug LinkSlugParam `json:"link_slug"`
}

type LinkGetResponseObject interface {
	VisitLinkGetResponse(w http.ResponseWriter) error
}

type LinkGet200JSONResponse struct{ LinkGetOKJSONResponse }

func (response LinkGet200JSONResponse) VisitLinkGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkGet404Response = NotFoundResponse

func (response LinkGet404Response) VisitLinkGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LinkGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response LinkGetdefaultJSONResponse) VisitLinkGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeListRequestObject struct {
	Params NodeListParams
}

type NodeListResponseObject interface {
	VisitNodeListResponse(w http.ResponseWriter) error
}

type NodeList200JSONResponse struct{ NodeListOKJSONResponse }

func (response NodeList200JSONResponse) VisitNodeListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeList404Response = NotFoundResponse

func (response NodeList404Response) VisitNodeListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeListdefaultJSONResponse) VisitNodeListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeCreateRequestObject struct {
	Body *NodeCreateJSONRequestBody
}

type NodeCreateResponseObject interface {
	VisitNodeCreateResponse(w http.ResponseWriter) error
}

type NodeCreate200JSONResponse struct{ NodeCreateOKJSONResponse }

func (response NodeCreate200JSONResponse) VisitNodeCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeCreate401Response = UnauthorisedResponse

func (response NodeCreate401Response) VisitNodeCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeCreatedefaultJSONResponse) VisitNodeCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeDeleteRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Params   NodeDeleteParams
}

type NodeDeleteResponseObject interface {
	VisitNodeDeleteResponse(w http.ResponseWriter) error
}

type NodeDelete200JSONResponse struct{ NodeDeleteOKJSONResponse }

func (response NodeDelete200JSONResponse) VisitNodeDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeDelete401Response = UnauthorisedResponse

func (response NodeDelete401Response) VisitNodeDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeDelete404Response = NotFoundResponse

func (response NodeDelete404Response) VisitNodeDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeDeletedefaultJSONResponse) VisitNodeDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeGetRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Params   NodeGetParams
}

type NodeGetResponseObject interface {
	VisitNodeGetResponse(w http.ResponseWriter) error
}

type NodeGet200JSONResponse struct{ NodeGetOKJSONResponse }

func (response NodeGet200JSONResponse) VisitNodeGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeGet401Response = UnauthorisedResponse

func (response NodeGet401Response) VisitNodeGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeGet404Response = NotFoundResponse

func (response NodeGet404Response) VisitNodeGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeGetdefaultJSONResponse) VisitNodeGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeUpdateRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeUpdateJSONRequestBody
}

type NodeUpdateResponseObject interface {
	VisitNodeUpdateResponse(w http.ResponseWriter) error
}

type NodeUpdate200JSONResponse struct{ NodeUpdateOKJSONResponse }

func (response NodeUpdate200JSONResponse) VisitNodeUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeUpdate401Response = UnauthorisedResponse

func (response NodeUpdate401Response) VisitNodeUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeUpdate404Response = NotFoundResponse

func (response NodeUpdate404Response) VisitNodeUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeUpdatedefaultJSONResponse) VisitNodeUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeRemoveAssetRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	AssetId  AssetIDParam  `json:"asset_id"`
}

type NodeRemoveAssetResponseObject interface {
	VisitNodeRemoveAssetResponse(w http.ResponseWriter) error
}

type NodeRemoveAsset200JSONResponse struct{ NodeUpdateOKJSONResponse }

func (response NodeRemoveAsset200JSONResponse) VisitNodeRemoveAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeRemoveAsset401Response = UnauthorisedResponse

func (response NodeRemoveAsset401Response) VisitNodeRemoveAssetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeRemoveAsset404Response = NotFoundResponse

func (response NodeRemoveAsset404Response) VisitNodeRemoveAssetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeRemoveAssetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeRemoveAssetdefaultJSONResponse) VisitNodeRemoveAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeAddAssetRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	AssetId  AssetIDParam  `json:"asset_id"`
}

type NodeAddAssetResponseObject interface {
	VisitNodeAddAssetResponse(w http.ResponseWriter) error
}

type NodeAddAsset200JSONResponse struct{ NodeUpdateOKJSONResponse }

func (response NodeAddAsset200JSONResponse) VisitNodeAddAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeAddAsset401Response = UnauthorisedResponse

func (response NodeAddAsset401Response) VisitNodeAddAssetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeAddAsset404Response = NotFoundResponse

func (response NodeAddAsset404Response) VisitNodeAddAssetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeAddAssetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeAddAssetdefaultJSONResponse) VisitNodeAddAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeListChildrenRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Params   NodeListChildrenParams
}

type NodeListChildrenResponseObject interface {
	VisitNodeListChildrenResponse(w http.ResponseWriter) error
}

type NodeListChildren200JSONResponse struct{ NodeListOKJSONResponse }

func (response NodeListChildren200JSONResponse) VisitNodeListChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeListChildren401Response = UnauthorisedResponse

func (response NodeListChildren401Response) VisitNodeListChildrenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeListChildren404Response = NotFoundResponse

func (response NodeListChildren404Response) VisitNodeListChildrenResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeListChildrendefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeListChildrendefaultJSONResponse) VisitNodeListChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeUpdateChildrenPropertySchemaRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeUpdateChildrenPropertySchemaJSONRequestBody
}

type NodeUpdateChildrenPropertySchemaResponseObject interface {
	VisitNodeUpdateChildrenPropertySchemaResponse(w http.ResponseWriter) error
}

type NodeUpdateChildrenPropertySchema200JSONResponse struct {
	NodeUpdatePropertySchemaOKJSONResponse
}

func (response NodeUpdateChildrenPropertySchema200JSONResponse) VisitNodeUpdateChildrenPropertySchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeUpdateChildrenPropertySchema401Response = UnauthorisedResponse

func (response NodeUpdateChildrenPropertySchema401Response) VisitNodeUpdateChildrenPropertySchemaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeUpdateChildrenPropertySchema404Response = NotFoundResponse

func (response NodeUpdateChildrenPropertySchema404Response) VisitNodeUpdateChildrenPropertySchemaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeUpdateChildrenPropertySchemadefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeUpdateChildrenPropertySchemadefaultJSONResponse) VisitNodeUpdateChildrenPropertySchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeGenerateContentRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeGenerateContentJSONRequestBody
}

type NodeGenerateContentResponseObject interface {
	VisitNodeGenerateContentResponse(w http.ResponseWriter) error
}

type NodeGenerateContent200JSONResponse struct {
	NodeGenerateContentOKJSONResponse
}

func (response NodeGenerateContent200JSONResponse) VisitNodeGenerateContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeGenerateContent400Response = BadRequestResponse

func (response NodeGenerateContent400Response) VisitNodeGenerateContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type NodeGenerateContent401Response = UnauthorisedResponse

func (response NodeGenerateContent401Response) VisitNodeGenerateContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeGenerateContent404Response = NotFoundResponse

func (response NodeGenerateContent404Response) VisitNodeGenerateContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeGenerateContent501Response = NotImplementedResponse

func (response NodeGenerateContent501Response) VisitNodeGenerateContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type NodeGenerateContentdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeGenerateContentdefaultJSONResponse) VisitNodeGenerateContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeRemoveNodeRequestObject struct {
	NodeSlug      NodeSlugParam      `json:"node_slug"`
	NodeSlugChild NodeSlugChildParam `json:"node_slug_child"`
}

type NodeRemoveNodeResponseObject interface {
	VisitNodeRemoveNodeResponse(w http.ResponseWriter) error
}

type NodeRemoveNode200JSONResponse struct{ NodeRemoveChildOKJSONResponse }

func (response NodeRemoveNode200JSONResponse) VisitNodeRemoveNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeRemoveNode401Response = UnauthorisedResponse

func (response NodeRemoveNode401Response) VisitNodeRemoveNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeRemoveNode404Response = NotFoundResponse

func (response NodeRemoveNode404Response) VisitNodeRemoveNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeRemoveNodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeRemoveNodedefaultJSONResponse) VisitNodeRemoveNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeAddNodeRequestObject struct {
	NodeSlug      NodeSlugParam      `json:"node_slug"`
	NodeSlugChild NodeSlugChildParam `json:"node_slug_child"`
}

type NodeAddNodeResponseObject interface {
	VisitNodeAddNodeResponse(w http.ResponseWriter) error
}

type NodeAddNode200JSONResponse struct{ NodeAddChildOKJSONResponse }

func (response NodeAddNode200JSONResponse) VisitNodeAddNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeAddNode401Response = UnauthorisedResponse

func (response NodeAddNode401Response) VisitNodeAddNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeAddNode404Response = NotFoundResponse

func (response NodeAddNode404Response) VisitNodeAddNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeAddNodedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeAddNodedefaultJSONResponse) VisitNodeAddNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeUpdatePositionRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeUpdatePositionJSONRequestBody
}

type NodeUpdatePositionResponseObject interface {
	VisitNodeUpdatePositionResponse(w http.ResponseWriter) error
}

type NodeUpdatePosition200JSONResponse struct{ NodeUpdateOKJSONResponse }

func (response NodeUpdatePosition200JSONResponse) VisitNodeUpdatePositionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeUpdatePosition400Response = BadRequestResponse

func (response NodeUpdatePosition400Response) VisitNodeUpdatePositionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type NodeUpdatePosition401Response = UnauthorisedResponse

func (response NodeUpdatePosition401Response) VisitNodeUpdatePositionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeUpdatePosition404Response = NotFoundResponse

func (response NodeUpdatePosition404Response) VisitNodeUpdatePositionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeUpdatePositiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeUpdatePositiondefaultJSONResponse) VisitNodeUpdatePositionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeUpdatePropertiesRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeUpdatePropertiesJSONRequestBody
}

type NodeUpdatePropertiesResponseObject interface {
	VisitNodeUpdatePropertiesResponse(w http.ResponseWriter) error
}

type NodeUpdateProperties200JSONResponse struct {
	NodeUpdatePropertiesOKJSONResponse
}

func (response NodeUpdateProperties200JSONResponse) VisitNodeUpdatePropertiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeUpdateProperties400Response = BadRequestResponse

func (response NodeUpdateProperties400Response) VisitNodeUpdatePropertiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type NodeUpdateProperties401Response = UnauthorisedResponse

func (response NodeUpdateProperties401Response) VisitNodeUpdatePropertiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeUpdateProperties404Response = NotFoundResponse

func (response NodeUpdateProperties404Response) VisitNodeUpdatePropertiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeUpdatePropertiesdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeUpdatePropertiesdefaultJSONResponse) VisitNodeUpdatePropertiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeUpdatePropertySchemaRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeUpdatePropertySchemaJSONRequestBody
}

type NodeUpdatePropertySchemaResponseObject interface {
	VisitNodeUpdatePropertySchemaResponse(w http.ResponseWriter) error
}

type NodeUpdatePropertySchema200JSONResponse struct {
	NodeUpdatePropertySchemaOKJSONResponse
}

func (response NodeUpdatePropertySchema200JSONResponse) VisitNodeUpdatePropertySchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeUpdatePropertySchema401Response = UnauthorisedResponse

func (response NodeUpdatePropertySchema401Response) VisitNodeUpdatePropertySchemaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeUpdatePropertySchema404Response = NotFoundResponse

func (response NodeUpdatePropertySchema404Response) VisitNodeUpdatePropertySchemaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeUpdatePropertySchemadefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeUpdatePropertySchemadefaultJSONResponse) VisitNodeUpdatePropertySchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeGenerateTagsRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeGenerateTagsJSONRequestBody
}

type NodeGenerateTagsResponseObject interface {
	VisitNodeGenerateTagsResponse(w http.ResponseWriter) error
}

type NodeGenerateTags200JSONResponse struct{ NodeGenerateTagsOKJSONResponse }

func (response NodeGenerateTags200JSONResponse) VisitNodeGenerateTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeGenerateTags400Response = BadRequestResponse

func (response NodeGenerateTags400Response) VisitNodeGenerateTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type NodeGenerateTags401Response = UnauthorisedResponse

func (response NodeGenerateTags401Response) VisitNodeGenerateTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeGenerateTags404Response = NotFoundResponse

func (response NodeGenerateTags404Response) VisitNodeGenerateTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeGenerateTags501Response = NotImplementedResponse

func (response NodeGenerateTags501Response) VisitNodeGenerateTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type NodeGenerateTagsdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeGenerateTagsdefaultJSONResponse) VisitNodeGenerateTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeGenerateTitleRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeGenerateTitleJSONRequestBody
}

type NodeGenerateTitleResponseObject interface {
	VisitNodeGenerateTitleResponse(w http.ResponseWriter) error
}

type NodeGenerateTitle200JSONResponse struct {
	NodeGenerateTitleOKJSONResponse
}

func (response NodeGenerateTitle200JSONResponse) VisitNodeGenerateTitleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeGenerateTitle400Response = BadRequestResponse

func (response NodeGenerateTitle400Response) VisitNodeGenerateTitleResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type NodeGenerateTitle401Response = UnauthorisedResponse

func (response NodeGenerateTitle401Response) VisitNodeGenerateTitleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeGenerateTitle404Response = NotFoundResponse

func (response NodeGenerateTitle404Response) VisitNodeGenerateTitleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeGenerateTitle501Response = NotImplementedResponse

func (response NodeGenerateTitle501Response) VisitNodeGenerateTitleResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type NodeGenerateTitledefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeGenerateTitledefaultJSONResponse) VisitNodeGenerateTitleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NodeUpdateVisibilityRequestObject struct {
	NodeSlug NodeSlugParam `json:"node_slug"`
	Body     *NodeUpdateVisibilityJSONRequestBody
}

type NodeUpdateVisibilityResponseObject interface {
	VisitNodeUpdateVisibilityResponse(w http.ResponseWriter) error
}

type NodeUpdateVisibility200JSONResponse struct{ NodeUpdateOKJSONResponse }

func (response NodeUpdateVisibility200JSONResponse) VisitNodeUpdateVisibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NodeUpdateVisibility401Response = UnauthorisedResponse

func (response NodeUpdateVisibility401Response) VisitNodeUpdateVisibilityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NodeUpdateVisibility404Response = NotFoundResponse

func (response NodeUpdateVisibility404Response) VisitNodeUpdateVisibilityResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NodeUpdateVisibilitydefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NodeUpdateVisibilitydefaultJSONResponse) VisitNodeUpdateVisibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NotificationListRequestObject struct {
	Params NotificationListParams
}

type NotificationListResponseObject interface {
	VisitNotificationListResponse(w http.ResponseWriter) error
}

type NotificationList200JSONResponse struct{ NotificationListOKJSONResponse }

func (response NotificationList200JSONResponse) VisitNotificationListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NotificationList401Response = UnauthorisedResponse

func (response NotificationList401Response) VisitNotificationListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NotificationList404Response = NotFoundResponse

func (response NotificationList404Response) VisitNotificationListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type NotificationListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NotificationListdefaultJSONResponse) VisitNotificationListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NotificationUpdateRequestObject struct {
	NotificationId NotificationIDParam `json:"notification_id"`
	Body           *NotificationUpdateJSONRequestBody
}

type NotificationUpdateResponseObject interface {
	VisitNotificationUpdateResponse(w http.ResponseWriter) error
}

type NotificationUpdate200JSONResponse struct {
	NotificationUpdateOKJSONResponse
}

func (response NotificationUpdate200JSONResponse) VisitNotificationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NotificationUpdate400Response = BadRequestResponse

func (response NotificationUpdate400Response) VisitNotificationUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type NotificationUpdate401Response = UnauthorisedResponse

func (response NotificationUpdate401Response) VisitNotificationUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type NotificationUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response NotificationUpdatedefaultJSONResponse) VisitNotificationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSpecRequestObject struct {
}

type GetSpecResponseObject interface {
	VisitGetSpecResponse(w http.ResponseWriter) error
}

type GetSpec200ApplicationVndOaiOpenapiPlusJSONVersion310Response map[string]interface{}

func (response GetSpec200ApplicationVndOaiOpenapiPlusJSONVersion310Response) VisitGetSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.oai.openapi+json;version=3.1.0")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSpecdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response GetSpecdefaultJSONResponse) VisitGetSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDeleteRequestObject struct {
	PostId PostIDParam `json:"post_id"`
}

type PostDeleteResponseObject interface {
	VisitPostDeleteResponse(w http.ResponseWriter) error
}

type PostDelete200Response struct {
}

func (response PostDelete200Response) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostDelete401Response = UnauthorisedResponse

func (response PostDelete401Response) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostDelete404Response = NotFoundResponse

func (response PostDelete404Response) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostDeletedefaultJSONResponse) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUpdateRequestObject struct {
	PostId PostIDParam `json:"post_id"`
	Body   *PostUpdateJSONRequestBody
}

type PostUpdateResponseObject interface {
	VisitPostUpdateResponse(w http.ResponseWriter) error
}

type PostUpdate200JSONResponse struct{ PostUpdateOKJSONResponse }

func (response PostUpdate200JSONResponse) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUpdate401Response = UnauthorisedResponse

func (response PostUpdate401Response) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostUpdate404Response = NotFoundResponse

func (response PostUpdate404Response) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostUpdatedefaultJSONResponse) VisitPostUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostReactAddRequestObject struct {
	PostId PostIDParam `json:"post_id"`
	Body   *PostReactAddJSONRequestBody
}

type PostReactAddResponseObject interface {
	VisitPostReactAddResponse(w http.ResponseWriter) error
}

type PostReactAdd200JSONResponse struct{ PostReactAddOKJSONResponse }

func (response PostReactAdd200JSONResponse) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostReactAdd401Response = UnauthorisedResponse

func (response PostReactAdd401Response) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostReactAdd404Response = NotFoundResponse

func (response PostReactAdd404Response) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostReactAdddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostReactAdddefaultJSONResponse) VisitPostReactAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostReactRemoveRequestObject struct {
	PostId  PostIDParam  `json:"post_id"`
	ReactId ReactIDParam `json:"react_id"`
}

type PostReactRemoveResponseObject interface {
	VisitPostReactRemoveResponse(w http.ResponseWriter) error
}

type PostReactRemove200Response struct {
}

func (response PostReactRemove200Response) VisitPostReactRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostReactRemove401Response = UnauthorisedResponse

func (response PostReactRemove401Response) VisitPostReactRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostReactRemove404Response = NotFoundResponse

func (response PostReactRemove404Response) VisitPostReactRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostReactRemovedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostReactRemovedefaultJSONResponse) VisitPostReactRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileListRequestObject struct {
	Params ProfileListParams
}

type ProfileListResponseObject interface {
	VisitProfileListResponse(w http.ResponseWriter) error
}

type ProfileList200JSONResponse struct{ ProfileListOKJSONResponse }

func (response ProfileList200JSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileList401Response = UnauthorisedResponse

func (response ProfileList401Response) VisitProfileListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfileList404Response = NotFoundResponse

func (response ProfileList404Response) VisitProfileListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfileListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfileListdefaultJSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileGetRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type ProfileGetResponseObject interface {
	VisitProfileGetResponse(w http.ResponseWriter) error
}

type ProfileGet200JSONResponse struct{ ProfileGetOKJSONResponse }

func (response ProfileGet200JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileGet304Response = NotModifiedResponse

func (response ProfileGet304Response) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(304)
	return nil
}

type ProfileGet401Response = UnauthorisedResponse

func (response ProfileGet401Response) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfileGet404Response = NotFoundResponse

func (response ProfileGet404Response) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfileGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfileGetdefaultJSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileFollowersRemoveRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type ProfileFollowersRemoveResponseObject interface {
	VisitProfileFollowersRemoveResponse(w http.ResponseWriter) error
}

type ProfileFollowersRemove200Response struct {
}

func (response ProfileFollowersRemove200Response) VisitProfileFollowersRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ProfileFollowersRemove401Response = UnauthorisedResponse

func (response ProfileFollowersRemove401Response) VisitProfileFollowersRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfileFollowersRemove404Response = NotFoundResponse

func (response ProfileFollowersRemove404Response) VisitProfileFollowersRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfileFollowersRemovedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfileFollowersRemovedefaultJSONResponse) VisitProfileFollowersRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileFollowersGetRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	Params        ProfileFollowersGetParams
}

type ProfileFollowersGetResponseObject interface {
	VisitProfileFollowersGetResponse(w http.ResponseWriter) error
}

type ProfileFollowersGet200JSONResponse struct {
	ProfileFollowersGetOKJSONResponse
}

func (response ProfileFollowersGet200JSONResponse) VisitProfileFollowersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileFollowersGet401Response = UnauthorisedResponse

func (response ProfileFollowersGet401Response) VisitProfileFollowersGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfileFollowersGet404Response = NotFoundResponse

func (response ProfileFollowersGet404Response) VisitProfileFollowersGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfileFollowersGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfileFollowersGetdefaultJSONResponse) VisitProfileFollowersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileFollowersAddRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
}

type ProfileFollowersAddResponseObject interface {
	VisitProfileFollowersAddResponse(w http.ResponseWriter) error
}

type ProfileFollowersAdd200Response struct {
}

func (response ProfileFollowersAdd200Response) VisitProfileFollowersAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ProfileFollowersAdd401Response = UnauthorisedResponse

func (response ProfileFollowersAdd401Response) VisitProfileFollowersAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfileFollowersAdd404Response = NotFoundResponse

func (response ProfileFollowersAdd404Response) VisitProfileFollowersAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfileFollowersAdddefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfileFollowersAdddefaultJSONResponse) VisitProfileFollowersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfileFollowingGetRequestObject struct {
	AccountHandle AccountHandleParam `json:"account_handle"`
	Params        ProfileFollowingGetParams
}

type ProfileFollowingGetResponseObject interface {
	VisitProfileFollowingGetResponse(w http.ResponseWriter) error
}

type ProfileFollowingGet200JSONResponse struct {
	ProfileFollowingGetOKJSONResponse
}

func (response ProfileFollowingGet200JSONResponse) VisitProfileFollowingGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileFollowingGet304Response = NotModifiedResponse

func (response ProfileFollowingGet304Response) VisitProfileFollowingGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(304)
	return nil
}

type ProfileFollowingGet401Response = UnauthorisedResponse

func (response ProfileFollowingGet401Response) VisitProfileFollowingGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfileFollowingGet404Response = NotFoundResponse

func (response ProfileFollowingGet404Response) VisitProfileFollowingGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfileFollowingGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfileFollowingGetdefaultJSONResponse) VisitProfileFollowingGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RoleListRequestObject struct {
}

type RoleListResponseObject interface {
	VisitRoleListResponse(w http.ResponseWriter) error
}

type RoleList200JSONResponse struct{ RoleListOKJSONResponse }

func (response RoleList200JSONResponse) VisitRoleListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RoleListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response RoleListdefaultJSONResponse) VisitRoleListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RoleCreateRequestObject struct {
	Body *RoleCreateJSONRequestBody
}

type RoleCreateResponseObject interface {
	VisitRoleCreateResponse(w http.ResponseWriter) error
}

type RoleCreate200JSONResponse struct{ RoleCreateOKJSONResponse }

func (response RoleCreate200JSONResponse) VisitRoleCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RoleCreate401Response = UnauthorisedResponse

func (response RoleCreate401Response) VisitRoleCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RoleCreate404Response = NotFoundResponse

func (response RoleCreate404Response) VisitRoleCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RoleCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response RoleCreatedefaultJSONResponse) VisitRoleCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RoleDeleteRequestObject struct {
	RoleId RoleIDParam `json:"role_id"`
}

type RoleDeleteResponseObject interface {
	VisitRoleDeleteResponse(w http.ResponseWriter) error
}

type RoleDelete200Response struct {
}

func (response RoleDelete200Response) VisitRoleDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RoleDelete401Response = UnauthorisedResponse

func (response RoleDelete401Response) VisitRoleDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RoleDelete404Response = NotFoundResponse

func (response RoleDelete404Response) VisitRoleDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RoleDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response RoleDeletedefaultJSONResponse) VisitRoleDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RoleGetRequestObject struct {
	RoleId RoleIDParam `json:"role_id"`
}

type RoleGetResponseObject interface {
	VisitRoleGetResponse(w http.ResponseWriter) error
}

type RoleGet200JSONResponse struct{ RoleGetOKJSONResponse }

func (response RoleGet200JSONResponse) VisitRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RoleGet401Response = UnauthorisedResponse

func (response RoleGet401Response) VisitRoleGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RoleGet404Response = NotFoundResponse

func (response RoleGet404Response) VisitRoleGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RoleGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response RoleGetdefaultJSONResponse) VisitRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RoleUpdateRequestObject struct {
	RoleId RoleIDParam `json:"role_id"`
	Body   *RoleUpdateJSONRequestBody
}

type RoleUpdateResponseObject interface {
	VisitRoleUpdateResponse(w http.ResponseWriter) error
}

type RoleUpdate200JSONResponse struct{ RoleGetOKJSONResponse }

func (response RoleUpdate200JSONResponse) VisitRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RoleUpdate401Response = UnauthorisedResponse

func (response RoleUpdate401Response) VisitRoleUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RoleUpdate404Response = NotFoundResponse

func (response RoleUpdate404Response) VisitRoleUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RoleUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response RoleUpdatedefaultJSONResponse) VisitRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TagListRequestObject struct {
	Params TagListParams
}

type TagListResponseObject interface {
	VisitTagListResponse(w http.ResponseWriter) error
}

type TagList200JSONResponse struct{ TagListOKJSONResponse }

func (response TagList200JSONResponse) VisitTagListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TagListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response TagListdefaultJSONResponse) VisitTagListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TagGetRequestObject struct {
	TagName TagNameParam `json:"tag_name"`
}

type TagGetResponseObject interface {
	VisitTagGetResponse(w http.ResponseWriter) error
}

type TagGet200JSONResponse struct{ TagGetOKJSONResponse }

func (response TagGet200JSONResponse) VisitTagGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TagGet404Response = NotFoundResponse

func (response TagGet404Response) VisitTagGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type TagGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response TagGetdefaultJSONResponse) VisitTagGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadListRequestObject struct {
	Params ThreadListParams
}

type ThreadListResponseObject interface {
	VisitThreadListResponse(w http.ResponseWriter) error
}

type ThreadList200JSONResponse struct{ ThreadListOKJSONResponse }

func (response ThreadList200JSONResponse) VisitThreadListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadList401Response = UnauthorisedResponse

func (response ThreadList401Response) VisitThreadListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadList404Response = NotFoundResponse

func (response ThreadList404Response) VisitThreadListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadListdefaultJSONResponse) VisitThreadListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadCreateRequestObject struct {
	Body *ThreadCreateJSONRequestBody
}

type ThreadCreateResponseObject interface {
	VisitThreadCreateResponse(w http.ResponseWriter) error
}

type ThreadCreate200JSONResponse struct{ ThreadCreateOKJSONResponse }

func (response ThreadCreate200JSONResponse) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadCreate401Response = UnauthorisedResponse

func (response ThreadCreate401Response) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadCreate404Response = NotFoundResponse

func (response ThreadCreate404Response) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadCreatedefaultJSONResponse) VisitThreadCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadDeleteRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
}

type ThreadDeleteResponseObject interface {
	VisitThreadDeleteResponse(w http.ResponseWriter) error
}

type ThreadDelete200Response struct {
}

func (response ThreadDelete200Response) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ThreadDelete401Response = UnauthorisedResponse

func (response ThreadDelete401Response) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadDelete404Response = NotFoundResponse

func (response ThreadDelete404Response) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadDeletedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadDeletedefaultJSONResponse) VisitThreadDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadGetRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
	Params     ThreadGetParams
}

type ThreadGetResponseObject interface {
	VisitThreadGetResponse(w http.ResponseWriter) error
}

type ThreadGet200JSONResponse struct{ ThreadGetJSONResponse }

func (response ThreadGet200JSONResponse) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadGet304Response = NotModifiedResponse

func (response ThreadGet304Response) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(304)
	return nil
}

type ThreadGet401Response = UnauthorisedResponse

func (response ThreadGet401Response) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadGet404Response = NotFoundResponse

func (response ThreadGet404Response) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadGetdefaultJSONResponse) VisitThreadGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadUpdateRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
	Body       *ThreadUpdateJSONRequestBody
}

type ThreadUpdateResponseObject interface {
	VisitThreadUpdateResponse(w http.ResponseWriter) error
}

type ThreadUpdate200JSONResponse struct{ ThreadUpdateOKJSONResponse }

func (response ThreadUpdate200JSONResponse) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadUpdate401Response = UnauthorisedResponse

func (response ThreadUpdate401Response) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadUpdate404Response = NotFoundResponse

func (response ThreadUpdate404Response) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadUpdatedefaultJSONResponse) VisitThreadUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplyCreateRequestObject struct {
	ThreadMark ThreadMarkParam `json:"thread_mark"`
	Body       *ReplyCreateJSONRequestBody
}

type ReplyCreateResponseObject interface {
	VisitReplyCreateResponse(w http.ResponseWriter) error
}

type ReplyCreate200JSONResponse struct{ ReplyCreateOKJSONResponse }

func (response ReplyCreate200JSONResponse) VisitReplyCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplyCreate401Response = UnauthorisedResponse

func (response ReplyCreate401Response) VisitReplyCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReplyCreate404Response = NotFoundResponse

func (response ReplyCreate404Response) VisitReplyCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ReplyCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ReplyCreatedefaultJSONResponse) VisitReplyCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200TextResponse string

func (response GetVersion200TextResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetVersiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response GetVersiondefaultJSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /accounts)
	AccountGet(ctx context.Context, request AccountGetRequestObject) (AccountGetResponseObject, error)

	// (PATCH /accounts)
	AccountUpdate(ctx context.Context, request AccountUpdateRequestObject) (AccountUpdateResponseObject, error)

	// (GET /accounts/self/auth-methods)
	AccountAuthProviderList(ctx context.Context, request AccountAuthProviderListRequestObject) (AccountAuthProviderListResponseObject, error)

	// (DELETE /accounts/self/auth-methods/{auth_method_id})
	AccountAuthMethodDelete(ctx context.Context, request AccountAuthMethodDeleteRequestObject) (AccountAuthMethodDeleteResponseObject, error)

	// (POST /accounts/self/avatar)
	AccountSetAvatar(ctx context.Context, request AccountSetAvatarRequestObject) (AccountSetAvatarResponseObject, error)

	// (POST /accounts/self/emails)
	AccountEmailAdd(ctx context.Context, request AccountEmailAddRequestObject) (AccountEmailAddResponseObject, error)

	// (DELETE /accounts/self/emails/{email_address_id})
	AccountEmailRemove(ctx context.Context, request AccountEmailRemoveRequestObject) (AccountEmailRemoveResponseObject, error)

	// (GET /accounts/{account_handle}/avatar)
	AccountGetAvatar(ctx context.Context, request AccountGetAvatarRequestObject) (AccountGetAvatarResponseObject, error)

	// (DELETE /accounts/{account_handle}/roles/{role_id})
	AccountRemoveRole(ctx context.Context, request AccountRemoveRoleRequestObject) (AccountRemoveRoleResponseObject, error)

	// (PUT /accounts/{account_handle}/roles/{role_id})
	AccountAddRole(ctx context.Context, request AccountAddRoleRequestObject) (AccountAddRoleResponseObject, error)

	// (DELETE /accounts/{account_handle}/roles/{role_id}/badge)
	AccountRoleRemoveBadge(ctx context.Context, request AccountRoleRemoveBadgeRequestObject) (AccountRoleRemoveBadgeResponseObject, error)

	// (PUT /accounts/{account_handle}/roles/{role_id}/badge)
	AccountRoleSetBadge(ctx context.Context, request AccountRoleSetBadgeRequestObject) (AccountRoleSetBadgeResponseObject, error)

	// (GET /accounts/{account_id})
	AccountView(ctx context.Context, request AccountViewRequestObject) (AccountViewResponseObject, error)

	// (PATCH /admin)
	AdminSettingsUpdate(ctx context.Context, request AdminSettingsUpdateRequestObject) (AdminSettingsUpdateResponseObject, error)

	// (GET /admin/access-keys)
	AdminAccessKeyList(ctx context.Context, request AdminAccessKeyListRequestObject) (AdminAccessKeyListResponseObject, error)

	// (DELETE /admin/access-keys/{access_key_id})
	AdminAccessKeyDelete(ctx context.Context, request AdminAccessKeyDeleteRequestObject) (AdminAccessKeyDeleteResponseObject, error)

	// (DELETE /admin/bans/{account_handle})
	AdminAccountBanRemove(ctx context.Context, request AdminAccountBanRemoveRequestObject) (AdminAccountBanRemoveResponseObject, error)

	// (POST /admin/bans/{account_handle})
	AdminAccountBanCreate(ctx context.Context, request AdminAccountBanCreateRequestObject) (AdminAccountBanCreateResponseObject, error)

	// (POST /assets)
	AssetUpload(ctx context.Context, request AssetUploadRequestObject) (AssetUploadResponseObject, error)

	// (GET /assets/{asset_filename})
	AssetGet(ctx context.Context, request AssetGetRequestObject) (AssetGetResponseObject, error)

	// (GET /auth)
	AuthProviderList(ctx context.Context, request AuthProviderListRequestObject) (AuthProviderListResponseObject, error)

	// (GET /auth/access-keys)
	AccessKeyList(ctx context.Context, request AccessKeyListRequestObject) (AccessKeyListResponseObject, error)

	// (POST /auth/access-keys)
	AccessKeyCreate(ctx context.Context, request AccessKeyCreateRequestObject) (AccessKeyCreateResponseObject, error)

	// (DELETE /auth/access-keys/{access_key_id})
	AccessKeyDelete(ctx context.Context, request AccessKeyDeleteRequestObject) (AccessKeyDeleteResponseObject, error)

	// (POST /auth/email-password/reset)
	AuthPasswordResetRequestEmail(ctx context.Context, request AuthPasswordResetRequestEmailRequestObject) (AuthPasswordResetRequestEmailResponseObject, error)

	// (POST /auth/email-password/signin)
	AuthEmailPasswordSignin(ctx context.Context, request AuthEmailPasswordSigninRequestObject) (AuthEmailPasswordSigninResponseObject, error)

	// (POST /auth/email-password/signup)
	AuthEmailPasswordSignup(ctx context.Context, request AuthEmailPasswordSignupRequestObject) (AuthEmailPasswordSignupResponseObject, error)

	// (POST /auth/email/signin)
	AuthEmailSignin(ctx context.Context, request AuthEmailSigninRequestObject) (AuthEmailSigninResponseObject, error)

	// (POST /auth/email/signup)
	AuthEmailSignup(ctx context.Context, request AuthEmailSignupRequestObject) (AuthEmailSignupResponseObject, error)

	// (POST /auth/email/verify)
	AuthEmailVerify(ctx context.Context, request AuthEmailVerifyRequestObject) (AuthEmailVerifyResponseObject, error)

	// (GET /auth/logout)
	AuthProviderLogout(ctx context.Context, request AuthProviderLogoutRequestObject) (AuthProviderLogoutResponseObject, error)

	// (POST /auth/oauth/{oauth_provider}/callback)
	OAuthProviderCallback(ctx context.Context, request OAuthProviderCallbackRequestObject) (OAuthProviderCallbackResponseObject, error)

	// (PATCH /auth/password)
	AuthPasswordUpdate(ctx context.Context, request AuthPasswordUpdateRequestObject) (AuthPasswordUpdateResponseObject, error)

	// (POST /auth/password)
	AuthPasswordCreate(ctx context.Context, request AuthPasswordCreateRequestObject) (AuthPasswordCreateResponseObject, error)

	// (POST /auth/password/reset)
	AuthPasswordReset(ctx context.Context, request AuthPasswordResetRequestObject) (AuthPasswordResetResponseObject, error)

	// (POST /auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) (AuthPasswordSigninResponseObject, error)

	// (POST /auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) (AuthPasswordSignupResponseObject, error)

	// (POST /auth/phone)
	PhoneRequestCode(ctx context.Context, request PhoneRequestCodeRequestObject) (PhoneRequestCodeResponseObject, error)

	// (PUT /auth/phone/{account_handle})
	PhoneSubmitCode(ctx context.Context, request PhoneSubmitCodeRequestObject) (PhoneSubmitCodeResponseObject, error)

	// (POST /auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx context.Context, request WebAuthnMakeAssertionRequestObject) (WebAuthnMakeAssertionResponseObject, error)

	// (GET /auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx context.Context, request WebAuthnGetAssertionRequestObject) (WebAuthnGetAssertionResponseObject, error)

	// (POST /auth/webauthn/make)
	WebAuthnMakeCredential(ctx context.Context, request WebAuthnMakeCredentialRequestObject) (WebAuthnMakeCredentialResponseObject, error)

	// (GET /auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx context.Context, request WebAuthnRequestCredentialRequestObject) (WebAuthnRequestCredentialResponseObject, error)

	// (GET /categories)
	CategoryList(ctx context.Context, request CategoryListRequestObject) (CategoryListResponseObject, error)

	// (POST /categories)
	CategoryCreate(ctx context.Context, request CategoryCreateRequestObject) (CategoryCreateResponseObject, error)

	// (DELETE /categories/{category_slug})
	CategoryDelete(ctx context.Context, request CategoryDeleteRequestObject) (CategoryDeleteResponseObject, error)

	// (GET /categories/{category_slug})
	CategoryGet(ctx context.Context, request CategoryGetRequestObject) (CategoryGetResponseObject, error)

	// (PATCH /categories/{category_slug})
	CategoryUpdate(ctx context.Context, request CategoryUpdateRequestObject) (CategoryUpdateResponseObject, error)

	// (PATCH /categories/{category_slug}/position)
	CategoryUpdatePosition(ctx context.Context, request CategoryUpdatePositionRequestObject) (CategoryUpdatePositionResponseObject, error)

	// (GET /collections)
	CollectionList(ctx context.Context, request CollectionListRequestObject) (CollectionListResponseObject, error)

	// (POST /collections)
	CollectionCreate(ctx context.Context, request CollectionCreateRequestObject) (CollectionCreateResponseObject, error)

	// (DELETE /collections/{collection_mark})
	CollectionDelete(ctx context.Context, request CollectionDeleteRequestObject) (CollectionDeleteResponseObject, error)

	// (GET /collections/{collection_mark})
	CollectionGet(ctx context.Context, request CollectionGetRequestObject) (CollectionGetResponseObject, error)

	// (PATCH /collections/{collection_mark})
	CollectionUpdate(ctx context.Context, request CollectionUpdateRequestObject) (CollectionUpdateResponseObject, error)

	// (DELETE /collections/{collection_mark}/nodes/{node_id})
	CollectionRemoveNode(ctx context.Context, request CollectionRemoveNodeRequestObject) (CollectionRemoveNodeResponseObject, error)

	// (PUT /collections/{collection_mark}/nodes/{node_id})
	CollectionAddNode(ctx context.Context, request CollectionAddNodeRequestObject) (CollectionAddNodeResponseObject, error)

	// (DELETE /collections/{collection_mark}/posts/{post_id})
	CollectionRemovePost(ctx context.Context, request CollectionRemovePostRequestObject) (CollectionRemovePostResponseObject, error)

	// (PUT /collections/{collection_mark}/posts/{post_id})
	CollectionAddPost(ctx context.Context, request CollectionAddPostRequestObject) (CollectionAddPostResponseObject, error)

	// (GET /datagraph)
	DatagraphSearch(ctx context.Context, request DatagraphSearchRequestObject) (DatagraphSearchResponseObject, error)

	// (GET /datagraph/ask)
	DatagraphAsk(ctx context.Context, request DatagraphAskRequestObject) (DatagraphAskResponseObject, error)
	// API documentation
	// (GET /docs)
	GetDocs(ctx context.Context, request GetDocsRequestObject) (GetDocsResponseObject, error)

	// (GET /events)
	EventList(ctx context.Context, request EventListRequestObject) (EventListResponseObject, error)

	// (POST /events)
	EventCreate(ctx context.Context, request EventCreateRequestObject) (EventCreateResponseObject, error)

	// (DELETE /events/{event_mark})
	EventDelete(ctx context.Context, request EventDeleteRequestObject) (EventDeleteResponseObject, error)

	// (GET /events/{event_mark})
	EventGet(ctx context.Context, request EventGetRequestObject) (EventGetResponseObject, error)

	// (PATCH /events/{event_mark})
	EventUpdate(ctx context.Context, request EventUpdateRequestObject) (EventUpdateResponseObject, error)

	// (DELETE /events/{event_mark}/participants/{account_id})
	EventParticipantRemove(ctx context.Context, request EventParticipantRemoveRequestObject) (EventParticipantRemoveResponseObject, error)

	// (PUT /events/{event_mark}/participants/{account_id})
	EventParticipantUpdate(ctx context.Context, request EventParticipantUpdateRequestObject) (EventParticipantUpdateResponseObject, error)

	// (GET /info)
	GetInfo(ctx context.Context, request GetInfoRequestObject) (GetInfoResponseObject, error)

	// (GET /info/banner)
	BannerGet(ctx context.Context, request BannerGetRequestObject) (BannerGetResponseObject, error)

	// (POST /info/banner)
	BannerUpload(ctx context.Context, request BannerUploadRequestObject) (BannerUploadResponseObject, error)

	// (POST /info/icon)
	IconUpload(ctx context.Context, request IconUploadRequestObject) (IconUploadResponseObject, error)

	// (GET /info/icon/{icon_size})
	IconGet(ctx context.Context, request IconGetRequestObject) (IconGetResponseObject, error)

	// (GET /invitations)
	InvitationList(ctx context.Context, request InvitationListRequestObject) (InvitationListResponseObject, error)

	// (POST /invitations)
	InvitationCreate(ctx context.Context, request InvitationCreateRequestObject) (InvitationCreateResponseObject, error)

	// (DELETE /invitations/{invitation_id})
	InvitationDelete(ctx context.Context, request InvitationDeleteRequestObject) (InvitationDeleteResponseObject, error)

	// (GET /invitations/{invitation_id})
	InvitationGet(ctx context.Context, request InvitationGetRequestObject) (InvitationGetResponseObject, error)

	// (DELETE /likes/posts/{post_id})
	LikePostRemove(ctx context.Context, request LikePostRemoveRequestObject) (LikePostRemoveResponseObject, error)

	// (GET /likes/posts/{post_id})
	LikePostGet(ctx context.Context, request LikePostGetRequestObject) (LikePostGetResponseObject, error)

	// (PUT /likes/posts/{post_id})
	LikePostAdd(ctx context.Context, request LikePostAddRequestObject) (LikePostAddResponseObject, error)

	// (GET /likes/profiles/{account_handle})
	LikeProfileGet(ctx context.Context, request LikeProfileGetRequestObject) (LikeProfileGetResponseObject, error)

	// (GET /links)
	LinkList(ctx context.Context, request LinkListRequestObject) (LinkListResponseObject, error)

	// (POST /links)
	LinkCreate(ctx context.Context, request LinkCreateRequestObject) (LinkCreateResponseObject, error)

	// (GET /links/{link_slug})
	LinkGet(ctx context.Context, request LinkGetRequestObject) (LinkGetResponseObject, error)

	// (GET /nodes)
	NodeList(ctx context.Context, request NodeListRequestObject) (NodeListResponseObject, error)

	// (POST /nodes)
	NodeCreate(ctx context.Context, request NodeCreateRequestObject) (NodeCreateResponseObject, error)

	// (DELETE /nodes/{node_slug})
	NodeDelete(ctx context.Context, request NodeDeleteRequestObject) (NodeDeleteResponseObject, error)

	// (GET /nodes/{node_slug})
	NodeGet(ctx context.Context, request NodeGetRequestObject) (NodeGetResponseObject, error)

	// (PATCH /nodes/{node_slug})
	NodeUpdate(ctx context.Context, request NodeUpdateRequestObject) (NodeUpdateResponseObject, error)

	// (DELETE /nodes/{node_slug}/assets/{asset_id})
	NodeRemoveAsset(ctx context.Context, request NodeRemoveAssetRequestObject) (NodeRemoveAssetResponseObject, error)

	// (PUT /nodes/{node_slug}/assets/{asset_id})
	NodeAddAsset(ctx context.Context, request NodeAddAssetRequestObject) (NodeAddAssetResponseObject, error)

	// (GET /nodes/{node_slug}/children)
	NodeListChildren(ctx context.Context, request NodeListChildrenRequestObject) (NodeListChildrenResponseObject, error)

	// (PATCH /nodes/{node_slug}/children/property-schema)
	NodeUpdateChildrenPropertySchema(ctx context.Context, request NodeUpdateChildrenPropertySchemaRequestObject) (NodeUpdateChildrenPropertySchemaResponseObject, error)

	// (POST /nodes/{node_slug}/content)
	NodeGenerateContent(ctx context.Context, request NodeGenerateContentRequestObject) (NodeGenerateContentResponseObject, error)

	// (DELETE /nodes/{node_slug}/nodes/{node_slug_child})
	NodeRemoveNode(ctx context.Context, request NodeRemoveNodeRequestObject) (NodeRemoveNodeResponseObject, error)

	// (PUT /nodes/{node_slug}/nodes/{node_slug_child})
	NodeAddNode(ctx context.Context, request NodeAddNodeRequestObject) (NodeAddNodeResponseObject, error)

	// (PATCH /nodes/{node_slug}/position)
	NodeUpdatePosition(ctx context.Context, request NodeUpdatePositionRequestObject) (NodeUpdatePositionResponseObject, error)

	// (PATCH /nodes/{node_slug}/properties)
	NodeUpdateProperties(ctx context.Context, request NodeUpdatePropertiesRequestObject) (NodeUpdatePropertiesResponseObject, error)

	// (PATCH /nodes/{node_slug}/property-schema)
	NodeUpdatePropertySchema(ctx context.Context, request NodeUpdatePropertySchemaRequestObject) (NodeUpdatePropertySchemaResponseObject, error)

	// (POST /nodes/{node_slug}/tags)
	NodeGenerateTags(ctx context.Context, request NodeGenerateTagsRequestObject) (NodeGenerateTagsResponseObject, error)

	// (POST /nodes/{node_slug}/title)
	NodeGenerateTitle(ctx context.Context, request NodeGenerateTitleRequestObject) (NodeGenerateTitleResponseObject, error)

	// (PATCH /nodes/{node_slug}/visibility)
	NodeUpdateVisibility(ctx context.Context, request NodeUpdateVisibilityRequestObject) (NodeUpdateVisibilityResponseObject, error)

	// (GET /notifications)
	NotificationList(ctx context.Context, request NotificationListRequestObject) (NotificationListResponseObject, error)

	// (PATCH /notifications/{notification_id})
	NotificationUpdate(ctx context.Context, request NotificationUpdateRequestObject) (NotificationUpdateResponseObject, error)
	// OpenAPI specification
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) (GetSpecResponseObject, error)

	// (DELETE /posts/{post_id})
	PostDelete(ctx context.Context, request PostDeleteRequestObject) (PostDeleteResponseObject, error)

	// (PATCH /posts/{post_id})
	PostUpdate(ctx context.Context, request PostUpdateRequestObject) (PostUpdateResponseObject, error)

	// (PUT /posts/{post_id}/reacts)
	PostReactAdd(ctx context.Context, request PostReactAddRequestObject) (PostReactAddResponseObject, error)

	// (DELETE /posts/{post_id}/reacts/{react_id})
	PostReactRemove(ctx context.Context, request PostReactRemoveRequestObject) (PostReactRemoveResponseObject, error)

	// (GET /profiles)
	ProfileList(ctx context.Context, request ProfileListRequestObject) (ProfileListResponseObject, error)

	// (GET /profiles/{account_handle})
	ProfileGet(ctx context.Context, request ProfileGetRequestObject) (ProfileGetResponseObject, error)

	// (DELETE /profiles/{account_handle}/followers)
	ProfileFollowersRemove(ctx context.Context, request ProfileFollowersRemoveRequestObject) (ProfileFollowersRemoveResponseObject, error)

	// (GET /profiles/{account_handle}/followers)
	ProfileFollowersGet(ctx context.Context, request ProfileFollowersGetRequestObject) (ProfileFollowersGetResponseObject, error)

	// (PUT /profiles/{account_handle}/followers)
	ProfileFollowersAdd(ctx context.Context, request ProfileFollowersAddRequestObject) (ProfileFollowersAddResponseObject, error)

	// (GET /profiles/{account_handle}/following)
	ProfileFollowingGet(ctx context.Context, request ProfileFollowingGetRequestObject) (ProfileFollowingGetResponseObject, error)

	// (GET /roles)
	RoleList(ctx context.Context, request RoleListRequestObject) (RoleListResponseObject, error)

	// (POST /roles)
	RoleCreate(ctx context.Context, request RoleCreateRequestObject) (RoleCreateResponseObject, error)

	// (DELETE /roles/{role_id})
	RoleDelete(ctx context.Context, request RoleDeleteRequestObject) (RoleDeleteResponseObject, error)

	// (GET /roles/{role_id})
	RoleGet(ctx context.Context, request RoleGetRequestObject) (RoleGetResponseObject, error)

	// (PATCH /roles/{role_id})
	RoleUpdate(ctx context.Context, request RoleUpdateRequestObject) (RoleUpdateResponseObject, error)

	// (GET /tags)
	TagList(ctx context.Context, request TagListRequestObject) (TagListResponseObject, error)

	// (GET /tags/{tag_name})
	TagGet(ctx context.Context, request TagGetRequestObject) (TagGetResponseObject, error)

	// (GET /threads)
	ThreadList(ctx context.Context, request ThreadListRequestObject) (ThreadListResponseObject, error)

	// (POST /threads)
	ThreadCreate(ctx context.Context, request ThreadCreateRequestObject) (ThreadCreateResponseObject, error)

	// (DELETE /threads/{thread_mark})
	ThreadDelete(ctx context.Context, request ThreadDeleteRequestObject) (ThreadDeleteResponseObject, error)
	// Get information about a thread and the posts within the thread.
	// (GET /threads/{thread_mark})
	ThreadGet(ctx context.Context, request ThreadGetRequestObject) (ThreadGetResponseObject, error)

	// (PATCH /threads/{thread_mark})
	ThreadUpdate(ctx context.Context, request ThreadUpdateRequestObject) (ThreadUpdateResponseObject, error)

	// (POST /threads/{thread_mark}/replies)
	ReplyCreate(ctx context.Context, request ReplyCreateRequestObject) (ReplyCreateResponseObject, error)
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AccountGet operation middleware
func (sh *strictHandler) AccountGet(ctx echo.Context) error {
	var request AccountGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountGet(ctx.Request().Context(), request.(AccountGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountGetResponseObject); ok {
		return validResponse.VisitAccountGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountUpdate operation middleware
func (sh *strictHandler) AccountUpdate(ctx echo.Context) error {
	var request AccountUpdateRequestObject

	var body AccountUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountUpdate(ctx.Request().Context(), request.(AccountUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountUpdateResponseObject); ok {
		return validResponse.VisitAccountUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountAuthProviderList operation middleware
func (sh *strictHandler) AccountAuthProviderList(ctx echo.Context) error {
	var request AccountAuthProviderListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountAuthProviderList(ctx.Request().Context(), request.(AccountAuthProviderListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountAuthProviderList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountAuthProviderListResponseObject); ok {
		return validResponse.VisitAccountAuthProviderListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountAuthMethodDelete operation middleware
func (sh *strictHandler) AccountAuthMethodDelete(ctx echo.Context, authMethodId string) error {
	var request AccountAuthMethodDeleteRequestObject

	request.AuthMethodId = authMethodId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountAuthMethodDelete(ctx.Request().Context(), request.(AccountAuthMethodDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountAuthMethodDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountAuthMethodDeleteResponseObject); ok {
		return validResponse.VisitAccountAuthMethodDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountSetAvatar operation middleware
func (sh *strictHandler) AccountSetAvatar(ctx echo.Context, params AccountSetAvatarParams) error {
	var request AccountSetAvatarRequestObject

	request.Params = params

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountSetAvatar(ctx.Request().Context(), request.(AccountSetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountSetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountSetAvatarResponseObject); ok {
		return validResponse.VisitAccountSetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountEmailAdd operation middleware
func (sh *strictHandler) AccountEmailAdd(ctx echo.Context) error {
	var request AccountEmailAddRequestObject

	var body AccountEmailAddJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountEmailAdd(ctx.Request().Context(), request.(AccountEmailAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountEmailAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountEmailAddResponseObject); ok {
		return validResponse.VisitAccountEmailAddResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountEmailRemove operation middleware
func (sh *strictHandler) AccountEmailRemove(ctx echo.Context, emailAddressId EmailAddressIDParam) error {
	var request AccountEmailRemoveRequestObject

	request.EmailAddressId = emailAddressId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountEmailRemove(ctx.Request().Context(), request.(AccountEmailRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountEmailRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountEmailRemoveResponseObject); ok {
		return validResponse.VisitAccountEmailRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountGetAvatar operation middleware
func (sh *strictHandler) AccountGetAvatar(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request AccountGetAvatarRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountGetAvatar(ctx.Request().Context(), request.(AccountGetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountGetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountGetAvatarResponseObject); ok {
		return validResponse.VisitAccountGetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountRemoveRole operation middleware
func (sh *strictHandler) AccountRemoveRole(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error {
	var request AccountRemoveRoleRequestObject

	request.AccountHandle = accountHandle
	request.RoleId = roleId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountRemoveRole(ctx.Request().Context(), request.(AccountRemoveRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountRemoveRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountRemoveRoleResponseObject); ok {
		return validResponse.VisitAccountRemoveRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountAddRole operation middleware
func (sh *strictHandler) AccountAddRole(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error {
	var request AccountAddRoleRequestObject

	request.AccountHandle = accountHandle
	request.RoleId = roleId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountAddRole(ctx.Request().Context(), request.(AccountAddRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountAddRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountAddRoleResponseObject); ok {
		return validResponse.VisitAccountAddRoleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountRoleRemoveBadge operation middleware
func (sh *strictHandler) AccountRoleRemoveBadge(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error {
	var request AccountRoleRemoveBadgeRequestObject

	request.AccountHandle = accountHandle
	request.RoleId = roleId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountRoleRemoveBadge(ctx.Request().Context(), request.(AccountRoleRemoveBadgeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountRoleRemoveBadge")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountRoleRemoveBadgeResponseObject); ok {
		return validResponse.VisitAccountRoleRemoveBadgeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountRoleSetBadge operation middleware
func (sh *strictHandler) AccountRoleSetBadge(ctx echo.Context, accountHandle AccountHandleParam, roleId RoleIDParam) error {
	var request AccountRoleSetBadgeRequestObject

	request.AccountHandle = accountHandle
	request.RoleId = roleId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountRoleSetBadge(ctx.Request().Context(), request.(AccountRoleSetBadgeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountRoleSetBadge")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountRoleSetBadgeResponseObject); ok {
		return validResponse.VisitAccountRoleSetBadgeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountView operation middleware
func (sh *strictHandler) AccountView(ctx echo.Context, accountId AccountIDParam) error {
	var request AccountViewRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountView(ctx.Request().Context(), request.(AccountViewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountView")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountViewResponseObject); ok {
		return validResponse.VisitAccountViewResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminSettingsUpdate operation middleware
func (sh *strictHandler) AdminSettingsUpdate(ctx echo.Context) error {
	var request AdminSettingsUpdateRequestObject

	var body AdminSettingsUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminSettingsUpdate(ctx.Request().Context(), request.(AdminSettingsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminSettingsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AdminSettingsUpdateResponseObject); ok {
		return validResponse.VisitAdminSettingsUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminAccessKeyList operation middleware
func (sh *strictHandler) AdminAccessKeyList(ctx echo.Context) error {
	var request AdminAccessKeyListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminAccessKeyList(ctx.Request().Context(), request.(AdminAccessKeyListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminAccessKeyList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AdminAccessKeyListResponseObject); ok {
		return validResponse.VisitAdminAccessKeyListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminAccessKeyDelete operation middleware
func (sh *strictHandler) AdminAccessKeyDelete(ctx echo.Context, accessKeyId AccessKeyIDParam) error {
	var request AdminAccessKeyDeleteRequestObject

	request.AccessKeyId = accessKeyId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminAccessKeyDelete(ctx.Request().Context(), request.(AdminAccessKeyDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminAccessKeyDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AdminAccessKeyDeleteResponseObject); ok {
		return validResponse.VisitAdminAccessKeyDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminAccountBanRemove operation middleware
func (sh *strictHandler) AdminAccountBanRemove(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request AdminAccountBanRemoveRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminAccountBanRemove(ctx.Request().Context(), request.(AdminAccountBanRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminAccountBanRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AdminAccountBanRemoveResponseObject); ok {
		return validResponse.VisitAdminAccountBanRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminAccountBanCreate operation middleware
func (sh *strictHandler) AdminAccountBanCreate(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request AdminAccountBanCreateRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminAccountBanCreate(ctx.Request().Context(), request.(AdminAccountBanCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminAccountBanCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AdminAccountBanCreateResponseObject); ok {
		return validResponse.VisitAdminAccountBanCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetUpload operation middleware
func (sh *strictHandler) AssetUpload(ctx echo.Context, params AssetUploadParams) error {
	var request AssetUploadRequestObject

	request.Params = params

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetUpload(ctx.Request().Context(), request.(AssetUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetUpload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetUploadResponseObject); ok {
		return validResponse.VisitAssetUploadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetGet operation middleware
func (sh *strictHandler) AssetGet(ctx echo.Context, assetFilename AssetPathParam) error {
	var request AssetGetRequestObject

	request.AssetFilename = assetFilename

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetGet(ctx.Request().Context(), request.(AssetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetGetResponseObject); ok {
		return validResponse.VisitAssetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthProviderList operation middleware
func (sh *strictHandler) AuthProviderList(ctx echo.Context) error {
	var request AuthProviderListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthProviderList(ctx.Request().Context(), request.(AuthProviderListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthProviderList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthProviderListResponseObject); ok {
		return validResponse.VisitAuthProviderListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccessKeyList operation middleware
func (sh *strictHandler) AccessKeyList(ctx echo.Context) error {
	var request AccessKeyListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccessKeyList(ctx.Request().Context(), request.(AccessKeyListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccessKeyList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccessKeyListResponseObject); ok {
		return validResponse.VisitAccessKeyListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccessKeyCreate operation middleware
func (sh *strictHandler) AccessKeyCreate(ctx echo.Context) error {
	var request AccessKeyCreateRequestObject

	var body AccessKeyCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccessKeyCreate(ctx.Request().Context(), request.(AccessKeyCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccessKeyCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccessKeyCreateResponseObject); ok {
		return validResponse.VisitAccessKeyCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccessKeyDelete operation middleware
func (sh *strictHandler) AccessKeyDelete(ctx echo.Context, accessKeyId AccessKeyIDParam) error {
	var request AccessKeyDeleteRequestObject

	request.AccessKeyId = accessKeyId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccessKeyDelete(ctx.Request().Context(), request.(AccessKeyDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccessKeyDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccessKeyDeleteResponseObject); ok {
		return validResponse.VisitAccessKeyDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordResetRequestEmail operation middleware
func (sh *strictHandler) AuthPasswordResetRequestEmail(ctx echo.Context) error {
	var request AuthPasswordResetRequestEmailRequestObject

	var body AuthPasswordResetRequestEmailJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordResetRequestEmail(ctx.Request().Context(), request.(AuthPasswordResetRequestEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordResetRequestEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordResetRequestEmailResponseObject); ok {
		return validResponse.VisitAuthPasswordResetRequestEmailResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthEmailPasswordSignin operation middleware
func (sh *strictHandler) AuthEmailPasswordSignin(ctx echo.Context) error {
	var request AuthEmailPasswordSigninRequestObject

	var body AuthEmailPasswordSigninJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthEmailPasswordSignin(ctx.Request().Context(), request.(AuthEmailPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthEmailPasswordSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthEmailPasswordSigninResponseObject); ok {
		return validResponse.VisitAuthEmailPasswordSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthEmailPasswordSignup operation middleware
func (sh *strictHandler) AuthEmailPasswordSignup(ctx echo.Context, params AuthEmailPasswordSignupParams) error {
	var request AuthEmailPasswordSignupRequestObject

	request.Params = params

	var body AuthEmailPasswordSignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthEmailPasswordSignup(ctx.Request().Context(), request.(AuthEmailPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthEmailPasswordSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthEmailPasswordSignupResponseObject); ok {
		return validResponse.VisitAuthEmailPasswordSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthEmailSignin operation middleware
func (sh *strictHandler) AuthEmailSignin(ctx echo.Context) error {
	var request AuthEmailSigninRequestObject

	var body AuthEmailSigninJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthEmailSignin(ctx.Request().Context(), request.(AuthEmailSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthEmailSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthEmailSigninResponseObject); ok {
		return validResponse.VisitAuthEmailSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthEmailSignup operation middleware
func (sh *strictHandler) AuthEmailSignup(ctx echo.Context, params AuthEmailSignupParams) error {
	var request AuthEmailSignupRequestObject

	request.Params = params

	var body AuthEmailSignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthEmailSignup(ctx.Request().Context(), request.(AuthEmailSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthEmailSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthEmailSignupResponseObject); ok {
		return validResponse.VisitAuthEmailSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthEmailVerify operation middleware
func (sh *strictHandler) AuthEmailVerify(ctx echo.Context) error {
	var request AuthEmailVerifyRequestObject

	var body AuthEmailVerifyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthEmailVerify(ctx.Request().Context(), request.(AuthEmailVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthEmailVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthEmailVerifyResponseObject); ok {
		return validResponse.VisitAuthEmailVerifyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthProviderLogout operation middleware
func (sh *strictHandler) AuthProviderLogout(ctx echo.Context) error {
	var request AuthProviderLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthProviderLogout(ctx.Request().Context(), request.(AuthProviderLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthProviderLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthProviderLogoutResponseObject); ok {
		return validResponse.VisitAuthProviderLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthProviderCallback operation middleware
func (sh *strictHandler) OAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error {
	var request OAuthProviderCallbackRequestObject

	request.OauthProvider = oauthProvider

	var body OAuthProviderCallbackJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthProviderCallback(ctx.Request().Context(), request.(OAuthProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthProviderCallbackResponseObject); ok {
		return validResponse.VisitOAuthProviderCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordUpdate operation middleware
func (sh *strictHandler) AuthPasswordUpdate(ctx echo.Context) error {
	var request AuthPasswordUpdateRequestObject

	var body AuthPasswordUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordUpdate(ctx.Request().Context(), request.(AuthPasswordUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordUpdateResponseObject); ok {
		return validResponse.VisitAuthPasswordUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordCreate operation middleware
func (sh *strictHandler) AuthPasswordCreate(ctx echo.Context) error {
	var request AuthPasswordCreateRequestObject

	var body AuthPasswordCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordCreate(ctx.Request().Context(), request.(AuthPasswordCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordCreateResponseObject); ok {
		return validResponse.VisitAuthPasswordCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordReset operation middleware
func (sh *strictHandler) AuthPasswordReset(ctx echo.Context) error {
	var request AuthPasswordResetRequestObject

	var body AuthPasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordReset(ctx.Request().Context(), request.(AuthPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordResetResponseObject); ok {
		return validResponse.VisitAuthPasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	var body AuthPasswordSigninJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSigninResponseObject); ok {
		return validResponse.VisitAuthPasswordSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context, params AuthPasswordSignupParams) error {
	var request AuthPasswordSignupRequestObject

	request.Params = params

	var body AuthPasswordSignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSignupResponseObject); ok {
		return validResponse.VisitAuthPasswordSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PhoneRequestCode operation middleware
func (sh *strictHandler) PhoneRequestCode(ctx echo.Context, params PhoneRequestCodeParams) error {
	var request PhoneRequestCodeRequestObject

	request.Params = params

	var body PhoneRequestCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PhoneRequestCode(ctx.Request().Context(), request.(PhoneRequestCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PhoneRequestCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PhoneRequestCodeResponseObject); ok {
		return validResponse.VisitPhoneRequestCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PhoneSubmitCode operation middleware
func (sh *strictHandler) PhoneSubmitCode(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request PhoneSubmitCodeRequestObject

	request.AccountHandle = accountHandle

	var body PhoneSubmitCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PhoneSubmitCode(ctx.Request().Context(), request.(PhoneSubmitCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PhoneSubmitCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PhoneSubmitCodeResponseObject); ok {
		return validResponse.VisitPhoneSubmitCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeAssertion operation middleware
func (sh *strictHandler) WebAuthnMakeAssertion(ctx echo.Context) error {
	var request WebAuthnMakeAssertionRequestObject

	var body WebAuthnMakeAssertionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeAssertion(ctx.Request().Context(), request.(WebAuthnMakeAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnMakeAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnGetAssertion operation middleware
func (sh *strictHandler) WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request WebAuthnGetAssertionRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnGetAssertion(ctx.Request().Context(), request.(WebAuthnGetAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnGetAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnGetAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnGetAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeCredential operation middleware
func (sh *strictHandler) WebAuthnMakeCredential(ctx echo.Context, params WebAuthnMakeCredentialParams) error {
	var request WebAuthnMakeCredentialRequestObject

	request.Params = params

	var body WebAuthnMakeCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeCredential(ctx.Request().Context(), request.(WebAuthnMakeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnMakeCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnRequestCredential operation middleware
func (sh *strictHandler) WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request WebAuthnRequestCredentialRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnRequestCredential(ctx.Request().Context(), request.(WebAuthnRequestCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnRequestCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnRequestCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnRequestCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CategoryList operation middleware
func (sh *strictHandler) CategoryList(ctx echo.Context) error {
	var request CategoryListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryList(ctx.Request().Context(), request.(CategoryListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryListResponseObject); ok {
		return validResponse.VisitCategoryListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CategoryCreate operation middleware
func (sh *strictHandler) CategoryCreate(ctx echo.Context) error {
	var request CategoryCreateRequestObject

	var body CategoryCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryCreate(ctx.Request().Context(), request.(CategoryCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryCreateResponseObject); ok {
		return validResponse.VisitCategoryCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CategoryDelete operation middleware
func (sh *strictHandler) CategoryDelete(ctx echo.Context, categorySlug CategorySlugParam) error {
	var request CategoryDeleteRequestObject

	request.CategorySlug = categorySlug

	var body CategoryDeleteJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryDelete(ctx.Request().Context(), request.(CategoryDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryDeleteResponseObject); ok {
		return validResponse.VisitCategoryDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CategoryGet operation middleware
func (sh *strictHandler) CategoryGet(ctx echo.Context, categorySlug CategorySlugParam) error {
	var request CategoryGetRequestObject

	request.CategorySlug = categorySlug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryGet(ctx.Request().Context(), request.(CategoryGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryGetResponseObject); ok {
		return validResponse.VisitCategoryGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CategoryUpdate operation middleware
func (sh *strictHandler) CategoryUpdate(ctx echo.Context, categorySlug CategorySlugParam) error {
	var request CategoryUpdateRequestObject

	request.CategorySlug = categorySlug

	var body CategoryUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryUpdate(ctx.Request().Context(), request.(CategoryUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryUpdateResponseObject); ok {
		return validResponse.VisitCategoryUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CategoryUpdatePosition operation middleware
func (sh *strictHandler) CategoryUpdatePosition(ctx echo.Context, categorySlug CategorySlugParam) error {
	var request CategoryUpdatePositionRequestObject

	request.CategorySlug = categorySlug

	var body CategoryUpdatePositionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CategoryUpdatePosition(ctx.Request().Context(), request.(CategoryUpdatePositionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CategoryUpdatePosition")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CategoryUpdatePositionResponseObject); ok {
		return validResponse.VisitCategoryUpdatePositionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionList operation middleware
func (sh *strictHandler) CollectionList(ctx echo.Context, params CollectionListParams) error {
	var request CollectionListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionList(ctx.Request().Context(), request.(CollectionListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionListResponseObject); ok {
		return validResponse.VisitCollectionListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionCreate operation middleware
func (sh *strictHandler) CollectionCreate(ctx echo.Context) error {
	var request CollectionCreateRequestObject

	var body CollectionCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionCreate(ctx.Request().Context(), request.(CollectionCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionCreateResponseObject); ok {
		return validResponse.VisitCollectionCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionDelete operation middleware
func (sh *strictHandler) CollectionDelete(ctx echo.Context, collectionMark CollectionMarkParam) error {
	var request CollectionDeleteRequestObject

	request.CollectionMark = collectionMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionDelete(ctx.Request().Context(), request.(CollectionDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionDeleteResponseObject); ok {
		return validResponse.VisitCollectionDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionGet operation middleware
func (sh *strictHandler) CollectionGet(ctx echo.Context, collectionMark CollectionMarkParam) error {
	var request CollectionGetRequestObject

	request.CollectionMark = collectionMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionGet(ctx.Request().Context(), request.(CollectionGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionGetResponseObject); ok {
		return validResponse.VisitCollectionGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionUpdate operation middleware
func (sh *strictHandler) CollectionUpdate(ctx echo.Context, collectionMark CollectionMarkParam) error {
	var request CollectionUpdateRequestObject

	request.CollectionMark = collectionMark

	var body CollectionUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionUpdate(ctx.Request().Context(), request.(CollectionUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionUpdateResponseObject); ok {
		return validResponse.VisitCollectionUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionRemoveNode operation middleware
func (sh *strictHandler) CollectionRemoveNode(ctx echo.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam) error {
	var request CollectionRemoveNodeRequestObject

	request.CollectionMark = collectionMark
	request.NodeId = nodeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionRemoveNode(ctx.Request().Context(), request.(CollectionRemoveNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionRemoveNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionRemoveNodeResponseObject); ok {
		return validResponse.VisitCollectionRemoveNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionAddNode operation middleware
func (sh *strictHandler) CollectionAddNode(ctx echo.Context, collectionMark CollectionMarkParam, nodeId NodeIDParam) error {
	var request CollectionAddNodeRequestObject

	request.CollectionMark = collectionMark
	request.NodeId = nodeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionAddNode(ctx.Request().Context(), request.(CollectionAddNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionAddNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionAddNodeResponseObject); ok {
		return validResponse.VisitCollectionAddNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionRemovePost operation middleware
func (sh *strictHandler) CollectionRemovePost(ctx echo.Context, collectionMark CollectionMarkParam, postId PostIDParam) error {
	var request CollectionRemovePostRequestObject

	request.CollectionMark = collectionMark
	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionRemovePost(ctx.Request().Context(), request.(CollectionRemovePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionRemovePost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionRemovePostResponseObject); ok {
		return validResponse.VisitCollectionRemovePostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CollectionAddPost operation middleware
func (sh *strictHandler) CollectionAddPost(ctx echo.Context, collectionMark CollectionMarkParam, postId PostIDParam) error {
	var request CollectionAddPostRequestObject

	request.CollectionMark = collectionMark
	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CollectionAddPost(ctx.Request().Context(), request.(CollectionAddPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CollectionAddPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CollectionAddPostResponseObject); ok {
		return validResponse.VisitCollectionAddPostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DatagraphSearch operation middleware
func (sh *strictHandler) DatagraphSearch(ctx echo.Context, params DatagraphSearchParams) error {
	var request DatagraphSearchRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatagraphSearch(ctx.Request().Context(), request.(DatagraphSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatagraphSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DatagraphSearchResponseObject); ok {
		return validResponse.VisitDatagraphSearchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DatagraphAsk operation middleware
func (sh *strictHandler) DatagraphAsk(ctx echo.Context, params DatagraphAskParams) error {
	var request DatagraphAskRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DatagraphAsk(ctx.Request().Context(), request.(DatagraphAskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DatagraphAsk")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DatagraphAskResponseObject); ok {
		return validResponse.VisitDatagraphAskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDocs operation middleware
func (sh *strictHandler) GetDocs(ctx echo.Context) error {
	var request GetDocsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocs(ctx.Request().Context(), request.(GetDocsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDocsResponseObject); ok {
		return validResponse.VisitGetDocsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EventList operation middleware
func (sh *strictHandler) EventList(ctx echo.Context, params EventListParams) error {
	var request EventListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventList(ctx.Request().Context(), request.(EventListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventListResponseObject); ok {
		return validResponse.VisitEventListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EventCreate operation middleware
func (sh *strictHandler) EventCreate(ctx echo.Context) error {
	var request EventCreateRequestObject

	var body EventCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventCreate(ctx.Request().Context(), request.(EventCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventCreateResponseObject); ok {
		return validResponse.VisitEventCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EventDelete operation middleware
func (sh *strictHandler) EventDelete(ctx echo.Context, eventMark EventMarkParam) error {
	var request EventDeleteRequestObject

	request.EventMark = eventMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventDelete(ctx.Request().Context(), request.(EventDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventDeleteResponseObject); ok {
		return validResponse.VisitEventDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EventGet operation middleware
func (sh *strictHandler) EventGet(ctx echo.Context, eventMark EventMarkParam) error {
	var request EventGetRequestObject

	request.EventMark = eventMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventGet(ctx.Request().Context(), request.(EventGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventGetResponseObject); ok {
		return validResponse.VisitEventGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EventUpdate operation middleware
func (sh *strictHandler) EventUpdate(ctx echo.Context, eventMark EventMarkParam) error {
	var request EventUpdateRequestObject

	request.EventMark = eventMark

	var body EventUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventUpdate(ctx.Request().Context(), request.(EventUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventUpdateResponseObject); ok {
		return validResponse.VisitEventUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EventParticipantRemove operation middleware
func (sh *strictHandler) EventParticipantRemove(ctx echo.Context, eventMark EventMarkParam, accountId AccountIDParam) error {
	var request EventParticipantRemoveRequestObject

	request.EventMark = eventMark
	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventParticipantRemove(ctx.Request().Context(), request.(EventParticipantRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventParticipantRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventParticipantRemoveResponseObject); ok {
		return validResponse.VisitEventParticipantRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EventParticipantUpdate operation middleware
func (sh *strictHandler) EventParticipantUpdate(ctx echo.Context, eventMark EventMarkParam, accountId AccountIDParam) error {
	var request EventParticipantUpdateRequestObject

	request.EventMark = eventMark
	request.AccountId = accountId

	var body EventParticipantUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EventParticipantUpdate(ctx.Request().Context(), request.(EventParticipantUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventParticipantUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EventParticipantUpdateResponseObject); ok {
		return validResponse.VisitEventParticipantUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetInfo operation middleware
func (sh *strictHandler) GetInfo(ctx echo.Context) error {
	var request GetInfoRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInfo(ctx.Request().Context(), request.(GetInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetInfoResponseObject); ok {
		return validResponse.VisitGetInfoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// BannerGet operation middleware
func (sh *strictHandler) BannerGet(ctx echo.Context) error {
	var request BannerGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BannerGet(ctx.Request().Context(), request.(BannerGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BannerGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(BannerGetResponseObject); ok {
		return validResponse.VisitBannerGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// BannerUpload operation middleware
func (sh *strictHandler) BannerUpload(ctx echo.Context) error {
	var request BannerUploadRequestObject

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BannerUpload(ctx.Request().Context(), request.(BannerUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BannerUpload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(BannerUploadResponseObject); ok {
		return validResponse.VisitBannerUploadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// IconUpload operation middleware
func (sh *strictHandler) IconUpload(ctx echo.Context) error {
	var request IconUploadRequestObject

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IconUpload(ctx.Request().Context(), request.(IconUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IconUpload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IconUploadResponseObject); ok {
		return validResponse.VisitIconUploadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// IconGet operation middleware
func (sh *strictHandler) IconGet(ctx echo.Context, iconSize IconGetParamsIconSize) error {
	var request IconGetRequestObject

	request.IconSize = iconSize

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IconGet(ctx.Request().Context(), request.(IconGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IconGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IconGetResponseObject); ok {
		return validResponse.VisitIconGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// InvitationList operation middleware
func (sh *strictHandler) InvitationList(ctx echo.Context, params InvitationListParams) error {
	var request InvitationListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InvitationList(ctx.Request().Context(), request.(InvitationListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InvitationList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InvitationListResponseObject); ok {
		return validResponse.VisitInvitationListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// InvitationCreate operation middleware
func (sh *strictHandler) InvitationCreate(ctx echo.Context) error {
	var request InvitationCreateRequestObject

	var body InvitationCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InvitationCreate(ctx.Request().Context(), request.(InvitationCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InvitationCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InvitationCreateResponseObject); ok {
		return validResponse.VisitInvitationCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// InvitationDelete operation middleware
func (sh *strictHandler) InvitationDelete(ctx echo.Context, invitationId InvitationIDParam) error {
	var request InvitationDeleteRequestObject

	request.InvitationId = invitationId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InvitationDelete(ctx.Request().Context(), request.(InvitationDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InvitationDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InvitationDeleteResponseObject); ok {
		return validResponse.VisitInvitationDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// InvitationGet operation middleware
func (sh *strictHandler) InvitationGet(ctx echo.Context, invitationId InvitationIDParam) error {
	var request InvitationGetRequestObject

	request.InvitationId = invitationId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InvitationGet(ctx.Request().Context(), request.(InvitationGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InvitationGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InvitationGetResponseObject); ok {
		return validResponse.VisitInvitationGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LikePostRemove operation middleware
func (sh *strictHandler) LikePostRemove(ctx echo.Context, postId PostIDParam) error {
	var request LikePostRemoveRequestObject

	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LikePostRemove(ctx.Request().Context(), request.(LikePostRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LikePostRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LikePostRemoveResponseObject); ok {
		return validResponse.VisitLikePostRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LikePostGet operation middleware
func (sh *strictHandler) LikePostGet(ctx echo.Context, postId PostIDParam) error {
	var request LikePostGetRequestObject

	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LikePostGet(ctx.Request().Context(), request.(LikePostGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LikePostGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LikePostGetResponseObject); ok {
		return validResponse.VisitLikePostGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LikePostAdd operation middleware
func (sh *strictHandler) LikePostAdd(ctx echo.Context, postId PostIDParam) error {
	var request LikePostAddRequestObject

	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LikePostAdd(ctx.Request().Context(), request.(LikePostAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LikePostAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LikePostAddResponseObject); ok {
		return validResponse.VisitLikePostAddResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LikeProfileGet operation middleware
func (sh *strictHandler) LikeProfileGet(ctx echo.Context, accountHandle AccountHandleParam, params LikeProfileGetParams) error {
	var request LikeProfileGetRequestObject

	request.AccountHandle = accountHandle
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LikeProfileGet(ctx.Request().Context(), request.(LikeProfileGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LikeProfileGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LikeProfileGetResponseObject); ok {
		return validResponse.VisitLikeProfileGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LinkList operation middleware
func (sh *strictHandler) LinkList(ctx echo.Context, params LinkListParams) error {
	var request LinkListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkList(ctx.Request().Context(), request.(LinkListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LinkListResponseObject); ok {
		return validResponse.VisitLinkListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LinkCreate operation middleware
func (sh *strictHandler) LinkCreate(ctx echo.Context) error {
	var request LinkCreateRequestObject

	var body LinkCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkCreate(ctx.Request().Context(), request.(LinkCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LinkCreateResponseObject); ok {
		return validResponse.VisitLinkCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LinkGet operation middleware
func (sh *strictHandler) LinkGet(ctx echo.Context, linkSlug LinkSlugParam) error {
	var request LinkGetRequestObject

	request.LinkSlug = linkSlug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkGet(ctx.Request().Context(), request.(LinkGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LinkGetResponseObject); ok {
		return validResponse.VisitLinkGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeList operation middleware
func (sh *strictHandler) NodeList(ctx echo.Context, params NodeListParams) error {
	var request NodeListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeList(ctx.Request().Context(), request.(NodeListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeListResponseObject); ok {
		return validResponse.VisitNodeListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeCreate operation middleware
func (sh *strictHandler) NodeCreate(ctx echo.Context) error {
	var request NodeCreateRequestObject

	var body NodeCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeCreate(ctx.Request().Context(), request.(NodeCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeCreateResponseObject); ok {
		return validResponse.VisitNodeCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeDelete operation middleware
func (sh *strictHandler) NodeDelete(ctx echo.Context, nodeSlug NodeSlugParam, params NodeDeleteParams) error {
	var request NodeDeleteRequestObject

	request.NodeSlug = nodeSlug
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeDelete(ctx.Request().Context(), request.(NodeDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeDeleteResponseObject); ok {
		return validResponse.VisitNodeDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeGet operation middleware
func (sh *strictHandler) NodeGet(ctx echo.Context, nodeSlug NodeSlugParam, params NodeGetParams) error {
	var request NodeGetRequestObject

	request.NodeSlug = nodeSlug
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeGet(ctx.Request().Context(), request.(NodeGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeGetResponseObject); ok {
		return validResponse.VisitNodeGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeUpdate operation middleware
func (sh *strictHandler) NodeUpdate(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeUpdateRequestObject

	request.NodeSlug = nodeSlug

	var body NodeUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeUpdate(ctx.Request().Context(), request.(NodeUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeUpdateResponseObject); ok {
		return validResponse.VisitNodeUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeRemoveAsset operation middleware
func (sh *strictHandler) NodeRemoveAsset(ctx echo.Context, nodeSlug NodeSlugParam, assetId AssetIDParam) error {
	var request NodeRemoveAssetRequestObject

	request.NodeSlug = nodeSlug
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeRemoveAsset(ctx.Request().Context(), request.(NodeRemoveAssetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeRemoveAsset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeRemoveAssetResponseObject); ok {
		return validResponse.VisitNodeRemoveAssetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeAddAsset operation middleware
func (sh *strictHandler) NodeAddAsset(ctx echo.Context, nodeSlug NodeSlugParam, assetId AssetIDParam) error {
	var request NodeAddAssetRequestObject

	request.NodeSlug = nodeSlug
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeAddAsset(ctx.Request().Context(), request.(NodeAddAssetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeAddAsset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeAddAssetResponseObject); ok {
		return validResponse.VisitNodeAddAssetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeListChildren operation middleware
func (sh *strictHandler) NodeListChildren(ctx echo.Context, nodeSlug NodeSlugParam, params NodeListChildrenParams) error {
	var request NodeListChildrenRequestObject

	request.NodeSlug = nodeSlug
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeListChildren(ctx.Request().Context(), request.(NodeListChildrenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeListChildren")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeListChildrenResponseObject); ok {
		return validResponse.VisitNodeListChildrenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeUpdateChildrenPropertySchema operation middleware
func (sh *strictHandler) NodeUpdateChildrenPropertySchema(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeUpdateChildrenPropertySchemaRequestObject

	request.NodeSlug = nodeSlug

	var body NodeUpdateChildrenPropertySchemaJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeUpdateChildrenPropertySchema(ctx.Request().Context(), request.(NodeUpdateChildrenPropertySchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeUpdateChildrenPropertySchema")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeUpdateChildrenPropertySchemaResponseObject); ok {
		return validResponse.VisitNodeUpdateChildrenPropertySchemaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeGenerateContent operation middleware
func (sh *strictHandler) NodeGenerateContent(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeGenerateContentRequestObject

	request.NodeSlug = nodeSlug

	var body NodeGenerateContentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeGenerateContent(ctx.Request().Context(), request.(NodeGenerateContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeGenerateContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeGenerateContentResponseObject); ok {
		return validResponse.VisitNodeGenerateContentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeRemoveNode operation middleware
func (sh *strictHandler) NodeRemoveNode(ctx echo.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam) error {
	var request NodeRemoveNodeRequestObject

	request.NodeSlug = nodeSlug
	request.NodeSlugChild = nodeSlugChild

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeRemoveNode(ctx.Request().Context(), request.(NodeRemoveNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeRemoveNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeRemoveNodeResponseObject); ok {
		return validResponse.VisitNodeRemoveNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeAddNode operation middleware
func (sh *strictHandler) NodeAddNode(ctx echo.Context, nodeSlug NodeSlugParam, nodeSlugChild NodeSlugChildParam) error {
	var request NodeAddNodeRequestObject

	request.NodeSlug = nodeSlug
	request.NodeSlugChild = nodeSlugChild

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeAddNode(ctx.Request().Context(), request.(NodeAddNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeAddNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeAddNodeResponseObject); ok {
		return validResponse.VisitNodeAddNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeUpdatePosition operation middleware
func (sh *strictHandler) NodeUpdatePosition(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeUpdatePositionRequestObject

	request.NodeSlug = nodeSlug

	var body NodeUpdatePositionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeUpdatePosition(ctx.Request().Context(), request.(NodeUpdatePositionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeUpdatePosition")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeUpdatePositionResponseObject); ok {
		return validResponse.VisitNodeUpdatePositionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeUpdateProperties operation middleware
func (sh *strictHandler) NodeUpdateProperties(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeUpdatePropertiesRequestObject

	request.NodeSlug = nodeSlug

	var body NodeUpdatePropertiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeUpdateProperties(ctx.Request().Context(), request.(NodeUpdatePropertiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeUpdateProperties")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeUpdatePropertiesResponseObject); ok {
		return validResponse.VisitNodeUpdatePropertiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeUpdatePropertySchema operation middleware
func (sh *strictHandler) NodeUpdatePropertySchema(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeUpdatePropertySchemaRequestObject

	request.NodeSlug = nodeSlug

	var body NodeUpdatePropertySchemaJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeUpdatePropertySchema(ctx.Request().Context(), request.(NodeUpdatePropertySchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeUpdatePropertySchema")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeUpdatePropertySchemaResponseObject); ok {
		return validResponse.VisitNodeUpdatePropertySchemaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeGenerateTags operation middleware
func (sh *strictHandler) NodeGenerateTags(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeGenerateTagsRequestObject

	request.NodeSlug = nodeSlug

	var body NodeGenerateTagsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeGenerateTags(ctx.Request().Context(), request.(NodeGenerateTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeGenerateTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeGenerateTagsResponseObject); ok {
		return validResponse.VisitNodeGenerateTagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeGenerateTitle operation middleware
func (sh *strictHandler) NodeGenerateTitle(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeGenerateTitleRequestObject

	request.NodeSlug = nodeSlug

	var body NodeGenerateTitleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeGenerateTitle(ctx.Request().Context(), request.(NodeGenerateTitleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeGenerateTitle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeGenerateTitleResponseObject); ok {
		return validResponse.VisitNodeGenerateTitleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NodeUpdateVisibility operation middleware
func (sh *strictHandler) NodeUpdateVisibility(ctx echo.Context, nodeSlug NodeSlugParam) error {
	var request NodeUpdateVisibilityRequestObject

	request.NodeSlug = nodeSlug

	var body NodeUpdateVisibilityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NodeUpdateVisibility(ctx.Request().Context(), request.(NodeUpdateVisibilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NodeUpdateVisibility")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NodeUpdateVisibilityResponseObject); ok {
		return validResponse.VisitNodeUpdateVisibilityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NotificationList operation middleware
func (sh *strictHandler) NotificationList(ctx echo.Context, params NotificationListParams) error {
	var request NotificationListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NotificationList(ctx.Request().Context(), request.(NotificationListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NotificationList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NotificationListResponseObject); ok {
		return validResponse.VisitNotificationListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// NotificationUpdate operation middleware
func (sh *strictHandler) NotificationUpdate(ctx echo.Context, notificationId NotificationIDParam) error {
	var request NotificationUpdateRequestObject

	request.NotificationId = notificationId

	var body NotificationUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NotificationUpdate(ctx.Request().Context(), request.(NotificationUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NotificationUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(NotificationUpdateResponseObject); ok {
		return validResponse.VisitNotificationUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSpecResponseObject); ok {
		return validResponse.VisitGetSpecResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostDelete operation middleware
func (sh *strictHandler) PostDelete(ctx echo.Context, postId PostIDParam) error {
	var request PostDeleteRequestObject

	request.PostId = postId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostDelete(ctx.Request().Context(), request.(PostDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostDeleteResponseObject); ok {
		return validResponse.VisitPostDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUpdate operation middleware
func (sh *strictHandler) PostUpdate(ctx echo.Context, postId PostIDParam) error {
	var request PostUpdateRequestObject

	request.PostId = postId

	var body PostUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUpdate(ctx.Request().Context(), request.(PostUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUpdateResponseObject); ok {
		return validResponse.VisitPostUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostReactAdd operation middleware
func (sh *strictHandler) PostReactAdd(ctx echo.Context, postId PostIDParam) error {
	var request PostReactAddRequestObject

	request.PostId = postId

	var body PostReactAddJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostReactAdd(ctx.Request().Context(), request.(PostReactAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostReactAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostReactAddResponseObject); ok {
		return validResponse.VisitPostReactAddResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostReactRemove operation middleware
func (sh *strictHandler) PostReactRemove(ctx echo.Context, postId PostIDParam, reactId ReactIDParam) error {
	var request PostReactRemoveRequestObject

	request.PostId = postId
	request.ReactId = reactId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostReactRemove(ctx.Request().Context(), request.(PostReactRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostReactRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostReactRemoveResponseObject); ok {
		return validResponse.VisitPostReactRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileList operation middleware
func (sh *strictHandler) ProfileList(ctx echo.Context, params ProfileListParams) error {
	var request ProfileListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileList(ctx.Request().Context(), request.(ProfileListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileListResponseObject); ok {
		return validResponse.VisitProfileListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileGet operation middleware
func (sh *strictHandler) ProfileGet(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request ProfileGetRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileGet(ctx.Request().Context(), request.(ProfileGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileGetResponseObject); ok {
		return validResponse.VisitProfileGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileFollowersRemove operation middleware
func (sh *strictHandler) ProfileFollowersRemove(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request ProfileFollowersRemoveRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileFollowersRemove(ctx.Request().Context(), request.(ProfileFollowersRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileFollowersRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileFollowersRemoveResponseObject); ok {
		return validResponse.VisitProfileFollowersRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileFollowersGet operation middleware
func (sh *strictHandler) ProfileFollowersGet(ctx echo.Context, accountHandle AccountHandleParam, params ProfileFollowersGetParams) error {
	var request ProfileFollowersGetRequestObject

	request.AccountHandle = accountHandle
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileFollowersGet(ctx.Request().Context(), request.(ProfileFollowersGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileFollowersGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileFollowersGetResponseObject); ok {
		return validResponse.VisitProfileFollowersGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileFollowersAdd operation middleware
func (sh *strictHandler) ProfileFollowersAdd(ctx echo.Context, accountHandle AccountHandleParam) error {
	var request ProfileFollowersAddRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileFollowersAdd(ctx.Request().Context(), request.(ProfileFollowersAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileFollowersAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileFollowersAddResponseObject); ok {
		return validResponse.VisitProfileFollowersAddResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileFollowingGet operation middleware
func (sh *strictHandler) ProfileFollowingGet(ctx echo.Context, accountHandle AccountHandleParam, params ProfileFollowingGetParams) error {
	var request ProfileFollowingGetRequestObject

	request.AccountHandle = accountHandle
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileFollowingGet(ctx.Request().Context(), request.(ProfileFollowingGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileFollowingGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileFollowingGetResponseObject); ok {
		return validResponse.VisitProfileFollowingGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RoleList operation middleware
func (sh *strictHandler) RoleList(ctx echo.Context) error {
	var request RoleListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RoleList(ctx.Request().Context(), request.(RoleListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RoleList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RoleListResponseObject); ok {
		return validResponse.VisitRoleListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RoleCreate operation middleware
func (sh *strictHandler) RoleCreate(ctx echo.Context) error {
	var request RoleCreateRequestObject

	var body RoleCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RoleCreate(ctx.Request().Context(), request.(RoleCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RoleCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RoleCreateResponseObject); ok {
		return validResponse.VisitRoleCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RoleDelete operation middleware
func (sh *strictHandler) RoleDelete(ctx echo.Context, roleId RoleIDParam) error {
	var request RoleDeleteRequestObject

	request.RoleId = roleId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RoleDelete(ctx.Request().Context(), request.(RoleDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RoleDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RoleDeleteResponseObject); ok {
		return validResponse.VisitRoleDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RoleGet operation middleware
func (sh *strictHandler) RoleGet(ctx echo.Context, roleId RoleIDParam) error {
	var request RoleGetRequestObject

	request.RoleId = roleId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RoleGet(ctx.Request().Context(), request.(RoleGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RoleGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RoleGetResponseObject); ok {
		return validResponse.VisitRoleGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RoleUpdate operation middleware
func (sh *strictHandler) RoleUpdate(ctx echo.Context, roleId RoleIDParam) error {
	var request RoleUpdateRequestObject

	request.RoleId = roleId

	var body RoleUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RoleUpdate(ctx.Request().Context(), request.(RoleUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RoleUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RoleUpdateResponseObject); ok {
		return validResponse.VisitRoleUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// TagList operation middleware
func (sh *strictHandler) TagList(ctx echo.Context, params TagListParams) error {
	var request TagListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TagList(ctx.Request().Context(), request.(TagListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TagList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TagListResponseObject); ok {
		return validResponse.VisitTagListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// TagGet operation middleware
func (sh *strictHandler) TagGet(ctx echo.Context, tagName TagNameParam) error {
	var request TagGetRequestObject

	request.TagName = tagName

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TagGet(ctx.Request().Context(), request.(TagGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TagGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TagGetResponseObject); ok {
		return validResponse.VisitTagGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ThreadList operation middleware
func (sh *strictHandler) ThreadList(ctx echo.Context, params ThreadListParams) error {
	var request ThreadListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadList(ctx.Request().Context(), request.(ThreadListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadListResponseObject); ok {
		return validResponse.VisitThreadListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ThreadCreate operation middleware
func (sh *strictHandler) ThreadCreate(ctx echo.Context) error {
	var request ThreadCreateRequestObject

	var body ThreadCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadCreate(ctx.Request().Context(), request.(ThreadCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadCreateResponseObject); ok {
		return validResponse.VisitThreadCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ThreadDelete operation middleware
func (sh *strictHandler) ThreadDelete(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request ThreadDeleteRequestObject

	request.ThreadMark = threadMark

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadDelete(ctx.Request().Context(), request.(ThreadDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadDeleteResponseObject); ok {
		return validResponse.VisitThreadDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ThreadGet operation middleware
func (sh *strictHandler) ThreadGet(ctx echo.Context, threadMark ThreadMarkParam, params ThreadGetParams) error {
	var request ThreadGetRequestObject

	request.ThreadMark = threadMark
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadGet(ctx.Request().Context(), request.(ThreadGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadGetResponseObject); ok {
		return validResponse.VisitThreadGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ThreadUpdate operation middleware
func (sh *strictHandler) ThreadUpdate(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request ThreadUpdateRequestObject

	request.ThreadMark = threadMark

	var body ThreadUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadUpdate(ctx.Request().Context(), request.(ThreadUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadUpdateResponseObject); ok {
		return validResponse.VisitThreadUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ReplyCreate operation middleware
func (sh *strictHandler) ReplyCreate(ctx echo.Context, threadMark ThreadMarkParam) error {
	var request ReplyCreateRequestObject

	request.ThreadMark = threadMark

	var body ReplyCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplyCreate(ctx.Request().Context(), request.(ReplyCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplyCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReplyCreateResponseObject); ok {
		return validResponse.VisitReplyCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		return validResponse.VisitGetVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9f3Mbt7Ig+lWw3FflZJeSEic599y82nqr2E6iG//QleScunWZksEZkMTREJgAGNE8",
	"Ln/3V+gGMBgOZjikKNty/E9icYBGA91oNBr9490ok8tSCiaMHv34brRgNGcK/vmEZgt29EQKo2Rhf9DZ",
	"gi2p/ZdZl2z040gbxcV89P79ePTsis63tXlOtTl6IXM+4yxvNp5JtaRm9OPo4ucn3377+LvRuNX//XhU",
	"UkWXzDj8TrOMaf0bW589Pbcf7G8505nipeFSjH50LcgNW5Ozp8ej8YjbX0tqFqPxSNClhU+hzfUNW1/z",
	"fDQeKfZnxZXFz6iKjSMc/x/FZqMfR//zpF6xE/yqT85yJoydl4KZnmaZrIT5lYq8YN3I2TZkAY0sduwt",
	"XZYFTFpWZpEVdKU7kbZ9r7Hv3lg30Gwj/p8VU+uDYP+nhdSD/h3R7WMAwLKP+oDJwUl/9nTI6kV4dSwR",
	"ILYfIlqznpWxX3vWxX7etirtHQ5QX9Ilsk571KsFI1nBmTBHpZK3PGc5mfGCETssmUlFzIIRGLxrYWxz",
	"+OcATM6pWdxl/tFYu6zCE2rYXKr1ZVHNn3NtOhbDNyO6qOaaGGmXwjBFputj8qIqDC8LRrjQhoqMaSJn",
	"xCy4JkEKkowKMmUTUWmWN/qTJRVrkuEAnOljcjYjQhriV31MhG/OxZyseFEAJFqWBWc5oSIntCiIWShG",
	"c+0bEMVMpQTLAeDpy/9CpFiAS25pUTE9EVwTu8BGwmf2lmYGv9kek5GoimIyst8EkaJYk0p4bGEu0bAT",
	"0Rj3H7ZLjbnlmWTfMeAvzYKpgJSfBZ8LqewiwNAWQUQtk8JQLizcgKLvk0mhec4Uy48nooM36wUfvGk3",
	"eaXFQB38+1rwPy3GnodeXzwHPurgZ9/u2rbZlZ1lUbDMjvsr1WeGLfskG5BHlyyDQ36My8dFVlQ5I5TM",
	"OCtywgUsumK6lEJbHs95Rg1w4oJZkk2EVMCwtl0AR7hhS2K3gGKaCeMBZQHDY3Jlt4imt0yTtawmQjCW",
	"W8BGkiW9YcSsJLFk4wy2XLZg2Q3hM0JFgM4FoTHMTnovqL62nfYV0fXKvqDqpmNFn3G7ID9OxBGx4rNy",
	"hA9drRCzH08J0sxvSatSkUn1zTffZTyH/7Mj/NPyAP5Qz2yDXQL06yVVN3ufjXZabqbCMGGeMzE3i/Yc",
	"f5L5GnafJWoBjSwVpmvDdOBoVE1rJB3MIwd0AFNzYdgcQLw9msuj+te/fQ9YPqWGzhUtF79xkQepTYtC",
	"rp4tS7P+3UoJD705g9AVueiGixzYbI2qUVnIPPRMsZLt0GAjC0ZvW98wqt2WFunR+6A4U6XoGnXzJeXF",
	"aZ4rpnW3QiAIs+0IxYbk7Kk9iGXGqWE5WXGzcJv2z4pp2KtOR+kQOQDt2kE7oIL17JYJs/N+YbaX3yqt",
	"30FyHnoTAegD7Z+zTIpL/i/Wnq79QjT/F26UWgn/4dvHb3/49nEaNZ5JcW079WLGRLUc/fjfEajvHr/9",
	"zv7/279/8/bbv39j//X4m7ffPoZ//e3f3n77t3+z//rh8dtvf3g8+mOcOE3OxC031CLfyYrubOOhZbee",
	"Vrc5IIfFKPaddb14buzvTUT3Quw5FzfbdYKCixty2a0L2O/76AEvZc6eLHiRKyYupTIdWNjNhcf8Vwy2",
	"opXkCJdI+KNUsmTKrN2vX9tzWEtlrOLbrVu5ka9ty9F2TLdxl5A56+Yr+/WAHGURstrdz2Dm6EDMNiBo",
	"CBkTt3SUGMWY1YoUI4xm7nhxiqq2eopbFwLynkg1EbOCGtclfIXjxPezys7ZU2IW1BDFZkwxuGCYBePK",
	"Xi+YMN2EcKaaeCVyNqNVYUY/jiy2Vgw5yeH+tAilpYFdGMuqwFcDCNbD1kAyy9bXMOlDkm77nhuM3OHQ",
	"sn9kgwSpiNr2sXzd6qCsX4O9NNRUuuM6HDckGlp2CVP8OliKtlEIN61Xp5VZnOPlVaVlGQ/zgcsmFQQ6",
	"PfZ3XkV0lS0I1WQyMituDFOTUfMsdj+n113SyiyuPbAdZfI5nXMBE+tY1boBqqO19aBzdUs632ZdOQcZ",
	"4SxMHSP/bG/mZSEpXL8EW5FbpjSXAiwZVBD2ljs90sIZo72gaeAwciKCRciKLG9ugPGdoQivfMtKG3tP",
	"R9FGRQ7XR0q8Ded4IqDdjFFTKWbveWA2sTTV3FSwRtqJzbWsyIoKsF8oVhY0A8Aw3kRwK05tdzpHmwF7",
	"a8ZkWllhCuLVoigVtytfoOZMyYquEZoTt4SbibCDO4R0YCOWc0OnBTvJlCxL+y/Cl3TOtD0+wVrmFpIs",
	"uDZS9RyauE7XkTVvO1X/E9R7K1UGX37OZnahpW16VJXkTwdhHNPK/9ijIzlsfcsBCEtttgm/UuoeO5/9",
	"ekBhd8FothUjZRt1owSfD4oTArlkVGWL3W612MdJDlz4LuL9uaPkupBFt45mP5Kzpx0LJItD6mYfYF36",
	"1uGKzl/SJQt24i6tmm6aiDvGM3Q+/GSMBo+R6cYBDPUdjGvo/HoPa/kVVXNmvJrVcZiczQicEaDagbZV",
	"26SX8hbN31baGIAGLYLRu+45ET1dlZQ9ai8Cvrb9t1EUDNA9Fgps4C0Q9qgqmVpSARbNwJxdqwyd72ZW",
	"qDFEhBVjT1nZ+VaCNl205lMrULnht85mjjIeV3XTrNu0/RbFRMTkq0q/8LV9N7dYOBu/G/BfTMkxPhRw",
	"OPwnwpmgPGh7C3K3OW/Qp8gBrWeLMT4IrLhmE4FtZXlUsFtWkK8s/b/e4K3w7tDJF4DyFo74nWs+5QU3",
	"Xbv7Z9zV3gIKKoNblYzcht7uIeOYvJSG4TSna+JuX2M3o7KaFlwvnLVcE6pazyePckVn5pHVgSJTve09",
	"EfBJE7kSLLfQ0zY/gOrWP0BV7JazlQU7ERHcCAKu64zywhEzBTqXTMO+XdBbhvqfYBnTmlr1lakl16D9",
	"GEnseISLIxwZJ4ykGmByrdd1d8NrTdGExfU97kumzU8y56zprPBEMWrAjueoDYdOWRbugnLyT21Z4t3w",
	"N3HnBCG44bQ4V7LUFof6Kdqbfw85ZoDbPewlM6e31FDVM67MDDNH2iiGuyLhEDLlggLVWv4g9VCvy/zA",
	"a2qhvqhADW9MLV9yccmM5Vd96FFj2KmxrRL/Gi5U97Wim2oOjuYuUceW0+3NF+h+uGl7iClO8t/OqdYr",
	"qfLDj+ohDxn9gmlm7g8FBL8x9u9M8dn68IMi3M3p3ss6n1OuEmMcWhBGoDuIeX90bEDuGvbQ8iICnRAX",
	"3ofgwMvswSaW2H96ygp2DyMi2NSAB15YD7ZnUXHEc9CEEfRBR/aAUxiEl/lDEzYATpE2fDz0WtceEO25",
	"wkvvgacJMBMzhN/PqTI84yU9uEqxCb5rtvcxbGKs+oXzwMsbPZ221/g5FzcHHs+CTIwET5WHHQneFNMj",
	"/cIEU9SwJ/U4BxtyA/YF3isSg1/Rub6XkS3gnmG5Kdj9jGshtwc+8A6xIBMbpB7p4ELegu4R8NHI+Ezu",
	"LpAHGduBXA8Zd30ZQA4ee9DduQm/iUr7Lr3xhHhw8tegE4vSeB58QotiSrObgw0O0ANUHPF8IYXn+idg",
	"wDgU6TcAx9OEb5fVdMnvYcwabmNIqQ28lhzSMIHPLxtCevNSe5rbGy28sjgrEtg0DdxvLVoHZjELcpO1",
	"NnHCs8ohAuY/8EFFWy8gdsHK4tC6PMDctlwBNWVbj8lqwbMF4boXWVkc+viF56L28Wt/PjC9LMiEKECb",
	"+YFnhUAT88IPB56ZM/u351ZbMw88Yg3YjmoBxMP+g02tBBQv6A071dqedQc8Z8+racEztLjCowotEuNG",
	"H+97YDAL49NIyiT86rd7MAprXbE8ta1f/TZC+yk2fM61uQ8ELNwLpqvC9CIhK2Hio/bw6PgRXjCzkLne",
	"ig0YyXA3HB6R2CF7Kya/dNjRwSfkpBTzO5t5X/02GvcGfqam5NqfNBtHkaB9naBNKiK0r1OzcWz//4Xd",
	"A7d8lit1Xxzdw8X5kov7kjOvVoLluwmb9gvOIVcjht6pUjlMtGZJzv1fJ//rzlv6Ch5NVxAWht526Irn",
	"4i2PHywb149ghySbdi8vOy+jN/Hvf26VjVv+0l2/thn+X9h278cj7zaqB70WRFiO/Cs1eo/8dwRpjFjU",
	"/tpy+k+W9e2pyiwuK9iFhyRKDXWIKL5k5uiJlDec9achsJB+ork3LLVD0WjunRJGrWeUA07PA+5e1ubD",
	"x0cZ+rAH6/BxD3xMxGC3HRDNJ54PO/vwGHKa5y9lftDRA+x/cAPhgunbfh1W6p2RaJ4zvNY38DuXhyXR",
	"QfE7/G4NoLdhBSNv4nPgfbTzWnGBOoT9NxW5X7sNLO98etVhw3r4HJKnUQxpyEEUzbXgenNiF2wpb9kn",
	"vaMQxU96Ux1eIg7dVBWMjPiEkOdTfdPCxbC35gTibpMuUFvVZufXreCM0M3x8NsBp78BuftgSmAVPY0f",
	"ECOAmsIAPjjZVo9/WKm2ZfA5M/XIB9YPAsxuGiASQbZEj/UfbglwG8D4P0s15XnORDLuyn16Px79wsyZ",
	"mMkD4mjBdaswZ8IwJWhxydQtU8+UkupwF4LzMwSYGN2PS3Bg4hq2PR0OuhIedN96+DaH3Sy7jX3g7dIE",
	"vE2hfs5v4FzbfQGaykXBb9hWtcKecXbApFKBEIaoE6dFQaA1hnzW74MwGSXt5f+wBHVAPe7di/oc0ALf",
	"fyqCz/yCajLnt0w4LL2jzQExtEAvfPRiGjNxQ7jI2VuWeywOu0gWYufIOTU0zP7AHO9B9pFF3NTHw0sZ",
	"+QJthjl7JWvkvC5O8xzC3w+I70swD7WxtL+7GCrU8MgFRIZoH6UJcVOjhgfVB0MrujnZH/YyezRFRg6R",
	"JdQ/Kw5AbYBsAGRzQK5GdsNN68Br1nIC6+JCXEinw89drzaWV3Su7wlF9Bbrxc/Que5DjpuC3Rd26FPW",
	"j55tk8Tv0GS1lzKfUKUTnb6ru08rcmC8+iUdYBVJupzh3fUjyDAFA2+RYgfX0geTLr62ptz67iTbmn8N",
	"8bfrMvt7MH8MFX51n/4pOg+/DzxNHPRgkw0ZdFwKo+aMzc+yEnkymQmZwSdsdrYsC7ZkwrCOxjxqgF3i",
	"V7J2+6X/+kAf8mLHy4OLsCbobReUtnvpPSHTjULsDXnAwQFkalQ7Xu0CWRv7avfHQ15tpO5Gwm0novGl",
	"b1YVxRpRwQvRz5BVhCl94OsW+GhtjrGNUxrtuZjfO05czAfidI+ofF6OMOGire9twYYIncif96AbvizW",
	"aUcGSDkBPrz+ptXec7Xf7iFxkp0s5IY8LO9uH+/AtPcgt5H8ih5YYMCO6BntwPN0ELdOM3KUPuToALaH",
	"t2P7Af70ywGjfPuG37ikTWVlgj883Nm40WBC1A/W7wqnf2iGCkD77GragOtVnYz+gS/iwfWrrTsjvrK8",
	"FrQyC0yVn8pQ5r7+C68h3lP+F2aCg/4hH4CDg7xzx3pV4pP/gf29/DR8+FMY9oBz8WPE3v8A517m9N5n",
	"rMFIAv8y1s7qTaK/fd5F29Ql74G8O2RRLamw94Ecsg0umYbUhlAEQqwnQrECFIYlMzSnhpKZkstGXh9o",
	"WmcL10zd8oy5XDzNOzxLY4pi1L3iQZsxJAGyv4ncJWpkIj+qNFMk57osKCRB21ic8cihn1oMmOhRa6L7",
	"jIErATyT5xDMiRE8fqKptHGnYk3q1vVy+vX11TLs7KNhvYViPNLVfM500ohwSsJH4u51vp6KnU1iFhvG",
	"EaTLH4lRg4O1y4/3ajb68b+3uXYslxjs49bj/XhgxIjzmu7FoxEw1TISsbclV0xfU9ORygwyitaloVz7",
	"MeEzIqqiGBNuiGC3TPlPdvGCE7aVpUeGQ567Fl9gaqkUb0OFG5e+tB58O1kAYv9qYJDPYNrU5BxMlEuW",
	"KWaAKq2qAdFKcsAEQirD0+QYc7pyjfn0q6KIe+B0JqKWRpAQDoZziV25xqxu7G0pNbOnmXezcyLN9rCw",
	"qMgxWxh2dzVduHa01EYqlh9D8v+MFgVTPgF2xvgtvKnaoTxC2uex41ZSQJZYllWKFWuA1ETVjWVb2Z2s",
	"7JZD2ddNNrBQDo2Zjmm2ESK9AdKpUq1dccPWeqewrRYnAoReTuzakMJK2zw6yaZSFoyCh8pnuFvHYca9",
	"q+U2VWu5dPi9jZdjN7sQvuiT1disNpNRw+oyHafnZ8cTMRG/sTWmACwVm/G3vpIHxQoldbbJMZmMdF7S",
	"m8kIcxRrjIyeiEsj1TpngpwzpeHccmX1fsM9Bx2nrY6+20T8JE3UBTegWUnAAHHz57zKFlTMGZzNC7kC",
	"opoFW09ELkNGQDJlC3rLZaVoQXI+C+nr4aalyZLBJqXkluuKFiSrmE8JGArU2Yle02+nj7Pv8u+zWfbN",
	"N/n3j/99Sv/+/bezf//+8Q/Z3x7P/v74u++//e7v3063Et0RrIPYEB51rwenHaHu1314NmMgkyVgImay",
	"0nUJLSHaW4BWcVsXJHPaZLPHRISs6JvFY+oj4Zi81gzFrZFezSIU9JRH2o0zEUlcNNGgJK2h+BnLuSFS",
	"uYdAwk1K4XSGgT4JYydYmYWf74pa6T/n2jBVq2VRuZth4oXnW9RclwEWSjEA58LoC6qP0+BC3uIkWPbW",
	"gY0y1n9lFlzlpKTKrCE/qiI5s6o5OXv69W4isfTbH2QjOBv5lUHEk0iXUW79ofFJrQ0GyZ4jMo69nI2W",
	"JBpqEPvvevxubJ70MbwZZdyS7cjbOw+H5/F4RG8pL6x4vHO4l0MkBtmzbD9xmWYKxbPFkWFvDZly6esj",
	"uI3ySGMu2oyUaBdvFkXAMkpTma9dGSX4u8Q/FnxMlmtkNa7x00mZaFjXGk01OqnBp5gzITvbFMuXXKRV",
	"lymuygBK2vWzuk5cEovpPaLFPSO4yqm7FUwdYxUill9P1wP9ESOHv/Hon5KLbsNXqFnFllOm/gPaPqUG",
	"ehZc3OiBQz5zYsz73Pnr9vZx3ZU8kmIDFuelbWq7RA+1epdX3ScY/zyGvPRDaerfDPBSr0swPwxb2Uvf",
	"3C/uLVNgZLx2ZVGGYfC764UFUVrywdE6cFoQuThLZH5PWEegNiptlh+7DfVHOz8xZENoXx5iAFsd6BuJ",
	"FfwJPLQYQI1/IgE93l+bJfJ8c3sOTlkzZ7YTgv9fLXeC5Eidbs1pRpj0SOWWYEilzTeLSGXjUAJqxueV",
	"02usUl1pRqhYu7mFciQgzK1SJNVEGEWFRrMSLU68h2Eml8tK+E3jbvqQ4psWK7rWdlHYsjS+QskOR+0m",
	"JTsO23bm4EMy0KaFrAGphzC/BuncPjGdzvd/XeVsr0XXumV9Ql7GdbSbh1ezgmXrRGvk+GmtyM7n1t6n",
	"jdWftdE7laF4AKfF+27Sv+zUn72rvpUSSodrjy+oUZP9J6oEna7Jb4yJPrUFHroHXyzxWXw8+HTafpUM",
	"Z9iOWrTDpGtL14O3GZfmKbv+K8GIPZbIkq6tyMmZ5nMBN0+qCSXQra4u7i+hVjhWio2hEpNeyKrIoTcS",
	"huVWbV1yO4ViTaTwda6hAhMWMsTq0q4ClG4Y/CI1MVTHS3CFYmAAMStJphUvzBEXMBX9I2G3TK2lcM8w",
	"9tB0AtaBJrOCzkOhbe6Kg8M6gMk02K/c+BsDpLHdkHi44PUUerhhQ5+IyocKCWwcdAMQo4lygBvJWfpl",
	"GM0yJsx1JgtZqcQb2XjUNB9c75pZI3oU3Obc9qSO52gQ+F3/u9FQ8WR8itW2FapNjHYCmhbbBYMeqAVF",
	"UfuWA5dxbZQrwufgHLdMKl9Wf3OnYLMmCvU0xhsrll6f5O7SOmUj9lXtktNcMD5fmOiTqOzFYZhC7Ir6",
	"wXLxJbtGEIlR0Nd+YGqdMVYxSh6Mp+dnxH4N9nYsB2gVVamWOlQJAoiPNPnl2RV5cwKt9JuGGKuRW/Ec",
	"h9tYgZTqHdZy7Est1RP3kMKidtIIy+Vtvsk6bW+jhiRKaqZlpbKNwz/LfihE/lh/q7//2w+PaW6qH76J",
	"DY5vAeWByiDipYcf0DXtW4ez/bTbae8pnwR1CXPfHSD2e33xfAtk2yJp4IZKkrjykNZpIYsc73b+Voca",
	"uZzNjsqCGqgAvmQ5p65vSIAKDxISHtyt/CRNuSoydkzODOgkipWKacirEA/tzGXB+yCXKwEFV5wZrTkc",
	"vl8SVmgGRSqT5tZTY5h28c5S3LK1xeM8FJ1sL8nCmFL/eHKyWq2OV98dSzU/ubo4WbGpFVDi6PHJ/7TH",
	"+BGt4R5lABifVNwRn3Nl94L9wTBVKq7BOivC76ADJI/8ZPmX9CVu19v/XteW1J0vvet7S8h8xBlYMVaX",
	"cdni9AFYRT0GzTQUUDnAFI28YeK6UkUb3p/pWoD2zNisZQslxO0G8RXooHjcDWzG2o+ATsRMwZGck6zg",
	"UPk/VFmjRcU6ThOHXRsNu4uNDDXuXAE8v5gOD1gWh8Tri+ePNEiNiYCKtUtqMnyxjQwzLUnySJMVm9Z2",
	"p05cN8hrER+7dUxEPKV5oaZILzPEFYQSmYBQ36sPtn97/Pcf/vY4tbp7sE0H5lmnFuVVy+haEgybYQ8s",
	"+oQUVDFqzbP5JlfPVuY8yUmwts2mYettI2bjsQsBdc11mEiKxUQbn28ff7cVpa1iI1mgqIWIYKs0Dt//",
	"8LfUKsriDjhLqA1vh9yGdFTN6c4oB8JvuUZAsy3oRU+qmykyxE1aUC3WJVP2M9agFnnQRDvdA/vegjf8",
	"KGNvGf8Ku/U1OOHcUlTzobA6slf6d4pta7eb4tl4m06onVGmyoSE2E513r2B6jvis7eGCaif/gSOrjNR",
	"Vkbv5oC6XdvLeWZyNjtq3k9ZGBuPTQ5jdzi41T2lOjWGZotlMhPGMNVzAxmpaADZUEG9rg6eAlLroLx3",
	"SvQA8cJlZd8HxQZqPr17wgklUqBf4VJtsZpI9dRZKlqtkAb2839cvnqZbIIG0Eqlr+7wmlNKZZpXw3a7",
	"DUa3kqJ+2+jn6Q0k/9jGKZcs5G7khilO96FGgnul0h5y5iCnyNPNtNskQ6pbvRYXTMO57byn29Zh1WzQ",
	"H90Xmrqi7n4wSxg0wGaDsp283mjfALfpKdIxxybqKfqGjKf35/0W0vPG7m8D+5wGsZl+5ki0a6tQYIB0",
	"Hn4Ogr3PzxPGprpt32i9zig+GcEuCW/RnNppqM3kLVPXUExgsEVniJ310A9wfkreX2OY+bH5vG8VjKHj",
	"XNq2to9UQ4jrDIgwQtsK7Iy+AGtcU7GPD+Jyl4k04bfs2shdZr+Br4fQh0L/7WEYT12DFet6V0eMvw6H",
	"pfkoyUB9tNpJoa1TUbfP+ESu7Dbpsc2ApCxNQbSpItRg+qbWf3fcgw2HnUUvqwL8ImMCt+JfMLiPFgTG",
	"IjCWM9y2bP6MuAlDHIFw4FFR/0RYfi/27SRc2hfiNCzDIw13z6MZzbiYB0+I1sx7y+K24J/XRsEZuIaX",
	"rhvGOvrBvbFuwZmiKlusjwlG5tpfJ8Jlkqq07fUG/3ozJlTkJw2ghC6lmBPNpwUXc+07TNlMKvZmIqQi",
	"b+jMMPXmmLyGb1NpFqEBPLu6Bv5NgUI2kjzlyg4Nd5NIONBufYZJvtQG6WOHi/gV4kPqg33C5dJxfA+P",
	"vr54fqTpDO0TvQxqgaUd8U4hYxqRs5r/LLvD0/pOIturJS2xXefSvsfVrRPs76Jvx2UDIkOFTsUTkizK",
	"Wq8JJXMlqxINQhD9X3tZYsAIPLLBlkFpoomRE5FVym1lrmwPWH542vO+iyGEWXPDjkmNpIbIEimK9UTY",
	"xhQ8ZqQhBbtlBeZxIF85bL52EVfcFC4CyTIJPEc4a1tHGGD3orROuAXV139WTHGWX1teSd8j7ZfrbOBV",
	"JGo8bsP/oxffjQvKJv3CW6N/t68J2hJnG0feMCZ6GnUaesyFzv6gAye8fXzgB52QYbg+Fc9dFRCTbUte",
	"pQxov8oVWVKxjpZYQyZgjLg1bEmmjLn8XsTIyBc5MEY8zNMtGkhHifhU2tWPRNZDUaefHGduE967lLUD",
	"RSpdy7Ts8BhUZACQTsmB0R/v/2hNb7frRHNlek8nnNJyypRe8PLKORfVroJqSQu7OarpkmvNpbhW7Jaz",
	"VfM3mmWsNA3v+CSbxuuXiOzJO6ICIUKVLxkGiIMHvd1MK6rDXtoQbcODApdh8sG1ahdmaKzcXQSZYgW7",
	"pSJj1zoboCBe+OaX0Lr1qAZojOs1bU+0f0/tyXD9zNZ/c3xwYqpn+V52+QJugEkc2KUs1kupygXP4jtr",
	"8DtiHLycKVF0Rc6ejgnFhzqp8CoDzgja6krLKbeqGWhBrKSQPhkVtcW6XDDviOGUNSbyUnJhND5J6lKK",
	"HHS3W6rW9qKE3n9yBrWn0W3qkSZnTx1qztnbe1ZxEYLBDaFlicob+GWTn6Ui7qU2oO+6QxQ91K9+ffGc",
	"TCvjpomB6XJmmJgIn3qCQoZhUONPz89IqObr3MEzpkBb9DOL/FNw6hNh6eMXYFawt646su0NOWfY29Iq",
	"YlZ9opqsWFEQqn1AP9GVmtGMTcRqwQtGmNAVJKIomQLhY7vl+JMVeVOq0VOGO90U/dXtHsCIHcgQ0Fgc",
	"DOsNyctCOoGzp+RNyjURL7BwY4ZVfWNkefTtN0dLecuZPkIwb8a1RwtEB1UiZ0ob2xVYCDKDWGr/OBHJ",
	"YY6SYO2yd2Al1USkcfHr2TLPgKSHEuZ2VV5QdeN4AJKP3GJSj9wHAsDygNcqwltDW0pypvgthUB5SwJP",
	"cZGHRAfOj8+ZHwKdqD7iGsqrFwz5L1wmqGLHE2EPpZXihuGwZl3yjBYhMYr2jTW0gnd5CwJAacKXSxSG",
	"m7kQBi/3hhfqkU8ocXTDpnR6lFHNjoJD6jAH1Ug4haiB9t3HnbLb4yN/pfpJaAvxR9d7VSRzEZ2bulIT",
	"2ngDt/7jra6/9TFu5221cUedLmm+RTh/tC/xVz7RT5QoHMR4vX5jZ5uzggDtcpqLeRGrVBOh5RJdXQn+",
	"dy0ruJvT2UwqUML0Qq5cakDU0bTfV5FqBgyfQDxJsI01b5ubMQvBab/WyMKJBUpjSE05VEl05SV2G0XL",
	"mTkKhSl2S1Ix3Da45DpLqBFqyo2iykojoyiINS/pwiESe7y3lt4lKdxtyiGz4bDZ9qSVOLUqa41Dkjm6",
	"shXu4aigMyOOsgDQpdGTCPAouNskTMClzy84LCUxJiLsyrK48UAdQKem37xJ2jlzO+clF9RgQr8lLUuO",
	"9egFOFsOuJJClYcxvI0Pag/JxGFNIDX1oC6urZ1sWawH9cFEyuORO/qGdPFpOAPB3PvH6IZjGQAp2ACx",
	"357tNrmfxmKHPi5r9C5dsDjHLj1CMvGtvPUbx4oKwbMLSR60EOVoI5B1Nu2LjtZQBTJpH2gMttO9c8OY",
	"0r56tteonYfNzW7wOL859oH2A4sYNdK22f7YfevSA799UJRdcYA7oOwlwQfFeiM//v7o4977oMj7JPH7",
	"I+2EzAfFOmQ53g/tC5bJ5ZKJvE7w0sRd2QZMmGEJYNoyZBOxDXh/tEvJ1t4Vwy4E53TOIardZ8veT7Pf",
	"jnqXfpxa4M3kLZvWpVta8LyZNqUZ8LhgRSH/r3b2AasrpbRUrIx6f3cngB/so8PeNaFP50OmIHAC1bF/",
	"GpKsQNpFOcOPY6KrDCwI+OLIhcsscITJ1iZiTs0CbkhjuD4Jh6D9ayXVjV7IEv7NplxQNSbMZMcEEHOJ",
	"WNwL5kRYdZwqzNTMRA4KtTZ0WcIvS7rG5IqUFDKrI8LRYuTjpsEy8oxmCzc3WmhJ5sxoyHAvV8Lbjezl",
	"zqqHFZjrAVJZUCG4mIdoLEjwJ5fUODOGr0oBOZhvmVoTwVZ+IEztWHBxE6VJtp86nlexPjItacZNRwjZ",
	"kr7ly2pJMDQYLqgGAjF9eU24asJP0XDJJzQYbeP1rObw/5Bg3XOlRAWfL9ARQOZAV8xWAVOcMqb0/+jk",
	"/y3+eNFst7JtWJpDxdpvHXHDcO65bFhpZt/4ntygYJDI7c/wjJcYmF/KgmfD1vQ87niO/eA2wJdUrXd0",
	"h4xCsYe8FgACwTcENuG19zTZ2fnSioZrRcV82MJd8SW7gNbvx6Nbrp1Ne1vf3+uWHS/kdfaECKMOAjVG",
	"Ti7BH11iYqcrQPOgSN0BNouJH/B8BxGkB1czb8dJYv/EyR7wjrZlx4EWzgcrH6fMvw+Vi7W2ktweYLdc",
	"mYoWx+S0/tl3m4j6rBF1zL0imZQqhwXQtqODUQ8XH1Fc3KDg77NB+KEHiZZz39gyEow8qNvvrm371u/x",
	"xsfPwdf/NFKDVJEWTt0cvwk/9Sy4STifrmBTcyG3TFSgkZRU3cD7mlGMmYlwxHVaCRz7KWra3T4moTEW",
	"Oa15YSJO4W3O9gCFY8rcKzweqL9IOYfcTyUqCDBayneyVlJbx2tBDTdVzpI5U5qU3OW88o/0hRTzbvid",
	"eVxc2Hm/EbOJXU/4Yxuz2MbSZv8/utSQTT5Laf2bm7eLd15fPB9Dqu6cyUi/nVhdGHjpKdeZVFhRhKlt",
	"rPT64nmK9Hen4Iek0RZ/9y9q3hc1b/7R1LQ0y3r3k/rS87PiOXhYMKXH7q4Dot1ddxY0u8G7UOd1Jyy0",
	"MMm6wN7st7PnkyzYbpSucxYOS7Hb5pOOLLu1uRqQCvA7ZUOE0jZH83CbHUO+EVcfARJA64Y8HuyD3qJK",
	"l/YbtWnHaoRkiEiHkceznv2PI/cexuLnFG+n+7jU20oWn5XTn6zR9CwZuo/VlFyJ4MgSEkNkhdSQlxkp",
	"eS1FsR4Is52ZsV7mkBp8NHYYo99GzrICEkF3D5E+pkwwEe9h1HWdO3fBh4gkSVoEE/EKSy740l57AMVQ",
	"lQXc4F0lJLw3rbhZyMq4pBYgDouCOLPaaOtUD60OfP4H+9Cr8qZMvW/lYHCY9cPQCIZGQadtOJZIw0w6",
	"geM6xYL3cK21kBloIUeghRyhEnKECsiRVUCO+hWQen0Sxyw4pMB0Ni43tXeqLqkgy6owvCwYyeka7Bxg",
	"eLcHdE7XyfqI+IY2zHsHbPpDm2+WLYK+YxgwtaYNd7rECvg8xFzkkEZCzDELcZ3qmgufHBnCUoKzXB2g",
	"0pUz+ayn1s1Hzqp5JmaJYig/Uc0zX++kXQ7Yrkoy7+7HyK1LSwq7akD89plLQPfE94lSSnwqGXqlmEqq",
	"7N4eWAHjVejgFbsPmuZ3gwKpCaS2Y5sUsSo3Z+Kacit72TJnb0NFCUzDY39fav9HSpfrIPRQs3gCucTl",
	"4MzqmPSeg1TrQXrCf+tG/Y9qUS3ZAdm3a6g7Ll5Ylt5Fu59HBR7g74Bo2m8ggjTMe2CTVml3W7lXgFMv",
	"6RppKNwYSQTBR+Jmh4uGbd3leb1nsFYy1uqP1GWk4DcMkhELOF3H/vkfQx6gI8QzJD1w/Vx3412/QAnO",
	"tb93hK6eEs3t2UxcTYwZoI52CR+347y+y6oofLVV8CoHA8dKVkU+EVNG5C1TN7woMMyn0rAA/lYGcXt1",
	"SLLDuqF1RO/4FuGnyVhBi93W26ztXp8oMKEhXdLhBth97EZO8WbNaV1e6i648T4cwbdU6OvC99LHGiY8",
	"vKWhReSNgQzhqvO6ODKMKTzuJF5t4rizsgrrvl1Rfe5Sbt7TYWbB7+iWZLsMa9npHJcSLXH+YfDo94kU",
	"YmXXP+yAmjSOa8+P62e5doJizOUfXRzlknLRwUTiptPTxrLRq5IJ8oudFSmVNDKTBcFyvOiAZedR0jnD",
	"ml2ZXDJCoYyht+BAMCCULi0IrE4y5QfggWg2UJhzs6imx5lcdvU6WOz85lLEWuy2flfQsH6/6k0WePE8",
	"mVi6izz3o6YMKgrV2C5JHQXBpD0g6p3TFiAuxshfL52LGLoigLyATAvhpMkh7/gLjDEtqJqz5JM08v0Q",
	"e5C/dgmZMz3EDzyYsuSAAlz2lta/bmGLIjyPSOx+j06uDRJ8YMm4j3kWKeiNsxot38RISZZWmPXYZ9vM",
	"NlRpaq5RUnNqTe7AkiIPsmtrR2z5fjya0VueSbGjFfP+bJ8Wu9r0+QEl39CDqm2QxOPhKJPLo7py7ZH3",
	"fu46Mq785DqPunN31KUgvKDq5kvg/5fA/y+B/18C/z+RwP9Wjej7DKZOlU2+3/FqG/bw1Px1BLW3gYe0",
	"ob1x0z7K8J7ULAt+M5ni5kFiVUFM1ge351xm1dK/eBOf7Bi3AmiRkLIPHPo0xr5MBJ1qo7C+MEwbsv5Z",
	"caaNqjIDVXFgTXDiCCKjog6vmQizgAyc/g46VVTkekyWVFQzCjCUHkNJY2n/gbWp4J/gVGhnak8z9Gpu",
	"aPLhrlsGRxrc+YWW6HpYJxp0TTt0xs3l7IhM4aKVO8Eu8vEhbhD37gdo57ihbS54zq6BE66NYmw3A03g",
	"IOlqnAK/WTggWhc8z+1ZvVowgXWhGtZC266uAFVpNqsKYDG4wLhInzpICu5qhC69WbLBvjkWzBYslPzG",
	"DBZek7BjTcQtZyvyVe3jqnnOplQRQW/5HM7fry1CTEdTs1ynjT0ip2wiKNQSYTm55RRmAjN2ONedfnl2",
	"FZ3pzYwaXfYqXyJmp+vJffhsWC65czbGgYlq3cPnfjeROyZKG3aVsSiGqwydD6mYvXFfvxcPjnDrb753",
	"+mxvm9va4b7huAHc80eHMNyWc9K2+YUJy+TMiSOXxSKdfBQ+4RHieuV1ylcMwLOClGxpOxG5ZDqUx4f4",
	"v7dcg1jy4KDoI+xIe3sw9IahgplVSgEIfG59pEMPbahh5CtIPUsFmYxYzg1ZypxNRnh2TuVbDIBENe1r",
	"K3YmQjORO1HFBZEqR9uFx5qU0mCCjzASpqGmgjx//iJleYoOgS2PY65hF/1atNFdpa6tGlMVxmcCQjzd",
	"FOyxH+jhVsdifv94X9G53pmhLJcP4ibb8KGyEkzyg/MR0mMYExk635mBBgpXezIl7aDQf+skuLEH1SCu",
	"ojG72H49jBW1nQhs/JB4i8bcBdh/ePZCygzkL8BxZw7bxZOoC9/+RyIfXTK0oDO8R2Mn93yxQ63lT+ze",
	"0FZp71s7Ha5keg3uzrFATXJv0Yoh6vRFFTvm3JvSWcvF4Qb0Q2qmXftlp+cXfx/YfHXxgA7/eDn41e7K",
	"cnlr5tA7/WZpO/XXQ3kpDfuR1CYfuDQrVhY0Y0e0KBo2yiVTc5+yz58knS+XXyTQZyaBUhVdHpYwChZa",
	"fKZrFlkaD/HhDOvedRs9SBUiNJm2KhD9l6zgfSpbQGABPK/Ypo/g/WlYQSJuXE0ibnSoSzQR2FEKRuTs",
	"x1B/aOyLD43hTYWLnL0NlYpC6IJioMxxMZ+IyC6ZqlcU3hfehcpDXd73nqtH+TfffUv/nsvHufnT0AX7",
	"d1F802a8UPuoudAvJJhfvVkQWrm6LjB1/5TFNTl7mnTlqSsk9ULGZruBrjduR9kwwVaesjAIlBgil1C9",
	"ngiwX0qytIig0RMzHykpnYF5TwbvygXfKHUEjIuhFsXaP5uBcTV4wSQnHc6xXc7jf3CzeOLrInaczY02",
	"w+u47ZSqsuUKN07W4Lz22T6uEcJQyXgJf4cDLZrMwVZqd3GdvOhGYMYdc44rWe6QBdrJvqyoQhQkwEGL",
	"fNtHsLdc5ktpGlVv+/xg7+3Fj90OOp5rTDGd3R7Zl/co+TIe4dT2qnY0KJ4mnllHoPumf7Bfs96I9xhu",
	"Z5HdZrOQJ7BN60bmPffsr/h8Ds83+MhSwzmeCFz4jBZe6r5pNICR3hAmqqW33qxL/8jugnJcFiqfsLaU",
	"2lwX/IYBY9lTs85Ye720ozWiG2OJWg+8400n2h1JqdoEfB83n3qEndBNCqUmtGExJjHQ/tQqd+L23nHb",
	"ofeVCNmMab6V6Nh/b9JHYW6bDNDW+D9cvOUW5WU8enVamcUTWhRTmt2kSr/maTUdDJjbTXDYbIxwUqzT",
	"ChRsrc1TpiA6ASyCLuk9NWzsn7GZJisrabSh86Dw1/F+9mzMmNYT0RkgarVsLlxGTcUysO3OuNIGjiOi",
	"malKog0rdVP4uJnqa2h87cIc6rNVh+x48W9LqZhvq+MPCMXl4rb8VjDDkoz7aiVYfgpP2C5N/T35poQx",
	"uuKt/IEzXd856CoC9Ucy2yuWpcSXe3LD1ugQY/8BR01wEaeF3fH2s67QjYAKH4MynghunJtCTnTJMtjC",
	"RbFG83++5IJro6iRCsKg4Eo3AxWqHlmDL4RihJtHmghmf6dqbYdCrYs14l7QA8IlX7Ufbti6w3ulSdmd",
	"xNEGUyREURt4V/lpO8fdxkseJgAmte2jU60swjQPdSJabWCAcl6P3c4sjQDSBsFNBNq6EDiuwIjam/pK",
	"36lWhIOPa+IRFl+OrstmeGWkkgn2tu+z/XKt+b86PuMbjE5/hDAxgK0HFDqtR6rBNmGMm9NJ8gNTrvBg",
	"fII/uXh2evXs+vzV5dVoPLp4dvr0+vz1T8/PLn999vT66lf7w+Vo7JtdPDt9cnX26uVoPHpx+vL0F+x4",
	"Wf/55PTq2S+vLs6eRZ3OXv5+dnXqum2M8Pzsp4vTi/+qAdQ/XL7+6cXZlf/h+uWrp89G49Hr8+evTp9e",
	"n15ePruqez37/dlLQOP52eXV9fnFq5/PngMKOBz+XWP05NXz58/8RKBL/Uvo1Wjkp9doVv91jcha/C6f",
	"XZ8/u7h89fL0+fXpkyfPLi+vf3v2X9ESXT67ujp7+Uv8y+vL82cvLx1U9+PFK5zB72fP/mEBvXqNMzx9",
	"+uLs5dnl1cXp1auL5MlVE3on2RbxR0KunS+k8I/BT2TOehz/StvUh0D6x8aSrgtJ8/Y25D06m4WWM223",
	"AfiXC7pkUVFikPPxaE31rQ5NSBq1bL9rl79y+zzAyR+COJ3yg/dokoFPmzgeUKYnzHNj8ORmtQ0uq+mS",
	"b1ttaEmgqqhBbDqXukPTbD1Cd+iRvqzGPelBjeitYaGftku3Q6/V8hqJ64lhy1IqWpCSs4xFdbTHhBuf",
	"CdhHD4AtmU4E3HsxyMqFFUhFtFwy8NQlrNAsSgU6LeR8TKgQshIZWwJsjBm1yAatiAt8keeZ/Ru8z32k",
	"ODdgPId3LGoMxLIwiHxYy2oiVlSYBioUnsHWdT5SDXUZnA8ABHeopjmwQy+KX5ySrDaV+Ro9J8ACButr",
	"D15eh1yASyjYEBqxN8hqENZAhfN+HpOclS5QTQq8YEA1LLs+LgwEFDouxTG5BAjaEWkioJVVJ6eYsqag",
	"9loCuCmypOomj9yYMXoEfa7hkdD3ngh7UyB4EXgLeNeu15cFNez4n5qwnFtV1XuEN9cvkrtSb6bPb6UL",
	"WEhlyC1TUFBAomewXcdHOlrdmcsAAP7TUDc4baK2A/bbAizMHR8ad30F3CEALclxPaINfVYaplcvqFy2",
	"qjUs3hEkjAh3eHKmg2I4EaAZXvmq+4pcoN5pNzTmsEOBjmyUgdCKBky9Gu+xqLbL9YFif2H4BsguYf0h",
	"AlhTUnuvANYgTTayC5JCWnkzEZWoL4Foo/Bh+t5EH3zFlDPFg97TI+32i3ttLm1KV2qvSdr5abeQB4z5",
	"2McAvlf90NrctoPvwaYM3CWDyFMnUXaVQIrRzAy4idLM7PKUjzIDwk6HRuZiFxeb25Fzy/ukIzEj53Q3",
	"jSa1/PIltzhS+tlbYzXjwufw2PDjY2/N/im/ofe4M09CAoPddlJiBqn9hM1+hscGpnTPK8pm033Q6d/b",
	"8QBczIfiwsX8vnA5XGanPd7lEkW39knqBBmOOnM6RRPdZxG7MjttgL2PbB83bBckO3J93HSbyTa5JKFz",
	"+qO3zh/VsNa2r4kLKvLtsu4Uu/+Kjfd4BP4nxM1uF/QbMbYDHc8cet73TPu42WHjNcNsk8/ADv2xX66x",
	"DzpSsugW2OB50JbSs10Xb8gSnMelXOABXaWPgiH1JDwwX0oC0iYM7fQ7NN5cxhk+n9HaG8Hh6KH3reGu",
	"cgAXPi0EgrffB3Y/vatLYrevS9/KeRjJZBquDVm6Rvj+4x35QE/3TUJERohidvkoJsJIV9O6juOI3WcU",
	"oXmOTmP1rwAcwf1jwQShwUlvHV6bAJom0zVU2zmZ8XxMQoICyzokk0W1FC7zgXNPSy39B91wg1yqpDKN",
	"J6UPvh3dRty+9RpMuOsWDNzXsxU7HVeb/mcPX4wOFYh91Ih88XalhVvGHkpgi37RiBStt/ja56ckJVNL",
	"blx9e7CVemkw46zIdZQjBsps2S9WKuBXNCXmXGdcZF4W5cxYoAIz84D1DMy7aM0FT+M3PH+DILwkEaT+",
	"zQJxdh8rPBasjj23n4x7QQaMhJdidRM00VKx9sY7zEnj5rPC0Pdg3oB8JxNh54Rpho7J2ayNj1xyYzw6",
	"uHj250wKzTEun9p1mQjs4cqI6gptKSA40bdFMI3djKIcg+bQ5YsumV+Tjy0MD79tdt0wTtL2CZjNwmLu",
	"HuwebLAKAJSdBUMcRlAkn+IaEjc5IuRa/42tnyiWY1Rhe4stjCn1jycnq9XqePXdsVTzk6uLkxWb0sos",
	"xNHjk//JZ1YRKW+yACUV7lKn8Zbq1BiaLZbpuMTxCMMp7c1caC7FResxu15Y5J4WBEVXZx1f3KP8kHTv",
	"Ad8L3ylimW0vbiOPRTSm653kkDYtnrgHCHR117uRhiFtcp6ZnM2OMK3+DVvXRPLvG6iq6BTNjLGcNsT2",
	"dlo3fSLFLVtTMD/GFoQGB1wyZ2baiQ6h1xMr3BSn6AJOi4KJeZrH2Vvw16lXdXiZ7wRJvHlRqtTJxTzH",
	"6h1mxaUInK6fAOefibIyYP0sq6kbH6Jh7oR7HU+Twl2Ve4C8KJ8J4zPV8yWTVYc5qtIDspO04b/WTPkR",
	"Nl14rPgDsDEHJOmdWMaBOzAi9x5ysWfv5QFwYtt1yDSjqNClVKbJBf6YmIIdwK65ElCFUswyWKIplEvA",
	"z4v1VPG0s+wmQww6GttLljwl3fHYUUK4n1cPu/B1WsGUvCvmyfKi97AUdqiBa+EcX/Y6Bbauh3OR6TkD",
	"ikKuPoj07Jfjquw40LfKnd+ZasS3+A1jtXtZKToHS1oJZ5VieRw688c2x5oa56HE9BLzwGQsGYAdLk06",
	"yrGm1dvhG9crr7vOzRKlY2522IZbNrY5umHpsn3958hh193yV+fK51yXBe22KNyJMvF1PR6om07ndb3P",
	"O7zHb7gjcDnQGP4Tl7DJ8Y576rx8SsUyCsWxOuIXZv4xbeBLxsY7XYDgCpoPhhBe196P936TWNIOWQaH",
	"NBuQVDyVo8xVmdzLI/8uDx8FvxmYv62uUuGy5e3zFuunex+JATbeZ/DRZFifC1kEShz0XafeGFufd8aw",
	"7eK9EXN5g1Ixr3la+HRy77eKirCZDv86ufe+Tr4+1NA6nirbs+Jifl+z2kPW9MzKQhswq92MsI0DIWWD",
	"3QR9+LVyUZu74dr19oSQ0ssEzjcJJ6i9PZrYUv6TD3L5eQYtD1IZCAcNvjupvRsNmawWJeYFIwCHZAuq",
	"aGbAR975KKPDGzgCgdPrmSCzylSKjTFMccWLAqpF0Wq+ZML4R0ZKwI11VkGMVcHyOctJVmkjl24wvdab",
	"5X/qsxCQ3szV1cT9wuGEL2su1qRYk39W2vgiWBvTSoTc7Ey1DSpg/85131ZLXIVJwGqCx+GCarKgLvSx",
	"ZLIs2OBK4sjVia27kT21hdLPbZ/sKMF9pZkeY952eks5BJcSyAtMySXURSQcChaIGZ9X3hm2LmSUs7e+",
	"TL2rIVCB+0dBDb/l8D4jW8l165s2hGx9sn7+4wHxZj05vtkq6bZuuQOyYh8TFzewpGtSe/4LpAx84QLj",
	"XF3P6dqFOIaEzW+g37WRb8KTGL5lRZHHGEM7EVFbeCEiS7uhpqyBJTwLQeiLT/A/Sm6Bslj3Z9z7AO7g",
	"fj67PSjtWcUE5vNH11rsdBwj1yf3cuCoH1NBkLtPVkk5JI1VotOubqub9lo3cAytc/XqWPFU4GeilPLZ",
	"jIRK/FA2RZDouQGjiiE8GNNUhAp5yjvkL6iZiBVTjCxpzvB9l5o6whfjvRJ7oBF0GcJSt9fmU3UoQAQ5",
	"AbcjdHUcFiO9iho2/G9sfYGdl8nImuGGGeUg3rC1qiE27DJ7GdTGI3ulukeRb8H3lLG1n/sFV08ZadFl",
	"2ilDPOMOoY/pfB148wvlkGPIXfPZTfjI9BXAA+oKIR90a66vyy1x0OWoaLv0BxZ9eIIkkfws2OVe05hd",
	"0fnwjR3buobpW1d03q1tGTpH/8GCTlnhUjS4IMsSBCdEYUE1EqmgniUIY6nmVHDNyESA1lontAc9ah07",
	"G9r2M17YaxQW7oLYx0ghdqWHrujcu9Y49x+o5BWKGLnM1IBySOrFDZZN1WOi5URAJoo/Kw5JoBeM3q5D",
	"tc1ZcK+Og5ZcABIU8KKk4POFYcqecfZfPgxwDLF+lMSL70MAXWBoiHSyk4AZsq6wpis6fxK4v30EIlOG",
	"xONdLHNm2LKj5vFV4/CGCVpIweEVrlZN0NH5fEXBznL2VPdd1CBp+9lTPfgm1tSVNsWoG7RLiu5XqWJo",
	"RnWX4bNjIa1Wv40YIUHo0OPED5leig6ZuU8ON71TsEi62noeaNyxentEMSbkWE9MYjC/oItfSMofheEu",
	"7W1so6I3RGPnUjzypXQalb3D3qAaqvAaFpWjs8Tu3L6toMS+XTJ4hzQWMs0Y20IW61N1y0BOADkmuc68",
	"INnSrRY6A98QAp9vOYAjLJI8hvXhhnMXtI9X82BZOQdm1Umk9tktvQ5O4eDGgpCKaydJsquJYY+8yrtH",
	"b37wxPDdlRQQr91OgBaLtjd8gHr4dwW8SQ/EMn2cOgh97NtVERb7Yq1VsKr6NMWgR2+Uds2pXpD/g0nG",
	"XILAJVU3oDVuLfZKErVeo9Efen1SCyCN1kQMqkP6yVTqdAxz6FwZX+TdbvKuQ7R9rDwVB3t12JhGz40Y",
	"930diutSGWrUMF1MCRfI/1YbpVNZRfl+plVc1C1OhIjX6OjFwCfkeV0Xiwx1FbFA5EQUEE8Hw4YEKfjU",
	"obmp3MsUPD2tZUVSym5PZfnkqrS1yoF76Ilr1zjUCqoNJibuT47tFtY2r191mjbfYTmy9yo8WXIhUhbz",
	"f7i8TtFrEtcEW+MLEdfEr89xshAmzn1Yyt/YrP+xCzS6JdmosejqLjYm1cyH0a0fheryKRYwBYtP52ae",
	"uF9ZUUiykqrI/0eK5lbqJdSMFZsSmueKaR2zD5bsaAPZ8IJtPQnMKChhDZv9vg8FFZQlrgc78GvB7w0O",
	"CMAUnUGyEJAqDsotZyt0/i+4XmyF56NDO2TFQVgvApLipn+w6aldz9iFdf8QIKSLzow46oz6OQoxK6kY",
	"cY/GHr7em5i3NmGA3V6I9+ORZlmluAsCdQ47kIr2+gbRgaFBIDGqMC4OgdgVgbRXSq5c1Am3K5VJecOD",
	"L51lAVRbjzTDxJP1NaXkLhrar+N2IGHFO6G9B9/NmfRF+ZxTkgP0E1WCTtfkN8YEa+U9GgUdG+w5BTk9",
	"P8MEdBUvcixVuFxWgps1yRXo+WVBDejdzgYdINiu4RCnOZiTjCSaLakwPPOWYQt0WhlIpG0PBzSaa0KJ",
	"kkXh6orb42GNNwnvyxv8SbyFa6oYvQEUIZBfu0rSIZtzLgXW6/Ypmp1LjyI5u2WFLKEQusvyjfGn6CEx",
	"ZQ4kpoB2bkhWWY/nELB0mgn6NB2T14XhS2pYsR67UF4o90RWdF2vlVE0u9EeHJTrsSe0hi6KuaQLRDN7",
	"sheMaobm4+Cj5LQTPB4Ct9ijB0GOfhzdfnv8+IfjfzvKqKAKuE6WTNCSj34cfXf87THW+TEL2AMnIa/4",
	"j+9Gc5ZQO35hpqXH+Sr4tetU8nHcnkwh2vgstwcNfviFmSiKEcZ+/M03XUIhtDupu7/6zU7su2++397p",
	"pTQvZG4vLLnt8/03327v81qgWxzXvtOwgX6Wlchxt7kjcFunMxdfdQmH3DOlJD7Ro0Lz36NAnz8gSbPJ",
	"Fm0SvcbA7kNTCcG685Np81PPnbJuwms6OQDv70BqBIHUfriUez+uN9qJZsXsxCJ5tGRmIfPurXfBjOLs",
	"lsFzG96oaCPO07/+Ke1dJ2cFvPmFev2rBc8WEyGFy/JCM8Nv2WDWAGmTZA6rVpy70UGZvgORN2F5cg+A",
	"8JO9k2FR349Cu5N39q9r/Oua5++RilCIIVGZwv6OpiZXScCudZOkCApdOKOaAO6U43oiuFIMxP20YGQh",
	"V/YPwmd4w0pD49olei7WRDF7OELhOD+W44bIp4nrOE8ELwoyo7zwXPb9N9+QKVz9Yem3sMkLGAUnjzXm",
	"Qijmfzs1yJ5HtRLUXNJG6SmM6qkLfG3GNP3xF2LDW2ooqKOlTL2tvS4LafUsQbBlTeadToFLZk5xpBbp",
	"UpOrm5w42+JzJuZmMULS7HeQ1Dh0nCUbpfw+u+PCblkMlU3T+jQHQkMzf4/3VqHdyP3MgjjN8zsc+wHE",
	"XQ5+ANI8/Xfeh3txwIck6Mk7+P+1o9i28+OCQdnJFqHrs2J3UiPMnfe2p7Ed/+wpRNePuoRvenN+JtR8",
	"5/51jaF17yOx3HmdaovkSBvYfnXaUxw34kn7KTb0FlYL5c9E2LaoCW6lJ+/s/4btTmfQYLgpo8ykBIM2",
	"dUgLbukel0chGRVCGqgGsKGBHZPTfMmFdk2sCidd7Q4oQBWNaBZsqVlx633qkkyEqIKj7q5cBO7NfsOP",
	"PzjTfR73wfGorNKneGCfZlrb7cxT++VOhOOSBB/1KOp5/oUfHoQMOpnSfM6GSCIsBZHPa9FAXGiru00G",
	"s20kUIIowcCwcCeEu6P95ZbrihYI+AjftRJehx5UnxSSBUNUf4IZfWG9T0cUPWV6zqloWyuAPbA4EHKW",
	"02ACY72yfCIFUn8inGFdW7Wnp9clMz5geGMArid2elyxYk0o02bBDM/Abh/Yd66gjpBYW5WYOwepKFLh",
	"mFhe0QEbX1rRS1OovVI3J1wQqK5vpbB3zacaEdJbOPqSmS/s/IlJUqe5dSrkOTOUF7X23TCjT9fk7Okx",
	"cW/coQ4UsG/NMxPRqG1HpCKN4nbguuLttM2mGRXklrOVZcOJaNQA5cjfDUhRSIdZSM0SII8nArbhMtIa",
	"NoCEQdFDpvnRr2APq//u3sL3uYJsuzDu9gi0J7N+t73Tz1JNeZ5jTf9Ph72txg+moN7XICHFERO3xEfW",
	"IzNrlLMaJHBc0zhx4bTjOLms7/AWlACzn2GoDeih2hKAghE1T9AV4chX0U0Kqudcm82ywuEgxRMSKSoy",
	"Fl4LNjMvGDkReGX0XOUzMPv4syUVdM6ag1jtEeVEr2SwcJv1ffemcwPMHci86y7/MDSGk8n5nmw3K9zK",
	"G+Yug44kjrzwLsOXS5ZzcDwgXNzSgofH4Bu2dv4NEwFthSSFFHOmUKsBjgAXicaj0Xbadr3lbBf/2L/n",
	"ABgkZCOv5YfOFVMq2le+Pn74Bbxx4mrhkD7dpQIbx1e58CtWwD/upCrk06NiT1vwPRgWH6Ya6og77nik",
	"cfnaIrsOOSJazqz+aWntL+UcNiZevCg693k5X6uHciXwflLIub2v2H2OBh8WXLWglskNY6Vu8IsUE6FY",
	"JhW+/BZc3FAsiOLT7mhJXqNTl3hk0OEKYIULF/pJTQQV66hwLLp3x0PFVQ3R5D2GMFFfRnYbR4LT3xeO",
	"PIi4CTUatzwX57VvHIGjhcAVvU0qCxB73fVpeMBt1w72ki7Zf1YMnNq29jinigkD/c6eul57PUFH09xP",
	"b60B3IGJDscTyAcxU5y8g/9fWzrb3dl9WX4qVyJ4Fdg+9nbMDcSHpRkEXf123L624zk1izttXTf6w9y4",
	"DSJVZnEIH7Hj2g9VVyUkfieUzNhqIlZ0jUWrogfkMer9Lh9eSbVeSZVDs1enlVmAqPAO5nh2TYSPLSSG",
	"FQVU24ICBOiHBuBJRks81XzlMSbseZcnj4ODeJl9en49lqI1ce9+/Us+/ENtsmaHiQCz0oLeMnSW5lpX",
	"LO+6RhI+w6BTe4nkzqiP6zER9Yb1OeNgNMDLBXr6xmDZrbVVKzzsydRhXrrr/fHBXx2RO7rUSNSJsIpS",
	"RNst7l3kNGIbqnzR+Y09D878jmiaSEGmbEGLmX/Qqc2jzj1+IuaKiqqgPmGNuuUZO5opzkReoPO7WVh6",
	"ExfHQDDiAaKJY5T0woqCkBwQ3rxQGYns8k6TlCsRcZTVQh2L+hroFAeWmIxGkDenKNf/BXz2hiwYzZmC",
	"VwYBTeVsIiCxMc3QbdbHMsdRDi2caaElBlWDT87bkmM1b+beDez5aDV0vuSGLOQKLt+E2s7wSBun/WlQ",
	"gc6p3YKAAQ7cvU+CiryPu1YDxPs77TYE8pD2mw8JApUkRPf8N+ax3i6pH6AR54v95sAHN/jhHXndyALC",
	"ozstud0cgi5FoL1z5vMio04OWT+6Ntz9OvUkB/XCAnVDgZveXrKhMgvo3ID6Obvf9lNW87lwry5p2w6f",
	"C4gIk3gU8KbS4/zmHR3tqeYAHydJ2Vj5Sxz6EETcU8RXZnFZwd7/XElblX27ds41pOTzGtdBSFqVO8vf",
	"M3HL0cPGWTRiKfzJ8Manc60C2hxm64qI0CEFT6A4uVqwibC68i13GQnB8S7chnNWMpGDRm31QIzU83cs",
	"Ters58fkbDYRMNb/DseEi94JIe0uqmdsr9egTdsWiplKCWY1YaKRIhMBAbczsqRznoGhF2/cAdLY3foc",
	"mqBfaEMVqp6ZzBmZFXLVdeQAAx1APn2RS0123VscbWfT8NckTqSA1YjhsQgr7fZzKeqb4frVtDdhpfhY",
	"Y2GafBWY+VZH7Hj8tb1TQWFjYMRGWMOC4mMDGCqUmzbybLy3kGmZyCeCkjhRhAMXIuRcU7i14W5pXUvh",
	"fXxGM15YQQsb5agBstJ0HjKwRO8sszb+E9Gs9D7GyO7GcL7Gcti8sedZqdgtJLmgasqNomodqJ1JYZQs",
	"MOvXkhY847LShGZGKqi04bKtaDauEXP3B69lwiWzvunCtfvV1XkdG0o1c9kh7Z+VZsqSZCKyglGFaXO4",
	"cjOBZDt6xU22YDnJ2S3PGIT7Lyi8Ia2ZcbSxnytcaLjXuzoDuHQQrp+zgt8ytYaQQ4it9xPSTIQZefJn",
	"VEwEzZx74WQEfqh5ghEmoyiksS7W7TgrOEhPxJkL7OdKG7eGlDz+5hvit3ZcdjtawAZpxxPhix2wTIo8",
	"APr+8eNuQJgeKWEq8a++kJAMPTuoIJVoGntq6ys0VHw+Z0rXYsEuenTJALdHSJvheXZsd8mL15dXlksW",
	"jN7yYk2U3QlgxOg20oaT4FNRaz6eOvP948dtqf17Wy4BFewWicSC36CeKY4/wIEDO2XdfeAA6ut21Fml",
	"0WHXyBvPmiuqsRHatKSoC9k7yfVIt44G509pb8K3nBJ7/pGqBFGQ231RUMNUL98hhnfSQByIL3qIWZwU",
	"cu7qn3a8OIGDiZf78EgU2fnxwee4/ykHRxhoTBiP0F4LjS6ZOXqCSXN80p5kIPj7j3QX2ceoKOG/7+B/",
	"1/657v1JRotiSrOb7q0J73CPiW/YXvRX8ao/8fB2FdANKPvJ5TQiX7abWZx4zbjHpbf2+Uo8qC1A8Qn6",
	"dVMbH5MqJIeZiNBICnTq2GJKvIPXbxvKX4rYO4iBrne+XqIHTyx4yu0m/0TQPO/+7vODGInXI6fKYmbf",
	"cG/cwiV3eIFqQ/nCJVsOi6GPDU/ksiyYiZnjCN8bZoVcdWlv4TaCbxATgSEkoJlR917haBjdpryb35v0",
	"s8GbQU8Wd2Wg3heKv+aRcqBnC3v1h+Ie283ch3m0+PJe0UnN/V8q9qTiJ3Ch/4yfKMqFFKxnfwZb/Ma5",
	"DTLcERZguDJGaOPFMALVNI1KgZmg0azv3piDvI+BOG89qN5pR40epjEo3BUQhS61zUmi0W0dl0S0vNZw",
	"Z+jJLHdu4blFfyJz9lH5roXMZ8p7ydiTZEh4UCiAb2J2SfHmdE10NV1yDOvG5HPIfxOBDOhVjtjlwcqo",
	"Rxqhd7LIJcDdi0M6AwP24Y4Ij8+POXz+YXARV0P0THgzCOmaCfYDW7vI0aoXFI3OJEfenfgFvWGnHsA+",
	"WkQa0F/3clEnnu6/XWyQPSkdklbB+qTySx9xADwXtvXLbvr/wkxM/o8U/ZPC5rPQKAOVl/SGDdjagaTx",
	"W5kV8Zj8HS6SVuOst3//1q6zun/UM74DpYcrzO+25S0z3GnDN7jDB5FN1w37VcwjiQPew/Ka1/6McnAp",
	"0ELpkzq0XWUVV2ihO/VgHSVUFKTuRKR7rOapOGFfrmbvmIwYAC7bwdYgmviAmAlfgAaOJFea1/IlFBzq",
	"nvj+Js4NCO/vsnp3drH/mHGHDTo1OfbknScLlPEfkEM7ouQxOS0KVzBqs8xQeE9fyttg04z8qg1Vc2Ya",
	"VYnS9N/TYd53vyyq+R3OqQ0s7sRDCOPD8tDHU3w2hEOnWEwVKdvOFfvEtnaxxL70jCJcP5FF7k9LVK/r",
	"Ix0ve/cqh0fIj7r37vKI2YTx+cvvk1JqjmR/N6BmScQQvqMvrmMUY8fkv2QFBXow6wTanyC6fyLwGesN",
	"/vlmTKjIT6A2YIAUj0DoUrpK+JpPC0iEBRAmwnkhvZmymVTsDZGKvKEzw9QbyNy2WRLBqg+5ovMjKvKj",
	"XMnSxQ/OaJbOENjkgXO/QJ8EVwds3h9Gt/uLnSuwGaKyflsjuKPG7h0W/U0Lg/UsXSm1hEgMHZ0mfocr",
	"UXx5Hg9I2OFH/pXqM8OWrbv3zmzTmMtHP8PisowDrhGhOUiCDNLr+WsElizuicVOiYcA8A5XjU0Y7+9G",
	"l+Z146OePQ3qbOy3k3f1H9dLqm4G3h9qEsqVwAraO9RQqJdp37tBAPCCqpt9Kig8LIm5scF6LBQRZers",
	"MuRJJDRd7LzzXZeKlIrf2p2pnddKcLCHCyBGthApfBqSOhXFEksJRl5WGGztvJb9BbHGiGs37NgPOnb8",
	"IxU4ZDWZaciO3+sasQP3DN3vDzVZTkt2b7uAHGrn73sz6aTd3gL/TreTDSifAQ9sPSFOhMztvcX+b2jV",
	"HSIgHBLKekQ8hB4XEU+B28SUNXirztvXFjj9wgFHf7nPY3eSz7arenasu2VoTmH/eUiWqqv2FjIHlI3d",
	"kTXqOMoEawAAAO2OvBCypRcsxy/wtrqGf0+g7kf9fVptnEcbok/1895pnj9UxnOo/yVkGVw6Tt7Z/w2W",
	"ZbbxR5Jl51KbD8VSdqzDyjIL8XOXZcAc9yPLAHRSlsEXOYNfb7jIt4qmh8pHDvXPRDTl1NC5omV3hkqw",
	"FLn0cFRlC59luK1ZP/WwLqHh7hVUXJlY7D44U2wY9jcu8h3yy865ANzj5LK7ssXGlB8kU9QssMESJ1Tf",
	"dLLFqb4h6BYCmf1C6uhMLpeV4Gb9SA/glFN986HYBBMK/6dD+ezpXSl+qm8+D3LLrNvmfdVI1YFpLjCb",
	"zauSidPzM5LLrFqGymE++UScd5FwMRFUkJCg8ZaRX69ePCf4eFjXuqg0m1UFvs2wW1ZYntFktZBkRZ33",
	"OntbFtJltLCgIVEp0ybgWJfYWymOAc0yT/oi/8LMUzv1NBM41oXQZPbWnCzMstgSsTxO2vkO6RT2x3ik",
	"q+WSqrXdgJuLP6ppvOQ6c+SFHCQDHjWw3W7vGc9sn72eMnbeu4cQ1gHdj/1a4WgyMEcstD4mkGWHCvwT",
	"8vlgFbQxocQsFKOQaAqy47gvE4H2Uhckgvt2yajAxMM511mFeStuOcX3WoRjd5ViZbG2eyz5HApLuf9T",
	"R9z9/d6k/HQeOAJB6x138g7+P/xFw1G2Y5ft+UoBff8SDxTRnuor3Iy7pyfrPazYPib9gUs9gK8fqiE/",
	"Fmv9NnzP6z7xli9cMuOswGpW0NDnCuOaaCMVJsfDhx0nqLSWGQ+1IDGzlIU8Joq6Mn9U1D9bqrNidkzO",
	"zCNNJqKUWnOsq1UnWoAcTQA+54plpli7U/EN/qzf1I4k3cJxz8eFJBftI13v8qQQAXjYjNghju2CG57x",
	"kqbKTG43vtW9Q5lwx8+XkPy8guTnmsA6ntetcUntscwUVviDam2Wt3ypxyVdYy70ug6UrwdOXkoD9YaO",
	"XL2hLtaLRtyzJNQmF44PVRry8zpo+mxwEY+46HwQQFJ5N7g4oCpq/Ui7al+Qym42oAyDhbmQRa59RfFn",
	"vz97eRWXFB9D2O8aDHdNJzwc1Qd8lExBVQ9nxgu1B15ZUbrimsWAgEtraFwRuRKdMGE6P8Mbe4Lrv+LH",
	"7Bie38OkrA4KP5CF1OZrPAhWvCgmYiYxZz+xd6/MMIUrRpY0W3ARVSdu4IKlrv2RA/UvWl99wVbNDPlK",
	"yA0IrugWJP2DatlfE6kmwpUJmIxylhVcsHwyGjtVG8Jrw5aGhrBSbjTo5Yhru02EK9KBvFLKgmdrOP38",
	"EFzccsOuLbjJKCYMAbrYoWxbbiYC2lNjmMi5mNvWjpscWnBZwASXDnyd700zXFLtCR65b/LWbLGwQoqy",
	"xJWyb7AJVoh2FUbctoQy0R5dxuwKwpK1OCVi4XiLQb2JeMu4FWxy45b1xGB5NxJWeBhGNwIWCx9Fy1Vz",
	"3D3QygqpkY+4FQiUCHkkSwB04at7QDQEJA7WslIZg8zAPGfLUoIuhUmAeI4uEUXwj5mCknA8EWeG0Mxo",
	"TLyJV8YjqY6cHkQzn2izia1lG5QLR5Xgf1aDjqEDKUN7HkP7qE9t5N9//ieaVZe4mMneEDTLxlOqeWbl",
	"bLVsVCGGiIC6aiA3BRuTCISvGzgR3uZHyawqipDHNJgaqbaCJlf8dqOSopFEMXDQ1KaazSai4DdojfxF",
	"0XJBlszQnBo6JjN6yzM7JuChG4joMTp+KroqmNId9sEzuxb7KNCu771YABM2PrvqJ1MqBFMDSGebEb6k",
	"80Sk4E/w9Re2Z+mmRs22+533eHgdxJAI23HpIz1oFUJtxPuoOXgwsXEwKbDJT3bv7FRuMrHMhZzLrkU+",
	"y6T4ssTi5J3977Xm/+oJ1vabF9czs4K2e1H3MV7Zfpf8X+wgxRo/hMDzWQT0gMqKRUGiDtsKrTWevCai",
	"+S6lF3LlH0ggozpa2GPwoC9DWkfIjAPBiCLY4qVgOqrfR7OMlZiXe8ttL74cjWNnjWuekz/hjR7oSSbC",
	"u3awPyta+KjZs6c+7X0E3+etrrM7nz0dfvHsRWNJ15Cs3BdIU54cm6SgPqA3S1048a7WLBbgk/8n6Orq",
	"JXbWuK/TT9wlAieRumLXHdNE5EGqjfEm3P6UJSJabduCF4BDroNRdyKizla7c/tuowhfJoU2qsoMoV6h",
	"vGUil+rIs9hENJJcvL54Hr141mM80u7iNONhj8djcWGvh0WhkbMjiLVlGJKyihwrAsbVF1dWt4V7Z97P",
	"ovu/r7VgvL8bj975pe1T4dKNw+PkXf3HNvNv/U5X9zkmpzPD3OUf7jfceJuH45XjHgLv+agX59D57M2t",
	"m1Km/6xHk5KhvHBWzFjquFe/emenDnuUG8XaVXqE1yEK9T8aosYqAjFsPyjGH2OaRUyl/6hZoqSzIFNN",
	"1b0UuME8MXTPP9RXyPaGL/gN07u7WWvItnPDTm6lcYEj3bWag81ZanNMzowzVZdMzaRa+uOFKc28dR2t",
	"mNrrZ7UKRou5VNwslsfktNASTKO1XW9MoPxRCR4eUCAXY+Sk1RAXoKmBSJoy1NrslODhNEta6p7zG/CJ",
	"3vOhaIhj7WcghICD+sUPA0uV1T+hcWAIl4sd2OKlNKREVyaWk6/WzBx/3UmRfaTA3f2co9EfOKV6Hufq",
	"XQ1e8kicUzKB3pORe+ExZk2WVbYgqwU1ZC2rRzlhb0uWwW6fCLuJlzJnShDwQihCQbFxKFaGGVLQn45Z",
	"ceH3tn8AiSvrKJbJ5ZKJ3CmQUZGrwj0UehHjHCG4IqWSrhTEWW37rxNd4FNzn7zokwqnef5FJPQzWnTA",
	"ICX08Bx8TbkBBh6QHc4HJQgPBAyVQuCX4zTBsNk+ciOVbO9DeWU2Uf8MeEHcDHC3xWKeO3nbPufi5uE4",
	"23psP7avLdKj2z7hTwRx4zWxEMFAplLeLKm60XGtd/Cw1ZmiJYt91ybC7VnN3X0fYDqndCPHhM+I9zcL",
	"b/EuxzbLsTUY18DYQQvufrOKhD2BoAimYlRLQb7yLV5fPCdo8qgUhJKWdM6wGijNv4ZriAjO8oD+jPIC",
	"Y7n8S1lQVTwKXOTsbaMSbWwT3EC5WSQzHHxTvCknjqTxRFSi8A8GU5mvYQkptydennNX9dRj56pHMo0V",
	"LfU4oPpIT0SYgx/UOQ7W7oCCreqZeq8Du2xck0qgEo7mV3SwDqsQ5gmnOdeuoORklBWMgt8DGn/QKUys",
	"yUzR+ZJ1GB7tdtjfnhP1fr/vZvx0vKX9lgzi8uSd/V+dPLL3DcTftDdsx1COlly6p2dUe8B5Auzsdu+z",
	"fOyt8N5nQmMT2xev9ZZB7M1+aQlq+NK3ACCyZCJts7Pru8+5a/vdNZOgG/tTkbOWqJCdof8MhCbR+Yea",
	"Dp6C+pg8aVpb5pBYZlZZLUmx5EX2pczZRzkdx8n5gWsOxPdbloKsYQteYMg/nO3cNoUHk9F4JOiSjX4c",
	"uXQWo3EUZpRCB7/qk7NgybKkaGV4tozsfEl1VRgdx/rWbjxdyODmH4xLQ4VEdLas5O9cc3TqGKxxXinG",
	"nrLSLHZKSmAJ8jPEmt1ln3lIH3uj4eYaEjsE+U7i9GZBU8jJjZCrguVzewWeM7NI55Kwc97/1Ip6v993",
	"xT+dU8uvexBwLv3M8JTHQRygyuBlgmICC/hplxbT6nFKykQokF2RPR8NbNfoqBmw1yB3lu92l6tAjfWD",
	"vN3VG64n6RnQ1j0wgFJeVPM0/fbRE3YmHmwdx1yXUpkPfKd383zg5N6WiMy2TNN4T3/XDTL/safMvUvo",
	"T93/QRMvKaShKA4E/Nj/Dw33wUI4IdtON9GxA7hC3f8Gh2HuZur/TEjdZ+n3tAMzfzflTvP8C9k+iR3q",
	"FaL+IijOWB60Jzkj1N0g4Ryur5WhPqK7WbrimXOM/3FUcda9+IV/BknIRY4m2TCYu7Y6RzoYcSJQrdNk",
	"I8WFodOCOUNEFFsVj0I1yWRRLdNhpP7C4c/xh6Q1jA997b6i85d0CetxZ9+7zZvcZ7h/ThzHrY/q23uv",
	"OqP9doFeBHt5Ro83WjBsYOEW/2kiYBO67YcGcE2XzEOaQZbfsAvQImH3FheE4l45gtdXUZuz7V6dsgW9",
	"5bJSx+SSMTC+/0hqEXjuEL6EUTo2ETb1jN3s8nF1tA1c7qixNaF9jtxdJ+XpqLnPhCU+MrK0IjZkFnBv",
	"HHXxIOThf/CiQN/qzFS0KNYTsayMd9lsth5DeAOjedMN2Q1GCzKlOspRICtTVkFvLKiYV3TOwGWgIBkt",
	"ii6h72fxxE33I7HoJhrv978JNgB94kUmfhgyyktpzpZlwZZMmA9pZ2r9cg0CeNcEyJGtKRilpjQLT6BG",
	"lqRgt6yTRe+Q1ngvrcR2AAF+13MfEQdQn+Ot5zIYox4FCrfKpgkkW/Ie9ABJeprnD5+e6d2+WyEmT/ZE",
	"EaaxC2JA5xJ7ztlblFzhM+oE38H9VafJPq6yEjyOYuF4n7baSPJGVEXxBoFPhGa39o5VF3gK1m4dAHt2",
	"BAN30/8atLuJiBBbytsNpLRUpp7hipsFFx5FK9WySmFlKURgTMB7ggkPintjAFs5HDvrQ9GJyBWdz+Ee",
	"ZxeRhBJRkLTb3fDCj8e96ufeJaMOq3DeqVRU2/TwuReK2rI9w4Vm2AbdSLHiVNCXbBVuSZwVufbqpYbE",
	"GE6bbN7I8LkBXLy9xwtGHpBbWlRMQzIIqjWfC5ZH3kt2d2kJiNA5dQ6wReHLqTn7BnVRjPBlQVXrOreF",
	"1etl+RRuVxaPw9ysONNfGD9i/ENYF2I3ibiw3wc3L5w3scMtVEipWbGOX85dMNDEkkouKSRXKdYko9pn",
	"iXFbUMslAxeiY3IKbnf2OmpbrfydE73PJiL4pvn75T8rbcgakuFRQdiyNGuEimeZYjS3k1vIFXgF+tMb",
	"w47cksT6vFR8zgUtiFmXjHyFp5f9p+UNaiDICTzmVs7zeCLg84r6iKYwxtfh8kudfhGAwzSqUgoi2FsD",
	"WB67TB+Qi8oezxASBUEvlcjlZhCMQ51RzYu11SoKhnoKTO7Pimc3vo3v6dP9oq+fjzWGG49UPqmfowhO",
	"ZZDw+mIeenhSCVsNtw3Z9sMNQwTtQm6P7W8YImgXmoj9DUNXdqIf2SoEONzZJGShfLEH3YXnuSnYAKan",
	"EdvbLg/SIHoFk/3YjA9I3J3zLZgvrH8H1r8N/qPDbl91+/j2BV7/LgzApRte0jUxis/nTBGweExElNbB",
	"ZzcT0vAZz1wiAcFWumDGeS/H1pTGsBA1iGG6kOgv1M/BqEM5M5gUxqplgqOzrtUjEQ+iec4Im81YZnS/",
	"GlM7136M/VKP/sUXyXFvxCxb4wHh4t3okvJbqT/v5fe+x5t9POYlpMK8m5NgcwYPlMgxYRPEtiKr/tM7",
	"nXVIqyd1cl5IQO7yjWKoSwynnx/2dj+sQdwpg2YCl/d35ZCPYXe8Vy6RJRO05Mf/1FLcof6OD4DaUn/n",
	"Py5fvewruBMu5gtqfLkdkq8FXTr7RiFpjnef9KjNOkAWoswZmaO2g1lwUyk2L0uWbS/BQ8uycIOd3Ir8",
	"WFJ+7Nbvf9v1+39vmdJciv/z3fG3x98k6/TI6T9ZZj5CnZ4kodK1enZIUXKqsgWvS0Gix1ucHL612OdS",
	"71tF5C8S0g/L3+f5fY7aWmy1osSufOESvyQXfU9p3F70HaVwNPZe0rfu/6CpmdhYJ4rRDIti9WQJgUZW",
	"mNVJQpL0vbDtDpMpYw8Kh9H3prGH8JlS+eQd/H9wdY9Admen2EL4QyROGg+oeUizv5IIBnK6fCrDK5P6",
	"Hgly4ZeHkz4jQvhhEtITr0nL4blxMKzOZfH0GXCm62TNrgNnvrkLwULU23cDl/6FzMGg+hnT+AQLtgBF",
	"ugXwa1/XpWln9qSnuidjbBdH/OwH3lNK78Adn4Pwrek57s/BEQgK0hf/sheQZm4On5psK3X2SnW3u/nq",
	"0Hs9xv/hEzypCf98f1tyH435L7sfh8hXLuZbk+d4GD7FXJ0GBDIceThbqMfF/EFvWcT/r3pOQ62s7Rnq",
	"oJnPmMVVVE4uoV9fyKBc704b3/lAhjg/bZzntkQp2l75pPd/2hB09ZTJXFFhUum8Lfb750iJer/fd+0e",
	"cHZ2T6PAlyfv7P+G5WL3pEvTZE9bp+36F7ho15tjW2bSul4fFNwwersk2OdwGLLu27fCQ9XEIlnV70eL",
	"5HikCTVG8WllWAcN9rQ6t8mwh0C7i9X5c6CilWbeGbHHuFHYo1bOMJ8BnWvvIKh56v3mis7vbr7aa2O5",
	"kQ98PMP/67U6eWfo/FrQ5RabEGbUxldGOoXqSnbxkuu1jxxyiQbuIohw5I+dJy5eX6xbvgs7Yo/EqsKH",
	"TyPRYjvBYaYY5jn3OQ4rzdQnleBw2wy8FqoZiIQO1N2nYYi77Xv2VA/C+gk1bC7V+rKo5iHdxr47IXDL",
	"g5Tnft8MSbbIVm7T+KDE5lUic6vataP2v0E0+r/fn0oP+BZR0ymSdifv8B9Y8n+YL4Wj4ABvClyzPe8Y",
	"2DkqbPz53jPiLbTbmY6k8N629t7h6gnj1MYYCsWhntpEYP3qPK6ZUZ9ovmqGjvcmDpByS0Ly7KU8bBL2",
	"Qz0X1ih/3iat2q1qC9/4TO9dZB91SPkdHH9qSCn22fP+lRYNex0Jd7mFxRA+1yPhRLGy8LHb20938LNz",
	"jNRN/AtWFutwmH8E2scI7HcBrwE8zEu4oypS3jmG9jjYMuLaEFEtp0wRLrKiyl3MMqZ6tcKEL1ldQbdg",
	"VDMyrXhhj5yJqM8cvZDKEMVKxXTtDov9fuEGqotwQxZULzpcYn93KG/1ijXsrTkpC8pF0uNVG8XF/CN4",
	"vPrHJqtAraiqFxgxOk44vzahvRtNlVxppixke4ZiLcbrGwZj2X2hARfcVm2K/np1dR5l66gfu7yXMsE+",
	"UwZ+0Et7sasDNN+c0JKfvCElNQs0fIq1L4WsiawMhOE4mk4tI0DLENY9ZSSTt0z5e2jKZdqCDTVLfMZJ",
	"9rZkioMXdUFmjP7/jF1Bb+sgDP4rUU7vSel7992mqTtNWjVt54olNEGlUEHY1kP++4QxwVlcdcemfA5x",
	"CMYY+xuDwxDMWYde5TKRwen6ro6dhCkCdcmn/uk1zQtwtJs2Detg0DOJH27lbN5QREcT3s/ab73vTsoU",
	"SktIibfmoPqAV7wcR8jiJ+52xDCyXiDOBAn8JNwCapd+HOSoWiom7bExXSpR6NiBmeHj39LhZ5BvXrpC",
	"Gk2a4yXuZjlmWrgmCZAyUK6x249UdutHds9MAUEzBdbo3eJAFEXOUb41KBmW7IOqBaxcZIDPrhdGeYGc",
	"PHPCdKd8GxJ1eFpgxdel1bsT7lIoLuhmBaNDc6FsyXBkxFyqozJd/LZ20dzmt0gfE04IrsU9WhdOdN8q",
	"3x0XAowq6dKQMMkU056HHFoU5qZKyyqctRVd0kFnPw38ouMIqk6zRCFH6YGHEMf/TVUmorErQxhoHqDk",
	"odayTVq1h19IJQBuj4ohjYBJL5dWBEaWJYkJKydxJBZOLfpY5shBsGBg1TtxHqo/8CRN6n6TGNT+xqmV",
	"ioozHTS/+uVFO9kFrUzfIA130s5JGNFDFisRJyPEwzT7tYl2FUxxK9pB7rOB3A9SdHi47SH+s4n9dlZf",
	"s6zY/v+y8dTU21fR3wJBm6mpn4QfN7MHdwO0bDxN0/QdAAD//zRGKJ+ljgIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
