// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AccountAuthMethodDeleteParams is parameters of AccountAuthMethodDelete operation.
type AccountAuthMethodDeleteParams struct {
	AuthMethodID string
}

func unpackAccountAuthMethodDeleteParams(packed middleware.Parameters) (params AccountAuthMethodDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "auth_method_id",
			In:   "path",
		}
		params.AuthMethodID = packed[key].(string)
	}
	return params
}

func decodeAccountAuthMethodDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params AccountAuthMethodDeleteParams, _ error) {
	// Decode path: auth_method_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "auth_method_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AuthMethodID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "auth_method_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AccountGetAvatarParams is parameters of AccountGetAvatar operation.
type AccountGetAvatarParams struct {
	// Account handle.
	AccountHandle AccountHandle
}

func unpackAccountGetAvatarParams(packed middleware.Parameters) (params AccountGetAvatarParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(AccountHandle)
	}
	return params
}

func decodeAccountGetAvatarParams(args [1]string, argsEscaped bool, r *http.Request) (params AccountGetAvatarParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAccountHandleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountHandleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle = AccountHandle(paramsDotAccountHandleVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AccountSetAvatarParams is parameters of AccountSetAvatar operation.
type AccountSetAvatarParams struct {
	// Body content length in bytes.
	ContentLength float64
}

func unpackAccountSetAvatarParams(packed middleware.Parameters) (params AccountSetAvatarParams) {
	{
		key := middleware.ParameterKey{
			Name: "Content-Length",
			In:   "header",
		}
		params.ContentLength = packed[key].(float64)
	}
	return params
}

func decodeAccountSetAvatarParams(args [0]string, argsEscaped bool, r *http.Request) (params AccountSetAvatarParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Content-Length.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Content-Length",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.ContentLength = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.ContentLength)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Content-Length",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// AdminAccountBanCreateParams is parameters of AdminAccountBanCreate operation.
type AdminAccountBanCreateParams struct {
	// Account handle.
	AccountHandle AccountHandle
}

func unpackAdminAccountBanCreateParams(packed middleware.Parameters) (params AdminAccountBanCreateParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(AccountHandle)
	}
	return params
}

func decodeAdminAccountBanCreateParams(args [1]string, argsEscaped bool, r *http.Request) (params AdminAccountBanCreateParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAccountHandleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountHandleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle = AccountHandle(paramsDotAccountHandleVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AdminAccountBanRemoveParams is parameters of AdminAccountBanRemove operation.
type AdminAccountBanRemoveParams struct {
	// Account handle.
	AccountHandle AccountHandle
}

func unpackAdminAccountBanRemoveParams(packed middleware.Parameters) (params AdminAccountBanRemoveParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(AccountHandle)
	}
	return params
}

func decodeAdminAccountBanRemoveParams(args [1]string, argsEscaped bool, r *http.Request) (params AdminAccountBanRemoveParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAccountHandleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountHandleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle = AccountHandle(paramsDotAccountHandleVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AssetGetParams is parameters of AssetGet operation.
type AssetGetParams struct {
	// Asset ID.
	AssetFilename string
}

func unpackAssetGetParams(packed middleware.Parameters) (params AssetGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "asset_filename",
			In:   "path",
		}
		params.AssetFilename = packed[key].(string)
	}
	return params
}

func decodeAssetGetParams(args [1]string, argsEscaped bool, r *http.Request) (params AssetGetParams, _ error) {
	// Decode path: asset_filename.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "asset_filename",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AssetFilename = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "asset_filename",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AssetUploadParams is parameters of AssetUpload operation.
type AssetUploadParams struct {
	// Body content length in bytes.
	ContentLength float64
	// The client-provided file name for the asset.
	Filename OptString
	// Use the content extracted from the child resource to modify the target
	// resource. This can be used to populate a node from a asset or link. For
	// example, if you wanted to create a node that held the contents of a PDF
	// file, you can upload the file with a target node and a fill rule set.
	ContentFillRule OptContentFillRule
	// When NodeContentFillRuleQuery is used, this option must be set in order
	// to specify which node will receive content extracted from the source.
	NodeContentFillTarget OptIdentifier
}

func unpackAssetUploadParams(packed middleware.Parameters) (params AssetUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "Content-Length",
			In:   "header",
		}
		params.ContentLength = packed[key].(float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "filename",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Filename = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "content_fill_rule",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ContentFillRule = v.(OptContentFillRule)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "node_content_fill_target",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.NodeContentFillTarget = v.(OptIdentifier)
		}
	}
	return params
}

func decodeAssetUploadParams(args [0]string, argsEscaped bool, r *http.Request) (params AssetUploadParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Content-Length.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Content-Length",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.ContentLength = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.ContentLength)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Content-Length",
			In:   "header",
			Err:  err,
		}
	}
	// Decode query: filename.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filename",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilenameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilenameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Filename.SetTo(paramsDotFilenameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filename",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: content_fill_rule.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content_fill_rule",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentFillRuleVal ContentFillRule
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentFillRuleVal = ContentFillRule(c)
					return nil
				}(); err != nil {
					return err
				}
				params.ContentFillRule.SetTo(paramsDotContentFillRuleVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ContentFillRule.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_fill_rule",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: node_content_fill_target.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "node_content_fill_target",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNodeContentFillTargetVal Identifier
				if err := func() error {
					var paramsDotNodeContentFillTargetValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotNodeContentFillTargetValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotNodeContentFillTargetVal = Identifier(paramsDotNodeContentFillTargetValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.NodeContentFillTarget.SetTo(paramsDotNodeContentFillTargetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_content_fill_target",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CategoryUpdateParams is parameters of CategoryUpdate operation.
type CategoryUpdateParams struct {
	// Unique category ID.
	CategoryID Identifier
}

func unpackCategoryUpdateParams(packed middleware.Parameters) (params CategoryUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "category_id",
			In:   "path",
		}
		params.CategoryID = packed[key].(Identifier)
	}
	return params
}

func decodeCategoryUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params CategoryUpdateParams, _ error) {
	// Decode path: category_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "category_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCategoryIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCategoryIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CategoryID = Identifier(paramsDotCategoryIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionAddNodeParams is parameters of CollectionAddNode operation.
type CollectionAddNodeParams struct {
	// Unique collection ID.
	CollectionID Identifier
	// Unique node ID.
	NodeID Identifier
}

func unpackCollectionAddNodeParams(packed middleware.Parameters) (params CollectionAddNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "collection_id",
			In:   "path",
		}
		params.CollectionID = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "node_id",
			In:   "path",
		}
		params.NodeID = packed[key].(Identifier)
	}
	return params
}

func decodeCollectionAddNodeParams(args [2]string, argsEscaped bool, r *http.Request) (params CollectionAddNodeParams, _ error) {
	// Decode path: collection_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collection_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCollectionIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCollectionIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CollectionID = Identifier(paramsDotCollectionIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collection_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: node_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeID = Identifier(paramsDotNodeIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionAddPostParams is parameters of CollectionAddPost operation.
type CollectionAddPostParams struct {
	// Unique collection ID.
	CollectionID Identifier
	// Unique post ID.
	PostID Identifier
}

func unpackCollectionAddPostParams(packed middleware.Parameters) (params CollectionAddPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "collection_id",
			In:   "path",
		}
		params.CollectionID = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(Identifier)
	}
	return params
}

func decodeCollectionAddPostParams(args [2]string, argsEscaped bool, r *http.Request) (params CollectionAddPostParams, _ error) {
	// Decode path: collection_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collection_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCollectionIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCollectionIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CollectionID = Identifier(paramsDotCollectionIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collection_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: post_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPostIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPostIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PostID = Identifier(paramsDotPostIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionDeleteParams is parameters of CollectionDelete operation.
type CollectionDeleteParams struct {
	// Unique collection ID.
	CollectionID Identifier
}

func unpackCollectionDeleteParams(packed middleware.Parameters) (params CollectionDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "collection_id",
			In:   "path",
		}
		params.CollectionID = packed[key].(Identifier)
	}
	return params
}

func decodeCollectionDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params CollectionDeleteParams, _ error) {
	// Decode path: collection_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collection_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCollectionIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCollectionIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CollectionID = Identifier(paramsDotCollectionIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collection_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionGetParams is parameters of CollectionGet operation.
type CollectionGetParams struct {
	// Unique collection ID.
	CollectionID Identifier
}

func unpackCollectionGetParams(packed middleware.Parameters) (params CollectionGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "collection_id",
			In:   "path",
		}
		params.CollectionID = packed[key].(Identifier)
	}
	return params
}

func decodeCollectionGetParams(args [1]string, argsEscaped bool, r *http.Request) (params CollectionGetParams, _ error) {
	// Decode path: collection_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collection_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCollectionIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCollectionIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CollectionID = Identifier(paramsDotCollectionIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collection_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionListParams is parameters of CollectionList operation.
type CollectionListParams struct {
	// Account handle.
	AccountHandle OptAccountHandle
}

func unpackCollectionListParams(packed middleware.Parameters) (params CollectionListParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AccountHandle = v.(OptAccountHandle)
		}
	}
	return params
}

func decodeCollectionListParams(args [0]string, argsEscaped bool, r *http.Request) (params CollectionListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: account_handle.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "account_handle",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAccountHandleVal AccountHandle
				if err := func() error {
					var paramsDotAccountHandleValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAccountHandleValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAccountHandleVal = AccountHandle(paramsDotAccountHandleValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle.SetTo(paramsDotAccountHandleVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionRemoveNodeParams is parameters of CollectionRemoveNode operation.
type CollectionRemoveNodeParams struct {
	// Unique collection ID.
	CollectionID Identifier
	// Unique node ID.
	NodeID Identifier
}

func unpackCollectionRemoveNodeParams(packed middleware.Parameters) (params CollectionRemoveNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "collection_id",
			In:   "path",
		}
		params.CollectionID = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "node_id",
			In:   "path",
		}
		params.NodeID = packed[key].(Identifier)
	}
	return params
}

func decodeCollectionRemoveNodeParams(args [2]string, argsEscaped bool, r *http.Request) (params CollectionRemoveNodeParams, _ error) {
	// Decode path: collection_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collection_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCollectionIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCollectionIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CollectionID = Identifier(paramsDotCollectionIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collection_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: node_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeID = Identifier(paramsDotNodeIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionRemovePostParams is parameters of CollectionRemovePost operation.
type CollectionRemovePostParams struct {
	// Unique collection ID.
	CollectionID Identifier
	// Unique post ID.
	PostID Identifier
}

func unpackCollectionRemovePostParams(packed middleware.Parameters) (params CollectionRemovePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "collection_id",
			In:   "path",
		}
		params.CollectionID = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(Identifier)
	}
	return params
}

func decodeCollectionRemovePostParams(args [2]string, argsEscaped bool, r *http.Request) (params CollectionRemovePostParams, _ error) {
	// Decode path: collection_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collection_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCollectionIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCollectionIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CollectionID = Identifier(paramsDotCollectionIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collection_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: post_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPostIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPostIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PostID = Identifier(paramsDotPostIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CollectionUpdateParams is parameters of CollectionUpdate operation.
type CollectionUpdateParams struct {
	// Unique collection ID.
	CollectionID Identifier
}

func unpackCollectionUpdateParams(packed middleware.Parameters) (params CollectionUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "collection_id",
			In:   "path",
		}
		params.CollectionID = packed[key].(Identifier)
	}
	return params
}

func decodeCollectionUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params CollectionUpdateParams, _ error) {
	// Decode path: collection_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collection_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCollectionIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCollectionIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CollectionID = Identifier(paramsDotCollectionIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collection_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DatagraphSearchParams is parameters of DatagraphSearch operation.
type DatagraphSearchParams struct {
	// Search query string.
	Q OptString
	// Pagination query parameters.
	Page OptString
}

func unpackDatagraphSearchParams(packed middleware.Parameters) (params DatagraphSearchParams) {
	{
		key := middleware.ParameterKey{
			Name: "q",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Q = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptString)
		}
	}
	return params
}

func decodeDatagraphSearchParams(args [0]string, argsEscaped bool, r *http.Request) (params DatagraphSearchParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Q.SetTo(paramsDotQVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Q.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: true,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "q",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// IconGetParams is parameters of IconGet operation.
type IconGetParams struct {
	// Icon sizes.
	IconSize IconSize
}

func unpackIconGetParams(packed middleware.Parameters) (params IconGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "icon_size",
			In:   "path",
		}
		params.IconSize = packed[key].(IconSize)
	}
	return params
}

func decodeIconGetParams(args [1]string, argsEscaped bool, r *http.Request) (params IconGetParams, _ error) {
	// Decode path: icon_size.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "icon_size",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.IconSize = IconSize(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IconSize.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "icon_size",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// IconUploadParams is parameters of IconUpload operation.
type IconUploadParams struct {
	// Body content length in bytes.
	ContentLength float64
}

func unpackIconUploadParams(packed middleware.Parameters) (params IconUploadParams) {
	{
		key := middleware.ParameterKey{
			Name: "Content-Length",
			In:   "header",
		}
		params.ContentLength = packed[key].(float64)
	}
	return params
}

func decodeIconUploadParams(args [0]string, argsEscaped bool, r *http.Request) (params IconUploadParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Content-Length.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Content-Length",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.ContentLength = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.ContentLength)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Content-Length",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// LinkGetParams is parameters of LinkGet operation.
type LinkGetParams struct {
	// Unique link Slug.
	LinkSlug string
}

func unpackLinkGetParams(packed middleware.Parameters) (params LinkGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "link_slug",
			In:   "path",
		}
		params.LinkSlug = packed[key].(string)
	}
	return params
}

func decodeLinkGetParams(args [1]string, argsEscaped bool, r *http.Request) (params LinkGetParams, _ error) {
	// Decode path: link_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "link_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.LinkSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "link_slug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LinkListParams is parameters of LinkList operation.
type LinkListParams struct {
	// Search query string.
	Q OptString
	// Pagination query parameters.
	Page OptString
}

func unpackLinkListParams(packed middleware.Parameters) (params LinkListParams) {
	{
		key := middleware.ParameterKey{
			Name: "q",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Q = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptString)
		}
	}
	return params
}

func decodeLinkListParams(args [0]string, argsEscaped bool, r *http.Request) (params LinkListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Q.SetTo(paramsDotQVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Q.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: true,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "q",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// NodeAddAssetParams is parameters of NodeAddAsset operation.
type NodeAddAssetParams struct {
	// Unique node Slug.
	NodeSlug Identifier
	// Asset ID.
	AssetID string
	// Use the content extracted from the child resource to modify the target
	// resource. This can be used to populate a node from a asset or link. For
	// example, if you wanted to create a node that held the contents of a PDF
	// file, you can upload the file with a target node and a fill rule set.
	ContentFillRule OptContentFillRule
	// When NodeContentFillRuleQuery is used, this option must be set in order
	// to specify which node will receive content extracted from the source.
	NodeContentFillTarget OptIdentifier
}

func unpackNodeAddAssetParams(packed middleware.Parameters) (params NodeAddAssetParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "asset_id",
			In:   "path",
		}
		params.AssetID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_fill_rule",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ContentFillRule = v.(OptContentFillRule)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "node_content_fill_target",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.NodeContentFillTarget = v.(OptIdentifier)
		}
	}
	return params
}

func decodeNodeAddAssetParams(args [2]string, argsEscaped bool, r *http.Request) (params NodeAddAssetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: asset_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "asset_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AssetID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "asset_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: content_fill_rule.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content_fill_rule",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentFillRuleVal ContentFillRule
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentFillRuleVal = ContentFillRule(c)
					return nil
				}(); err != nil {
					return err
				}
				params.ContentFillRule.SetTo(paramsDotContentFillRuleVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ContentFillRule.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_fill_rule",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: node_content_fill_target.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "node_content_fill_target",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNodeContentFillTargetVal Identifier
				if err := func() error {
					var paramsDotNodeContentFillTargetValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotNodeContentFillTargetValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotNodeContentFillTargetVal = Identifier(paramsDotNodeContentFillTargetValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.NodeContentFillTarget.SetTo(paramsDotNodeContentFillTargetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_content_fill_target",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// NodeAddNodeParams is parameters of NodeAddNode operation.
type NodeAddNodeParams struct {
	// Unique node Slug.
	NodeSlug Identifier
	// Unique node Slug.
	NodeSlugChild Identifier
}

func unpackNodeAddNodeParams(packed middleware.Parameters) (params NodeAddNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "node_slug_child",
			In:   "path",
		}
		params.NodeSlugChild = packed[key].(Identifier)
	}
	return params
}

func decodeNodeAddNodeParams(args [2]string, argsEscaped bool, r *http.Request) (params NodeAddNodeParams, _ error) {
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: node_slug_child.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug_child",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugChildVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugChildVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlugChild = Identifier(paramsDotNodeSlugChildVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug_child",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// NodeDeleteParams is parameters of NodeDelete operation.
type NodeDeleteParams struct {
	// Unique node Slug.
	NodeSlug Identifier
	// If set, child nodes will be moved to the target node. If not set, child
	// nodes will be moved to the root.
	TargetNode OptString
}

func unpackNodeDeleteParams(packed middleware.Parameters) (params NodeDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "target_node",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TargetNode = v.(OptString)
		}
	}
	return params
}

func decodeNodeDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params NodeDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: target_node.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "target_node",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTargetNodeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTargetNodeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TargetNode.SetTo(paramsDotTargetNodeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "target_node",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// NodeGetParams is parameters of NodeGet operation.
type NodeGetParams struct {
	// Unique node Slug.
	NodeSlug Identifier
}

func unpackNodeGetParams(packed middleware.Parameters) (params NodeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	return params
}

func decodeNodeGetParams(args [1]string, argsEscaped bool, r *http.Request) (params NodeGetParams, _ error) {
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// NodeListParams is parameters of NodeList operation.
type NodeListParams struct {
	// Search query string.
	Q OptString
	// Pagination query parameters.
	Page OptString
	// List this node and all child nodes.
	NodeID OptIdentifier
	// Show only results owned by this account.
	Author OptAccountHandle
	// Filter nodes with specific visibility values. Note that by
	// default, only published nodes are returned. When 'draft' is
	// specified, only drafts owned by the requesting account are included.
	// When 'review' is specified, the request will fail if the requesting
	// account is not an administrator.
	Visibility []Visibility
	// When set to a positive value, the nodes in the response will include all
	// child nodes up to the specified depth. When set to zero, then if the
	// request includes a node ID only that node will be returned, otherwise
	// only top-level (root) nodes will be returned.
	Depth OptString
}

func unpackNodeListParams(packed middleware.Parameters) (params NodeListParams) {
	{
		key := middleware.ParameterKey{
			Name: "q",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Q = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "node_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.NodeID = v.(OptIdentifier)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "author",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Author = v.(OptAccountHandle)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "visibility",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Visibility = v.([]Visibility)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "depth",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Depth = v.(OptString)
		}
	}
	return params
}

func decodeNodeListParams(args [0]string, argsEscaped bool, r *http.Request) (params NodeListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Q.SetTo(paramsDotQVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Q.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: true,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "q",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: node_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "node_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNodeIDVal Identifier
				if err := func() error {
					var paramsDotNodeIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotNodeIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotNodeIDVal = Identifier(paramsDotNodeIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.NodeID.SetTo(paramsDotNodeIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: author.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "author",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorVal AccountHandle
				if err := func() error {
					var paramsDotAuthorValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAuthorValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAuthorVal = AccountHandle(paramsDotAuthorValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Author.SetTo(paramsDotAuthorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "author",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: visibility.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotVisibilityVal Visibility
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotVisibilityVal = Visibility(c)
						return nil
					}(); err != nil {
						return err
					}
					params.Visibility = append(params.Visibility, paramsDotVisibilityVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.Visibility {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "visibility",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: depth.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "depth",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDepthVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDepthVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Depth.SetTo(paramsDotDepthVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "depth",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// NodeRemoveAssetParams is parameters of NodeRemoveAsset operation.
type NodeRemoveAssetParams struct {
	// Unique node Slug.
	NodeSlug Identifier
	// Asset ID.
	AssetID string
}

func unpackNodeRemoveAssetParams(packed middleware.Parameters) (params NodeRemoveAssetParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "asset_id",
			In:   "path",
		}
		params.AssetID = packed[key].(string)
	}
	return params
}

func decodeNodeRemoveAssetParams(args [2]string, argsEscaped bool, r *http.Request) (params NodeRemoveAssetParams, _ error) {
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: asset_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "asset_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AssetID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "asset_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// NodeRemoveNodeParams is parameters of NodeRemoveNode operation.
type NodeRemoveNodeParams struct {
	// Unique node Slug.
	NodeSlug Identifier
	// Unique node Slug.
	NodeSlugChild Identifier
}

func unpackNodeRemoveNodeParams(packed middleware.Parameters) (params NodeRemoveNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	{
		key := middleware.ParameterKey{
			Name: "node_slug_child",
			In:   "path",
		}
		params.NodeSlugChild = packed[key].(Identifier)
	}
	return params
}

func decodeNodeRemoveNodeParams(args [2]string, argsEscaped bool, r *http.Request) (params NodeRemoveNodeParams, _ error) {
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: node_slug_child.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug_child",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugChildVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugChildVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlugChild = Identifier(paramsDotNodeSlugChildVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug_child",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// NodeUpdateParams is parameters of NodeUpdate operation.
type NodeUpdateParams struct {
	// Unique node Slug.
	NodeSlug Identifier
}

func unpackNodeUpdateParams(packed middleware.Parameters) (params NodeUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	return params
}

func decodeNodeUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params NodeUpdateParams, _ error) {
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// NodeUpdateVisibilityParams is parameters of NodeUpdateVisibility operation.
type NodeUpdateVisibilityParams struct {
	// Unique node Slug.
	NodeSlug Identifier
}

func unpackNodeUpdateVisibilityParams(packed middleware.Parameters) (params NodeUpdateVisibilityParams) {
	{
		key := middleware.ParameterKey{
			Name: "node_slug",
			In:   "path",
		}
		params.NodeSlug = packed[key].(Identifier)
	}
	return params
}

func decodeNodeUpdateVisibilityParams(args [1]string, argsEscaped bool, r *http.Request) (params NodeUpdateVisibilityParams, _ error) {
	// Decode path: node_slug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "node_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNodeSlugVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNodeSlugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NodeSlug = Identifier(paramsDotNodeSlugVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "node_slug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OAuthProviderCallbackParams is parameters of OAuthProviderCallback operation.
type OAuthProviderCallbackParams struct {
	// The identifier for an OAuth2 provider such as "twitter".
	OAuthProvider string
}

func unpackOAuthProviderCallbackParams(packed middleware.Parameters) (params OAuthProviderCallbackParams) {
	{
		key := middleware.ParameterKey{
			Name: "oauth_provider",
			In:   "path",
		}
		params.OAuthProvider = packed[key].(string)
	}
	return params
}

func decodeOAuthProviderCallbackParams(args [1]string, argsEscaped bool, r *http.Request) (params OAuthProviderCallbackParams, _ error) {
	// Decode path: oauth_provider.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "oauth_provider",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OAuthProvider = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "oauth_provider",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PhoneSubmitCodeParams is parameters of PhoneSubmitCode operation.
type PhoneSubmitCodeParams struct {
	// Account handle.
	AccountHandle AccountHandle
}

func unpackPhoneSubmitCodeParams(packed middleware.Parameters) (params PhoneSubmitCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(AccountHandle)
	}
	return params
}

func decodePhoneSubmitCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params PhoneSubmitCodeParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAccountHandleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountHandleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle = AccountHandle(paramsDotAccountHandleVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostCreateParams is parameters of PostCreate operation.
type PostCreateParams struct {
	// Thread unique and permanent identifier.
	ThreadMark ThreadMark
}

func unpackPostCreateParams(packed middleware.Parameters) (params PostCreateParams) {
	{
		key := middleware.ParameterKey{
			Name: "thread_mark",
			In:   "path",
		}
		params.ThreadMark = packed[key].(ThreadMark)
	}
	return params
}

func decodePostCreateParams(args [1]string, argsEscaped bool, r *http.Request) (params PostCreateParams, _ error) {
	// Decode path: thread_mark.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_mark",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotThreadMarkVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotThreadMarkVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ThreadMark = ThreadMark(paramsDotThreadMarkVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread_mark",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostDeleteParams is parameters of PostDelete operation.
type PostDeleteParams struct {
	// Unique post ID.
	PostID Identifier
}

func unpackPostDeleteParams(packed middleware.Parameters) (params PostDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(Identifier)
	}
	return params
}

func decodePostDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params PostDeleteParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPostIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPostIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PostID = Identifier(paramsDotPostIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostReactAddParams is parameters of PostReactAdd operation.
type PostReactAddParams struct {
	// Unique post ID.
	PostID Identifier
}

func unpackPostReactAddParams(packed middleware.Parameters) (params PostReactAddParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(Identifier)
	}
	return params
}

func decodePostReactAddParams(args [1]string, argsEscaped bool, r *http.Request) (params PostReactAddParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPostIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPostIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PostID = Identifier(paramsDotPostIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostSearchParams is parameters of PostSearch operation.
type PostSearchParams struct {
	// A text query to search for in post content.
	Body OptString
	// Show only results created by this account.
	Author OptAccountHandle
	// Posts, threads or both.
	Kind ContentKinds
}

func unpackPostSearchParams(packed middleware.Parameters) (params PostSearchParams) {
	{
		key := middleware.ParameterKey{
			Name: "body",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Body = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "author",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Author = v.(OptAccountHandle)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "kind",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Kind = v.(ContentKinds)
		}
	}
	return params
}

func decodePostSearchParams(args [0]string, argsEscaped bool, r *http.Request) (params PostSearchParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: body.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "body",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBodyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBodyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Body.SetTo(paramsDotBodyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "body",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: author.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "author",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorVal AccountHandle
				if err := func() error {
					var paramsDotAuthorValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAuthorValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAuthorVal = AccountHandle(paramsDotAuthorValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Author.SetTo(paramsDotAuthorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "author",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: kind.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "kind",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKindVal []ContentKind
				if err := func() error {
					return d.DecodeArray(func(d uri.Decoder) error {
						var paramsDotKindValVal ContentKind
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotKindValVal = ContentKind(c)
							return nil
						}(); err != nil {
							return err
						}
						paramsDotKindVal = append(paramsDotKindVal, paramsDotKindValVal)
						return nil
					})
				}(); err != nil {
					return err
				}
				params.Kind = ContentKinds(paramsDotKindVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Kind.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kind",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PostUpdateParams is parameters of PostUpdate operation.
type PostUpdateParams struct {
	// Unique post ID.
	PostID Identifier
}

func unpackPostUpdateParams(packed middleware.Parameters) (params PostUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(Identifier)
	}
	return params
}

func decodePostUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params PostUpdateParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPostIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPostIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PostID = Identifier(paramsDotPostIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProfileGetParams is parameters of ProfileGet operation.
type ProfileGetParams struct {
	// Account handle.
	AccountHandle AccountHandle
}

func unpackProfileGetParams(packed middleware.Parameters) (params ProfileGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(AccountHandle)
	}
	return params
}

func decodeProfileGetParams(args [1]string, argsEscaped bool, r *http.Request) (params ProfileGetParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAccountHandleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountHandleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle = AccountHandle(paramsDotAccountHandleVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProfileListParams is parameters of ProfileList operation.
type ProfileListParams struct {
	// Search query string.
	Q OptString
	// Pagination query parameters.
	Page OptString
}

func unpackProfileListParams(packed middleware.Parameters) (params ProfileListParams) {
	{
		key := middleware.ParameterKey{
			Name: "q",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Q = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptString)
		}
	}
	return params
}

func decodeProfileListParams(args [0]string, argsEscaped bool, r *http.Request) (params ProfileListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Q.SetTo(paramsDotQVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Q.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: true,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "q",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ThreadDeleteParams is parameters of ThreadDelete operation.
type ThreadDeleteParams struct {
	// Thread unique and permanent identifier.
	ThreadMark ThreadMark
}

func unpackThreadDeleteParams(packed middleware.Parameters) (params ThreadDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "thread_mark",
			In:   "path",
		}
		params.ThreadMark = packed[key].(ThreadMark)
	}
	return params
}

func decodeThreadDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params ThreadDeleteParams, _ error) {
	// Decode path: thread_mark.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_mark",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotThreadMarkVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotThreadMarkVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ThreadMark = ThreadMark(paramsDotThreadMarkVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread_mark",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ThreadGetParams is parameters of ThreadGet operation.
type ThreadGetParams struct {
	// Thread unique and permanent identifier.
	ThreadMark ThreadMark
}

func unpackThreadGetParams(packed middleware.Parameters) (params ThreadGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "thread_mark",
			In:   "path",
		}
		params.ThreadMark = packed[key].(ThreadMark)
	}
	return params
}

func decodeThreadGetParams(args [1]string, argsEscaped bool, r *http.Request) (params ThreadGetParams, _ error) {
	// Decode path: thread_mark.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_mark",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotThreadMarkVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotThreadMarkVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ThreadMark = ThreadMark(paramsDotThreadMarkVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread_mark",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ThreadListParams is parameters of ThreadList operation.
type ThreadListParams struct {
	// Search query string.
	Q OptString
	// Pagination query parameters.
	Page OptString
	// Show only results creeated by this user.
	Author OptAccountHandle
	// Show only results with these tags.
	Tags TagListIDs
	// Show only results with these categories.
	Categories CategorySlugList
}

func unpackThreadListParams(packed middleware.Parameters) (params ThreadListParams) {
	{
		key := middleware.ParameterKey{
			Name: "q",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Q = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "author",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Author = v.(OptAccountHandle)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tags",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Tags = v.(TagListIDs)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "categories",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Categories = v.(CategorySlugList)
		}
	}
	return params
}

func decodeThreadListParams(args [0]string, argsEscaped bool, r *http.Request) (params ThreadListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Q.SetTo(paramsDotQVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Q.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: true,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "q",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: author.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "author",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorVal AccountHandle
				if err := func() error {
					var paramsDotAuthorValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAuthorValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAuthorVal = AccountHandle(paramsDotAuthorValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Author.SetTo(paramsDotAuthorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "author",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tags.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tags",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTagsVal []Identifier
				if err := func() error {
					return d.DecodeArray(func(d uri.Decoder) error {
						var paramsDotTagsValVal Identifier
						if err := func() error {
							var paramsDotTagsValValVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								paramsDotTagsValValVal = c
								return nil
							}(); err != nil {
								return err
							}
							paramsDotTagsValVal = Identifier(paramsDotTagsValValVal)
							return nil
						}(); err != nil {
							return err
						}
						paramsDotTagsVal = append(paramsDotTagsVal, paramsDotTagsValVal)
						return nil
					})
				}(); err != nil {
					return err
				}
				params.Tags = TagListIDs(paramsDotTagsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tags",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: categories.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "categories",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCategoriesVal []CategorySlug
				if err := func() error {
					return d.DecodeArray(func(d uri.Decoder) error {
						var paramsDotCategoriesValVal CategorySlug
						if err := func() error {
							var paramsDotCategoriesValValVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								paramsDotCategoriesValValVal = c
								return nil
							}(); err != nil {
								return err
							}
							paramsDotCategoriesValVal = CategorySlug(paramsDotCategoriesValValVal)
							return nil
						}(); err != nil {
							return err
						}
						paramsDotCategoriesVal = append(paramsDotCategoriesVal, paramsDotCategoriesValVal)
						return nil
					})
				}(); err != nil {
					return err
				}
				params.Categories = CategorySlugList(paramsDotCategoriesVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "categories",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ThreadUpdateParams is parameters of ThreadUpdate operation.
type ThreadUpdateParams struct {
	// Thread unique and permanent identifier.
	ThreadMark ThreadMark
}

func unpackThreadUpdateParams(packed middleware.Parameters) (params ThreadUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "thread_mark",
			In:   "path",
		}
		params.ThreadMark = packed[key].(ThreadMark)
	}
	return params
}

func decodeThreadUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params ThreadUpdateParams, _ error) {
	// Decode path: thread_mark.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_mark",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotThreadMarkVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotThreadMarkVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ThreadMark = ThreadMark(paramsDotThreadMarkVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread_mark",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// WebAuthnGetAssertionParams is parameters of WebAuthnGetAssertion operation.
type WebAuthnGetAssertionParams struct {
	// Account handle.
	AccountHandle AccountHandle
}

func unpackWebAuthnGetAssertionParams(packed middleware.Parameters) (params WebAuthnGetAssertionParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(AccountHandle)
	}
	return params
}

func decodeWebAuthnGetAssertionParams(args [1]string, argsEscaped bool, r *http.Request) (params WebAuthnGetAssertionParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAccountHandleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountHandleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle = AccountHandle(paramsDotAccountHandleVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// WebAuthnRequestCredentialParams is parameters of WebAuthnRequestCredential operation.
type WebAuthnRequestCredentialParams struct {
	// Account handle.
	AccountHandle AccountHandle
}

func unpackWebAuthnRequestCredentialParams(packed middleware.Parameters) (params WebAuthnRequestCredentialParams) {
	{
		key := middleware.ParameterKey{
			Name: "account_handle",
			In:   "path",
		}
		params.AccountHandle = packed[key].(AccountHandle)
	}
	return params
}

func decodeWebAuthnRequestCredentialParams(args [1]string, argsEscaped bool, r *http.Request) (params WebAuthnRequestCredentialParams, _ error) {
	// Decode path: account_handle.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_handle",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAccountHandleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountHandleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountHandle = AccountHandle(paramsDotAccountHandleVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_handle",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
