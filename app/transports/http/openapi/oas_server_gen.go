// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AccountAuthMethodDelete implements AccountAuthMethodDelete operation.
	//
	// Retrieve a list of authentication providers with a flag indicating which
	// ones are active for the currently authenticated account.
	//
	// DELETE /v1/accounts/self/auth-methods/{auth_method_id}
	AccountAuthMethodDelete(ctx context.Context, params AccountAuthMethodDeleteParams) (AccountAuthMethodDeleteRes, error)
	// AccountAuthProviderList implements AccountAuthProviderList operation.
	//
	// Retrieve a list of authentication providers with a flag indicating which
	// ones are active for the currently authenticated account.
	//
	// GET /v1/accounts/self/auth-methods
	AccountAuthProviderList(ctx context.Context) (AccountAuthProviderListRes, error)
	// AccountGet implements AccountGet operation.
	//
	// Get the information for the currently authenticated account.
	//
	// GET /v1/accounts
	AccountGet(ctx context.Context) (AccountGetRes, error)
	// AccountGetAvatar implements AccountGetAvatar operation.
	//
	// Get an avatar for the specified account.
	//
	// GET /v1/accounts/{account_handle}/avatar
	AccountGetAvatar(ctx context.Context, params AccountGetAvatarParams) (AccountGetAvatarRes, error)
	// AccountSetAvatar implements AccountSetAvatar operation.
	//
	// Upload an avatar for the authenticated account.
	//
	// POST /v1/accounts/self/avatar
	AccountSetAvatar(ctx context.Context, req AccountSetAvatarReq, params AccountSetAvatarParams) (AccountSetAvatarRes, error)
	// AccountUpdate implements AccountUpdate operation.
	//
	// Update the information for the currently authenticated account.
	//
	// PATCH /v1/accounts
	AccountUpdate(ctx context.Context, req OptAccountMutableProps) (AccountUpdateRes, error)
	// AdminAccountBanCreate implements AdminAccountBanCreate operation.
	//
	// Suspend an account - soft delete. This disables the ability for the
	// account owner to log in and use the platform. It keeps the account on
	// record for linkage to content so UI doesn't break. It does not change
	// anything else about the account such as the avatar, name, etc.
	//
	// POST /v1/admin/bans/{account_handle}
	AdminAccountBanCreate(ctx context.Context, params AdminAccountBanCreateParams) (AdminAccountBanCreateRes, error)
	// AdminAccountBanRemove implements AdminAccountBanRemove operation.
	//
	// Given the account is suspended, remove the suspended state.
	//
	// DELETE /v1/admin/bans/{account_handle}
	AdminAccountBanRemove(ctx context.Context, params AdminAccountBanRemoveParams) (AdminAccountBanRemoveRes, error)
	// AdminSettingsUpdate implements AdminSettingsUpdate operation.
	//
	// Update non-env configuration settings for installation.
	//
	// PATCH /v1/admin
	AdminSettingsUpdate(ctx context.Context, req OptAdminSettingsMutableProps) (AdminSettingsUpdateRes, error)
	// AssetGet implements AssetGet operation.
	//
	// Download an asset by its ID.
	//
	// GET /v1/assets/{asset_filename}
	AssetGet(ctx context.Context, params AssetGetParams) (AssetGetRes, error)
	// AssetUpload implements AssetUpload operation.
	//
	// Upload and process a media file.
	//
	// POST /v1/assets
	AssetUpload(ctx context.Context, req AssetUploadReq, params AssetUploadParams) (AssetUploadRes, error)
	// AuthEmailPasswordSignin implements AuthEmailPasswordSignin operation.
	//
	// Sign in to an existing account with a email and password.
	//
	// POST /v1/auth/email-password/signin
	AuthEmailPasswordSignin(ctx context.Context, req OptAuthEmailPasswordInitialProps) (AuthEmailPasswordSigninRes, error)
	// AuthEmailPasswordSignup implements AuthEmailPasswordSignup operation.
	//
	// Register a new account with a email and password.
	//
	// POST /v1/auth/email-password/signup
	AuthEmailPasswordSignup(ctx context.Context, req OptAuthEmailPasswordInitialProps) (AuthEmailPasswordSignupRes, error)
	// AuthEmailSignin implements AuthEmailSignin operation.
	//
	// Sign in to an existing account with an email and optional password. The
	// behaviour of this endpoint depends on how the instance is configured. If
	// email+password is the preferred method, a cookie is returned on success
	// but if magic links are preferred, the endpoint will start the code flow.
	//
	// POST /v1/auth/email/signin
	AuthEmailSignin(ctx context.Context, req OptAuthEmailInitialProps) (AuthEmailSigninRes, error)
	// AuthEmailSignup implements AuthEmailSignup operation.
	//
	// Register a new account with an email and optional password. The password
	// requirement is dependent on how the instance is configured for account
	// authentication with email addresses (password vs magic link.)
	// When the email address has not been registered, this endpoint will send
	// a verification email however it will also return a session cookie to
	// facilitate pre-verification usage of the platform. If the email address
	// already exists, no session cookie will be returned in order to prevent
	// arbitrary account control by a malicious actor. In this case, the email
	// will be sent again with the same OTP for the case where the user has
	// cleared their cookies or switched device but hasn't yet verified due to
	// missing the email or a delivery failure. In this sense, the endpoint can
	// act as a "resend verification email" operation as well as registration.
	// In the first case, a 200 response is provided with the session cookie,
	// in the second case, a 422 response is provided without a session cookie.
	// Given that this is an unauthenticated endpoint that triggers an email to
	// be sent to any public address, it MUST be heavily rate limited.
	//
	// POST /v1/auth/email/signup
	AuthEmailSignup(ctx context.Context, req OptAuthEmailInitialProps) (AuthEmailSignupRes, error)
	// AuthEmailVerify implements AuthEmailVerify operation.
	//
	// Verify an email address using a token that was emailed to one of the
	// account's email addresses either set via sign up or added later.
	//
	// POST /v1/auth/email/verify
	AuthEmailVerify(ctx context.Context, req OptAuthEmailVerifyProps) (AuthEmailVerifyRes, error)
	// AuthPasswordCreate implements AuthPasswordCreate operation.
	//
	// Given the requesting account does not have a password authentication,
	// add a password authentication method to it with the given password.
	//
	// POST /v1/auth/password
	AuthPasswordCreate(ctx context.Context, req OptAuthPasswordInitialProps) (AuthPasswordCreateRes, error)
	// AuthPasswordSignin implements AuthPasswordSignin operation.
	//
	// Sign in to an existing account with a username and password.
	//
	// POST /v1/auth/password/signin
	AuthPasswordSignin(ctx context.Context, req OptAuthPair) (AuthPasswordSigninRes, error)
	// AuthPasswordSignup implements AuthPasswordSignup operation.
	//
	// Register a new account with a username and password.
	//
	// POST /v1/auth/password/signup
	AuthPasswordSignup(ctx context.Context, req OptAuthPair) (AuthPasswordSignupRes, error)
	// AuthPasswordUpdate implements AuthPasswordUpdate operation.
	//
	// Given the requesting account has a password authentication, update the
	// password on file.
	//
	// PATCH /v1/auth/password
	AuthPasswordUpdate(ctx context.Context, req OptAuthPasswordMutableProps) (AuthPasswordUpdateRes, error)
	// AuthProviderList implements AuthProviderList operation.
	//
	// Retrieve a list of authentication providers. Storyden supports a few
	// ways to authenticate, from simple passwords to OAuth and WebAuthn. This
	// endpoint tells a client which auth capabilities are enabled.
	//
	// GET /v1/auth
	AuthProviderList(ctx context.Context) (AuthProviderListRes, error)
	// AuthProviderLogout implements AuthProviderLogout operation.
	//
	// Remove cookies from requesting client.
	//
	// GET /v1/auth/logout
	AuthProviderLogout(ctx context.Context) (AuthProviderLogoutRes, error)
	// CategoryCreate implements CategoryCreate operation.
	//
	// Create a category for organising posts.
	//
	// POST /v1/categories
	CategoryCreate(ctx context.Context, req OptCategoryInitialProps) (CategoryCreateRes, error)
	// CategoryList implements CategoryList operation.
	//
	// Get a list of all categories on the site.
	//
	// GET /v1/categories
	CategoryList(ctx context.Context) (*CategoryList, error)
	// CategoryUpdate implements CategoryUpdate operation.
	//
	// Create a category for organising posts.
	//
	// PATCH /v1/categories/{category_id}
	CategoryUpdate(ctx context.Context, req OptCategoryMutableProps, params CategoryUpdateParams) (CategoryUpdateRes, error)
	// CategoryUpdateOrder implements CategoryUpdateOrder operation.
	//
	// Update the sort order of categories.
	//
	// PATCH /v1/categories
	CategoryUpdateOrder(ctx context.Context, req CategoryIdentifierList) (*CategoryList, error)
	// CollectionAddNode implements CollectionAddNode operation.
	//
	// Add a node to a collection. The collection must be owned by the account
	// making the request. The node can be any published node or any node
	// not published but owned by the collection owner.
	//
	// PUT /v1/collections/{collection_id}/nodes/{node_id}
	CollectionAddNode(ctx context.Context, params CollectionAddNodeParams) (CollectionAddNodeRes, error)
	// CollectionAddPost implements CollectionAddPost operation.
	//
	// Add a post to a collection. The collection must be owned by the account
	// making the request. The post can be any published post of any kind.
	//
	// PUT /v1/collections/{collection_id}/posts/{post_id}
	CollectionAddPost(ctx context.Context, params CollectionAddPostParams) (CollectionAddPostRes, error)
	// CollectionCreate implements CollectionCreate operation.
	//
	// Create a collection for curating posts under the authenticated account.
	//
	// POST /v1/collections
	CollectionCreate(ctx context.Context, req OptCollectionInitialProps) (CollectionCreateRes, error)
	// CollectionDelete implements CollectionDelete operation.
	//
	// Delete a collection owned by the authenticated account.
	//
	// DELETE /v1/collections/{collection_id}
	CollectionDelete(ctx context.Context, params CollectionDeleteParams) (CollectionDeleteRes, error)
	// CollectionGet implements CollectionGet operation.
	//
	// Get a collection by its ID. Collections can be public or private so the
	// response will depend on which account is making the request and if the
	// target collection is public, private, owned or not owned by the account.
	//
	// GET /v1/collections/{collection_id}
	CollectionGet(ctx context.Context, params CollectionGetParams) (CollectionGetRes, error)
	// CollectionList implements CollectionList operation.
	//
	// List all collections using the filtering options.
	//
	// GET /v1/collections
	CollectionList(ctx context.Context, params CollectionListParams) (CollectionListRes, error)
	// CollectionRemoveNode implements CollectionRemoveNode operation.
	//
	// Remove a node from a collection. The collection must be owned by the
	// account making the request.
	//
	// DELETE /v1/collections/{collection_id}/nodes/{node_id}
	CollectionRemoveNode(ctx context.Context, params CollectionRemoveNodeParams) (CollectionRemoveNodeRes, error)
	// CollectionRemovePost implements CollectionRemovePost operation.
	//
	// Remove a post from a collection. The collection must be owned by the
	// account making the request.
	//
	// DELETE /v1/collections/{collection_id}/posts/{post_id}
	CollectionRemovePost(ctx context.Context, params CollectionRemovePostParams) (CollectionRemovePostRes, error)
	// CollectionUpdate implements CollectionUpdate operation.
	//
	// Update a collection owned by the authenticated account.
	//
	// PATCH /v1/collections/{collection_id}
	CollectionUpdate(ctx context.Context, req OptCollectionMutableProps, params CollectionUpdateParams) (CollectionUpdateRes, error)
	// DatagraphSearch implements DatagraphSearch operation.
	//
	// Query and search content.
	//
	// GET /v1/datagraph
	DatagraphSearch(ctx context.Context, params DatagraphSearchParams) (DatagraphSearchRes, error)
	// GetInfo implements GetInfo operation.
	//
	// Get the basic forum installation info such as title, description, etc.
	//
	// GET /v1/info
	GetInfo(ctx context.Context) (*Info, error)
	// GetSpec implements GetSpec operation.
	//
	// Note: the generator creates a `map[string]interface{}` if this is set to
	// `application/json`... so I'm just using plain text for now.
	//
	// GET /openapi.json
	GetSpec(ctx context.Context) (GetSpecOK, error)
	// GetVersion implements GetVersion operation.
	//
	// The version number includes the date and time of the release build as
	// well as a short representation of the Git commit hash.
	//
	// GET /version
	GetVersion(ctx context.Context) (GetVersionOK, error)
	// IconGet implements IconGet operation.
	//
	// Get the logo icon image.
	//
	// GET /v1/info/icon/{icon_size}
	IconGet(ctx context.Context, params IconGetParams) (*AssetGetOKHeaders, error)
	// IconUpload implements IconUpload operation.
	//
	// Upload and process the installation's logo image.
	//
	// POST /v1/info/icon
	IconUpload(ctx context.Context, req IconUploadReq, params IconUploadParams) (IconUploadRes, error)
	// LinkCreate implements LinkCreate operation.
	//
	// Add a link to the community bookmarks. This will also scrape the content
	// at the site the link points to, if possible. If the submitted link is an
	// invalid link for whatever reason (invalid URL structure or page is dead)
	// then the API will fail. The metadata for the link is indexed on success.
	// If the submitted link already exists it will be an idempotent operation,
	// unless the body contains additional metadata. In these cases, the link's
	// metadata will be updated with the new metadata and the URL is unchanged.
	// When a link is submitted, it is first "cleaned" to remove any fragments.
	//
	// POST /v1/links
	LinkCreate(ctx context.Context, req OptLinkInitialProps) (LinkCreateRes, error)
	// LinkGet implements LinkGet operation.
	//
	// Get the details for a specific link. Such as where it's been posted,
	// which resources it's linked to and how many times it's been opened.
	//
	// GET /v1/links/{link_slug}
	LinkGet(ctx context.Context, params LinkGetParams) (LinkGetRes, error)
	// LinkList implements LinkList operation.
	//
	// List all links using the filtering options.
	//
	// GET /v1/links
	LinkList(ctx context.Context, params LinkListParams) (LinkListRes, error)
	// NodeAddAsset implements NodeAddAsset operation.
	//
	// Add an asset to a node.
	//
	// PUT /v1/nodes/{node_slug}/assets/{asset_id}
	NodeAddAsset(ctx context.Context, params NodeAddAssetParams) (NodeAddAssetRes, error)
	// NodeAddNode implements NodeAddNode operation.
	//
	// Set a node's parent to the specified node.
	//
	// PUT /v1/nodes/{node_slug}/nodes/{node_slug_child}
	NodeAddNode(ctx context.Context, params NodeAddNodeParams) (NodeAddNodeRes, error)
	// NodeCreate implements NodeCreate operation.
	//
	// Create a node for curating structured knowledge together.
	//
	// POST /v1/nodes
	NodeCreate(ctx context.Context, req OptNodeInitialProps) (NodeCreateRes, error)
	// NodeDelete implements NodeDelete operation.
	//
	// Delete a node and move all children to its parent or root.
	//
	// DELETE /v1/nodes/{node_slug}
	NodeDelete(ctx context.Context, params NodeDeleteParams) (NodeDeleteRes, error)
	// NodeGet implements NodeGet operation.
	//
	// Get a node by its URL slug.
	//
	// GET /v1/nodes/{node_slug}
	NodeGet(ctx context.Context, params NodeGetParams) (NodeGetRes, error)
	// NodeList implements NodeList operation.
	//
	// List nodes using the given filters. Can be used to get a full tree.
	//
	// GET /v1/nodes
	NodeList(ctx context.Context, params NodeListParams) (NodeListRes, error)
	// NodeRemoveAsset implements NodeRemoveAsset operation.
	//
	// Remove an asset from a node.
	//
	// DELETE /v1/nodes/{node_slug}/assets/{asset_id}
	NodeRemoveAsset(ctx context.Context, params NodeRemoveAssetParams) (NodeRemoveAssetRes, error)
	// NodeRemoveNode implements NodeRemoveNode operation.
	//
	// Remove a node from its parent node and back to the top level.
	//
	// DELETE /v1/nodes/{node_slug}/nodes/{node_slug_child}
	NodeRemoveNode(ctx context.Context, params NodeRemoveNodeParams) (NodeRemoveNodeRes, error)
	// NodeUpdate implements NodeUpdate operation.
	//
	// Update a node.
	//
	// PATCH /v1/nodes/{node_slug}
	NodeUpdate(ctx context.Context, req OptNodeMutableProps, params NodeUpdateParams) (NodeUpdateRes, error)
	// NodeUpdateVisibility implements NodeUpdateVisibility operation.
	//
	// Update the visibility of a node. When changed, this may trigger other
	// operations such as notifications/newsletters. Changing the visibility of
	// anything to "published" is often accompanied by some other side effects.
	//
	// PATCH /v1/nodes/{node_slug}/visibility
	NodeUpdateVisibility(ctx context.Context, req OptVisibilityMutationProps, params NodeUpdateVisibilityParams) (NodeUpdateVisibilityRes, error)
	// OAuthProviderCallback implements OAuthProviderCallback operation.
	//
	// OAuth2 callback.
	//
	// POST /v1/auth/oauth/{oauth_provider}/callback
	OAuthProviderCallback(ctx context.Context, req OptOAuthCallback, params OAuthProviderCallbackParams) (OAuthProviderCallbackRes, error)
	// PhoneRequestCode implements PhoneRequestCode operation.
	//
	// Start the authentication flow with a phone number. The handler will send
	// a one-time code to the provided phone number which must then be sent to
	// the other phone endpoint to verify the number and validate the account.
	//
	// POST /v1/auth/phone
	PhoneRequestCode(ctx context.Context, req OptPhoneRequestCodeProps) (PhoneRequestCodeRes, error)
	// PhoneSubmitCode implements PhoneSubmitCode operation.
	//
	// Complete the phone number authentication flow by submitting the one-time
	// code that was sent to the user's phone.
	//
	// PUT /v1/auth/phone/{account_handle}
	PhoneSubmitCode(ctx context.Context, req OptPhoneSubmitCodeProps, params PhoneSubmitCodeParams) (PhoneSubmitCodeRes, error)
	// PostCreate implements PostCreate operation.
	//
	// Create a new post within a thread.
	//
	// POST /v1/threads/{thread_mark}/posts
	PostCreate(ctx context.Context, req OptPostInitialProps, params PostCreateParams) (PostCreateRes, error)
	// PostDelete implements PostDelete operation.
	//
	// Archive a post using soft-delete.
	//
	// DELETE /v1/posts/{post_id}
	PostDelete(ctx context.Context, params PostDeleteParams) (PostDeleteRes, error)
	// PostReactAdd implements PostReactAdd operation.
	//
	// Add a reaction to a post.
	//
	// PUT /v1/posts/{post_id}/reacts
	PostReactAdd(ctx context.Context, req OptPostReactProps, params PostReactAddParams) (PostReactAddRes, error)
	// PostSearch implements PostSearch operation.
	//
	// Search through posts using various queries and filters.
	//
	// GET /v1/posts/search
	PostSearch(ctx context.Context, params PostSearchParams) (PostSearchRes, error)
	// PostUpdate implements PostUpdate operation.
	//
	// Publish changes to a single post.
	//
	// PATCH /v1/posts/{post_id}
	PostUpdate(ctx context.Context, req OptPostMutableProps, params PostUpdateParams) (PostUpdateRes, error)
	// ProfileGet implements ProfileGet operation.
	//
	// Get a public profile by ID.
	//
	// GET /v1/profiles/{account_handle}
	ProfileGet(ctx context.Context, params ProfileGetParams) (ProfileGetRes, error)
	// ProfileList implements ProfileList operation.
	//
	// Query and search profiles.
	//
	// GET /v1/profiles
	ProfileList(ctx context.Context, params ProfileListParams) (ProfileListRes, error)
	// ThreadCreate implements ThreadCreate operation.
	//
	// Create a new thread within the specified category.
	//
	// POST /v1/threads
	ThreadCreate(ctx context.Context, req OptThreadInitialProps) (ThreadCreateRes, error)
	// ThreadDelete implements ThreadDelete operation.
	//
	// Archive a thread using soft-delete.
	//
	// DELETE /v1/threads/{thread_mark}
	ThreadDelete(ctx context.Context, params ThreadDeleteParams) (ThreadDeleteRes, error)
	// ThreadGet implements ThreadGet operation.
	//
	// Get information about a thread such as its title, author, when it was
	// created as well as a list of the posts within the thread.
	//
	// GET /v1/threads/{thread_mark}
	ThreadGet(ctx context.Context, params ThreadGetParams) (ThreadGetRes, error)
	// ThreadList implements ThreadList operation.
	//
	// Get a list of all threads.
	//
	// GET /v1/threads
	ThreadList(ctx context.Context, params ThreadListParams) (ThreadListRes, error)
	// ThreadUpdate implements ThreadUpdate operation.
	//
	// Publish changes to a thread.
	//
	// PATCH /v1/threads/{thread_mark}
	ThreadUpdate(ctx context.Context, req OptThreadMutableProps, params ThreadUpdateParams) (ThreadUpdateRes, error)
	// WebAuthnGetAssertion implements WebAuthnGetAssertion operation.
	//
	// Start the WebAuthn assertion for an existing account.
	//
	// GET /v1/auth/webauthn/assert/{account_handle}
	WebAuthnGetAssertion(ctx context.Context, params WebAuthnGetAssertionParams) (WebAuthnGetAssertionRes, error)
	// WebAuthnMakeAssertion implements WebAuthnMakeAssertion operation.
	//
	// Complete the credential assertion and sign in to an account.
	//
	// POST /v1/auth/webauthn/assert
	WebAuthnMakeAssertion(ctx context.Context, req OptPublicKeyCredential) (WebAuthnMakeAssertionRes, error)
	// WebAuthnMakeCredential implements WebAuthnMakeCredential operation.
	//
	// Complete WebAuthn registration by creating a new credential.
	//
	// POST /v1/auth/webauthn/make
	WebAuthnMakeCredential(ctx context.Context, req OptPublicKeyCredential) (WebAuthnMakeCredentialRes, error)
	// WebAuthnRequestCredential implements WebAuthnRequestCredential operation.
	//
	// Start the WebAuthn registration process by requesting a credential.
	//
	// GET /v1/auth/webauthn/make/{account_handle}
	WebAuthnRequestCredential(ctx context.Context, params WebAuthnRequestCredentialParams) (WebAuthnRequestCredentialRes, error)
	// NewError creates *InternalServerErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *InternalServerErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
