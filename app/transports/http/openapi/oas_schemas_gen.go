// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *InternalServerErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// A description of an error including a human readable message and any
// related metadata from the request and associated services.
// Ref: #/components/schemas/APIError
type APIError struct {
	// The internal error, not intended for end-user display.
	Error string `json:"error"`
	// A human-readable message intended for end-user display.
	Message OptString `json:"message"`
	// A suggested action for the user.
	Suggested OptString `json:"suggested"`
	// Any additional metadata related to the error.
	Metadata OptAPIErrorMetadata `json:"metadata"`
}

// GetError returns the value of Error.
func (s *APIError) GetError() string {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *APIError) GetMessage() OptString {
	return s.Message
}

// GetSuggested returns the value of Suggested.
func (s *APIError) GetSuggested() OptString {
	return s.Suggested
}

// GetMetadata returns the value of Metadata.
func (s *APIError) GetMetadata() OptAPIErrorMetadata {
	return s.Metadata
}

// SetError sets the value of Error.
func (s *APIError) SetError(val string) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *APIError) SetMessage(val OptString) {
	s.Message = val
}

// SetSuggested sets the value of Suggested.
func (s *APIError) SetSuggested(val OptString) {
	s.Suggested = val
}

// SetMetadata sets the value of Metadata.
func (s *APIError) SetMetadata(val OptAPIErrorMetadata) {
	s.Metadata = val
}

// Any additional metadata related to the error.
type APIErrorMetadata map[string]jx.Raw

func (s *APIErrorMetadata) init() APIErrorMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/Account
type Account struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc           *AccountMisc            `json:"misc"`
	Handle         AccountHandle           `json:"handle"`
	Name           AccountName             `json:"name"`
	Bio            AccountBio              `json:"bio"`
	Interests      TagList                 `json:"interests"`
	Links          ProfileExternalLinkList `json:"links"`
	Meta           Metadata                `json:"meta"`
	VerifiedStatus AccountVerifiedStatus   `json:"verified_status"`
	EmailAddresses AccountEmailAddressList `json:"email_addresses"`
	Admin          bool                    `json:"admin"`
}

// GetID returns the value of ID.
func (s *Account) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Account) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Account) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Account) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Account) GetMisc() *AccountMisc {
	return s.Misc
}

// GetHandle returns the value of Handle.
func (s *Account) GetHandle() AccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *Account) GetName() AccountName {
	return s.Name
}

// GetBio returns the value of Bio.
func (s *Account) GetBio() AccountBio {
	return s.Bio
}

// GetInterests returns the value of Interests.
func (s *Account) GetInterests() TagList {
	return s.Interests
}

// GetLinks returns the value of Links.
func (s *Account) GetLinks() ProfileExternalLinkList {
	return s.Links
}

// GetMeta returns the value of Meta.
func (s *Account) GetMeta() Metadata {
	return s.Meta
}

// GetVerifiedStatus returns the value of VerifiedStatus.
func (s *Account) GetVerifiedStatus() AccountVerifiedStatus {
	return s.VerifiedStatus
}

// GetEmailAddresses returns the value of EmailAddresses.
func (s *Account) GetEmailAddresses() AccountEmailAddressList {
	return s.EmailAddresses
}

// GetAdmin returns the value of Admin.
func (s *Account) GetAdmin() bool {
	return s.Admin
}

// SetID sets the value of ID.
func (s *Account) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Account) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Account) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Account) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Account) SetMisc(val *AccountMisc) {
	s.Misc = val
}

// SetHandle sets the value of Handle.
func (s *Account) SetHandle(val AccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *Account) SetName(val AccountName) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *Account) SetBio(val AccountBio) {
	s.Bio = val
}

// SetInterests sets the value of Interests.
func (s *Account) SetInterests(val TagList) {
	s.Interests = val
}

// SetLinks sets the value of Links.
func (s *Account) SetLinks(val ProfileExternalLinkList) {
	s.Links = val
}

// SetMeta sets the value of Meta.
func (s *Account) SetMeta(val Metadata) {
	s.Meta = val
}

// SetVerifiedStatus sets the value of VerifiedStatus.
func (s *Account) SetVerifiedStatus(val AccountVerifiedStatus) {
	s.VerifiedStatus = val
}

// SetEmailAddresses sets the value of EmailAddresses.
func (s *Account) SetEmailAddresses(val AccountEmailAddressList) {
	s.EmailAddresses = val
}

// SetAdmin sets the value of Admin.
func (s *Account) SetAdmin(val bool) {
	s.Admin = val
}

func (*Account) accountGetRes()            {}
func (*Account) accountUpdateRes()         {}
func (*Account) adminAccountBanCreateRes() {}
func (*Account) adminAccountBanRemoveRes() {}

// An authentication method is an active instance of an authentication
// provider associated with an account. Use this to display a user's active
// authentication methods so they can edit or remove it.
// Ref: #/components/schemas/AccountAuthMethod
type AccountAuthMethod struct {
	// The internal unique ID this method has.
	ID string `json:"id"`
	// When this auth method was registered to the account.
	CreatedAt time.Time `json:"created_at"`
	// The personal name given to the method.
	Name string `json:"name"`
	// The external identifier (third party ID or device ID).
	Identifier string       `json:"identifier"`
	Provider   AuthProvider `json:"provider"`
}

// GetID returns the value of ID.
func (s *AccountAuthMethod) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AccountAuthMethod) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetName returns the value of Name.
func (s *AccountAuthMethod) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *AccountAuthMethod) GetIdentifier() string {
	return s.Identifier
}

// GetProvider returns the value of Provider.
func (s *AccountAuthMethod) GetProvider() AuthProvider {
	return s.Provider
}

// SetID sets the value of ID.
func (s *AccountAuthMethod) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AccountAuthMethod) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetName sets the value of Name.
func (s *AccountAuthMethod) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *AccountAuthMethod) SetIdentifier(val string) {
	s.Identifier = val
}

// SetProvider sets the value of Provider.
func (s *AccountAuthMethod) SetProvider(val AuthProvider) {
	s.Provider = val
}

type AccountAuthMethodList []AccountAuthMethod

// Ref: #/components/schemas/AccountAuthMethods
type AccountAuthMethods struct {
	Active    AccountAuthMethodList `json:"active"`
	Available AuthProviderList      `json:"available"`
}

// GetActive returns the value of Active.
func (s *AccountAuthMethods) GetActive() AccountAuthMethodList {
	return s.Active
}

// GetAvailable returns the value of Available.
func (s *AccountAuthMethods) GetAvailable() AuthProviderList {
	return s.Available
}

// SetActive sets the value of Active.
func (s *AccountAuthMethods) SetActive(val AccountAuthMethodList) {
	s.Active = val
}

// SetAvailable sets the value of Available.
func (s *AccountAuthMethods) SetAvailable(val AuthProviderList) {
	s.Available = val
}

func (*AccountAuthMethods) accountAuthMethodDeleteRes() {}
func (*AccountAuthMethods) accountAuthProviderListRes() {}

type AccountBio string

// Ref: #/components/schemas/AccountEmailAddress
type AccountEmailAddress struct {
	EmailAddress string `json:"email_address"`
	// Is the email address verified to be owned by the account?.
	Verified bool `json:"verified"`
	// Is the email used for authenticating to the platform?.
	IsAuth bool `json:"is_auth"`
}

// GetEmailAddress returns the value of EmailAddress.
func (s *AccountEmailAddress) GetEmailAddress() string {
	return s.EmailAddress
}

// GetVerified returns the value of Verified.
func (s *AccountEmailAddress) GetVerified() bool {
	return s.Verified
}

// GetIsAuth returns the value of IsAuth.
func (s *AccountEmailAddress) GetIsAuth() bool {
	return s.IsAuth
}

// SetEmailAddress sets the value of EmailAddress.
func (s *AccountEmailAddress) SetEmailAddress(val string) {
	s.EmailAddress = val
}

// SetVerified sets the value of Verified.
func (s *AccountEmailAddress) SetVerified(val bool) {
	s.Verified = val
}

// SetIsAuth sets the value of IsAuth.
func (s *AccountEmailAddress) SetIsAuth(val bool) {
	s.IsAuth = val
}

type AccountEmailAddressList []AccountEmailAddress

type AccountGetAvatar struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AccountGetAvatar) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AccountGetAvatar) accountGetAvatarRes() {}

type AccountHandle string

// Arbitrary extra data stored with the resource.
type AccountMisc struct{}

// Ref: #/components/schemas/AccountMutableProps
type AccountMutableProps struct {
	Handle    OptAccountHandle        `json:"handle"`
	Name      OptAccountName          `json:"name"`
	Bio       OptAccountBio           `json:"bio"`
	Interests TagListIDs              `json:"interests"`
	Links     ProfileExternalLinkList `json:"links"`
	Meta      OptMetadata             `json:"meta"`
}

// GetHandle returns the value of Handle.
func (s *AccountMutableProps) GetHandle() OptAccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *AccountMutableProps) GetName() OptAccountName {
	return s.Name
}

// GetBio returns the value of Bio.
func (s *AccountMutableProps) GetBio() OptAccountBio {
	return s.Bio
}

// GetInterests returns the value of Interests.
func (s *AccountMutableProps) GetInterests() TagListIDs {
	return s.Interests
}

// GetLinks returns the value of Links.
func (s *AccountMutableProps) GetLinks() ProfileExternalLinkList {
	return s.Links
}

// GetMeta returns the value of Meta.
func (s *AccountMutableProps) GetMeta() OptMetadata {
	return s.Meta
}

// SetHandle sets the value of Handle.
func (s *AccountMutableProps) SetHandle(val OptAccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *AccountMutableProps) SetName(val OptAccountName) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *AccountMutableProps) SetBio(val OptAccountBio) {
	s.Bio = val
}

// SetInterests sets the value of Interests.
func (s *AccountMutableProps) SetInterests(val TagListIDs) {
	s.Interests = val
}

// SetLinks sets the value of Links.
func (s *AccountMutableProps) SetLinks(val ProfileExternalLinkList) {
	s.Links = val
}

// SetMeta sets the value of Meta.
func (s *AccountMutableProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

type AccountName string

// AccountSetAvatarOK is response for AccountSetAvatar operation.
type AccountSetAvatarOK struct{}

func (*AccountSetAvatarOK) accountSetAvatarRes() {}

type AccountSetAvatarReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AccountSetAvatarReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// Ref: #/components/schemas/AccountVerifiedStatus
type AccountVerifiedStatus string

const (
	AccountVerifiedStatusNone          AccountVerifiedStatus = "none"
	AccountVerifiedStatusVerifiedEmail AccountVerifiedStatus = "verified_email"
)

// AllValues returns all AccountVerifiedStatus values.
func (AccountVerifiedStatus) AllValues() []AccountVerifiedStatus {
	return []AccountVerifiedStatus{
		AccountVerifiedStatusNone,
		AccountVerifiedStatusVerifiedEmail,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountVerifiedStatus) MarshalText() ([]byte, error) {
	switch s {
	case AccountVerifiedStatusNone:
		return []byte(s), nil
	case AccountVerifiedStatusVerifiedEmail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountVerifiedStatus) UnmarshalText(data []byte) error {
	switch AccountVerifiedStatus(data) {
	case AccountVerifiedStatusNone:
		*s = AccountVerifiedStatusNone
		return nil
	case AccountVerifiedStatusVerifiedEmail:
		*s = AccountVerifiedStatusVerifiedEmail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AdminSettingsMutableProps
type AdminSettingsMutableProps struct {
	Title        OptString `json:"title"`
	Description  OptString `json:"description"`
	AccentColour OptString `json:"accent_colour"`
}

// GetTitle returns the value of Title.
func (s *AdminSettingsMutableProps) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *AdminSettingsMutableProps) GetDescription() OptString {
	return s.Description
}

// GetAccentColour returns the value of AccentColour.
func (s *AdminSettingsMutableProps) GetAccentColour() OptString {
	return s.AccentColour
}

// SetTitle sets the value of Title.
func (s *AdminSettingsMutableProps) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *AdminSettingsMutableProps) SetDescription(val OptString) {
	s.Description = val
}

// SetAccentColour sets the value of AccentColour.
func (s *AdminSettingsMutableProps) SetAccentColour(val OptString) {
	s.AccentColour = val
}

// Storyden installation and administration settings.
// Ref: #/components/schemas/AdminSettingsProps
type AdminSettingsProps struct {
	Title        string `json:"title"`
	Description  string `json:"description"`
	AccentColour string `json:"accent_colour"`
}

// GetTitle returns the value of Title.
func (s *AdminSettingsProps) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *AdminSettingsProps) GetDescription() string {
	return s.Description
}

// GetAccentColour returns the value of AccentColour.
func (s *AdminSettingsProps) GetAccentColour() string {
	return s.AccentColour
}

// SetTitle sets the value of Title.
func (s *AdminSettingsProps) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *AdminSettingsProps) SetDescription(val string) {
	s.Description = val
}

// SetAccentColour sets the value of AccentColour.
func (s *AdminSettingsProps) SetAccentColour(val string) {
	s.AccentColour = val
}

func (*AdminSettingsProps) adminSettingsUpdateRes() {}

// Ref: #/components/schemas/Asset
type Asset struct {
	ID       Identifier `json:"id"`
	Filename string     `json:"filename"`
	URL      string     `json:"url"`
	MimeType string     `json:"mime_type"`
	Width    float64    `json:"width"`
	Height   float64    `json:"height"`
}

// GetID returns the value of ID.
func (s *Asset) GetID() Identifier {
	return s.ID
}

// GetFilename returns the value of Filename.
func (s *Asset) GetFilename() string {
	return s.Filename
}

// GetURL returns the value of URL.
func (s *Asset) GetURL() string {
	return s.URL
}

// GetMimeType returns the value of MimeType.
func (s *Asset) GetMimeType() string {
	return s.MimeType
}

// GetWidth returns the value of Width.
func (s *Asset) GetWidth() float64 {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *Asset) GetHeight() float64 {
	return s.Height
}

// SetID sets the value of ID.
func (s *Asset) SetID(val Identifier) {
	s.ID = val
}

// SetFilename sets the value of Filename.
func (s *Asset) SetFilename(val string) {
	s.Filename = val
}

// SetURL sets the value of URL.
func (s *Asset) SetURL(val string) {
	s.URL = val
}

// SetMimeType sets the value of MimeType.
func (s *Asset) SetMimeType(val string) {
	s.MimeType = val
}

// SetWidth sets the value of Width.
func (s *Asset) SetWidth(val float64) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Asset) SetHeight(val float64) {
	s.Height = val
}

func (*Asset) assetUploadRes() {}

type AssetGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AssetGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// AssetGetOKHeaders wraps AssetGetOK with response headers.
type AssetGetOKHeaders struct {
	ContentType string
	Response    AssetGetOK
}

// GetContentType returns the value of ContentType.
func (s *AssetGetOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *AssetGetOKHeaders) GetResponse() AssetGetOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *AssetGetOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *AssetGetOKHeaders) SetResponse(val AssetGetOK) {
	s.Response = val
}

func (*AssetGetOKHeaders) assetGetRes() {}

type AssetIDs []Identifier

type AssetList []Asset

type AssetSourceList []AssetSourceURL

type AssetSourceURL string

type AssetUploadReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AssetUploadReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// Https://www.w3.org/TR/webauthn-2/#enum-attestation-convey.
// Ref: #/components/schemas/AttestationConveyancePreference
type AttestationConveyancePreference string

const (
	AttestationConveyancePreferenceDirect     AttestationConveyancePreference = "direct"
	AttestationConveyancePreferenceEnterprise AttestationConveyancePreference = "enterprise"
	AttestationConveyancePreferenceIndirect   AttestationConveyancePreference = "indirect"
	AttestationConveyancePreferenceNone       AttestationConveyancePreference = "none"
)

// AllValues returns all AttestationConveyancePreference values.
func (AttestationConveyancePreference) AllValues() []AttestationConveyancePreference {
	return []AttestationConveyancePreference{
		AttestationConveyancePreferenceDirect,
		AttestationConveyancePreferenceEnterprise,
		AttestationConveyancePreferenceIndirect,
		AttestationConveyancePreferenceNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AttestationConveyancePreference) MarshalText() ([]byte, error) {
	switch s {
	case AttestationConveyancePreferenceDirect:
		return []byte(s), nil
	case AttestationConveyancePreferenceEnterprise:
		return []byte(s), nil
	case AttestationConveyancePreferenceIndirect:
		return []byte(s), nil
	case AttestationConveyancePreferenceNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AttestationConveyancePreference) UnmarshalText(data []byte) error {
	switch AttestationConveyancePreference(data) {
	case AttestationConveyancePreferenceDirect:
		*s = AttestationConveyancePreferenceDirect
		return nil
	case AttestationConveyancePreferenceEnterprise:
		*s = AttestationConveyancePreferenceEnterprise
		return nil
	case AttestationConveyancePreferenceIndirect:
		*s = AttestationConveyancePreferenceIndirect
		return nil
	case AttestationConveyancePreferenceNone:
		*s = AttestationConveyancePreferenceNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AuthEmailInitialProps
type AuthEmailInitialProps struct {
	Email  string           `json:"email"`
	Handle OptAccountHandle `json:"handle"`
}

// GetEmail returns the value of Email.
func (s *AuthEmailInitialProps) GetEmail() string {
	return s.Email
}

// GetHandle returns the value of Handle.
func (s *AuthEmailInitialProps) GetHandle() OptAccountHandle {
	return s.Handle
}

// SetEmail sets the value of Email.
func (s *AuthEmailInitialProps) SetEmail(val string) {
	s.Email = val
}

// SetHandle sets the value of Handle.
func (s *AuthEmailInitialProps) SetHandle(val OptAccountHandle) {
	s.Handle = val
}

// Ref: #/components/schemas/AuthEmailPasswordInitialProps
type AuthEmailPasswordInitialProps struct {
	Email    string           `json:"email"`
	Password string           `json:"password"`
	Handle   OptAccountHandle `json:"handle"`
}

// GetEmail returns the value of Email.
func (s *AuthEmailPasswordInitialProps) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *AuthEmailPasswordInitialProps) GetPassword() string {
	return s.Password
}

// GetHandle returns the value of Handle.
func (s *AuthEmailPasswordInitialProps) GetHandle() OptAccountHandle {
	return s.Handle
}

// SetEmail sets the value of Email.
func (s *AuthEmailPasswordInitialProps) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *AuthEmailPasswordInitialProps) SetPassword(val string) {
	s.Password = val
}

// SetHandle sets the value of Handle.
func (s *AuthEmailPasswordInitialProps) SetHandle(val OptAccountHandle) {
	s.Handle = val
}

// AuthEmailSignupUnprocessableEntity is response for AuthEmailSignup operation.
type AuthEmailSignupUnprocessableEntity struct{}

func (*AuthEmailSignupUnprocessableEntity) authEmailSignupRes() {}

// Ref: #/components/schemas/AuthEmailVerifyProps
type AuthEmailVerifyProps struct {
	// The email address to be verified, only necessary for when submitting
	// a verification without a session cookie present.
	Email string `json:"email"`
	Code  string `json:"code"`
}

// GetEmail returns the value of Email.
func (s *AuthEmailVerifyProps) GetEmail() string {
	return s.Email
}

// GetCode returns the value of Code.
func (s *AuthEmailVerifyProps) GetCode() string {
	return s.Code
}

// SetEmail sets the value of Email.
func (s *AuthEmailVerifyProps) SetEmail(val string) {
	s.Email = val
}

// SetCode sets the value of Code.
func (s *AuthEmailVerifyProps) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/AuthPair
type AuthPair struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// GetIdentifier returns the value of Identifier.
func (s *AuthPair) GetIdentifier() string {
	return s.Identifier
}

// GetToken returns the value of Token.
func (s *AuthPair) GetToken() string {
	return s.Token
}

// SetIdentifier sets the value of Identifier.
func (s *AuthPair) SetIdentifier(val string) {
	s.Identifier = val
}

// SetToken sets the value of Token.
func (s *AuthPair) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/AuthPasswordInitialProps
type AuthPasswordInitialProps struct {
	Password string `json:"password"`
}

// GetPassword returns the value of Password.
func (s *AuthPasswordInitialProps) GetPassword() string {
	return s.Password
}

// SetPassword sets the value of Password.
func (s *AuthPasswordInitialProps) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/AuthPasswordMutableProps
type AuthPasswordMutableProps struct {
	Old string `json:"old"`
	New string `json:"new"`
}

// GetOld returns the value of Old.
func (s *AuthPasswordMutableProps) GetOld() string {
	return s.Old
}

// GetNew returns the value of New.
func (s *AuthPasswordMutableProps) GetNew() string {
	return s.New
}

// SetOld sets the value of Old.
func (s *AuthPasswordMutableProps) SetOld(val string) {
	s.Old = val
}

// SetNew sets the value of New.
func (s *AuthPasswordMutableProps) SetNew(val string) {
	s.New = val
}

// Ref: #/components/schemas/AuthProvider
type AuthProvider struct {
	// The slug name of the provider.
	Provider string `json:"provider"`
	// The human-readable name of the provider.
	Name string `json:"name"`
	// The hyperlink to render for the user.
	Link string `json:"link"`
}

// GetProvider returns the value of Provider.
func (s *AuthProvider) GetProvider() string {
	return s.Provider
}

// GetName returns the value of Name.
func (s *AuthProvider) GetName() string {
	return s.Name
}

// GetLink returns the value of Link.
func (s *AuthProvider) GetLink() string {
	return s.Link
}

// SetProvider sets the value of Provider.
func (s *AuthProvider) SetProvider(val string) {
	s.Provider = val
}

// SetName sets the value of Name.
func (s *AuthProvider) SetName(val string) {
	s.Name = val
}

// SetLink sets the value of Link.
func (s *AuthProvider) SetLink(val string) {
	s.Link = val
}

type AuthProviderList []AuthProvider

type AuthProviderListOK struct {
	Providers AuthProviderList `json:"providers"`
}

// GetProviders returns the value of Providers.
func (s *AuthProviderListOK) GetProviders() AuthProviderList {
	return s.Providers
}

// SetProviders sets the value of Providers.
func (s *AuthProviderListOK) SetProviders(val AuthProviderList) {
	s.Providers = val
}

func (*AuthProviderListOK) authProviderListRes() {}

// AuthProviderLogoutOK is response for AuthProviderLogout operation.
type AuthProviderLogoutOK struct {
	SetCookie OptString
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthProviderLogoutOK) GetSetCookie() OptString {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthProviderLogoutOK) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*AuthProviderLogoutOK) authProviderLogoutRes() {}

// Ref: #/components/schemas/AuthSuccess
type AuthSuccess struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *AuthSuccess) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *AuthSuccess) SetID(val string) {
	s.ID = val
}

// AuthSuccessOKHeaders wraps AuthSuccess with response headers.
type AuthSuccessOKHeaders struct {
	SetCookie OptString
	Response  AuthSuccess
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthSuccessOKHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *AuthSuccessOKHeaders) GetResponse() AuthSuccess {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthSuccessOKHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *AuthSuccessOKHeaders) SetResponse(val AuthSuccess) {
	s.Response = val
}

func (*AuthSuccessOKHeaders) authEmailPasswordSigninRes() {}
func (*AuthSuccessOKHeaders) authEmailPasswordSignupRes() {}
func (*AuthSuccessOKHeaders) authEmailSigninRes()         {}
func (*AuthSuccessOKHeaders) authEmailSignupRes()         {}
func (*AuthSuccessOKHeaders) authEmailVerifyRes()         {}
func (*AuthSuccessOKHeaders) authPasswordCreateRes()      {}
func (*AuthSuccessOKHeaders) authPasswordSigninRes()      {}
func (*AuthSuccessOKHeaders) authPasswordSignupRes()      {}
func (*AuthSuccessOKHeaders) authPasswordUpdateRes()      {}
func (*AuthSuccessOKHeaders) oAuthProviderCallbackRes()   {}
func (*AuthSuccessOKHeaders) phoneRequestCodeRes()        {}
func (*AuthSuccessOKHeaders) phoneSubmitCodeRes()         {}
func (*AuthSuccessOKHeaders) webAuthnMakeAssertionRes()   {}
func (*AuthSuccessOKHeaders) webAuthnMakeCredentialRes()  {}

// Https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs.
// Ref: #/components/schemas/AuthenticationExtensionsClientInputs
type AuthenticationExtensionsClientInputs map[string]jx.Raw

func (s *AuthenticationExtensionsClientInputs) init() AuthenticationExtensionsClientInputs {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment.
// Ref: #/components/schemas/AuthenticatorAttachment
type AuthenticatorAttachment string

const (
	AuthenticatorAttachmentPlatform      AuthenticatorAttachment = "platform"
	AuthenticatorAttachmentCrossPlatform AuthenticatorAttachment = "cross-platform"
)

// AllValues returns all AuthenticatorAttachment values.
func (AuthenticatorAttachment) AllValues() []AuthenticatorAttachment {
	return []AuthenticatorAttachment{
		AuthenticatorAttachmentPlatform,
		AuthenticatorAttachmentCrossPlatform,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthenticatorAttachment) MarshalText() ([]byte, error) {
	switch s {
	case AuthenticatorAttachmentPlatform:
		return []byte(s), nil
	case AuthenticatorAttachmentCrossPlatform:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthenticatorAttachment) UnmarshalText(data []byte) error {
	switch AuthenticatorAttachment(data) {
	case AuthenticatorAttachmentPlatform:
		*s = AuthenticatorAttachmentPlatform
		return nil
	case AuthenticatorAttachmentCrossPlatform:
		*s = AuthenticatorAttachmentCrossPlatform
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#authenticatorresponse.
// Ref: #/components/schemas/AuthenticatorResponse
type AuthenticatorResponse struct {
	ClientDataJSON    string    `json:"clientDataJSON"`
	AttestationObject OptString `json:"attestationObject"`
	Transports        []string  `json:"transports"`
	AuthenticatorData OptString `json:"authenticatorData"`
	Signature         OptString `json:"signature"`
	UserHandle        OptString `json:"userHandle"`
}

// GetClientDataJSON returns the value of ClientDataJSON.
func (s *AuthenticatorResponse) GetClientDataJSON() string {
	return s.ClientDataJSON
}

// GetAttestationObject returns the value of AttestationObject.
func (s *AuthenticatorResponse) GetAttestationObject() OptString {
	return s.AttestationObject
}

// GetTransports returns the value of Transports.
func (s *AuthenticatorResponse) GetTransports() []string {
	return s.Transports
}

// GetAuthenticatorData returns the value of AuthenticatorData.
func (s *AuthenticatorResponse) GetAuthenticatorData() OptString {
	return s.AuthenticatorData
}

// GetSignature returns the value of Signature.
func (s *AuthenticatorResponse) GetSignature() OptString {
	return s.Signature
}

// GetUserHandle returns the value of UserHandle.
func (s *AuthenticatorResponse) GetUserHandle() OptString {
	return s.UserHandle
}

// SetClientDataJSON sets the value of ClientDataJSON.
func (s *AuthenticatorResponse) SetClientDataJSON(val string) {
	s.ClientDataJSON = val
}

// SetAttestationObject sets the value of AttestationObject.
func (s *AuthenticatorResponse) SetAttestationObject(val OptString) {
	s.AttestationObject = val
}

// SetTransports sets the value of Transports.
func (s *AuthenticatorResponse) SetTransports(val []string) {
	s.Transports = val
}

// SetAuthenticatorData sets the value of AuthenticatorData.
func (s *AuthenticatorResponse) SetAuthenticatorData(val OptString) {
	s.AuthenticatorData = val
}

// SetSignature sets the value of Signature.
func (s *AuthenticatorResponse) SetSignature(val OptString) {
	s.Signature = val
}

// SetUserHandle sets the value of UserHandle.
func (s *AuthenticatorResponse) SetUserHandle(val OptString) {
	s.UserHandle = val
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria.
// Ref: #/components/schemas/AuthenticatorSelectionCriteria
type AuthenticatorSelectionCriteria struct {
	AuthenticatorAttachment AuthenticatorAttachment        `json:"authenticatorAttachment"`
	ResidentKey             ResidentKeyRequirement         `json:"residentKey"`
	RequireResidentKey      OptBool                        `json:"requireResidentKey"`
	UserVerification        OptUserVerificationRequirement `json:"userVerification"`
}

// GetAuthenticatorAttachment returns the value of AuthenticatorAttachment.
func (s *AuthenticatorSelectionCriteria) GetAuthenticatorAttachment() AuthenticatorAttachment {
	return s.AuthenticatorAttachment
}

// GetResidentKey returns the value of ResidentKey.
func (s *AuthenticatorSelectionCriteria) GetResidentKey() ResidentKeyRequirement {
	return s.ResidentKey
}

// GetRequireResidentKey returns the value of RequireResidentKey.
func (s *AuthenticatorSelectionCriteria) GetRequireResidentKey() OptBool {
	return s.RequireResidentKey
}

// GetUserVerification returns the value of UserVerification.
func (s *AuthenticatorSelectionCriteria) GetUserVerification() OptUserVerificationRequirement {
	return s.UserVerification
}

// SetAuthenticatorAttachment sets the value of AuthenticatorAttachment.
func (s *AuthenticatorSelectionCriteria) SetAuthenticatorAttachment(val AuthenticatorAttachment) {
	s.AuthenticatorAttachment = val
}

// SetResidentKey sets the value of ResidentKey.
func (s *AuthenticatorSelectionCriteria) SetResidentKey(val ResidentKeyRequirement) {
	s.ResidentKey = val
}

// SetRequireResidentKey sets the value of RequireResidentKey.
func (s *AuthenticatorSelectionCriteria) SetRequireResidentKey(val OptBool) {
	s.RequireResidentKey = val
}

// SetUserVerification sets the value of UserVerification.
func (s *AuthenticatorSelectionCriteria) SetUserVerification(val OptUserVerificationRequirement) {
	s.UserVerification = val
}

// Ref: #/components/responses/BadRequest
type BadRequest struct{}

func (*BadRequest) accountAuthMethodDeleteRes()   {}
func (*BadRequest) accountAuthProviderListRes()   {}
func (*BadRequest) adminSettingsUpdateRes()       {}
func (*BadRequest) authEmailPasswordSignupRes()   {}
func (*BadRequest) authEmailSignupRes()           {}
func (*BadRequest) authPasswordSignupRes()        {}
func (*BadRequest) authProviderListRes()          {}
func (*BadRequest) authProviderLogoutRes()        {}
func (*BadRequest) categoryCreateRes()            {}
func (*BadRequest) categoryUpdateRes()            {}
func (*BadRequest) phoneRequestCodeRes()          {}
func (*BadRequest) phoneSubmitCodeRes()           {}
func (*BadRequest) webAuthnMakeCredentialRes()    {}
func (*BadRequest) webAuthnRequestCredentialRes() {}

type Browser struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Browser) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Browser) SetAPIKey(val string) {
	s.APIKey = val
}

// Merged schema.
// Ref: #/components/schemas/Category
type Category struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CategoryMisc `json:"misc"`
	Name        CategoryName  `json:"name"`
	Slug        CategorySlug  `json:"slug"`
	Description string        `json:"description"`
	Colour      string        `json:"colour"`
	Sort        int           `json:"sort"`
	Admin       bool          `json:"admin"`
	Meta        OptMetadata   `json:"meta"`
	PostCount   int           `json:"postCount"`
}

// GetID returns the value of ID.
func (s *Category) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Category) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Category) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Category) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Category) GetMisc() *CategoryMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *Category) GetName() CategoryName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *Category) GetSlug() CategorySlug {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *Category) GetDescription() string {
	return s.Description
}

// GetColour returns the value of Colour.
func (s *Category) GetColour() string {
	return s.Colour
}

// GetSort returns the value of Sort.
func (s *Category) GetSort() int {
	return s.Sort
}

// GetAdmin returns the value of Admin.
func (s *Category) GetAdmin() bool {
	return s.Admin
}

// GetMeta returns the value of Meta.
func (s *Category) GetMeta() OptMetadata {
	return s.Meta
}

// GetPostCount returns the value of PostCount.
func (s *Category) GetPostCount() int {
	return s.PostCount
}

// SetID sets the value of ID.
func (s *Category) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Category) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Category) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Category) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Category) SetMisc(val *CategoryMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *Category) SetName(val CategoryName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *Category) SetSlug(val CategorySlug) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *Category) SetDescription(val string) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *Category) SetColour(val string) {
	s.Colour = val
}

// SetSort sets the value of Sort.
func (s *Category) SetSort(val int) {
	s.Sort = val
}

// SetAdmin sets the value of Admin.
func (s *Category) SetAdmin(val bool) {
	s.Admin = val
}

// SetMeta sets the value of Meta.
func (s *Category) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetPostCount sets the value of PostCount.
func (s *Category) SetPostCount(val int) {
	s.PostCount = val
}

func (*Category) categoryCreateRes() {}
func (*Category) categoryUpdateRes() {}

type CategoryIdentifierList []Identifier

// Ref: #/components/schemas/CategoryInitialProps
type CategoryInitialProps struct {
	Name        CategoryName    `json:"name"`
	Slug        OptCategorySlug `json:"slug"`
	Description string          `json:"description"`
	Colour      string          `json:"colour"`
	Admin       bool            `json:"admin"`
	Meta        OptMetadata     `json:"meta"`
}

// GetName returns the value of Name.
func (s *CategoryInitialProps) GetName() CategoryName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *CategoryInitialProps) GetSlug() OptCategorySlug {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *CategoryInitialProps) GetDescription() string {
	return s.Description
}

// GetColour returns the value of Colour.
func (s *CategoryInitialProps) GetColour() string {
	return s.Colour
}

// GetAdmin returns the value of Admin.
func (s *CategoryInitialProps) GetAdmin() bool {
	return s.Admin
}

// GetMeta returns the value of Meta.
func (s *CategoryInitialProps) GetMeta() OptMetadata {
	return s.Meta
}

// SetName sets the value of Name.
func (s *CategoryInitialProps) SetName(val CategoryName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *CategoryInitialProps) SetSlug(val OptCategorySlug) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *CategoryInitialProps) SetDescription(val string) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *CategoryInitialProps) SetColour(val string) {
	s.Colour = val
}

// SetAdmin sets the value of Admin.
func (s *CategoryInitialProps) SetAdmin(val bool) {
	s.Admin = val
}

// SetMeta sets the value of Meta.
func (s *CategoryInitialProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// Ref: #/components/schemas/CategoryList
type CategoryList struct {
	Categories []Category `json:"categories"`
}

// GetCategories returns the value of Categories.
func (s *CategoryList) GetCategories() []Category {
	return s.Categories
}

// SetCategories sets the value of Categories.
func (s *CategoryList) SetCategories(val []Category) {
	s.Categories = val
}

// Arbitrary extra data stored with the resource.
type CategoryMisc struct{}

// Ref: #/components/schemas/CategoryMutableProps
type CategoryMutableProps struct {
	Name        OptCategoryName `json:"name"`
	Slug        OptCategorySlug `json:"slug"`
	Description OptString       `json:"description"`
	Colour      OptString       `json:"colour"`
	Admin       OptBool         `json:"admin"`
	Meta        OptMetadata     `json:"meta"`
}

// GetName returns the value of Name.
func (s *CategoryMutableProps) GetName() OptCategoryName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *CategoryMutableProps) GetSlug() OptCategorySlug {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *CategoryMutableProps) GetDescription() OptString {
	return s.Description
}

// GetColour returns the value of Colour.
func (s *CategoryMutableProps) GetColour() OptString {
	return s.Colour
}

// GetAdmin returns the value of Admin.
func (s *CategoryMutableProps) GetAdmin() OptBool {
	return s.Admin
}

// GetMeta returns the value of Meta.
func (s *CategoryMutableProps) GetMeta() OptMetadata {
	return s.Meta
}

// SetName sets the value of Name.
func (s *CategoryMutableProps) SetName(val OptCategoryName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *CategoryMutableProps) SetSlug(val OptCategorySlug) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *CategoryMutableProps) SetDescription(val OptString) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *CategoryMutableProps) SetColour(val OptString) {
	s.Colour = val
}

// SetAdmin sets the value of Admin.
func (s *CategoryMutableProps) SetAdmin(val OptBool) {
	s.Admin = val
}

// SetMeta sets the value of Meta.
func (s *CategoryMutableProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

type CategoryName string

// Merged schema.
// Ref: #/components/schemas/CategoryReference
type CategoryReference struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CategoryReferenceMisc `json:"misc"`
	Name        CategoryName           `json:"name"`
	Slug        CategorySlug           `json:"slug"`
	Description string                 `json:"description"`
	Colour      string                 `json:"colour"`
	Sort        int                    `json:"sort"`
	Admin       bool                   `json:"admin"`
	Meta        OptMetadata            `json:"meta"`
}

// GetID returns the value of ID.
func (s *CategoryReference) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CategoryReference) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CategoryReference) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *CategoryReference) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *CategoryReference) GetMisc() *CategoryReferenceMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *CategoryReference) GetName() CategoryName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *CategoryReference) GetSlug() CategorySlug {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *CategoryReference) GetDescription() string {
	return s.Description
}

// GetColour returns the value of Colour.
func (s *CategoryReference) GetColour() string {
	return s.Colour
}

// GetSort returns the value of Sort.
func (s *CategoryReference) GetSort() int {
	return s.Sort
}

// GetAdmin returns the value of Admin.
func (s *CategoryReference) GetAdmin() bool {
	return s.Admin
}

// GetMeta returns the value of Meta.
func (s *CategoryReference) GetMeta() OptMetadata {
	return s.Meta
}

// SetID sets the value of ID.
func (s *CategoryReference) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CategoryReference) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CategoryReference) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *CategoryReference) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *CategoryReference) SetMisc(val *CategoryReferenceMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *CategoryReference) SetName(val CategoryName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *CategoryReference) SetSlug(val CategorySlug) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *CategoryReference) SetDescription(val string) {
	s.Description = val
}

// SetColour sets the value of Colour.
func (s *CategoryReference) SetColour(val string) {
	s.Colour = val
}

// SetSort sets the value of Sort.
func (s *CategoryReference) SetSort(val int) {
	s.Sort = val
}

// SetAdmin sets the value of Admin.
func (s *CategoryReference) SetAdmin(val bool) {
	s.Admin = val
}

// SetMeta sets the value of Meta.
func (s *CategoryReference) SetMeta(val OptMetadata) {
	s.Meta = val
}

// Arbitrary extra data stored with the resource.
type CategoryReferenceMisc struct{}

type CategorySlug string

type CategorySlugList []CategorySlug

// Merged schema.
// Ref: #/components/schemas/Collection
type Collection struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CollectionMisc  `json:"misc"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Owner       ProfileReference `json:"owner"`
}

// GetID returns the value of ID.
func (s *Collection) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Collection) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Collection) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Collection) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Collection) GetMisc() *CollectionMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *Collection) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Collection) GetDescription() string {
	return s.Description
}

// GetOwner returns the value of Owner.
func (s *Collection) GetOwner() ProfileReference {
	return s.Owner
}

// SetID sets the value of ID.
func (s *Collection) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Collection) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Collection) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Collection) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Collection) SetMisc(val *CollectionMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *Collection) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Collection) SetDescription(val string) {
	s.Description = val
}

// SetOwner sets the value of Owner.
func (s *Collection) SetOwner(val ProfileReference) {
	s.Owner = val
}

func (*Collection) collectionCreateRes() {}
func (*Collection) collectionUpdateRes() {}

// CollectionDeleteOK is response for CollectionDelete operation.
type CollectionDeleteOK struct{}

func (*CollectionDeleteOK) collectionDeleteRes() {}

// Ref: #/components/schemas/CollectionInitialProps
type CollectionInitialProps struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *CollectionInitialProps) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CollectionInitialProps) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *CollectionInitialProps) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CollectionInitialProps) SetDescription(val string) {
	s.Description = val
}

// Merged schema.
// Ref: #/components/schemas/CollectionItem
type CollectionItem struct {
	// Merged property.
	ID string `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CollectionItemMisc `json:"misc"`
	Kind        DatagraphNodeKind   `json:"kind"`
	Name        string              `json:"name"`
	Slug        string              `json:"slug"`
	Description OptString           `json:"description"`
	Meta        OptMetadata         `json:"meta"`
	Owner       ProfileReference    `json:"owner"`
	// The time that the item was added to the collection.
	AddedAt        time.Time                    `json:"added_at"`
	MembershipType CollectionItemMembershipType `json:"membership_type"`
	RelevanceScore OptRelevanceScore            `json:"relevance_score"`
}

// GetID returns the value of ID.
func (s *CollectionItem) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CollectionItem) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CollectionItem) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *CollectionItem) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *CollectionItem) GetMisc() *CollectionItemMisc {
	return s.Misc
}

// GetKind returns the value of Kind.
func (s *CollectionItem) GetKind() DatagraphNodeKind {
	return s.Kind
}

// GetName returns the value of Name.
func (s *CollectionItem) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *CollectionItem) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *CollectionItem) GetDescription() OptString {
	return s.Description
}

// GetMeta returns the value of Meta.
func (s *CollectionItem) GetMeta() OptMetadata {
	return s.Meta
}

// GetOwner returns the value of Owner.
func (s *CollectionItem) GetOwner() ProfileReference {
	return s.Owner
}

// GetAddedAt returns the value of AddedAt.
func (s *CollectionItem) GetAddedAt() time.Time {
	return s.AddedAt
}

// GetMembershipType returns the value of MembershipType.
func (s *CollectionItem) GetMembershipType() CollectionItemMembershipType {
	return s.MembershipType
}

// GetRelevanceScore returns the value of RelevanceScore.
func (s *CollectionItem) GetRelevanceScore() OptRelevanceScore {
	return s.RelevanceScore
}

// SetID sets the value of ID.
func (s *CollectionItem) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CollectionItem) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CollectionItem) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *CollectionItem) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *CollectionItem) SetMisc(val *CollectionItemMisc) {
	s.Misc = val
}

// SetKind sets the value of Kind.
func (s *CollectionItem) SetKind(val DatagraphNodeKind) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *CollectionItem) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *CollectionItem) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *CollectionItem) SetDescription(val OptString) {
	s.Description = val
}

// SetMeta sets the value of Meta.
func (s *CollectionItem) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetOwner sets the value of Owner.
func (s *CollectionItem) SetOwner(val ProfileReference) {
	s.Owner = val
}

// SetAddedAt sets the value of AddedAt.
func (s *CollectionItem) SetAddedAt(val time.Time) {
	s.AddedAt = val
}

// SetMembershipType sets the value of MembershipType.
func (s *CollectionItem) SetMembershipType(val CollectionItemMembershipType) {
	s.MembershipType = val
}

// SetRelevanceScore sets the value of RelevanceScore.
func (s *CollectionItem) SetRelevanceScore(val OptRelevanceScore) {
	s.RelevanceScore = val
}

type CollectionItemList []CollectionItem

// Ref: #/components/schemas/CollectionItemMembershipType
type CollectionItemMembershipType string

const (
	CollectionItemMembershipTypeNormal             CollectionItemMembershipType = "normal"
	CollectionItemMembershipTypeSubmissionReview   CollectionItemMembershipType = "submission_review"
	CollectionItemMembershipTypeSubmissionAccepted CollectionItemMembershipType = "submission_accepted"
)

// AllValues returns all CollectionItemMembershipType values.
func (CollectionItemMembershipType) AllValues() []CollectionItemMembershipType {
	return []CollectionItemMembershipType{
		CollectionItemMembershipTypeNormal,
		CollectionItemMembershipTypeSubmissionReview,
		CollectionItemMembershipTypeSubmissionAccepted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CollectionItemMembershipType) MarshalText() ([]byte, error) {
	switch s {
	case CollectionItemMembershipTypeNormal:
		return []byte(s), nil
	case CollectionItemMembershipTypeSubmissionReview:
		return []byte(s), nil
	case CollectionItemMembershipTypeSubmissionAccepted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CollectionItemMembershipType) UnmarshalText(data []byte) error {
	switch CollectionItemMembershipType(data) {
	case CollectionItemMembershipTypeNormal:
		*s = CollectionItemMembershipTypeNormal
		return nil
	case CollectionItemMembershipTypeSubmissionReview:
		*s = CollectionItemMembershipTypeSubmissionReview
		return nil
	case CollectionItemMembershipTypeSubmissionAccepted:
		*s = CollectionItemMembershipTypeSubmissionAccepted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Arbitrary extra data stored with the resource.
type CollectionItemMisc struct{}

type CollectionList []Collection

type CollectionListOK struct {
	Collections CollectionList `json:"collections"`
}

// GetCollections returns the value of Collections.
func (s *CollectionListOK) GetCollections() CollectionList {
	return s.Collections
}

// SetCollections sets the value of Collections.
func (s *CollectionListOK) SetCollections(val CollectionList) {
	s.Collections = val
}

func (*CollectionListOK) collectionListRes() {}

// Arbitrary extra data stored with the resource.
type CollectionMisc struct{}

// Ref: #/components/schemas/CollectionMutableProps
type CollectionMutableProps struct {
	Name        OptString `json:"name"`
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *CollectionMutableProps) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CollectionMutableProps) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *CollectionMutableProps) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CollectionMutableProps) SetDescription(val OptString) {
	s.Description = val
}

// Merged schema.
// Ref: #/components/schemas/CollectionWithItems
type CollectionWithItems struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc        *CollectionWithItemsMisc `json:"misc"`
	Name        string                   `json:"name"`
	Description string                   `json:"description"`
	Owner       ProfileReference         `json:"owner"`
	Items       CollectionItemList       `json:"items"`
}

// GetID returns the value of ID.
func (s *CollectionWithItems) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CollectionWithItems) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CollectionWithItems) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *CollectionWithItems) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *CollectionWithItems) GetMisc() *CollectionWithItemsMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *CollectionWithItems) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CollectionWithItems) GetDescription() string {
	return s.Description
}

// GetOwner returns the value of Owner.
func (s *CollectionWithItems) GetOwner() ProfileReference {
	return s.Owner
}

// GetItems returns the value of Items.
func (s *CollectionWithItems) GetItems() CollectionItemList {
	return s.Items
}

// SetID sets the value of ID.
func (s *CollectionWithItems) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CollectionWithItems) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CollectionWithItems) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *CollectionWithItems) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *CollectionWithItems) SetMisc(val *CollectionWithItemsMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *CollectionWithItems) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CollectionWithItems) SetDescription(val string) {
	s.Description = val
}

// SetOwner sets the value of Owner.
func (s *CollectionWithItems) SetOwner(val ProfileReference) {
	s.Owner = val
}

// SetItems sets the value of Items.
func (s *CollectionWithItems) SetItems(val CollectionItemList) {
	s.Items = val
}

func (*CollectionWithItems) collectionAddNodeRes()    {}
func (*CollectionWithItems) collectionAddPostRes()    {}
func (*CollectionWithItems) collectionGetRes()        {}
func (*CollectionWithItems) collectionRemoveNodeRes() {}
func (*CollectionWithItems) collectionRemovePostRes() {}

// Arbitrary extra data stored with the resource.
type CollectionWithItemsMisc struct{}

// Ref: #/components/schemas/ContentFillRule
type ContentFillRule string

const (
	ContentFillRuleReplace ContentFillRule = "replace"
)

// AllValues returns all ContentFillRule values.
func (ContentFillRule) AllValues() []ContentFillRule {
	return []ContentFillRule{
		ContentFillRuleReplace,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentFillRule) MarshalText() ([]byte, error) {
	switch s {
	case ContentFillRuleReplace:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentFillRule) UnmarshalText(data []byte) error {
	switch ContentFillRule(data) {
	case ContentFillRuleReplace:
		*s = ContentFillRuleReplace
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ContentKind
type ContentKind string

const (
	ContentKindPost   ContentKind = "post"
	ContentKindThread ContentKind = "thread"
)

// AllValues returns all ContentKind values.
func (ContentKind) AllValues() []ContentKind {
	return []ContentKind{
		ContentKindPost,
		ContentKindThread,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentKind) MarshalText() ([]byte, error) {
	switch s {
	case ContentKindPost:
		return []byte(s), nil
	case ContentKindThread:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentKind) UnmarshalText(data []byte) error {
	switch ContentKind(data) {
	case ContentKindPost:
		*s = ContentKindPost
		return nil
	case ContentKindThread:
		*s = ContentKindThread
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContentKinds []ContentKind

// Https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension.
// Ref: #/components/schemas/CredentialRequestOptions
type CredentialRequestOptions struct {
	PublicKey PublicKeyCredentialRequestOptions `json:"publicKey"`
}

// GetPublicKey returns the value of PublicKey.
func (s *CredentialRequestOptions) GetPublicKey() PublicKeyCredentialRequestOptions {
	return s.PublicKey
}

// SetPublicKey sets the value of PublicKey.
func (s *CredentialRequestOptions) SetPublicKey(val PublicKeyCredentialRequestOptions) {
	s.PublicKey = val
}

// Ref: #/components/schemas/DatagraphNode
type DatagraphNode struct {
	Kind        DatagraphNodeKind `json:"kind"`
	ID          Identifier        `json:"id"`
	Name        string            `json:"name"`
	Slug        string            `json:"slug"`
	Description OptString         `json:"description"`
	Meta        OptMetadata       `json:"meta"`
}

// GetKind returns the value of Kind.
func (s *DatagraphNode) GetKind() DatagraphNodeKind {
	return s.Kind
}

// GetID returns the value of ID.
func (s *DatagraphNode) GetID() Identifier {
	return s.ID
}

// GetName returns the value of Name.
func (s *DatagraphNode) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *DatagraphNode) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *DatagraphNode) GetDescription() OptString {
	return s.Description
}

// GetMeta returns the value of Meta.
func (s *DatagraphNode) GetMeta() OptMetadata {
	return s.Meta
}

// SetKind sets the value of Kind.
func (s *DatagraphNode) SetKind(val DatagraphNodeKind) {
	s.Kind = val
}

// SetID sets the value of ID.
func (s *DatagraphNode) SetID(val Identifier) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DatagraphNode) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *DatagraphNode) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *DatagraphNode) SetDescription(val OptString) {
	s.Description = val
}

// SetMeta sets the value of Meta.
func (s *DatagraphNode) SetMeta(val OptMetadata) {
	s.Meta = val
}

// Ref: #/components/schemas/DatagraphNodeKind
type DatagraphNodeKind string

const (
	DatagraphNodeKindPost    DatagraphNodeKind = "post"
	DatagraphNodeKindNode    DatagraphNodeKind = "node"
	DatagraphNodeKindProfile DatagraphNodeKind = "profile"
)

// AllValues returns all DatagraphNodeKind values.
func (DatagraphNodeKind) AllValues() []DatagraphNodeKind {
	return []DatagraphNodeKind{
		DatagraphNodeKindPost,
		DatagraphNodeKindNode,
		DatagraphNodeKindProfile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DatagraphNodeKind) MarshalText() ([]byte, error) {
	switch s {
	case DatagraphNodeKindPost:
		return []byte(s), nil
	case DatagraphNodeKindNode:
		return []byte(s), nil
	case DatagraphNodeKindProfile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DatagraphNodeKind) UnmarshalText(data []byte) error {
	switch DatagraphNodeKind(data) {
	case DatagraphNodeKindPost:
		*s = DatagraphNodeKindPost
		return nil
	case DatagraphNodeKindNode:
		*s = DatagraphNodeKindNode
		return nil
	case DatagraphNodeKindProfile:
		*s = DatagraphNodeKindProfile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DatagraphNodeList []DatagraphNode

// Merged schema.
// Ref: #/components/schemas/DatagraphSearchResult
type DatagraphSearchResult struct {
	PageSize    int               `json:"page_size"`
	Results     int               `json:"results"`
	TotalPages  int               `json:"total_pages"`
	CurrentPage int               `json:"current_page"`
	NextPage    OptInt            `json:"next_page"`
	Items       DatagraphNodeList `json:"items"`
}

// GetPageSize returns the value of PageSize.
func (s *DatagraphSearchResult) GetPageSize() int {
	return s.PageSize
}

// GetResults returns the value of Results.
func (s *DatagraphSearchResult) GetResults() int {
	return s.Results
}

// GetTotalPages returns the value of TotalPages.
func (s *DatagraphSearchResult) GetTotalPages() int {
	return s.TotalPages
}

// GetCurrentPage returns the value of CurrentPage.
func (s *DatagraphSearchResult) GetCurrentPage() int {
	return s.CurrentPage
}

// GetNextPage returns the value of NextPage.
func (s *DatagraphSearchResult) GetNextPage() OptInt {
	return s.NextPage
}

// GetItems returns the value of Items.
func (s *DatagraphSearchResult) GetItems() DatagraphNodeList {
	return s.Items
}

// SetPageSize sets the value of PageSize.
func (s *DatagraphSearchResult) SetPageSize(val int) {
	s.PageSize = val
}

// SetResults sets the value of Results.
func (s *DatagraphSearchResult) SetResults(val int) {
	s.Results = val
}

// SetTotalPages sets the value of TotalPages.
func (s *DatagraphSearchResult) SetTotalPages(val int) {
	s.TotalPages = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *DatagraphSearchResult) SetCurrentPage(val int) {
	s.CurrentPage = val
}

// SetNextPage sets the value of NextPage.
func (s *DatagraphSearchResult) SetNextPage(val OptInt) {
	s.NextPage = val
}

// SetItems sets the value of Items.
func (s *DatagraphSearchResult) SetItems(val DatagraphNodeList) {
	s.Items = val
}

func (*DatagraphSearchResult) datagraphSearchRes() {}

type GetSpecOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetSpecOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type GetVersionOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVersionOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type IconSize string

const (
	IconSize512x512 IconSize = "512x512"
	IconSize32x32   IconSize = "32x32"
	IconSize180x180 IconSize = "180x180"
	IconSize120x120 IconSize = "120x120"
	IconSize167x167 IconSize = "167x167"
	IconSize152x152 IconSize = "152x152"
)

// AllValues returns all IconSize values.
func (IconSize) AllValues() []IconSize {
	return []IconSize{
		IconSize512x512,
		IconSize32x32,
		IconSize180x180,
		IconSize120x120,
		IconSize167x167,
		IconSize152x152,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IconSize) MarshalText() ([]byte, error) {
	switch s {
	case IconSize512x512:
		return []byte(s), nil
	case IconSize32x32:
		return []byte(s), nil
	case IconSize180x180:
		return []byte(s), nil
	case IconSize120x120:
		return []byte(s), nil
	case IconSize167x167:
		return []byte(s), nil
	case IconSize152x152:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IconSize) UnmarshalText(data []byte) error {
	switch IconSize(data) {
	case IconSize512x512:
		*s = IconSize512x512
		return nil
	case IconSize32x32:
		*s = IconSize32x32
		return nil
	case IconSize180x180:
		*s = IconSize180x180
		return nil
	case IconSize120x120:
		*s = IconSize120x120
		return nil
	case IconSize167x167:
		*s = IconSize167x167
		return nil
	case IconSize152x152:
		*s = IconSize152x152
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IconUploadOK is response for IconUpload operation.
type IconUploadOK struct{}

func (*IconUploadOK) iconUploadRes() {}

type IconUploadReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s IconUploadReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type Identifier string

// Basic public information about the Storyden installation.
// Ref: #/components/schemas/Info
type Info struct {
	Title            string           `json:"title"`
	Description      string           `json:"description"`
	AccentColour     string           `json:"accent_colour"`
	OnboardingStatus OnboardingStatus `json:"onboarding_status"`
}

// GetTitle returns the value of Title.
func (s *Info) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Info) GetDescription() string {
	return s.Description
}

// GetAccentColour returns the value of AccentColour.
func (s *Info) GetAccentColour() string {
	return s.AccentColour
}

// GetOnboardingStatus returns the value of OnboardingStatus.
func (s *Info) GetOnboardingStatus() OnboardingStatus {
	return s.OnboardingStatus
}

// SetTitle sets the value of Title.
func (s *Info) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Info) SetDescription(val string) {
	s.Description = val
}

// SetAccentColour sets the value of AccentColour.
func (s *Info) SetAccentColour(val string) {
	s.AccentColour = val
}

// SetOnboardingStatus sets the value of OnboardingStatus.
func (s *Info) SetOnboardingStatus(val OnboardingStatus) {
	s.OnboardingStatus = val
}

// InternalServerErrorStatusCode wraps APIError with StatusCode.
type InternalServerErrorStatusCode struct {
	StatusCode int
	Response   APIError
}

// GetStatusCode returns the value of StatusCode.
func (s *InternalServerErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *InternalServerErrorStatusCode) GetResponse() APIError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *InternalServerErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *InternalServerErrorStatusCode) SetResponse(val APIError) {
	s.Response = val
}

// A web address with content information such as title, description, etc.
// Ref: #/components/schemas/Link
type Link struct {
	URL         URL                `json:"url"`
	Title       OptLinkTitle       `json:"title"`
	Description OptLinkDescription `json:"description"`
	Slug        LinkSlug           `json:"slug"`
	Domain      LinkDomain         `json:"domain"`
	Assets      AssetList          `json:"assets"`
}

// GetURL returns the value of URL.
func (s *Link) GetURL() URL {
	return s.URL
}

// GetTitle returns the value of Title.
func (s *Link) GetTitle() OptLinkTitle {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Link) GetDescription() OptLinkDescription {
	return s.Description
}

// GetSlug returns the value of Slug.
func (s *Link) GetSlug() LinkSlug {
	return s.Slug
}

// GetDomain returns the value of Domain.
func (s *Link) GetDomain() LinkDomain {
	return s.Domain
}

// GetAssets returns the value of Assets.
func (s *Link) GetAssets() AssetList {
	return s.Assets
}

// SetURL sets the value of URL.
func (s *Link) SetURL(val URL) {
	s.URL = val
}

// SetTitle sets the value of Title.
func (s *Link) SetTitle(val OptLinkTitle) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Link) SetDescription(val OptLinkDescription) {
	s.Description = val
}

// SetSlug sets the value of Slug.
func (s *Link) SetSlug(val LinkSlug) {
	s.Slug = val
}

// SetDomain sets the value of Domain.
func (s *Link) SetDomain(val LinkDomain) {
	s.Domain = val
}

// SetAssets sets the value of Assets.
func (s *Link) SetAssets(val AssetList) {
	s.Assets = val
}

func (*Link) linkCreateRes() {}

type LinkDescription string

type LinkDomain string

// Ref: #/components/schemas/LinkInitialProps
type LinkInitialProps struct {
	URL         URL                `json:"url"`
	Title       OptLinkTitle       `json:"title"`
	Description OptLinkDescription `json:"description"`
}

// GetURL returns the value of URL.
func (s *LinkInitialProps) GetURL() URL {
	return s.URL
}

// GetTitle returns the value of Title.
func (s *LinkInitialProps) GetTitle() OptLinkTitle {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *LinkInitialProps) GetDescription() OptLinkDescription {
	return s.Description
}

// SetURL sets the value of URL.
func (s *LinkInitialProps) SetURL(val URL) {
	s.URL = val
}

// SetTitle sets the value of Title.
func (s *LinkInitialProps) SetTitle(val OptLinkTitle) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *LinkInitialProps) SetDescription(val OptLinkDescription) {
	s.Description = val
}

type LinkList []Link

// Merged schema.
// Ref: #/components/schemas/LinkListResult
type LinkListResult struct {
	PageSize    int      `json:"page_size"`
	Results     int      `json:"results"`
	TotalPages  int      `json:"total_pages"`
	CurrentPage int      `json:"current_page"`
	NextPage    OptInt   `json:"next_page"`
	Links       LinkList `json:"links"`
}

// GetPageSize returns the value of PageSize.
func (s *LinkListResult) GetPageSize() int {
	return s.PageSize
}

// GetResults returns the value of Results.
func (s *LinkListResult) GetResults() int {
	return s.Results
}

// GetTotalPages returns the value of TotalPages.
func (s *LinkListResult) GetTotalPages() int {
	return s.TotalPages
}

// GetCurrentPage returns the value of CurrentPage.
func (s *LinkListResult) GetCurrentPage() int {
	return s.CurrentPage
}

// GetNextPage returns the value of NextPage.
func (s *LinkListResult) GetNextPage() OptInt {
	return s.NextPage
}

// GetLinks returns the value of Links.
func (s *LinkListResult) GetLinks() LinkList {
	return s.Links
}

// SetPageSize sets the value of PageSize.
func (s *LinkListResult) SetPageSize(val int) {
	s.PageSize = val
}

// SetResults sets the value of Results.
func (s *LinkListResult) SetResults(val int) {
	s.Results = val
}

// SetTotalPages sets the value of TotalPages.
func (s *LinkListResult) SetTotalPages(val int) {
	s.TotalPages = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *LinkListResult) SetCurrentPage(val int) {
	s.CurrentPage = val
}

// SetNextPage sets the value of NextPage.
func (s *LinkListResult) SetNextPage(val OptInt) {
	s.NextPage = val
}

// SetLinks sets the value of Links.
func (s *LinkListResult) SetLinks(val LinkList) {
	s.Links = val
}

func (*LinkListResult) linkListRes() {}

type LinkSlug string

type LinkTitle string

// Merged schema.
// Ref: #/components/schemas/LinkWithRefs
type LinkWithRefs struct {
	URL            URL                `json:"url"`
	Title          OptLinkTitle       `json:"title"`
	Description    OptLinkDescription `json:"description"`
	Slug           LinkSlug           `json:"slug"`
	Domain         LinkDomain         `json:"domain"`
	Assets         AssetList          `json:"assets"`
	Recomentations DatagraphNodeList  `json:"recomentations"`
	Threads        ThreadList         `json:"threads"`
	Posts          PostList           `json:"posts"`
	Nodes          NodeList           `json:"nodes"`
	Collections    CollectionList     `json:"collections"`
}

// GetURL returns the value of URL.
func (s *LinkWithRefs) GetURL() URL {
	return s.URL
}

// GetTitle returns the value of Title.
func (s *LinkWithRefs) GetTitle() OptLinkTitle {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *LinkWithRefs) GetDescription() OptLinkDescription {
	return s.Description
}

// GetSlug returns the value of Slug.
func (s *LinkWithRefs) GetSlug() LinkSlug {
	return s.Slug
}

// GetDomain returns the value of Domain.
func (s *LinkWithRefs) GetDomain() LinkDomain {
	return s.Domain
}

// GetAssets returns the value of Assets.
func (s *LinkWithRefs) GetAssets() AssetList {
	return s.Assets
}

// GetRecomentations returns the value of Recomentations.
func (s *LinkWithRefs) GetRecomentations() DatagraphNodeList {
	return s.Recomentations
}

// GetThreads returns the value of Threads.
func (s *LinkWithRefs) GetThreads() ThreadList {
	return s.Threads
}

// GetPosts returns the value of Posts.
func (s *LinkWithRefs) GetPosts() PostList {
	return s.Posts
}

// GetNodes returns the value of Nodes.
func (s *LinkWithRefs) GetNodes() NodeList {
	return s.Nodes
}

// GetCollections returns the value of Collections.
func (s *LinkWithRefs) GetCollections() CollectionList {
	return s.Collections
}

// SetURL sets the value of URL.
func (s *LinkWithRefs) SetURL(val URL) {
	s.URL = val
}

// SetTitle sets the value of Title.
func (s *LinkWithRefs) SetTitle(val OptLinkTitle) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *LinkWithRefs) SetDescription(val OptLinkDescription) {
	s.Description = val
}

// SetSlug sets the value of Slug.
func (s *LinkWithRefs) SetSlug(val LinkSlug) {
	s.Slug = val
}

// SetDomain sets the value of Domain.
func (s *LinkWithRefs) SetDomain(val LinkDomain) {
	s.Domain = val
}

// SetAssets sets the value of Assets.
func (s *LinkWithRefs) SetAssets(val AssetList) {
	s.Assets = val
}

// SetRecomentations sets the value of Recomentations.
func (s *LinkWithRefs) SetRecomentations(val DatagraphNodeList) {
	s.Recomentations = val
}

// SetThreads sets the value of Threads.
func (s *LinkWithRefs) SetThreads(val ThreadList) {
	s.Threads = val
}

// SetPosts sets the value of Posts.
func (s *LinkWithRefs) SetPosts(val PostList) {
	s.Posts = val
}

// SetNodes sets the value of Nodes.
func (s *LinkWithRefs) SetNodes(val NodeList) {
	s.Nodes = val
}

// SetCollections sets the value of Collections.
func (s *LinkWithRefs) SetCollections(val CollectionList) {
	s.Collections = val
}

func (*LinkWithRefs) linkGetRes() {}

// Arbitrary metadata for the resource.
// Ref: #/components/schemas/Metadata
type Metadata map[string]jx.Raw

func (s *Metadata) init() Metadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/Node
type Node struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc           *NodeMisc         `json:"misc"`
	Name           NodeName          `json:"name"`
	Slug           Slug              `json:"slug"`
	Assets         AssetList         `json:"assets"`
	Link           OptLink           `json:"link"`
	Description    NodeDescription   `json:"description"`
	Content        OptPostContent    `json:"content"`
	Owner          ProfileReference  `json:"owner"`
	Parent         *Node             `json:"parent"`
	Visibility     Visibility        `json:"visibility"`
	RelevanceScore OptRelevanceScore `json:"relevance_score"`
	Meta           Metadata          `json:"meta"`
}

// GetID returns the value of ID.
func (s *Node) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Node) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Node) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Node) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Node) GetMisc() *NodeMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *Node) GetName() NodeName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *Node) GetSlug() Slug {
	return s.Slug
}

// GetAssets returns the value of Assets.
func (s *Node) GetAssets() AssetList {
	return s.Assets
}

// GetLink returns the value of Link.
func (s *Node) GetLink() OptLink {
	return s.Link
}

// GetDescription returns the value of Description.
func (s *Node) GetDescription() NodeDescription {
	return s.Description
}

// GetContent returns the value of Content.
func (s *Node) GetContent() OptPostContent {
	return s.Content
}

// GetOwner returns the value of Owner.
func (s *Node) GetOwner() ProfileReference {
	return s.Owner
}

// GetParent returns the value of Parent.
func (s *Node) GetParent() *Node {
	return s.Parent
}

// GetVisibility returns the value of Visibility.
func (s *Node) GetVisibility() Visibility {
	return s.Visibility
}

// GetRelevanceScore returns the value of RelevanceScore.
func (s *Node) GetRelevanceScore() OptRelevanceScore {
	return s.RelevanceScore
}

// GetMeta returns the value of Meta.
func (s *Node) GetMeta() Metadata {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Node) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Node) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Node) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Node) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Node) SetMisc(val *NodeMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *Node) SetName(val NodeName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *Node) SetSlug(val Slug) {
	s.Slug = val
}

// SetAssets sets the value of Assets.
func (s *Node) SetAssets(val AssetList) {
	s.Assets = val
}

// SetLink sets the value of Link.
func (s *Node) SetLink(val OptLink) {
	s.Link = val
}

// SetDescription sets the value of Description.
func (s *Node) SetDescription(val NodeDescription) {
	s.Description = val
}

// SetContent sets the value of Content.
func (s *Node) SetContent(val OptPostContent) {
	s.Content = val
}

// SetOwner sets the value of Owner.
func (s *Node) SetOwner(val ProfileReference) {
	s.Owner = val
}

// SetParent sets the value of Parent.
func (s *Node) SetParent(val *Node) {
	s.Parent = val
}

// SetVisibility sets the value of Visibility.
func (s *Node) SetVisibility(val Visibility) {
	s.Visibility = val
}

// SetRelevanceScore sets the value of RelevanceScore.
func (s *Node) SetRelevanceScore(val OptRelevanceScore) {
	s.RelevanceScore = val
}

// SetMeta sets the value of Meta.
func (s *Node) SetMeta(val Metadata) {
	s.Meta = val
}

func (*Node) nodeAddAssetRes()         {}
func (*Node) nodeAddNodeRes()          {}
func (*Node) nodeCreateRes()           {}
func (*Node) nodeRemoveAssetRes()      {}
func (*Node) nodeRemoveNodeRes()       {}
func (*Node) nodeUpdateRes()           {}
func (*Node) nodeUpdateVisibilityRes() {}

type NodeDeleteOK struct {
	Destination OptNode `json:"destination"`
}

// GetDestination returns the value of Destination.
func (s *NodeDeleteOK) GetDestination() OptNode {
	return s.Destination
}

// SetDestination sets the value of Destination.
func (s *NodeDeleteOK) SetDestination(val OptNode) {
	s.Destination = val
}

func (*NodeDeleteOK) nodeDeleteRes() {}

type NodeDescription string

// Ref: #/components/schemas/NodeInitialProps
type NodeInitialProps struct {
	Name         NodeName        `json:"name"`
	Slug         OptSlug         `json:"slug"`
	AssetIds     AssetIDs        `json:"asset_ids"`
	AssetSources AssetSourceList `json:"asset_sources"`
	URL          OptURL          `json:"url"`
	Content      OptPostContent  `json:"content"`
	Parent       OptSlug         `json:"parent"`
	Visibility   OptVisibility   `json:"visibility"`
	Meta         OptMetadata     `json:"meta"`
}

// GetName returns the value of Name.
func (s *NodeInitialProps) GetName() NodeName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *NodeInitialProps) GetSlug() OptSlug {
	return s.Slug
}

// GetAssetIds returns the value of AssetIds.
func (s *NodeInitialProps) GetAssetIds() AssetIDs {
	return s.AssetIds
}

// GetAssetSources returns the value of AssetSources.
func (s *NodeInitialProps) GetAssetSources() AssetSourceList {
	return s.AssetSources
}

// GetURL returns the value of URL.
func (s *NodeInitialProps) GetURL() OptURL {
	return s.URL
}

// GetContent returns the value of Content.
func (s *NodeInitialProps) GetContent() OptPostContent {
	return s.Content
}

// GetParent returns the value of Parent.
func (s *NodeInitialProps) GetParent() OptSlug {
	return s.Parent
}

// GetVisibility returns the value of Visibility.
func (s *NodeInitialProps) GetVisibility() OptVisibility {
	return s.Visibility
}

// GetMeta returns the value of Meta.
func (s *NodeInitialProps) GetMeta() OptMetadata {
	return s.Meta
}

// SetName sets the value of Name.
func (s *NodeInitialProps) SetName(val NodeName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *NodeInitialProps) SetSlug(val OptSlug) {
	s.Slug = val
}

// SetAssetIds sets the value of AssetIds.
func (s *NodeInitialProps) SetAssetIds(val AssetIDs) {
	s.AssetIds = val
}

// SetAssetSources sets the value of AssetSources.
func (s *NodeInitialProps) SetAssetSources(val AssetSourceList) {
	s.AssetSources = val
}

// SetURL sets the value of URL.
func (s *NodeInitialProps) SetURL(val OptURL) {
	s.URL = val
}

// SetContent sets the value of Content.
func (s *NodeInitialProps) SetContent(val OptPostContent) {
	s.Content = val
}

// SetParent sets the value of Parent.
func (s *NodeInitialProps) SetParent(val OptSlug) {
	s.Parent = val
}

// SetVisibility sets the value of Visibility.
func (s *NodeInitialProps) SetVisibility(val OptVisibility) {
	s.Visibility = val
}

// SetMeta sets the value of Meta.
func (s *NodeInitialProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

type NodeList []Node

// Merged schema.
// Ref: #/components/schemas/NodeListResult
type NodeListResult struct {
	PageSize    int      `json:"page_size"`
	Results     int      `json:"results"`
	TotalPages  int      `json:"total_pages"`
	CurrentPage int      `json:"current_page"`
	NextPage    OptInt   `json:"next_page"`
	Nodes       NodeTree `json:"nodes"`
}

// GetPageSize returns the value of PageSize.
func (s *NodeListResult) GetPageSize() int {
	return s.PageSize
}

// GetResults returns the value of Results.
func (s *NodeListResult) GetResults() int {
	return s.Results
}

// GetTotalPages returns the value of TotalPages.
func (s *NodeListResult) GetTotalPages() int {
	return s.TotalPages
}

// GetCurrentPage returns the value of CurrentPage.
func (s *NodeListResult) GetCurrentPage() int {
	return s.CurrentPage
}

// GetNextPage returns the value of NextPage.
func (s *NodeListResult) GetNextPage() OptInt {
	return s.NextPage
}

// GetNodes returns the value of Nodes.
func (s *NodeListResult) GetNodes() NodeTree {
	return s.Nodes
}

// SetPageSize sets the value of PageSize.
func (s *NodeListResult) SetPageSize(val int) {
	s.PageSize = val
}

// SetResults sets the value of Results.
func (s *NodeListResult) SetResults(val int) {
	s.Results = val
}

// SetTotalPages sets the value of TotalPages.
func (s *NodeListResult) SetTotalPages(val int) {
	s.TotalPages = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *NodeListResult) SetCurrentPage(val int) {
	s.CurrentPage = val
}

// SetNextPage sets the value of NextPage.
func (s *NodeListResult) SetNextPage(val OptInt) {
	s.NextPage = val
}

// SetNodes sets the value of Nodes.
func (s *NodeListResult) SetNodes(val NodeTree) {
	s.Nodes = val
}

func (*NodeListResult) nodeListRes() {}

// Arbitrary extra data stored with the resource.
type NodeMisc struct{}

// Note: Properties are replace-all and are not merged with existing.
// Ref: #/components/schemas/NodeMutableProps
type NodeMutableProps struct {
	Name         OptNodeName     `json:"name"`
	Slug         OptSlug         `json:"slug"`
	AssetIds     AssetIDs        `json:"asset_ids"`
	AssetSources AssetSourceList `json:"asset_sources"`
	URL          OptURL          `json:"url"`
	Content      OptPostContent  `json:"content"`
	Parent       OptSlug         `json:"parent"`
	Meta         OptMetadata     `json:"meta"`
}

// GetName returns the value of Name.
func (s *NodeMutableProps) GetName() OptNodeName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *NodeMutableProps) GetSlug() OptSlug {
	return s.Slug
}

// GetAssetIds returns the value of AssetIds.
func (s *NodeMutableProps) GetAssetIds() AssetIDs {
	return s.AssetIds
}

// GetAssetSources returns the value of AssetSources.
func (s *NodeMutableProps) GetAssetSources() AssetSourceList {
	return s.AssetSources
}

// GetURL returns the value of URL.
func (s *NodeMutableProps) GetURL() OptURL {
	return s.URL
}

// GetContent returns the value of Content.
func (s *NodeMutableProps) GetContent() OptPostContent {
	return s.Content
}

// GetParent returns the value of Parent.
func (s *NodeMutableProps) GetParent() OptSlug {
	return s.Parent
}

// GetMeta returns the value of Meta.
func (s *NodeMutableProps) GetMeta() OptMetadata {
	return s.Meta
}

// SetName sets the value of Name.
func (s *NodeMutableProps) SetName(val OptNodeName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *NodeMutableProps) SetSlug(val OptSlug) {
	s.Slug = val
}

// SetAssetIds sets the value of AssetIds.
func (s *NodeMutableProps) SetAssetIds(val AssetIDs) {
	s.AssetIds = val
}

// SetAssetSources sets the value of AssetSources.
func (s *NodeMutableProps) SetAssetSources(val AssetSourceList) {
	s.AssetSources = val
}

// SetURL sets the value of URL.
func (s *NodeMutableProps) SetURL(val OptURL) {
	s.URL = val
}

// SetContent sets the value of Content.
func (s *NodeMutableProps) SetContent(val OptPostContent) {
	s.Content = val
}

// SetParent sets the value of Parent.
func (s *NodeMutableProps) SetParent(val OptSlug) {
	s.Parent = val
}

// SetMeta sets the value of Meta.
func (s *NodeMutableProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

type NodeName string

type NodeTree []NodeWithChildren

// Merged schema.
// Ref: #/components/schemas/NodeWithChildren
type NodeWithChildren struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc           *NodeWithChildrenMisc `json:"misc"`
	Name           NodeName              `json:"name"`
	Slug           Slug                  `json:"slug"`
	Assets         AssetList             `json:"assets"`
	Link           OptLink               `json:"link"`
	Description    NodeDescription       `json:"description"`
	Content        OptPostContent        `json:"content"`
	Owner          ProfileReference      `json:"owner"`
	Parent         OptNode               `json:"parent"`
	Visibility     Visibility            `json:"visibility"`
	RelevanceScore OptRelevanceScore     `json:"relevance_score"`
	Meta           Metadata              `json:"meta"`
	Recomentations DatagraphNodeList     `json:"recomentations"`
	Children       []NodeWithChildren    `json:"children"`
}

// GetID returns the value of ID.
func (s *NodeWithChildren) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NodeWithChildren) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NodeWithChildren) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *NodeWithChildren) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *NodeWithChildren) GetMisc() *NodeWithChildrenMisc {
	return s.Misc
}

// GetName returns the value of Name.
func (s *NodeWithChildren) GetName() NodeName {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *NodeWithChildren) GetSlug() Slug {
	return s.Slug
}

// GetAssets returns the value of Assets.
func (s *NodeWithChildren) GetAssets() AssetList {
	return s.Assets
}

// GetLink returns the value of Link.
func (s *NodeWithChildren) GetLink() OptLink {
	return s.Link
}

// GetDescription returns the value of Description.
func (s *NodeWithChildren) GetDescription() NodeDescription {
	return s.Description
}

// GetContent returns the value of Content.
func (s *NodeWithChildren) GetContent() OptPostContent {
	return s.Content
}

// GetOwner returns the value of Owner.
func (s *NodeWithChildren) GetOwner() ProfileReference {
	return s.Owner
}

// GetParent returns the value of Parent.
func (s *NodeWithChildren) GetParent() OptNode {
	return s.Parent
}

// GetVisibility returns the value of Visibility.
func (s *NodeWithChildren) GetVisibility() Visibility {
	return s.Visibility
}

// GetRelevanceScore returns the value of RelevanceScore.
func (s *NodeWithChildren) GetRelevanceScore() OptRelevanceScore {
	return s.RelevanceScore
}

// GetMeta returns the value of Meta.
func (s *NodeWithChildren) GetMeta() Metadata {
	return s.Meta
}

// GetRecomentations returns the value of Recomentations.
func (s *NodeWithChildren) GetRecomentations() DatagraphNodeList {
	return s.Recomentations
}

// GetChildren returns the value of Children.
func (s *NodeWithChildren) GetChildren() []NodeWithChildren {
	return s.Children
}

// SetID sets the value of ID.
func (s *NodeWithChildren) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NodeWithChildren) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NodeWithChildren) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *NodeWithChildren) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *NodeWithChildren) SetMisc(val *NodeWithChildrenMisc) {
	s.Misc = val
}

// SetName sets the value of Name.
func (s *NodeWithChildren) SetName(val NodeName) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *NodeWithChildren) SetSlug(val Slug) {
	s.Slug = val
}

// SetAssets sets the value of Assets.
func (s *NodeWithChildren) SetAssets(val AssetList) {
	s.Assets = val
}

// SetLink sets the value of Link.
func (s *NodeWithChildren) SetLink(val OptLink) {
	s.Link = val
}

// SetDescription sets the value of Description.
func (s *NodeWithChildren) SetDescription(val NodeDescription) {
	s.Description = val
}

// SetContent sets the value of Content.
func (s *NodeWithChildren) SetContent(val OptPostContent) {
	s.Content = val
}

// SetOwner sets the value of Owner.
func (s *NodeWithChildren) SetOwner(val ProfileReference) {
	s.Owner = val
}

// SetParent sets the value of Parent.
func (s *NodeWithChildren) SetParent(val OptNode) {
	s.Parent = val
}

// SetVisibility sets the value of Visibility.
func (s *NodeWithChildren) SetVisibility(val Visibility) {
	s.Visibility = val
}

// SetRelevanceScore sets the value of RelevanceScore.
func (s *NodeWithChildren) SetRelevanceScore(val OptRelevanceScore) {
	s.RelevanceScore = val
}

// SetMeta sets the value of Meta.
func (s *NodeWithChildren) SetMeta(val Metadata) {
	s.Meta = val
}

// SetRecomentations sets the value of Recomentations.
func (s *NodeWithChildren) SetRecomentations(val DatagraphNodeList) {
	s.Recomentations = val
}

// SetChildren sets the value of Children.
func (s *NodeWithChildren) SetChildren(val []NodeWithChildren) {
	s.Children = val
}

func (*NodeWithChildren) nodeGetRes() {}

// Arbitrary extra data stored with the resource.
type NodeWithChildrenMisc struct{}

// Ref: #/components/responses/NotFound
type NotFound struct{}

func (*NotFound) accountGetAvatarRes()        {}
func (*NotFound) accountGetRes()              {}
func (*NotFound) accountSetAvatarRes()        {}
func (*NotFound) accountUpdateRes()           {}
func (*NotFound) adminAccountBanCreateRes()   {}
func (*NotFound) adminAccountBanRemoveRes()   {}
func (*NotFound) assetGetRes()                {}
func (*NotFound) authEmailPasswordSigninRes() {}
func (*NotFound) authEmailSigninRes()         {}
func (*NotFound) authEmailVerifyRes()         {}
func (*NotFound) authPasswordCreateRes()      {}
func (*NotFound) authPasswordSigninRes()      {}
func (*NotFound) authPasswordUpdateRes()      {}
func (*NotFound) collectionAddNodeRes()       {}
func (*NotFound) collectionAddPostRes()       {}
func (*NotFound) collectionDeleteRes()        {}
func (*NotFound) collectionGetRes()           {}
func (*NotFound) collectionListRes()          {}
func (*NotFound) collectionRemoveNodeRes()    {}
func (*NotFound) collectionRemovePostRes()    {}
func (*NotFound) collectionUpdateRes()        {}
func (*NotFound) datagraphSearchRes()         {}
func (*NotFound) linkGetRes()                 {}
func (*NotFound) linkListRes()                {}
func (*NotFound) nodeAddAssetRes()            {}
func (*NotFound) nodeAddNodeRes()             {}
func (*NotFound) nodeDeleteRes()              {}
func (*NotFound) nodeGetRes()                 {}
func (*NotFound) nodeListRes()                {}
func (*NotFound) nodeRemoveAssetRes()         {}
func (*NotFound) nodeRemoveNodeRes()          {}
func (*NotFound) nodeUpdateRes()              {}
func (*NotFound) nodeUpdateVisibilityRes()    {}
func (*NotFound) oAuthProviderCallbackRes()   {}
func (*NotFound) postCreateRes()              {}
func (*NotFound) postDeleteRes()              {}
func (*NotFound) postReactAddRes()            {}
func (*NotFound) postSearchRes()              {}
func (*NotFound) postUpdateRes()              {}
func (*NotFound) profileGetRes()              {}
func (*NotFound) profileListRes()             {}
func (*NotFound) threadCreateRes()            {}
func (*NotFound) threadDeleteRes()            {}
func (*NotFound) threadGetRes()               {}
func (*NotFound) threadListRes()              {}
func (*NotFound) threadUpdateRes()            {}
func (*NotFound) webAuthnGetAssertionRes()    {}
func (*NotFound) webAuthnMakeAssertionRes()   {}

// Ref: #/components/schemas/OAuthCallback
type OAuthCallback struct {
	State string `json:"state"`
	Code  string `json:"code"`
}

// GetState returns the value of State.
func (s *OAuthCallback) GetState() string {
	return s.State
}

// GetCode returns the value of Code.
func (s *OAuthCallback) GetCode() string {
	return s.Code
}

// SetState sets the value of State.
func (s *OAuthCallback) SetState(val string) {
	s.State = val
}

// SetCode sets the value of Code.
func (s *OAuthCallback) SetCode(val string) {
	s.Code = val
}

// Derived from data state, indicates what stage in the onboarding process
// the Storyden installation is in for directing first-time setup steps.
// Ref: #/components/schemas/OnboardingStatus
type OnboardingStatus string

const (
	OnboardingStatusRequiresFirstAccount OnboardingStatus = "requires_first_account"
	OnboardingStatusRequiresCategory     OnboardingStatus = "requires_category"
	OnboardingStatusRequiresMoreAccounts OnboardingStatus = "requires_more_accounts"
	OnboardingStatusRequiresFirstPost    OnboardingStatus = "requires_first_post"
	OnboardingStatusComplete             OnboardingStatus = "complete"
)

// AllValues returns all OnboardingStatus values.
func (OnboardingStatus) AllValues() []OnboardingStatus {
	return []OnboardingStatus{
		OnboardingStatusRequiresFirstAccount,
		OnboardingStatusRequiresCategory,
		OnboardingStatusRequiresMoreAccounts,
		OnboardingStatusRequiresFirstPost,
		OnboardingStatusComplete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OnboardingStatus) MarshalText() ([]byte, error) {
	switch s {
	case OnboardingStatusRequiresFirstAccount:
		return []byte(s), nil
	case OnboardingStatusRequiresCategory:
		return []byte(s), nil
	case OnboardingStatusRequiresMoreAccounts:
		return []byte(s), nil
	case OnboardingStatusRequiresFirstPost:
		return []byte(s), nil
	case OnboardingStatusComplete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OnboardingStatus) UnmarshalText(data []byte) error {
	switch OnboardingStatus(data) {
	case OnboardingStatusRequiresFirstAccount:
		*s = OnboardingStatusRequiresFirstAccount
		return nil
	case OnboardingStatusRequiresCategory:
		*s = OnboardingStatusRequiresCategory
		return nil
	case OnboardingStatusRequiresMoreAccounts:
		*s = OnboardingStatusRequiresMoreAccounts
		return nil
	case OnboardingStatusRequiresFirstPost:
		*s = OnboardingStatusRequiresFirstPost
		return nil
	case OnboardingStatusComplete:
		*s = OnboardingStatusComplete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptAPIErrorMetadata returns new OptAPIErrorMetadata with value set to v.
func NewOptAPIErrorMetadata(v APIErrorMetadata) OptAPIErrorMetadata {
	return OptAPIErrorMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAPIErrorMetadata is optional APIErrorMetadata.
type OptAPIErrorMetadata struct {
	Value APIErrorMetadata
	Set   bool
}

// IsSet returns true if OptAPIErrorMetadata was set.
func (o OptAPIErrorMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAPIErrorMetadata) Reset() {
	var v APIErrorMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAPIErrorMetadata) SetTo(v APIErrorMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAPIErrorMetadata) Get() (v APIErrorMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAPIErrorMetadata) Or(d APIErrorMetadata) APIErrorMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountBio returns new OptAccountBio with value set to v.
func NewOptAccountBio(v AccountBio) OptAccountBio {
	return OptAccountBio{
		Value: v,
		Set:   true,
	}
}

// OptAccountBio is optional AccountBio.
type OptAccountBio struct {
	Value AccountBio
	Set   bool
}

// IsSet returns true if OptAccountBio was set.
func (o OptAccountBio) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountBio) Reset() {
	var v AccountBio
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountBio) SetTo(v AccountBio) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountBio) Get() (v AccountBio, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountBio) Or(d AccountBio) AccountBio {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountHandle returns new OptAccountHandle with value set to v.
func NewOptAccountHandle(v AccountHandle) OptAccountHandle {
	return OptAccountHandle{
		Value: v,
		Set:   true,
	}
}

// OptAccountHandle is optional AccountHandle.
type OptAccountHandle struct {
	Value AccountHandle
	Set   bool
}

// IsSet returns true if OptAccountHandle was set.
func (o OptAccountHandle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountHandle) Reset() {
	var v AccountHandle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountHandle) SetTo(v AccountHandle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountHandle) Get() (v AccountHandle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountHandle) Or(d AccountHandle) AccountHandle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountMutableProps returns new OptAccountMutableProps with value set to v.
func NewOptAccountMutableProps(v AccountMutableProps) OptAccountMutableProps {
	return OptAccountMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptAccountMutableProps is optional AccountMutableProps.
type OptAccountMutableProps struct {
	Value AccountMutableProps
	Set   bool
}

// IsSet returns true if OptAccountMutableProps was set.
func (o OptAccountMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountMutableProps) Reset() {
	var v AccountMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountMutableProps) SetTo(v AccountMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountMutableProps) Get() (v AccountMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountMutableProps) Or(d AccountMutableProps) AccountMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountName returns new OptAccountName with value set to v.
func NewOptAccountName(v AccountName) OptAccountName {
	return OptAccountName{
		Value: v,
		Set:   true,
	}
}

// OptAccountName is optional AccountName.
type OptAccountName struct {
	Value AccountName
	Set   bool
}

// IsSet returns true if OptAccountName was set.
func (o OptAccountName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountName) Reset() {
	var v AccountName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountName) SetTo(v AccountName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountName) Get() (v AccountName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountName) Or(d AccountName) AccountName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAdminSettingsMutableProps returns new OptAdminSettingsMutableProps with value set to v.
func NewOptAdminSettingsMutableProps(v AdminSettingsMutableProps) OptAdminSettingsMutableProps {
	return OptAdminSettingsMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptAdminSettingsMutableProps is optional AdminSettingsMutableProps.
type OptAdminSettingsMutableProps struct {
	Value AdminSettingsMutableProps
	Set   bool
}

// IsSet returns true if OptAdminSettingsMutableProps was set.
func (o OptAdminSettingsMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAdminSettingsMutableProps) Reset() {
	var v AdminSettingsMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAdminSettingsMutableProps) SetTo(v AdminSettingsMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAdminSettingsMutableProps) Get() (v AdminSettingsMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAdminSettingsMutableProps) Or(d AdminSettingsMutableProps) AdminSettingsMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAttestationConveyancePreference returns new OptAttestationConveyancePreference with value set to v.
func NewOptAttestationConveyancePreference(v AttestationConveyancePreference) OptAttestationConveyancePreference {
	return OptAttestationConveyancePreference{
		Value: v,
		Set:   true,
	}
}

// OptAttestationConveyancePreference is optional AttestationConveyancePreference.
type OptAttestationConveyancePreference struct {
	Value AttestationConveyancePreference
	Set   bool
}

// IsSet returns true if OptAttestationConveyancePreference was set.
func (o OptAttestationConveyancePreference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAttestationConveyancePreference) Reset() {
	var v AttestationConveyancePreference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAttestationConveyancePreference) SetTo(v AttestationConveyancePreference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAttestationConveyancePreference) Get() (v AttestationConveyancePreference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAttestationConveyancePreference) Or(d AttestationConveyancePreference) AttestationConveyancePreference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthEmailInitialProps returns new OptAuthEmailInitialProps with value set to v.
func NewOptAuthEmailInitialProps(v AuthEmailInitialProps) OptAuthEmailInitialProps {
	return OptAuthEmailInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptAuthEmailInitialProps is optional AuthEmailInitialProps.
type OptAuthEmailInitialProps struct {
	Value AuthEmailInitialProps
	Set   bool
}

// IsSet returns true if OptAuthEmailInitialProps was set.
func (o OptAuthEmailInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthEmailInitialProps) Reset() {
	var v AuthEmailInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthEmailInitialProps) SetTo(v AuthEmailInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthEmailInitialProps) Get() (v AuthEmailInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthEmailInitialProps) Or(d AuthEmailInitialProps) AuthEmailInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthEmailPasswordInitialProps returns new OptAuthEmailPasswordInitialProps with value set to v.
func NewOptAuthEmailPasswordInitialProps(v AuthEmailPasswordInitialProps) OptAuthEmailPasswordInitialProps {
	return OptAuthEmailPasswordInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptAuthEmailPasswordInitialProps is optional AuthEmailPasswordInitialProps.
type OptAuthEmailPasswordInitialProps struct {
	Value AuthEmailPasswordInitialProps
	Set   bool
}

// IsSet returns true if OptAuthEmailPasswordInitialProps was set.
func (o OptAuthEmailPasswordInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthEmailPasswordInitialProps) Reset() {
	var v AuthEmailPasswordInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthEmailPasswordInitialProps) SetTo(v AuthEmailPasswordInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthEmailPasswordInitialProps) Get() (v AuthEmailPasswordInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthEmailPasswordInitialProps) Or(d AuthEmailPasswordInitialProps) AuthEmailPasswordInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthEmailVerifyProps returns new OptAuthEmailVerifyProps with value set to v.
func NewOptAuthEmailVerifyProps(v AuthEmailVerifyProps) OptAuthEmailVerifyProps {
	return OptAuthEmailVerifyProps{
		Value: v,
		Set:   true,
	}
}

// OptAuthEmailVerifyProps is optional AuthEmailVerifyProps.
type OptAuthEmailVerifyProps struct {
	Value AuthEmailVerifyProps
	Set   bool
}

// IsSet returns true if OptAuthEmailVerifyProps was set.
func (o OptAuthEmailVerifyProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthEmailVerifyProps) Reset() {
	var v AuthEmailVerifyProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthEmailVerifyProps) SetTo(v AuthEmailVerifyProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthEmailVerifyProps) Get() (v AuthEmailVerifyProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthEmailVerifyProps) Or(d AuthEmailVerifyProps) AuthEmailVerifyProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthPair returns new OptAuthPair with value set to v.
func NewOptAuthPair(v AuthPair) OptAuthPair {
	return OptAuthPair{
		Value: v,
		Set:   true,
	}
}

// OptAuthPair is optional AuthPair.
type OptAuthPair struct {
	Value AuthPair
	Set   bool
}

// IsSet returns true if OptAuthPair was set.
func (o OptAuthPair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthPair) Reset() {
	var v AuthPair
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthPair) SetTo(v AuthPair) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthPair) Get() (v AuthPair, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthPair) Or(d AuthPair) AuthPair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthPasswordInitialProps returns new OptAuthPasswordInitialProps with value set to v.
func NewOptAuthPasswordInitialProps(v AuthPasswordInitialProps) OptAuthPasswordInitialProps {
	return OptAuthPasswordInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptAuthPasswordInitialProps is optional AuthPasswordInitialProps.
type OptAuthPasswordInitialProps struct {
	Value AuthPasswordInitialProps
	Set   bool
}

// IsSet returns true if OptAuthPasswordInitialProps was set.
func (o OptAuthPasswordInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthPasswordInitialProps) Reset() {
	var v AuthPasswordInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthPasswordInitialProps) SetTo(v AuthPasswordInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthPasswordInitialProps) Get() (v AuthPasswordInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthPasswordInitialProps) Or(d AuthPasswordInitialProps) AuthPasswordInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthPasswordMutableProps returns new OptAuthPasswordMutableProps with value set to v.
func NewOptAuthPasswordMutableProps(v AuthPasswordMutableProps) OptAuthPasswordMutableProps {
	return OptAuthPasswordMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptAuthPasswordMutableProps is optional AuthPasswordMutableProps.
type OptAuthPasswordMutableProps struct {
	Value AuthPasswordMutableProps
	Set   bool
}

// IsSet returns true if OptAuthPasswordMutableProps was set.
func (o OptAuthPasswordMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthPasswordMutableProps) Reset() {
	var v AuthPasswordMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthPasswordMutableProps) SetTo(v AuthPasswordMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthPasswordMutableProps) Get() (v AuthPasswordMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthPasswordMutableProps) Or(d AuthPasswordMutableProps) AuthPasswordMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthenticationExtensionsClientInputs returns new OptAuthenticationExtensionsClientInputs with value set to v.
func NewOptAuthenticationExtensionsClientInputs(v AuthenticationExtensionsClientInputs) OptAuthenticationExtensionsClientInputs {
	return OptAuthenticationExtensionsClientInputs{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticationExtensionsClientInputs is optional AuthenticationExtensionsClientInputs.
type OptAuthenticationExtensionsClientInputs struct {
	Value AuthenticationExtensionsClientInputs
	Set   bool
}

// IsSet returns true if OptAuthenticationExtensionsClientInputs was set.
func (o OptAuthenticationExtensionsClientInputs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticationExtensionsClientInputs) Reset() {
	var v AuthenticationExtensionsClientInputs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticationExtensionsClientInputs) SetTo(v AuthenticationExtensionsClientInputs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticationExtensionsClientInputs) Get() (v AuthenticationExtensionsClientInputs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticationExtensionsClientInputs) Or(d AuthenticationExtensionsClientInputs) AuthenticationExtensionsClientInputs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthenticatorSelectionCriteria returns new OptAuthenticatorSelectionCriteria with value set to v.
func NewOptAuthenticatorSelectionCriteria(v AuthenticatorSelectionCriteria) OptAuthenticatorSelectionCriteria {
	return OptAuthenticatorSelectionCriteria{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticatorSelectionCriteria is optional AuthenticatorSelectionCriteria.
type OptAuthenticatorSelectionCriteria struct {
	Value AuthenticatorSelectionCriteria
	Set   bool
}

// IsSet returns true if OptAuthenticatorSelectionCriteria was set.
func (o OptAuthenticatorSelectionCriteria) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticatorSelectionCriteria) Reset() {
	var v AuthenticatorSelectionCriteria
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticatorSelectionCriteria) SetTo(v AuthenticatorSelectionCriteria) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticatorSelectionCriteria) Get() (v AuthenticatorSelectionCriteria, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticatorSelectionCriteria) Or(d AuthenticatorSelectionCriteria) AuthenticatorSelectionCriteria {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategoryInitialProps returns new OptCategoryInitialProps with value set to v.
func NewOptCategoryInitialProps(v CategoryInitialProps) OptCategoryInitialProps {
	return OptCategoryInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptCategoryInitialProps is optional CategoryInitialProps.
type OptCategoryInitialProps struct {
	Value CategoryInitialProps
	Set   bool
}

// IsSet returns true if OptCategoryInitialProps was set.
func (o OptCategoryInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategoryInitialProps) Reset() {
	var v CategoryInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategoryInitialProps) SetTo(v CategoryInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategoryInitialProps) Get() (v CategoryInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategoryInitialProps) Or(d CategoryInitialProps) CategoryInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategoryMutableProps returns new OptCategoryMutableProps with value set to v.
func NewOptCategoryMutableProps(v CategoryMutableProps) OptCategoryMutableProps {
	return OptCategoryMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptCategoryMutableProps is optional CategoryMutableProps.
type OptCategoryMutableProps struct {
	Value CategoryMutableProps
	Set   bool
}

// IsSet returns true if OptCategoryMutableProps was set.
func (o OptCategoryMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategoryMutableProps) Reset() {
	var v CategoryMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategoryMutableProps) SetTo(v CategoryMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategoryMutableProps) Get() (v CategoryMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategoryMutableProps) Or(d CategoryMutableProps) CategoryMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategoryName returns new OptCategoryName with value set to v.
func NewOptCategoryName(v CategoryName) OptCategoryName {
	return OptCategoryName{
		Value: v,
		Set:   true,
	}
}

// OptCategoryName is optional CategoryName.
type OptCategoryName struct {
	Value CategoryName
	Set   bool
}

// IsSet returns true if OptCategoryName was set.
func (o OptCategoryName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategoryName) Reset() {
	var v CategoryName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategoryName) SetTo(v CategoryName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategoryName) Get() (v CategoryName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategoryName) Or(d CategoryName) CategoryName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategorySlug returns new OptCategorySlug with value set to v.
func NewOptCategorySlug(v CategorySlug) OptCategorySlug {
	return OptCategorySlug{
		Value: v,
		Set:   true,
	}
}

// OptCategorySlug is optional CategorySlug.
type OptCategorySlug struct {
	Value CategorySlug
	Set   bool
}

// IsSet returns true if OptCategorySlug was set.
func (o OptCategorySlug) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategorySlug) Reset() {
	var v CategorySlug
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategorySlug) SetTo(v CategorySlug) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategorySlug) Get() (v CategorySlug, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategorySlug) Or(d CategorySlug) CategorySlug {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollectionInitialProps returns new OptCollectionInitialProps with value set to v.
func NewOptCollectionInitialProps(v CollectionInitialProps) OptCollectionInitialProps {
	return OptCollectionInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptCollectionInitialProps is optional CollectionInitialProps.
type OptCollectionInitialProps struct {
	Value CollectionInitialProps
	Set   bool
}

// IsSet returns true if OptCollectionInitialProps was set.
func (o OptCollectionInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollectionInitialProps) Reset() {
	var v CollectionInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollectionInitialProps) SetTo(v CollectionInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollectionInitialProps) Get() (v CollectionInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollectionInitialProps) Or(d CollectionInitialProps) CollectionInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollectionMutableProps returns new OptCollectionMutableProps with value set to v.
func NewOptCollectionMutableProps(v CollectionMutableProps) OptCollectionMutableProps {
	return OptCollectionMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptCollectionMutableProps is optional CollectionMutableProps.
type OptCollectionMutableProps struct {
	Value CollectionMutableProps
	Set   bool
}

// IsSet returns true if OptCollectionMutableProps was set.
func (o OptCollectionMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollectionMutableProps) Reset() {
	var v CollectionMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollectionMutableProps) SetTo(v CollectionMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollectionMutableProps) Get() (v CollectionMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollectionMutableProps) Or(d CollectionMutableProps) CollectionMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentFillRule returns new OptContentFillRule with value set to v.
func NewOptContentFillRule(v ContentFillRule) OptContentFillRule {
	return OptContentFillRule{
		Value: v,
		Set:   true,
	}
}

// OptContentFillRule is optional ContentFillRule.
type OptContentFillRule struct {
	Value ContentFillRule
	Set   bool
}

// IsSet returns true if OptContentFillRule was set.
func (o OptContentFillRule) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentFillRule) Reset() {
	var v ContentFillRule
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentFillRule) SetTo(v ContentFillRule) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentFillRule) Get() (v ContentFillRule, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentFillRule) Or(d ContentFillRule) ContentFillRule {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdentifier returns new OptIdentifier with value set to v.
func NewOptIdentifier(v Identifier) OptIdentifier {
	return OptIdentifier{
		Value: v,
		Set:   true,
	}
}

// OptIdentifier is optional Identifier.
type OptIdentifier struct {
	Value Identifier
	Set   bool
}

// IsSet returns true if OptIdentifier was set.
func (o OptIdentifier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdentifier) Reset() {
	var v Identifier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdentifier) SetTo(v Identifier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdentifier) Get() (v Identifier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdentifier) Or(d Identifier) Identifier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLink returns new OptLink with value set to v.
func NewOptLink(v Link) OptLink {
	return OptLink{
		Value: v,
		Set:   true,
	}
}

// OptLink is optional Link.
type OptLink struct {
	Value Link
	Set   bool
}

// IsSet returns true if OptLink was set.
func (o OptLink) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLink) Reset() {
	var v Link
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLink) SetTo(v Link) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLink) Get() (v Link, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLink) Or(d Link) Link {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinkDescription returns new OptLinkDescription with value set to v.
func NewOptLinkDescription(v LinkDescription) OptLinkDescription {
	return OptLinkDescription{
		Value: v,
		Set:   true,
	}
}

// OptLinkDescription is optional LinkDescription.
type OptLinkDescription struct {
	Value LinkDescription
	Set   bool
}

// IsSet returns true if OptLinkDescription was set.
func (o OptLinkDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinkDescription) Reset() {
	var v LinkDescription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinkDescription) SetTo(v LinkDescription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinkDescription) Get() (v LinkDescription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinkDescription) Or(d LinkDescription) LinkDescription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinkInitialProps returns new OptLinkInitialProps with value set to v.
func NewOptLinkInitialProps(v LinkInitialProps) OptLinkInitialProps {
	return OptLinkInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptLinkInitialProps is optional LinkInitialProps.
type OptLinkInitialProps struct {
	Value LinkInitialProps
	Set   bool
}

// IsSet returns true if OptLinkInitialProps was set.
func (o OptLinkInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinkInitialProps) Reset() {
	var v LinkInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinkInitialProps) SetTo(v LinkInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinkInitialProps) Get() (v LinkInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinkInitialProps) Or(d LinkInitialProps) LinkInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinkTitle returns new OptLinkTitle with value set to v.
func NewOptLinkTitle(v LinkTitle) OptLinkTitle {
	return OptLinkTitle{
		Value: v,
		Set:   true,
	}
}

// OptLinkTitle is optional LinkTitle.
type OptLinkTitle struct {
	Value LinkTitle
	Set   bool
}

// IsSet returns true if OptLinkTitle was set.
func (o OptLinkTitle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinkTitle) Reset() {
	var v LinkTitle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinkTitle) SetTo(v LinkTitle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinkTitle) Get() (v LinkTitle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinkTitle) Or(d LinkTitle) LinkTitle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetadata returns new OptMetadata with value set to v.
func NewOptMetadata(v Metadata) OptMetadata {
	return OptMetadata{
		Value: v,
		Set:   true,
	}
}

// OptMetadata is optional Metadata.
type OptMetadata struct {
	Value Metadata
	Set   bool
}

// IsSet returns true if OptMetadata was set.
func (o OptMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetadata) Reset() {
	var v Metadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetadata) SetTo(v Metadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetadata) Get() (v Metadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetadata) Or(d Metadata) Metadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNode returns new OptNode with value set to v.
func NewOptNode(v Node) OptNode {
	return OptNode{
		Value: v,
		Set:   true,
	}
}

// OptNode is optional Node.
type OptNode struct {
	Value Node
	Set   bool
}

// IsSet returns true if OptNode was set.
func (o OptNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNode) Reset() {
	var v Node
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNode) SetTo(v Node) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNode) Get() (v Node, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNode) Or(d Node) Node {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeInitialProps returns new OptNodeInitialProps with value set to v.
func NewOptNodeInitialProps(v NodeInitialProps) OptNodeInitialProps {
	return OptNodeInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptNodeInitialProps is optional NodeInitialProps.
type OptNodeInitialProps struct {
	Value NodeInitialProps
	Set   bool
}

// IsSet returns true if OptNodeInitialProps was set.
func (o OptNodeInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeInitialProps) Reset() {
	var v NodeInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeInitialProps) SetTo(v NodeInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeInitialProps) Get() (v NodeInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeInitialProps) Or(d NodeInitialProps) NodeInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeMutableProps returns new OptNodeMutableProps with value set to v.
func NewOptNodeMutableProps(v NodeMutableProps) OptNodeMutableProps {
	return OptNodeMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptNodeMutableProps is optional NodeMutableProps.
type OptNodeMutableProps struct {
	Value NodeMutableProps
	Set   bool
}

// IsSet returns true if OptNodeMutableProps was set.
func (o OptNodeMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeMutableProps) Reset() {
	var v NodeMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeMutableProps) SetTo(v NodeMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeMutableProps) Get() (v NodeMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeMutableProps) Or(d NodeMutableProps) NodeMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeName returns new OptNodeName with value set to v.
func NewOptNodeName(v NodeName) OptNodeName {
	return OptNodeName{
		Value: v,
		Set:   true,
	}
}

// OptNodeName is optional NodeName.
type OptNodeName struct {
	Value NodeName
	Set   bool
}

// IsSet returns true if OptNodeName was set.
func (o OptNodeName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeName) Reset() {
	var v NodeName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeName) SetTo(v NodeName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeName) Get() (v NodeName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeName) Or(d NodeName) NodeName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOAuthCallback returns new OptOAuthCallback with value set to v.
func NewOptOAuthCallback(v OAuthCallback) OptOAuthCallback {
	return OptOAuthCallback{
		Value: v,
		Set:   true,
	}
}

// OptOAuthCallback is optional OAuthCallback.
type OptOAuthCallback struct {
	Value OAuthCallback
	Set   bool
}

// IsSet returns true if OptOAuthCallback was set.
func (o OptOAuthCallback) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOAuthCallback) Reset() {
	var v OAuthCallback
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOAuthCallback) SetTo(v OAuthCallback) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOAuthCallback) Get() (v OAuthCallback, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOAuthCallback) Or(d OAuthCallback) OAuthCallback {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneRequestCodeProps returns new OptPhoneRequestCodeProps with value set to v.
func NewOptPhoneRequestCodeProps(v PhoneRequestCodeProps) OptPhoneRequestCodeProps {
	return OptPhoneRequestCodeProps{
		Value: v,
		Set:   true,
	}
}

// OptPhoneRequestCodeProps is optional PhoneRequestCodeProps.
type OptPhoneRequestCodeProps struct {
	Value PhoneRequestCodeProps
	Set   bool
}

// IsSet returns true if OptPhoneRequestCodeProps was set.
func (o OptPhoneRequestCodeProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneRequestCodeProps) Reset() {
	var v PhoneRequestCodeProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneRequestCodeProps) SetTo(v PhoneRequestCodeProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneRequestCodeProps) Get() (v PhoneRequestCodeProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneRequestCodeProps) Or(d PhoneRequestCodeProps) PhoneRequestCodeProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneSubmitCodeProps returns new OptPhoneSubmitCodeProps with value set to v.
func NewOptPhoneSubmitCodeProps(v PhoneSubmitCodeProps) OptPhoneSubmitCodeProps {
	return OptPhoneSubmitCodeProps{
		Value: v,
		Set:   true,
	}
}

// OptPhoneSubmitCodeProps is optional PhoneSubmitCodeProps.
type OptPhoneSubmitCodeProps struct {
	Value PhoneSubmitCodeProps
	Set   bool
}

// IsSet returns true if OptPhoneSubmitCodeProps was set.
func (o OptPhoneSubmitCodeProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneSubmitCodeProps) Reset() {
	var v PhoneSubmitCodeProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneSubmitCodeProps) SetTo(v PhoneSubmitCodeProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneSubmitCodeProps) Get() (v PhoneSubmitCodeProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneSubmitCodeProps) Or(d PhoneSubmitCodeProps) PhoneSubmitCodeProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostContent returns new OptPostContent with value set to v.
func NewOptPostContent(v PostContent) OptPostContent {
	return OptPostContent{
		Value: v,
		Set:   true,
	}
}

// OptPostContent is optional PostContent.
type OptPostContent struct {
	Value PostContent
	Set   bool
}

// IsSet returns true if OptPostContent was set.
func (o OptPostContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostContent) Reset() {
	var v PostContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostContent) SetTo(v PostContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostContent) Get() (v PostContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostContent) Or(d PostContent) PostContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostInitialProps returns new OptPostInitialProps with value set to v.
func NewOptPostInitialProps(v PostInitialProps) OptPostInitialProps {
	return OptPostInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptPostInitialProps is optional PostInitialProps.
type OptPostInitialProps struct {
	Value PostInitialProps
	Set   bool
}

// IsSet returns true if OptPostInitialProps was set.
func (o OptPostInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostInitialProps) Reset() {
	var v PostInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostInitialProps) SetTo(v PostInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostInitialProps) Get() (v PostInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostInitialProps) Or(d PostInitialProps) PostInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostMutableProps returns new OptPostMutableProps with value set to v.
func NewOptPostMutableProps(v PostMutableProps) OptPostMutableProps {
	return OptPostMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptPostMutableProps is optional PostMutableProps.
type OptPostMutableProps struct {
	Value PostMutableProps
	Set   bool
}

// IsSet returns true if OptPostMutableProps was set.
func (o OptPostMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostMutableProps) Reset() {
	var v PostMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostMutableProps) SetTo(v PostMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostMutableProps) Get() (v PostMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostMutableProps) Or(d PostMutableProps) PostMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostReactProps returns new OptPostReactProps with value set to v.
func NewOptPostReactProps(v PostReactProps) OptPostReactProps {
	return OptPostReactProps{
		Value: v,
		Set:   true,
	}
}

// OptPostReactProps is optional PostReactProps.
type OptPostReactProps struct {
	Value PostReactProps
	Set   bool
}

// IsSet returns true if OptPostReactProps was set.
func (o OptPostReactProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostReactProps) Reset() {
	var v PostReactProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostReactProps) SetTo(v PostReactProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostReactProps) Get() (v PostReactProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostReactProps) Or(d PostReactProps) PostReactProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicKeyCredential returns new OptPublicKeyCredential with value set to v.
func NewOptPublicKeyCredential(v PublicKeyCredential) OptPublicKeyCredential {
	return OptPublicKeyCredential{
		Value: v,
		Set:   true,
	}
}

// OptPublicKeyCredential is optional PublicKeyCredential.
type OptPublicKeyCredential struct {
	Value PublicKeyCredential
	Set   bool
}

// IsSet returns true if OptPublicKeyCredential was set.
func (o OptPublicKeyCredential) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicKeyCredential) Reset() {
	var v PublicKeyCredential
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicKeyCredential) SetTo(v PublicKeyCredential) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicKeyCredential) Get() (v PublicKeyCredential, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicKeyCredential) Or(d PublicKeyCredential) PublicKeyCredential {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicKeyCredentialRequestOptionsUserVerification returns new OptPublicKeyCredentialRequestOptionsUserVerification with value set to v.
func NewOptPublicKeyCredentialRequestOptionsUserVerification(v PublicKeyCredentialRequestOptionsUserVerification) OptPublicKeyCredentialRequestOptionsUserVerification {
	return OptPublicKeyCredentialRequestOptionsUserVerification{
		Value: v,
		Set:   true,
	}
}

// OptPublicKeyCredentialRequestOptionsUserVerification is optional PublicKeyCredentialRequestOptionsUserVerification.
type OptPublicKeyCredentialRequestOptionsUserVerification struct {
	Value PublicKeyCredentialRequestOptionsUserVerification
	Set   bool
}

// IsSet returns true if OptPublicKeyCredentialRequestOptionsUserVerification was set.
func (o OptPublicKeyCredentialRequestOptionsUserVerification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicKeyCredentialRequestOptionsUserVerification) Reset() {
	var v PublicKeyCredentialRequestOptionsUserVerification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicKeyCredentialRequestOptionsUserVerification) SetTo(v PublicKeyCredentialRequestOptionsUserVerification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicKeyCredentialRequestOptionsUserVerification) Get() (v PublicKeyCredentialRequestOptionsUserVerification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicKeyCredentialRequestOptionsUserVerification) Or(d PublicKeyCredentialRequestOptionsUserVerification) PublicKeyCredentialRequestOptionsUserVerification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRelevanceScore returns new OptRelevanceScore with value set to v.
func NewOptRelevanceScore(v RelevanceScore) OptRelevanceScore {
	return OptRelevanceScore{
		Value: v,
		Set:   true,
	}
}

// OptRelevanceScore is optional RelevanceScore.
type OptRelevanceScore struct {
	Value RelevanceScore
	Set   bool
}

// IsSet returns true if OptRelevanceScore was set.
func (o OptRelevanceScore) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRelevanceScore) Reset() {
	var v RelevanceScore
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRelevanceScore) SetTo(v RelevanceScore) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRelevanceScore) Get() (v RelevanceScore, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRelevanceScore) Or(d RelevanceScore) RelevanceScore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlug returns new OptSlug with value set to v.
func NewOptSlug(v Slug) OptSlug {
	return OptSlug{
		Value: v,
		Set:   true,
	}
}

// OptSlug is optional Slug.
type OptSlug struct {
	Value Slug
	Set   bool
}

// IsSet returns true if OptSlug was set.
func (o OptSlug) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlug) Reset() {
	var v Slug
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlug) SetTo(v Slug) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlug) Get() (v Slug, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlug) Or(d Slug) Slug {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadInitialProps returns new OptThreadInitialProps with value set to v.
func NewOptThreadInitialProps(v ThreadInitialProps) OptThreadInitialProps {
	return OptThreadInitialProps{
		Value: v,
		Set:   true,
	}
}

// OptThreadInitialProps is optional ThreadInitialProps.
type OptThreadInitialProps struct {
	Value ThreadInitialProps
	Set   bool
}

// IsSet returns true if OptThreadInitialProps was set.
func (o OptThreadInitialProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadInitialProps) Reset() {
	var v ThreadInitialProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadInitialProps) SetTo(v ThreadInitialProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadInitialProps) Get() (v ThreadInitialProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadInitialProps) Or(d ThreadInitialProps) ThreadInitialProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadMutableProps returns new OptThreadMutableProps with value set to v.
func NewOptThreadMutableProps(v ThreadMutableProps) OptThreadMutableProps {
	return OptThreadMutableProps{
		Value: v,
		Set:   true,
	}
}

// OptThreadMutableProps is optional ThreadMutableProps.
type OptThreadMutableProps struct {
	Value ThreadMutableProps
	Set   bool
}

// IsSet returns true if OptThreadMutableProps was set.
func (o OptThreadMutableProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadMutableProps) Reset() {
	var v ThreadMutableProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadMutableProps) SetTo(v ThreadMutableProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadMutableProps) Get() (v ThreadMutableProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadMutableProps) Or(d ThreadMutableProps) ThreadMutableProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadTitle returns new OptThreadTitle with value set to v.
func NewOptThreadTitle(v ThreadTitle) OptThreadTitle {
	return OptThreadTitle{
		Value: v,
		Set:   true,
	}
}

// OptThreadTitle is optional ThreadTitle.
type OptThreadTitle struct {
	Value ThreadTitle
	Set   bool
}

// IsSet returns true if OptThreadTitle was set.
func (o OptThreadTitle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadTitle) Reset() {
	var v ThreadTitle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadTitle) SetTo(v ThreadTitle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadTitle) Get() (v ThreadTitle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadTitle) Or(d ThreadTitle) ThreadTitle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURL returns new OptURL with value set to v.
func NewOptURL(v URL) OptURL {
	return OptURL{
		Value: v,
		Set:   true,
	}
}

// OptURL is optional URL.
type OptURL struct {
	Value URL
	Set   bool
}

// IsSet returns true if OptURL was set.
func (o OptURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURL) Reset() {
	var v URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURL) SetTo(v URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURL) Get() (v URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURL) Or(d URL) URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserVerificationRequirement returns new OptUserVerificationRequirement with value set to v.
func NewOptUserVerificationRequirement(v UserVerificationRequirement) OptUserVerificationRequirement {
	return OptUserVerificationRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserVerificationRequirement is optional UserVerificationRequirement.
type OptUserVerificationRequirement struct {
	Value UserVerificationRequirement
	Set   bool
}

// IsSet returns true if OptUserVerificationRequirement was set.
func (o OptUserVerificationRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserVerificationRequirement) Reset() {
	var v UserVerificationRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserVerificationRequirement) SetTo(v UserVerificationRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserVerificationRequirement) Get() (v UserVerificationRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserVerificationRequirement) Or(d UserVerificationRequirement) UserVerificationRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVisibility returns new OptVisibility with value set to v.
func NewOptVisibility(v Visibility) OptVisibility {
	return OptVisibility{
		Value: v,
		Set:   true,
	}
}

// OptVisibility is optional Visibility.
type OptVisibility struct {
	Value Visibility
	Set   bool
}

// IsSet returns true if OptVisibility was set.
func (o OptVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVisibility) Reset() {
	var v Visibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVisibility) SetTo(v Visibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVisibility) Get() (v Visibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVisibility) Or(d Visibility) Visibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVisibilityMutationProps returns new OptVisibilityMutationProps with value set to v.
func NewOptVisibilityMutationProps(v VisibilityMutationProps) OptVisibilityMutationProps {
	return OptVisibilityMutationProps{
		Value: v,
		Set:   true,
	}
}

// OptVisibilityMutationProps is optional VisibilityMutationProps.
type OptVisibilityMutationProps struct {
	Value VisibilityMutationProps
	Set   bool
}

// IsSet returns true if OptVisibilityMutationProps was set.
func (o OptVisibilityMutationProps) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVisibilityMutationProps) Reset() {
	var v VisibilityMutationProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVisibilityMutationProps) SetTo(v VisibilityMutationProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVisibilityMutationProps) Get() (v VisibilityMutationProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVisibilityMutationProps) Or(d VisibilityMutationProps) VisibilityMutationProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// The phone number request payload.
// Ref: #/components/schemas/PhoneRequestCodeProps
type PhoneRequestCodeProps struct {
	// The desired username to link to the phone number.
	Identifier string `json:"identifier"`
	// The phone number to receive the one-time code on.
	PhoneNumber string `json:"phone_number"`
}

// GetIdentifier returns the value of Identifier.
func (s *PhoneRequestCodeProps) GetIdentifier() string {
	return s.Identifier
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneRequestCodeProps) GetPhoneNumber() string {
	return s.PhoneNumber
}

// SetIdentifier sets the value of Identifier.
func (s *PhoneRequestCodeProps) SetIdentifier(val string) {
	s.Identifier = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneRequestCodeProps) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// The Phone submit code payload.
// Ref: #/components/schemas/PhoneSubmitCodeProps
type PhoneSubmitCodeProps struct {
	Code string `json:"code"`
}

// GetCode returns the value of Code.
func (s *PhoneSubmitCodeProps) GetCode() string {
	return s.Code
}

// SetCode sets the value of Code.
func (s *PhoneSubmitCodeProps) SetCode(val string) {
	s.Code = val
}

type PostContent string

// PostDeleteOK is response for PostDelete operation.
type PostDeleteOK struct{}

func (*PostDeleteOK) postDeleteRes() {}

// Ref: #/components/schemas/PostInitialProps
type PostInitialProps struct {
	Body    PostContent   `json:"body"`
	Meta    OptMetadata   `json:"meta"`
	ReplyTo OptIdentifier `json:"reply_to"`
	URL     OptURL        `json:"url"`
}

// GetBody returns the value of Body.
func (s *PostInitialProps) GetBody() PostContent {
	return s.Body
}

// GetMeta returns the value of Meta.
func (s *PostInitialProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetReplyTo returns the value of ReplyTo.
func (s *PostInitialProps) GetReplyTo() OptIdentifier {
	return s.ReplyTo
}

// GetURL returns the value of URL.
func (s *PostInitialProps) GetURL() OptURL {
	return s.URL
}

// SetBody sets the value of Body.
func (s *PostInitialProps) SetBody(val PostContent) {
	s.Body = val
}

// SetMeta sets the value of Meta.
func (s *PostInitialProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetReplyTo sets the value of ReplyTo.
func (s *PostInitialProps) SetReplyTo(val OptIdentifier) {
	s.ReplyTo = val
}

// SetURL sets the value of URL.
func (s *PostInitialProps) SetURL(val OptURL) {
	s.URL = val
}

type PostList []PostProps

// Ref: #/components/schemas/PostMutableProps
type PostMutableProps struct {
	Body OptPostContent `json:"body"`
	Meta OptMetadata    `json:"meta"`
	URL  OptURL         `json:"url"`
}

// GetBody returns the value of Body.
func (s *PostMutableProps) GetBody() OptPostContent {
	return s.Body
}

// GetMeta returns the value of Meta.
func (s *PostMutableProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetURL returns the value of URL.
func (s *PostMutableProps) GetURL() OptURL {
	return s.URL
}

// SetBody sets the value of Body.
func (s *PostMutableProps) SetBody(val OptPostContent) {
	s.Body = val
}

// SetMeta sets the value of Meta.
func (s *PostMutableProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetURL sets the value of URL.
func (s *PostMutableProps) SetURL(val OptURL) {
	s.URL = val
}

// Merged schema.
// Ref: #/components/schemas/PostProps
type PostProps struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc     *PostPropsMisc   `json:"misc"`
	RootID   Identifier       `json:"root_id"`
	RootSlug ThreadMark       `json:"root_slug"`
	Body     PostContent      `json:"body"`
	Author   ProfileReference `json:"author"`
	Meta     OptMetadata      `json:"meta"`
	Reacts   ReactList        `json:"reacts"`
	ReplyTo  OptIdentifier    `json:"reply_to"`
	Assets   AssetList        `json:"assets"`
	Links    LinkList         `json:"links"`
}

// GetID returns the value of ID.
func (s *PostProps) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PostProps) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PostProps) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *PostProps) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *PostProps) GetMisc() *PostPropsMisc {
	return s.Misc
}

// GetRootID returns the value of RootID.
func (s *PostProps) GetRootID() Identifier {
	return s.RootID
}

// GetRootSlug returns the value of RootSlug.
func (s *PostProps) GetRootSlug() ThreadMark {
	return s.RootSlug
}

// GetBody returns the value of Body.
func (s *PostProps) GetBody() PostContent {
	return s.Body
}

// GetAuthor returns the value of Author.
func (s *PostProps) GetAuthor() ProfileReference {
	return s.Author
}

// GetMeta returns the value of Meta.
func (s *PostProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetReacts returns the value of Reacts.
func (s *PostProps) GetReacts() ReactList {
	return s.Reacts
}

// GetReplyTo returns the value of ReplyTo.
func (s *PostProps) GetReplyTo() OptIdentifier {
	return s.ReplyTo
}

// GetAssets returns the value of Assets.
func (s *PostProps) GetAssets() AssetList {
	return s.Assets
}

// GetLinks returns the value of Links.
func (s *PostProps) GetLinks() LinkList {
	return s.Links
}

// SetID sets the value of ID.
func (s *PostProps) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PostProps) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PostProps) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *PostProps) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *PostProps) SetMisc(val *PostPropsMisc) {
	s.Misc = val
}

// SetRootID sets the value of RootID.
func (s *PostProps) SetRootID(val Identifier) {
	s.RootID = val
}

// SetRootSlug sets the value of RootSlug.
func (s *PostProps) SetRootSlug(val ThreadMark) {
	s.RootSlug = val
}

// SetBody sets the value of Body.
func (s *PostProps) SetBody(val PostContent) {
	s.Body = val
}

// SetAuthor sets the value of Author.
func (s *PostProps) SetAuthor(val ProfileReference) {
	s.Author = val
}

// SetMeta sets the value of Meta.
func (s *PostProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetReacts sets the value of Reacts.
func (s *PostProps) SetReacts(val ReactList) {
	s.Reacts = val
}

// SetReplyTo sets the value of ReplyTo.
func (s *PostProps) SetReplyTo(val OptIdentifier) {
	s.ReplyTo = val
}

// SetAssets sets the value of Assets.
func (s *PostProps) SetAssets(val AssetList) {
	s.Assets = val
}

// SetLinks sets the value of Links.
func (s *PostProps) SetLinks(val LinkList) {
	s.Links = val
}

func (*PostProps) postCreateRes() {}
func (*PostProps) postUpdateRes() {}

// Arbitrary extra data stored with the resource.
type PostPropsMisc struct{}

// Reactions are currently just simple strings but they may improve later.
// Ref: #/components/schemas/PostReactProps
type PostReactProps struct {
	Emoji OptString `json:"emoji"`
}

// GetEmoji returns the value of Emoji.
func (s *PostReactProps) GetEmoji() OptString {
	return s.Emoji
}

// SetEmoji sets the value of Emoji.
func (s *PostReactProps) SetEmoji(val OptString) {
	s.Emoji = val
}

// Ref: #/components/schemas/PostSearchResults
type PostSearchResults struct {
	Count   float64     `json:"count"`
	Results []PostProps `json:"results"`
}

// GetCount returns the value of Count.
func (s *PostSearchResults) GetCount() float64 {
	return s.Count
}

// GetResults returns the value of Results.
func (s *PostSearchResults) GetResults() []PostProps {
	return s.Results
}

// SetCount sets the value of Count.
func (s *PostSearchResults) SetCount(val float64) {
	s.Count = val
}

// SetResults sets the value of Results.
func (s *PostSearchResults) SetResults(val []PostProps) {
	s.Results = val
}

func (*PostSearchResults) postSearchRes() {}

// Ref: #/components/schemas/ProfileExternalLink
type ProfileExternalLink struct {
	Text string `json:"text"`
	URL  string `json:"url"`
}

// GetText returns the value of Text.
func (s *ProfileExternalLink) GetText() string {
	return s.Text
}

// GetURL returns the value of URL.
func (s *ProfileExternalLink) GetURL() string {
	return s.URL
}

// SetText sets the value of Text.
func (s *ProfileExternalLink) SetText(val string) {
	s.Text = val
}

// SetURL sets the value of URL.
func (s *ProfileExternalLink) SetURL(val string) {
	s.URL = val
}

type ProfileExternalLinkList []ProfileExternalLink

// A minimal reference to an account.
// Ref: #/components/schemas/ProfileReference
type ProfileReference struct {
	ID     Identifier    `json:"id"`
	Handle AccountHandle `json:"handle"`
	Name   AccountName   `json:"name"`
	Admin  bool          `json:"admin"`
}

// GetID returns the value of ID.
func (s *ProfileReference) GetID() Identifier {
	return s.ID
}

// GetHandle returns the value of Handle.
func (s *ProfileReference) GetHandle() AccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *ProfileReference) GetName() AccountName {
	return s.Name
}

// GetAdmin returns the value of Admin.
func (s *ProfileReference) GetAdmin() bool {
	return s.Admin
}

// SetID sets the value of ID.
func (s *ProfileReference) SetID(val Identifier) {
	s.ID = val
}

// SetHandle sets the value of Handle.
func (s *ProfileReference) SetHandle(val AccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *ProfileReference) SetName(val AccountName) {
	s.Name = val
}

// SetAdmin sets the value of Admin.
func (s *ProfileReference) SetAdmin(val bool) {
	s.Admin = val
}

// Https://www.w3.org/TR/webauthn-2/#iface-pkcredential.
// Ref: #/components/schemas/PublicKeyCredential
type PublicKeyCredential struct {
	ID                      string                                     `json:"id"`
	RawId                   string                                     `json:"rawId"`
	Response                AuthenticatorResponse                      `json:"response"`
	Type                    string                                     `json:"type"`
	ClientExtensionResults  *PublicKeyCredentialClientExtensionResults `json:"clientExtensionResults"`
	AuthenticatorAttachment OptString                                  `json:"authenticatorAttachment"`
}

// GetID returns the value of ID.
func (s *PublicKeyCredential) GetID() string {
	return s.ID
}

// GetRawId returns the value of RawId.
func (s *PublicKeyCredential) GetRawId() string {
	return s.RawId
}

// GetResponse returns the value of Response.
func (s *PublicKeyCredential) GetResponse() AuthenticatorResponse {
	return s.Response
}

// GetType returns the value of Type.
func (s *PublicKeyCredential) GetType() string {
	return s.Type
}

// GetClientExtensionResults returns the value of ClientExtensionResults.
func (s *PublicKeyCredential) GetClientExtensionResults() *PublicKeyCredentialClientExtensionResults {
	return s.ClientExtensionResults
}

// GetAuthenticatorAttachment returns the value of AuthenticatorAttachment.
func (s *PublicKeyCredential) GetAuthenticatorAttachment() OptString {
	return s.AuthenticatorAttachment
}

// SetID sets the value of ID.
func (s *PublicKeyCredential) SetID(val string) {
	s.ID = val
}

// SetRawId sets the value of RawId.
func (s *PublicKeyCredential) SetRawId(val string) {
	s.RawId = val
}

// SetResponse sets the value of Response.
func (s *PublicKeyCredential) SetResponse(val AuthenticatorResponse) {
	s.Response = val
}

// SetType sets the value of Type.
func (s *PublicKeyCredential) SetType(val string) {
	s.Type = val
}

// SetClientExtensionResults sets the value of ClientExtensionResults.
func (s *PublicKeyCredential) SetClientExtensionResults(val *PublicKeyCredentialClientExtensionResults) {
	s.ClientExtensionResults = val
}

// SetAuthenticatorAttachment sets the value of AuthenticatorAttachment.
func (s *PublicKeyCredential) SetAuthenticatorAttachment(val OptString) {
	s.AuthenticatorAttachment = val
}

type PublicKeyCredentialClientExtensionResults struct{}

// Https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions.
// Ref: #/components/schemas/PublicKeyCredentialCreationOptions
type PublicKeyCredentialCreationOptions struct {
	Rp                     PublicKeyCredentialRpEntity             `json:"rp"`
	User                   PublicKeyCredentialUserEntity           `json:"user"`
	Challenge              string                                  `json:"challenge"`
	PubKeyCredParams       []PublicKeyCredentialParameters         `json:"pubKeyCredParams"`
	Timeout                OptInt                                  `json:"timeout"`
	ExcludeCredentials     []PublicKeyCredentialDescriptor         `json:"excludeCredentials"`
	AuthenticatorSelection OptAuthenticatorSelectionCriteria       `json:"authenticatorSelection"`
	Attestation            OptAttestationConveyancePreference      `json:"attestation"`
	Extensions             OptAuthenticationExtensionsClientInputs `json:"extensions"`
}

// GetRp returns the value of Rp.
func (s *PublicKeyCredentialCreationOptions) GetRp() PublicKeyCredentialRpEntity {
	return s.Rp
}

// GetUser returns the value of User.
func (s *PublicKeyCredentialCreationOptions) GetUser() PublicKeyCredentialUserEntity {
	return s.User
}

// GetChallenge returns the value of Challenge.
func (s *PublicKeyCredentialCreationOptions) GetChallenge() string {
	return s.Challenge
}

// GetPubKeyCredParams returns the value of PubKeyCredParams.
func (s *PublicKeyCredentialCreationOptions) GetPubKeyCredParams() []PublicKeyCredentialParameters {
	return s.PubKeyCredParams
}

// GetTimeout returns the value of Timeout.
func (s *PublicKeyCredentialCreationOptions) GetTimeout() OptInt {
	return s.Timeout
}

// GetExcludeCredentials returns the value of ExcludeCredentials.
func (s *PublicKeyCredentialCreationOptions) GetExcludeCredentials() []PublicKeyCredentialDescriptor {
	return s.ExcludeCredentials
}

// GetAuthenticatorSelection returns the value of AuthenticatorSelection.
func (s *PublicKeyCredentialCreationOptions) GetAuthenticatorSelection() OptAuthenticatorSelectionCriteria {
	return s.AuthenticatorSelection
}

// GetAttestation returns the value of Attestation.
func (s *PublicKeyCredentialCreationOptions) GetAttestation() OptAttestationConveyancePreference {
	return s.Attestation
}

// GetExtensions returns the value of Extensions.
func (s *PublicKeyCredentialCreationOptions) GetExtensions() OptAuthenticationExtensionsClientInputs {
	return s.Extensions
}

// SetRp sets the value of Rp.
func (s *PublicKeyCredentialCreationOptions) SetRp(val PublicKeyCredentialRpEntity) {
	s.Rp = val
}

// SetUser sets the value of User.
func (s *PublicKeyCredentialCreationOptions) SetUser(val PublicKeyCredentialUserEntity) {
	s.User = val
}

// SetChallenge sets the value of Challenge.
func (s *PublicKeyCredentialCreationOptions) SetChallenge(val string) {
	s.Challenge = val
}

// SetPubKeyCredParams sets the value of PubKeyCredParams.
func (s *PublicKeyCredentialCreationOptions) SetPubKeyCredParams(val []PublicKeyCredentialParameters) {
	s.PubKeyCredParams = val
}

// SetTimeout sets the value of Timeout.
func (s *PublicKeyCredentialCreationOptions) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetExcludeCredentials sets the value of ExcludeCredentials.
func (s *PublicKeyCredentialCreationOptions) SetExcludeCredentials(val []PublicKeyCredentialDescriptor) {
	s.ExcludeCredentials = val
}

// SetAuthenticatorSelection sets the value of AuthenticatorSelection.
func (s *PublicKeyCredentialCreationOptions) SetAuthenticatorSelection(val OptAuthenticatorSelectionCriteria) {
	s.AuthenticatorSelection = val
}

// SetAttestation sets the value of Attestation.
func (s *PublicKeyCredentialCreationOptions) SetAttestation(val OptAttestationConveyancePreference) {
	s.Attestation = val
}

// SetExtensions sets the value of Extensions.
func (s *PublicKeyCredentialCreationOptions) SetExtensions(val OptAuthenticationExtensionsClientInputs) {
	s.Extensions = val
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor.
// Ref: #/components/schemas/PublicKeyCredentialDescriptor
type PublicKeyCredentialDescriptor struct {
	Type       PublicKeyCredentialType                       `json:"type"`
	ID         string                                        `json:"id"`
	Transports []PublicKeyCredentialDescriptorTransportsItem `json:"transports"`
}

// GetType returns the value of Type.
func (s *PublicKeyCredentialDescriptor) GetType() PublicKeyCredentialType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PublicKeyCredentialDescriptor) GetID() string {
	return s.ID
}

// GetTransports returns the value of Transports.
func (s *PublicKeyCredentialDescriptor) GetTransports() []PublicKeyCredentialDescriptorTransportsItem {
	return s.Transports
}

// SetType sets the value of Type.
func (s *PublicKeyCredentialDescriptor) SetType(val PublicKeyCredentialType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PublicKeyCredentialDescriptor) SetID(val string) {
	s.ID = val
}

// SetTransports sets the value of Transports.
func (s *PublicKeyCredentialDescriptor) SetTransports(val []PublicKeyCredentialDescriptorTransportsItem) {
	s.Transports = val
}

type PublicKeyCredentialDescriptorTransportsItem string

const (
	PublicKeyCredentialDescriptorTransportsItemBle      PublicKeyCredentialDescriptorTransportsItem = "ble"
	PublicKeyCredentialDescriptorTransportsItemInternal PublicKeyCredentialDescriptorTransportsItem = "internal"
	PublicKeyCredentialDescriptorTransportsItemNfc      PublicKeyCredentialDescriptorTransportsItem = "nfc"
	PublicKeyCredentialDescriptorTransportsItemUsb      PublicKeyCredentialDescriptorTransportsItem = "usb"
	PublicKeyCredentialDescriptorTransportsItemCable    PublicKeyCredentialDescriptorTransportsItem = "cable"
	PublicKeyCredentialDescriptorTransportsItemHybrid   PublicKeyCredentialDescriptorTransportsItem = "hybrid"
)

// AllValues returns all PublicKeyCredentialDescriptorTransportsItem values.
func (PublicKeyCredentialDescriptorTransportsItem) AllValues() []PublicKeyCredentialDescriptorTransportsItem {
	return []PublicKeyCredentialDescriptorTransportsItem{
		PublicKeyCredentialDescriptorTransportsItemBle,
		PublicKeyCredentialDescriptorTransportsItemInternal,
		PublicKeyCredentialDescriptorTransportsItemNfc,
		PublicKeyCredentialDescriptorTransportsItemUsb,
		PublicKeyCredentialDescriptorTransportsItemCable,
		PublicKeyCredentialDescriptorTransportsItemHybrid,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublicKeyCredentialDescriptorTransportsItem) MarshalText() ([]byte, error) {
	switch s {
	case PublicKeyCredentialDescriptorTransportsItemBle:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemInternal:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemNfc:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemUsb:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemCable:
		return []byte(s), nil
	case PublicKeyCredentialDescriptorTransportsItemHybrid:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublicKeyCredentialDescriptorTransportsItem) UnmarshalText(data []byte) error {
	switch PublicKeyCredentialDescriptorTransportsItem(data) {
	case PublicKeyCredentialDescriptorTransportsItemBle:
		*s = PublicKeyCredentialDescriptorTransportsItemBle
		return nil
	case PublicKeyCredentialDescriptorTransportsItemInternal:
		*s = PublicKeyCredentialDescriptorTransportsItemInternal
		return nil
	case PublicKeyCredentialDescriptorTransportsItemNfc:
		*s = PublicKeyCredentialDescriptorTransportsItemNfc
		return nil
	case PublicKeyCredentialDescriptorTransportsItemUsb:
		*s = PublicKeyCredentialDescriptorTransportsItemUsb
		return nil
	case PublicKeyCredentialDescriptorTransportsItemCable:
		*s = PublicKeyCredentialDescriptorTransportsItemCable
		return nil
	case PublicKeyCredentialDescriptorTransportsItemHybrid:
		*s = PublicKeyCredentialDescriptorTransportsItemHybrid
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters.
// Ref: #/components/schemas/PublicKeyCredentialParameters
type PublicKeyCredentialParameters struct {
	Type PublicKeyCredentialType `json:"type"`
	Alg  float64                 `json:"alg"`
}

// GetType returns the value of Type.
func (s *PublicKeyCredentialParameters) GetType() PublicKeyCredentialType {
	return s.Type
}

// GetAlg returns the value of Alg.
func (s *PublicKeyCredentialParameters) GetAlg() float64 {
	return s.Alg
}

// SetType sets the value of Type.
func (s *PublicKeyCredentialParameters) SetType(val PublicKeyCredentialType) {
	s.Type = val
}

// SetAlg sets the value of Alg.
func (s *PublicKeyCredentialParameters) SetAlg(val float64) {
	s.Alg = val
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions.
// Ref: #/components/schemas/PublicKeyCredentialRequestOptions
type PublicKeyCredentialRequestOptions struct {
	Challenge        string                                               `json:"challenge"`
	Timeout          OptInt                                               `json:"timeout"`
	RpId             OptString                                            `json:"rpId"`
	AllowCredentials []PublicKeyCredentialDescriptor                      `json:"allowCredentials"`
	UserVerification OptPublicKeyCredentialRequestOptionsUserVerification `json:"userVerification"`
}

// GetChallenge returns the value of Challenge.
func (s *PublicKeyCredentialRequestOptions) GetChallenge() string {
	return s.Challenge
}

// GetTimeout returns the value of Timeout.
func (s *PublicKeyCredentialRequestOptions) GetTimeout() OptInt {
	return s.Timeout
}

// GetRpId returns the value of RpId.
func (s *PublicKeyCredentialRequestOptions) GetRpId() OptString {
	return s.RpId
}

// GetAllowCredentials returns the value of AllowCredentials.
func (s *PublicKeyCredentialRequestOptions) GetAllowCredentials() []PublicKeyCredentialDescriptor {
	return s.AllowCredentials
}

// GetUserVerification returns the value of UserVerification.
func (s *PublicKeyCredentialRequestOptions) GetUserVerification() OptPublicKeyCredentialRequestOptionsUserVerification {
	return s.UserVerification
}

// SetChallenge sets the value of Challenge.
func (s *PublicKeyCredentialRequestOptions) SetChallenge(val string) {
	s.Challenge = val
}

// SetTimeout sets the value of Timeout.
func (s *PublicKeyCredentialRequestOptions) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetRpId sets the value of RpId.
func (s *PublicKeyCredentialRequestOptions) SetRpId(val OptString) {
	s.RpId = val
}

// SetAllowCredentials sets the value of AllowCredentials.
func (s *PublicKeyCredentialRequestOptions) SetAllowCredentials(val []PublicKeyCredentialDescriptor) {
	s.AllowCredentials = val
}

// SetUserVerification sets the value of UserVerification.
func (s *PublicKeyCredentialRequestOptions) SetUserVerification(val OptPublicKeyCredentialRequestOptionsUserVerification) {
	s.UserVerification = val
}

type PublicKeyCredentialRequestOptionsUserVerification string

const (
	PublicKeyCredentialRequestOptionsUserVerificationDiscouraged PublicKeyCredentialRequestOptionsUserVerification = "discouraged"
	PublicKeyCredentialRequestOptionsUserVerificationPreferred   PublicKeyCredentialRequestOptionsUserVerification = "preferred"
	PublicKeyCredentialRequestOptionsUserVerificationRequired    PublicKeyCredentialRequestOptionsUserVerification = "required"
)

// AllValues returns all PublicKeyCredentialRequestOptionsUserVerification values.
func (PublicKeyCredentialRequestOptionsUserVerification) AllValues() []PublicKeyCredentialRequestOptionsUserVerification {
	return []PublicKeyCredentialRequestOptionsUserVerification{
		PublicKeyCredentialRequestOptionsUserVerificationDiscouraged,
		PublicKeyCredentialRequestOptionsUserVerificationPreferred,
		PublicKeyCredentialRequestOptionsUserVerificationRequired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublicKeyCredentialRequestOptionsUserVerification) MarshalText() ([]byte, error) {
	switch s {
	case PublicKeyCredentialRequestOptionsUserVerificationDiscouraged:
		return []byte(s), nil
	case PublicKeyCredentialRequestOptionsUserVerificationPreferred:
		return []byte(s), nil
	case PublicKeyCredentialRequestOptionsUserVerificationRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublicKeyCredentialRequestOptionsUserVerification) UnmarshalText(data []byte) error {
	switch PublicKeyCredentialRequestOptionsUserVerification(data) {
	case PublicKeyCredentialRequestOptionsUserVerificationDiscouraged:
		*s = PublicKeyCredentialRequestOptionsUserVerificationDiscouraged
		return nil
	case PublicKeyCredentialRequestOptionsUserVerificationPreferred:
		*s = PublicKeyCredentialRequestOptionsUserVerificationPreferred
		return nil
	case PublicKeyCredentialRequestOptionsUserVerificationRequired:
		*s = PublicKeyCredentialRequestOptionsUserVerificationRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity.
// Ref: #/components/schemas/PublicKeyCredentialRpEntity
type PublicKeyCredentialRpEntity struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *PublicKeyCredentialRpEntity) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *PublicKeyCredentialRpEntity) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *PublicKeyCredentialRpEntity) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PublicKeyCredentialRpEntity) SetName(val string) {
	s.Name = val
}

// Https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype.
// Ref: #/components/schemas/PublicKeyCredentialType
type PublicKeyCredentialType string

const (
	PublicKeyCredentialTypePublicKey PublicKeyCredentialType = "public-key"
)

// AllValues returns all PublicKeyCredentialType values.
func (PublicKeyCredentialType) AllValues() []PublicKeyCredentialType {
	return []PublicKeyCredentialType{
		PublicKeyCredentialTypePublicKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublicKeyCredentialType) MarshalText() ([]byte, error) {
	switch s {
	case PublicKeyCredentialTypePublicKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublicKeyCredentialType) UnmarshalText(data []byte) error {
	switch PublicKeyCredentialType(data) {
	case PublicKeyCredentialTypePublicKey:
		*s = PublicKeyCredentialTypePublicKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity.
// Ref: #/components/schemas/PublicKeyCredentialUserEntity
type PublicKeyCredentialUserEntity struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	DisplayName string `json:"displayName"`
}

// GetID returns the value of ID.
func (s *PublicKeyCredentialUserEntity) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *PublicKeyCredentialUserEntity) GetName() string {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *PublicKeyCredentialUserEntity) GetDisplayName() string {
	return s.DisplayName
}

// SetID sets the value of ID.
func (s *PublicKeyCredentialUserEntity) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PublicKeyCredentialUserEntity) SetName(val string) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *PublicKeyCredentialUserEntity) SetDisplayName(val string) {
	s.DisplayName = val
}

// Merged schema.
// Ref: #/components/schemas/PublicProfile
type PublicProfile struct {
	ID Identifier `json:"id"`
	// Merged property.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc      *PublicProfileMisc      `json:"misc"`
	Handle    AccountHandle           `json:"handle"`
	Name      AccountName             `json:"name"`
	Bio       AccountBio              `json:"bio"`
	Image     OptString               `json:"image"`
	Interests TagList                 `json:"interests"`
	Links     ProfileExternalLinkList `json:"links"`
	Meta      Metadata                `json:"meta"`
}

// GetID returns the value of ID.
func (s *PublicProfile) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PublicProfile) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PublicProfile) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *PublicProfile) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *PublicProfile) GetMisc() *PublicProfileMisc {
	return s.Misc
}

// GetHandle returns the value of Handle.
func (s *PublicProfile) GetHandle() AccountHandle {
	return s.Handle
}

// GetName returns the value of Name.
func (s *PublicProfile) GetName() AccountName {
	return s.Name
}

// GetBio returns the value of Bio.
func (s *PublicProfile) GetBio() AccountBio {
	return s.Bio
}

// GetImage returns the value of Image.
func (s *PublicProfile) GetImage() OptString {
	return s.Image
}

// GetInterests returns the value of Interests.
func (s *PublicProfile) GetInterests() TagList {
	return s.Interests
}

// GetLinks returns the value of Links.
func (s *PublicProfile) GetLinks() ProfileExternalLinkList {
	return s.Links
}

// GetMeta returns the value of Meta.
func (s *PublicProfile) GetMeta() Metadata {
	return s.Meta
}

// SetID sets the value of ID.
func (s *PublicProfile) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PublicProfile) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PublicProfile) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *PublicProfile) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *PublicProfile) SetMisc(val *PublicProfileMisc) {
	s.Misc = val
}

// SetHandle sets the value of Handle.
func (s *PublicProfile) SetHandle(val AccountHandle) {
	s.Handle = val
}

// SetName sets the value of Name.
func (s *PublicProfile) SetName(val AccountName) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *PublicProfile) SetBio(val AccountBio) {
	s.Bio = val
}

// SetImage sets the value of Image.
func (s *PublicProfile) SetImage(val OptString) {
	s.Image = val
}

// SetInterests sets the value of Interests.
func (s *PublicProfile) SetInterests(val TagList) {
	s.Interests = val
}

// SetLinks sets the value of Links.
func (s *PublicProfile) SetLinks(val ProfileExternalLinkList) {
	s.Links = val
}

// SetMeta sets the value of Meta.
func (s *PublicProfile) SetMeta(val Metadata) {
	s.Meta = val
}

func (*PublicProfile) profileGetRes() {}

type PublicProfileList []PublicProfile

// Merged schema.
// Ref: #/components/schemas/PublicProfileListResult
type PublicProfileListResult struct {
	PageSize    int               `json:"page_size"`
	Results     int               `json:"results"`
	TotalPages  int               `json:"total_pages"`
	CurrentPage int               `json:"current_page"`
	NextPage    OptInt            `json:"next_page"`
	Profiles    PublicProfileList `json:"profiles"`
}

// GetPageSize returns the value of PageSize.
func (s *PublicProfileListResult) GetPageSize() int {
	return s.PageSize
}

// GetResults returns the value of Results.
func (s *PublicProfileListResult) GetResults() int {
	return s.Results
}

// GetTotalPages returns the value of TotalPages.
func (s *PublicProfileListResult) GetTotalPages() int {
	return s.TotalPages
}

// GetCurrentPage returns the value of CurrentPage.
func (s *PublicProfileListResult) GetCurrentPage() int {
	return s.CurrentPage
}

// GetNextPage returns the value of NextPage.
func (s *PublicProfileListResult) GetNextPage() OptInt {
	return s.NextPage
}

// GetProfiles returns the value of Profiles.
func (s *PublicProfileListResult) GetProfiles() PublicProfileList {
	return s.Profiles
}

// SetPageSize sets the value of PageSize.
func (s *PublicProfileListResult) SetPageSize(val int) {
	s.PageSize = val
}

// SetResults sets the value of Results.
func (s *PublicProfileListResult) SetResults(val int) {
	s.Results = val
}

// SetTotalPages sets the value of TotalPages.
func (s *PublicProfileListResult) SetTotalPages(val int) {
	s.TotalPages = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *PublicProfileListResult) SetCurrentPage(val int) {
	s.CurrentPage = val
}

// SetNextPage sets the value of NextPage.
func (s *PublicProfileListResult) SetNextPage(val OptInt) {
	s.NextPage = val
}

// SetProfiles sets the value of Profiles.
func (s *PublicProfileListResult) SetProfiles(val PublicProfileList) {
	s.Profiles = val
}

func (*PublicProfileListResult) profileListRes() {}

// Arbitrary extra data stored with the resource.
type PublicProfileMisc struct{}

// Ref: #/components/schemas/React
type React struct {
	ID    OptIdentifier `json:"id"`
	Emoji OptString     `json:"emoji"`
}

// GetID returns the value of ID.
func (s *React) GetID() OptIdentifier {
	return s.ID
}

// GetEmoji returns the value of Emoji.
func (s *React) GetEmoji() OptString {
	return s.Emoji
}

// SetID sets the value of ID.
func (s *React) SetID(val OptIdentifier) {
	s.ID = val
}

// SetEmoji sets the value of Emoji.
func (s *React) SetEmoji(val OptString) {
	s.Emoji = val
}

func (*React) postReactAddRes() {}

type ReactList []React

type RelevanceScore float64

// Https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement.
// Ref: #/components/schemas/ResidentKeyRequirement
type ResidentKeyRequirement string

const (
	ResidentKeyRequirementDiscouraged ResidentKeyRequirement = "discouraged"
	ResidentKeyRequirementPreferred   ResidentKeyRequirement = "preferred"
	ResidentKeyRequirementRequired    ResidentKeyRequirement = "required"
)

// AllValues returns all ResidentKeyRequirement values.
func (ResidentKeyRequirement) AllValues() []ResidentKeyRequirement {
	return []ResidentKeyRequirement{
		ResidentKeyRequirementDiscouraged,
		ResidentKeyRequirementPreferred,
		ResidentKeyRequirementRequired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResidentKeyRequirement) MarshalText() ([]byte, error) {
	switch s {
	case ResidentKeyRequirementDiscouraged:
		return []byte(s), nil
	case ResidentKeyRequirementPreferred:
		return []byte(s), nil
	case ResidentKeyRequirementRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResidentKeyRequirement) UnmarshalText(data []byte) error {
	switch ResidentKeyRequirement(data) {
	case ResidentKeyRequirementDiscouraged:
		*s = ResidentKeyRequirementDiscouraged
		return nil
	case ResidentKeyRequirementPreferred:
		*s = ResidentKeyRequirementPreferred
		return nil
	case ResidentKeyRequirementRequired:
		*s = ResidentKeyRequirementRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Slug string

// A tag which can link profiles or threads via interests.
// Ref: #/components/schemas/Tag
type Tag struct {
	ID     Identifier `json:"id"`
	Name   TagName    `json:"name"`
	Colour OptString  `json:"colour"`
}

// GetID returns the value of ID.
func (s *Tag) GetID() Identifier {
	return s.ID
}

// GetName returns the value of Name.
func (s *Tag) GetName() TagName {
	return s.Name
}

// GetColour returns the value of Colour.
func (s *Tag) GetColour() OptString {
	return s.Colour
}

// SetID sets the value of ID.
func (s *Tag) SetID(val Identifier) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val TagName) {
	s.Name = val
}

// SetColour sets the value of Colour.
func (s *Tag) SetColour(val OptString) {
	s.Colour = val
}

type TagList []Tag

type TagListIDs []Identifier

type TagName string

// Merged schema.
// Ref: #/components/schemas/Thread
type Thread struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc *ThreadMisc `json:"misc"`
	// The title of the thread.
	Title string     `json:"title"`
	Slug  ThreadMark `json:"slug"`
	// A short version of the thread's body text for use in previews.
	Short string `json:"short"`
	// Whether the thread is pinned in this category.
	Pinned bool             `json:"pinned"`
	Author ProfileReference `json:"author"`
	// A list of tags associated with the thread.
	Tags []string `json:"tags"`
	// The number of posts under this thread.
	PostCount      int               `json:"post_count"`
	Category       CategoryReference `json:"category"`
	Reacts         ReactList         `json:"reacts"`
	Meta           OptMetadata       `json:"meta"`
	Assets         AssetList         `json:"assets"`
	Collections    CollectionList    `json:"collections"`
	Link           OptLink           `json:"link"`
	Recomentations DatagraphNodeList `json:"recomentations"`
	Posts          PostList          `json:"posts"`
}

// GetID returns the value of ID.
func (s *Thread) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Thread) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Thread) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Thread) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *Thread) GetMisc() *ThreadMisc {
	return s.Misc
}

// GetTitle returns the value of Title.
func (s *Thread) GetTitle() string {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s *Thread) GetSlug() ThreadMark {
	return s.Slug
}

// GetShort returns the value of Short.
func (s *Thread) GetShort() string {
	return s.Short
}

// GetPinned returns the value of Pinned.
func (s *Thread) GetPinned() bool {
	return s.Pinned
}

// GetAuthor returns the value of Author.
func (s *Thread) GetAuthor() ProfileReference {
	return s.Author
}

// GetTags returns the value of Tags.
func (s *Thread) GetTags() []string {
	return s.Tags
}

// GetPostCount returns the value of PostCount.
func (s *Thread) GetPostCount() int {
	return s.PostCount
}

// GetCategory returns the value of Category.
func (s *Thread) GetCategory() CategoryReference {
	return s.Category
}

// GetReacts returns the value of Reacts.
func (s *Thread) GetReacts() ReactList {
	return s.Reacts
}

// GetMeta returns the value of Meta.
func (s *Thread) GetMeta() OptMetadata {
	return s.Meta
}

// GetAssets returns the value of Assets.
func (s *Thread) GetAssets() AssetList {
	return s.Assets
}

// GetCollections returns the value of Collections.
func (s *Thread) GetCollections() CollectionList {
	return s.Collections
}

// GetLink returns the value of Link.
func (s *Thread) GetLink() OptLink {
	return s.Link
}

// GetRecomentations returns the value of Recomentations.
func (s *Thread) GetRecomentations() DatagraphNodeList {
	return s.Recomentations
}

// GetPosts returns the value of Posts.
func (s *Thread) GetPosts() PostList {
	return s.Posts
}

// SetID sets the value of ID.
func (s *Thread) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Thread) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Thread) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Thread) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *Thread) SetMisc(val *ThreadMisc) {
	s.Misc = val
}

// SetTitle sets the value of Title.
func (s *Thread) SetTitle(val string) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *Thread) SetSlug(val ThreadMark) {
	s.Slug = val
}

// SetShort sets the value of Short.
func (s *Thread) SetShort(val string) {
	s.Short = val
}

// SetPinned sets the value of Pinned.
func (s *Thread) SetPinned(val bool) {
	s.Pinned = val
}

// SetAuthor sets the value of Author.
func (s *Thread) SetAuthor(val ProfileReference) {
	s.Author = val
}

// SetTags sets the value of Tags.
func (s *Thread) SetTags(val []string) {
	s.Tags = val
}

// SetPostCount sets the value of PostCount.
func (s *Thread) SetPostCount(val int) {
	s.PostCount = val
}

// SetCategory sets the value of Category.
func (s *Thread) SetCategory(val CategoryReference) {
	s.Category = val
}

// SetReacts sets the value of Reacts.
func (s *Thread) SetReacts(val ReactList) {
	s.Reacts = val
}

// SetMeta sets the value of Meta.
func (s *Thread) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetAssets sets the value of Assets.
func (s *Thread) SetAssets(val AssetList) {
	s.Assets = val
}

// SetCollections sets the value of Collections.
func (s *Thread) SetCollections(val CollectionList) {
	s.Collections = val
}

// SetLink sets the value of Link.
func (s *Thread) SetLink(val OptLink) {
	s.Link = val
}

// SetRecomentations sets the value of Recomentations.
func (s *Thread) SetRecomentations(val DatagraphNodeList) {
	s.Recomentations = val
}

// SetPosts sets the value of Posts.
func (s *Thread) SetPosts(val PostList) {
	s.Posts = val
}

func (*Thread) threadCreateRes() {}
func (*Thread) threadGetRes()    {}
func (*Thread) threadUpdateRes() {}

// ThreadDeleteOK is response for ThreadDelete operation.
type ThreadDeleteOK struct{}

func (*ThreadDeleteOK) threadDeleteRes() {}

// Ref: #/components/schemas/ThreadInitialProps
type ThreadInitialProps struct {
	Title      ThreadTitle `json:"title"`
	Body       PostContent `json:"body"`
	Tags       TagListIDs  `json:"tags"`
	Meta       OptMetadata `json:"meta"`
	Category   Identifier  `json:"category"`
	Visibility Visibility  `json:"visibility"`
	URL        OptURL      `json:"url"`
}

// GetTitle returns the value of Title.
func (s *ThreadInitialProps) GetTitle() ThreadTitle {
	return s.Title
}

// GetBody returns the value of Body.
func (s *ThreadInitialProps) GetBody() PostContent {
	return s.Body
}

// GetTags returns the value of Tags.
func (s *ThreadInitialProps) GetTags() TagListIDs {
	return s.Tags
}

// GetMeta returns the value of Meta.
func (s *ThreadInitialProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetCategory returns the value of Category.
func (s *ThreadInitialProps) GetCategory() Identifier {
	return s.Category
}

// GetVisibility returns the value of Visibility.
func (s *ThreadInitialProps) GetVisibility() Visibility {
	return s.Visibility
}

// GetURL returns the value of URL.
func (s *ThreadInitialProps) GetURL() OptURL {
	return s.URL
}

// SetTitle sets the value of Title.
func (s *ThreadInitialProps) SetTitle(val ThreadTitle) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *ThreadInitialProps) SetBody(val PostContent) {
	s.Body = val
}

// SetTags sets the value of Tags.
func (s *ThreadInitialProps) SetTags(val TagListIDs) {
	s.Tags = val
}

// SetMeta sets the value of Meta.
func (s *ThreadInitialProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetCategory sets the value of Category.
func (s *ThreadInitialProps) SetCategory(val Identifier) {
	s.Category = val
}

// SetVisibility sets the value of Visibility.
func (s *ThreadInitialProps) SetVisibility(val Visibility) {
	s.Visibility = val
}

// SetURL sets the value of URL.
func (s *ThreadInitialProps) SetURL(val OptURL) {
	s.URL = val
}

type ThreadList []ThreadReference

// Merged schema.
// Ref: #/components/schemas/ThreadListResult
type ThreadListResult struct {
	PageSize    int        `json:"page_size"`
	Results     int        `json:"results"`
	TotalPages  int        `json:"total_pages"`
	CurrentPage int        `json:"current_page"`
	NextPage    OptInt     `json:"next_page"`
	Threads     ThreadList `json:"threads"`
}

// GetPageSize returns the value of PageSize.
func (s *ThreadListResult) GetPageSize() int {
	return s.PageSize
}

// GetResults returns the value of Results.
func (s *ThreadListResult) GetResults() int {
	return s.Results
}

// GetTotalPages returns the value of TotalPages.
func (s *ThreadListResult) GetTotalPages() int {
	return s.TotalPages
}

// GetCurrentPage returns the value of CurrentPage.
func (s *ThreadListResult) GetCurrentPage() int {
	return s.CurrentPage
}

// GetNextPage returns the value of NextPage.
func (s *ThreadListResult) GetNextPage() OptInt {
	return s.NextPage
}

// GetThreads returns the value of Threads.
func (s *ThreadListResult) GetThreads() ThreadList {
	return s.Threads
}

// SetPageSize sets the value of PageSize.
func (s *ThreadListResult) SetPageSize(val int) {
	s.PageSize = val
}

// SetResults sets the value of Results.
func (s *ThreadListResult) SetResults(val int) {
	s.Results = val
}

// SetTotalPages sets the value of TotalPages.
func (s *ThreadListResult) SetTotalPages(val int) {
	s.TotalPages = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *ThreadListResult) SetCurrentPage(val int) {
	s.CurrentPage = val
}

// SetNextPage sets the value of NextPage.
func (s *ThreadListResult) SetNextPage(val OptInt) {
	s.NextPage = val
}

// SetThreads sets the value of Threads.
func (s *ThreadListResult) SetThreads(val ThreadList) {
	s.Threads = val
}

func (*ThreadListResult) threadListRes() {}

type ThreadMark string

// Arbitrary extra data stored with the resource.
type ThreadMisc struct{}

// Ref: #/components/schemas/ThreadMutableProps
type ThreadMutableProps struct {
	Title      OptThreadTitle `json:"title"`
	Body       OptPostContent `json:"body"`
	Tags       TagListIDs     `json:"tags"`
	Meta       OptMetadata    `json:"meta"`
	Category   OptIdentifier  `json:"category"`
	Visibility OptVisibility  `json:"visibility"`
	URL        OptURL         `json:"url"`
}

// GetTitle returns the value of Title.
func (s *ThreadMutableProps) GetTitle() OptThreadTitle {
	return s.Title
}

// GetBody returns the value of Body.
func (s *ThreadMutableProps) GetBody() OptPostContent {
	return s.Body
}

// GetTags returns the value of Tags.
func (s *ThreadMutableProps) GetTags() TagListIDs {
	return s.Tags
}

// GetMeta returns the value of Meta.
func (s *ThreadMutableProps) GetMeta() OptMetadata {
	return s.Meta
}

// GetCategory returns the value of Category.
func (s *ThreadMutableProps) GetCategory() OptIdentifier {
	return s.Category
}

// GetVisibility returns the value of Visibility.
func (s *ThreadMutableProps) GetVisibility() OptVisibility {
	return s.Visibility
}

// GetURL returns the value of URL.
func (s *ThreadMutableProps) GetURL() OptURL {
	return s.URL
}

// SetTitle sets the value of Title.
func (s *ThreadMutableProps) SetTitle(val OptThreadTitle) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *ThreadMutableProps) SetBody(val OptPostContent) {
	s.Body = val
}

// SetTags sets the value of Tags.
func (s *ThreadMutableProps) SetTags(val TagListIDs) {
	s.Tags = val
}

// SetMeta sets the value of Meta.
func (s *ThreadMutableProps) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetCategory sets the value of Category.
func (s *ThreadMutableProps) SetCategory(val OptIdentifier) {
	s.Category = val
}

// SetVisibility sets the value of Visibility.
func (s *ThreadMutableProps) SetVisibility(val OptVisibility) {
	s.Visibility = val
}

// SetURL sets the value of URL.
func (s *ThreadMutableProps) SetURL(val OptURL) {
	s.URL = val
}

// Merged schema.
// Ref: #/components/schemas/ThreadReference
type ThreadReference struct {
	ID Identifier `json:"id"`
	// The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	// The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time the resource was soft-deleted.
	DeletedAt OptDateTime `json:"deletedAt"`
	// Arbitrary extra data stored with the resource.
	Misc *ThreadReferenceMisc `json:"misc"`
	// The title of the thread.
	Title string     `json:"title"`
	Slug  ThreadMark `json:"slug"`
	// A short version of the thread's body text for use in previews.
	Short string `json:"short"`
	// Whether the thread is pinned in this category.
	Pinned bool             `json:"pinned"`
	Author ProfileReference `json:"author"`
	// A list of tags associated with the thread.
	Tags []string `json:"tags"`
	// The number of posts under this thread.
	PostCount   int               `json:"post_count"`
	Category    CategoryReference `json:"category"`
	Reacts      ReactList         `json:"reacts"`
	Meta        OptMetadata       `json:"meta"`
	Assets      AssetList         `json:"assets"`
	Collections CollectionList    `json:"collections"`
	Link        OptLink           `json:"link"`
}

// GetID returns the value of ID.
func (s *ThreadReference) GetID() Identifier {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ThreadReference) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ThreadReference) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *ThreadReference) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMisc returns the value of Misc.
func (s *ThreadReference) GetMisc() *ThreadReferenceMisc {
	return s.Misc
}

// GetTitle returns the value of Title.
func (s *ThreadReference) GetTitle() string {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s *ThreadReference) GetSlug() ThreadMark {
	return s.Slug
}

// GetShort returns the value of Short.
func (s *ThreadReference) GetShort() string {
	return s.Short
}

// GetPinned returns the value of Pinned.
func (s *ThreadReference) GetPinned() bool {
	return s.Pinned
}

// GetAuthor returns the value of Author.
func (s *ThreadReference) GetAuthor() ProfileReference {
	return s.Author
}

// GetTags returns the value of Tags.
func (s *ThreadReference) GetTags() []string {
	return s.Tags
}

// GetPostCount returns the value of PostCount.
func (s *ThreadReference) GetPostCount() int {
	return s.PostCount
}

// GetCategory returns the value of Category.
func (s *ThreadReference) GetCategory() CategoryReference {
	return s.Category
}

// GetReacts returns the value of Reacts.
func (s *ThreadReference) GetReacts() ReactList {
	return s.Reacts
}

// GetMeta returns the value of Meta.
func (s *ThreadReference) GetMeta() OptMetadata {
	return s.Meta
}

// GetAssets returns the value of Assets.
func (s *ThreadReference) GetAssets() AssetList {
	return s.Assets
}

// GetCollections returns the value of Collections.
func (s *ThreadReference) GetCollections() CollectionList {
	return s.Collections
}

// GetLink returns the value of Link.
func (s *ThreadReference) GetLink() OptLink {
	return s.Link
}

// SetID sets the value of ID.
func (s *ThreadReference) SetID(val Identifier) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ThreadReference) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ThreadReference) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *ThreadReference) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMisc sets the value of Misc.
func (s *ThreadReference) SetMisc(val *ThreadReferenceMisc) {
	s.Misc = val
}

// SetTitle sets the value of Title.
func (s *ThreadReference) SetTitle(val string) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *ThreadReference) SetSlug(val ThreadMark) {
	s.Slug = val
}

// SetShort sets the value of Short.
func (s *ThreadReference) SetShort(val string) {
	s.Short = val
}

// SetPinned sets the value of Pinned.
func (s *ThreadReference) SetPinned(val bool) {
	s.Pinned = val
}

// SetAuthor sets the value of Author.
func (s *ThreadReference) SetAuthor(val ProfileReference) {
	s.Author = val
}

// SetTags sets the value of Tags.
func (s *ThreadReference) SetTags(val []string) {
	s.Tags = val
}

// SetPostCount sets the value of PostCount.
func (s *ThreadReference) SetPostCount(val int) {
	s.PostCount = val
}

// SetCategory sets the value of Category.
func (s *ThreadReference) SetCategory(val CategoryReference) {
	s.Category = val
}

// SetReacts sets the value of Reacts.
func (s *ThreadReference) SetReacts(val ReactList) {
	s.Reacts = val
}

// SetMeta sets the value of Meta.
func (s *ThreadReference) SetMeta(val OptMetadata) {
	s.Meta = val
}

// SetAssets sets the value of Assets.
func (s *ThreadReference) SetAssets(val AssetList) {
	s.Assets = val
}

// SetCollections sets the value of Collections.
func (s *ThreadReference) SetCollections(val CollectionList) {
	s.Collections = val
}

// SetLink sets the value of Link.
func (s *ThreadReference) SetLink(val OptLink) {
	s.Link = val
}

// Arbitrary extra data stored with the resource.
type ThreadReferenceMisc struct{}

type ThreadTitle string

type URL string

// Ref: #/components/responses/Unauthorised
type Unauthorised struct{}

func (*Unauthorised) accountGetAvatarRes()        {}
func (*Unauthorised) accountGetRes()              {}
func (*Unauthorised) accountSetAvatarRes()        {}
func (*Unauthorised) accountUpdateRes()           {}
func (*Unauthorised) adminAccountBanCreateRes()   {}
func (*Unauthorised) adminAccountBanRemoveRes()   {}
func (*Unauthorised) adminSettingsUpdateRes()     {}
func (*Unauthorised) assetGetRes()                {}
func (*Unauthorised) assetUploadRes()             {}
func (*Unauthorised) authEmailPasswordSigninRes() {}
func (*Unauthorised) authEmailSigninRes()         {}
func (*Unauthorised) authEmailVerifyRes()         {}
func (*Unauthorised) authPasswordCreateRes()      {}
func (*Unauthorised) authPasswordSigninRes()      {}
func (*Unauthorised) authPasswordUpdateRes()      {}
func (*Unauthorised) categoryCreateRes()          {}
func (*Unauthorised) categoryUpdateRes()          {}
func (*Unauthorised) collectionAddNodeRes()       {}
func (*Unauthorised) collectionAddPostRes()       {}
func (*Unauthorised) collectionCreateRes()        {}
func (*Unauthorised) collectionDeleteRes()        {}
func (*Unauthorised) collectionGetRes()           {}
func (*Unauthorised) collectionRemoveNodeRes()    {}
func (*Unauthorised) collectionRemovePostRes()    {}
func (*Unauthorised) collectionUpdateRes()        {}
func (*Unauthorised) datagraphSearchRes()         {}
func (*Unauthorised) iconUploadRes()              {}
func (*Unauthorised) linkCreateRes()              {}
func (*Unauthorised) nodeAddAssetRes()            {}
func (*Unauthorised) nodeAddNodeRes()             {}
func (*Unauthorised) nodeCreateRes()              {}
func (*Unauthorised) nodeDeleteRes()              {}
func (*Unauthorised) nodeGetRes()                 {}
func (*Unauthorised) nodeRemoveAssetRes()         {}
func (*Unauthorised) nodeRemoveNodeRes()          {}
func (*Unauthorised) nodeUpdateRes()              {}
func (*Unauthorised) nodeUpdateVisibilityRes()    {}
func (*Unauthorised) oAuthProviderCallbackRes()   {}
func (*Unauthorised) postCreateRes()              {}
func (*Unauthorised) postDeleteRes()              {}
func (*Unauthorised) postReactAddRes()            {}
func (*Unauthorised) postSearchRes()              {}
func (*Unauthorised) postUpdateRes()              {}
func (*Unauthorised) profileGetRes()              {}
func (*Unauthorised) profileListRes()             {}
func (*Unauthorised) threadCreateRes()            {}
func (*Unauthorised) threadDeleteRes()            {}
func (*Unauthorised) threadGetRes()               {}
func (*Unauthorised) threadListRes()              {}
func (*Unauthorised) threadUpdateRes()            {}
func (*Unauthorised) webAuthnGetAssertionRes()    {}
func (*Unauthorised) webAuthnMakeAssertionRes()   {}

// Https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement.
// Ref: #/components/schemas/UserVerificationRequirement
type UserVerificationRequirement string

const (
	UserVerificationRequirementDiscouraged UserVerificationRequirement = "discouraged"
	UserVerificationRequirementPreferred   UserVerificationRequirement = "preferred"
	UserVerificationRequirementRequired    UserVerificationRequirement = "required"
)

// AllValues returns all UserVerificationRequirement values.
func (UserVerificationRequirement) AllValues() []UserVerificationRequirement {
	return []UserVerificationRequirement{
		UserVerificationRequirementDiscouraged,
		UserVerificationRequirementPreferred,
		UserVerificationRequirementRequired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserVerificationRequirement) MarshalText() ([]byte, error) {
	switch s {
	case UserVerificationRequirementDiscouraged:
		return []byte(s), nil
	case UserVerificationRequirementPreferred:
		return []byte(s), nil
	case UserVerificationRequirementRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserVerificationRequirement) UnmarshalText(data []byte) error {
	switch UserVerificationRequirement(data) {
	case UserVerificationRequirementDiscouraged:
		*s = UserVerificationRequirementDiscouraged
		return nil
	case UserVerificationRequirementPreferred:
		*s = UserVerificationRequirementPreferred
		return nil
	case UserVerificationRequirementRequired:
		*s = UserVerificationRequirementRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Visibility
type Visibility string

const (
	VisibilityDraft     Visibility = "draft"
	VisibilityUnlisted  Visibility = "unlisted"
	VisibilityReview    Visibility = "review"
	VisibilityPublished Visibility = "published"
)

// AllValues returns all Visibility values.
func (Visibility) AllValues() []Visibility {
	return []Visibility{
		VisibilityDraft,
		VisibilityUnlisted,
		VisibilityReview,
		VisibilityPublished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Visibility) MarshalText() ([]byte, error) {
	switch s {
	case VisibilityDraft:
		return []byte(s), nil
	case VisibilityUnlisted:
		return []byte(s), nil
	case VisibilityReview:
		return []byte(s), nil
	case VisibilityPublished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Visibility) UnmarshalText(data []byte) error {
	switch Visibility(data) {
	case VisibilityDraft:
		*s = VisibilityDraft
		return nil
	case VisibilityUnlisted:
		*s = VisibilityUnlisted
		return nil
	case VisibilityReview:
		*s = VisibilityReview
		return nil
	case VisibilityPublished:
		*s = VisibilityPublished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VisibilityMutationProps
type VisibilityMutationProps struct {
	Visibility Visibility `json:"visibility"`
}

// GetVisibility returns the value of Visibility.
func (s *VisibilityMutationProps) GetVisibility() Visibility {
	return s.Visibility
}

// SetVisibility sets the value of Visibility.
func (s *VisibilityMutationProps) SetVisibility(val Visibility) {
	s.Visibility = val
}

// WebAuthnGetAssertionOKHeaders wraps CredentialRequestOptions with response headers.
type WebAuthnGetAssertionOKHeaders struct {
	SetCookie OptString
	Response  CredentialRequestOptions
}

// GetSetCookie returns the value of SetCookie.
func (s *WebAuthnGetAssertionOKHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *WebAuthnGetAssertionOKHeaders) GetResponse() CredentialRequestOptions {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *WebAuthnGetAssertionOKHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *WebAuthnGetAssertionOKHeaders) SetResponse(val CredentialRequestOptions) {
	s.Response = val
}

func (*WebAuthnGetAssertionOKHeaders) webAuthnGetAssertionRes() {}

// Https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension.
// Ref: #/components/schemas/WebAuthnPublicKeyCreationOptions
type WebAuthnPublicKeyCreationOptions struct {
	PublicKey PublicKeyCredentialCreationOptions `json:"publicKey"`
}

// GetPublicKey returns the value of PublicKey.
func (s *WebAuthnPublicKeyCreationOptions) GetPublicKey() PublicKeyCredentialCreationOptions {
	return s.PublicKey
}

// SetPublicKey sets the value of PublicKey.
func (s *WebAuthnPublicKeyCreationOptions) SetPublicKey(val PublicKeyCredentialCreationOptions) {
	s.PublicKey = val
}

// WebAuthnRequestCredentialOKHeaders wraps WebAuthnPublicKeyCreationOptions with response headers.
type WebAuthnRequestCredentialOKHeaders struct {
	SetCookie OptString
	Response  WebAuthnPublicKeyCreationOptions
}

// GetSetCookie returns the value of SetCookie.
func (s *WebAuthnRequestCredentialOKHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *WebAuthnRequestCredentialOKHeaders) GetResponse() WebAuthnPublicKeyCreationOptions {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *WebAuthnRequestCredentialOKHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *WebAuthnRequestCredentialOKHeaders) SetResponse(val WebAuthnPublicKeyCreationOptions) {
	s.Response = val
}

func (*WebAuthnRequestCredentialOKHeaders) webAuthnRequestCredentialRes() {}

type Webauthn struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Webauthn) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Webauthn) SetAPIKey(val string) {
	s.APIKey = val
}
