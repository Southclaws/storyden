// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "openapi.json"
				origElem := elem
				if l := len("openapi.json"); len(elem) >= l && elem[0:l] == "openapi.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetSpecRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'v': // Prefix: "v"
				origElem := elem
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"
					origElem := elem
					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						origElem := elem
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccounts"
							origElem := elem
							if l := len("ccounts"); len(elem) >= l && elem[0:l] == "ccounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleAccountGetRequest([0]string{}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleAccountUpdateRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "self/a"
									origElem := elem
									if l := len("self/a"); len(elem) >= l && elem[0:l] == "self/a" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'u': // Prefix: "uth-methods"
										origElem := elem
										if l := len("uth-methods"); len(elem) >= l && elem[0:l] == "uth-methods" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleAccountAuthProviderListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "auth_method_id"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "DELETE":
													s.handleAccountAuthMethodDeleteRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 'v': // Prefix: "vatar"
										origElem := elem
										if l := len("vatar"); len(elem) >= l && elem[0:l] == "vatar" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleAccountSetAvatarRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}
								// Param: "account_handle"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/avatar"
									origElem := elem
									if l := len("/avatar"); len(elem) >= l && elem[0:l] == "/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAccountGetAvatarRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'd': // Prefix: "dmin"
							origElem := elem
							if l := len("dmin"); len(elem) >= l && elem[0:l] == "dmin" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "PATCH":
									s.handleAdminSettingsUpdateRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/bans/"
								origElem := elem
								if l := len("/bans/"); len(elem) >= l && elem[0:l] == "/bans/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "account_handle"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleAdminAccountBanRemoveRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleAdminAccountBanCreateRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "ssets"
							origElem := elem
							if l := len("ssets"); len(elem) >= l && elem[0:l] == "ssets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleAssetUploadRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "asset_filename"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAssetGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'u': // Prefix: "uth"
							origElem := elem
							if l := len("uth"); len(elem) >= l && elem[0:l] == "uth" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleAuthProviderListRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "email"
									origElem := elem
									if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '-': // Prefix: "-password/sign"
										origElem := elem
										if l := len("-password/sign"); len(elem) >= l && elem[0:l] == "-password/sign" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'i': // Prefix: "in"
											origElem := elem
											if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleAuthEmailPasswordSigninRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										case 'u': // Prefix: "up"
											origElem := elem
											if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleAuthEmailPasswordSignupRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 's': // Prefix: "sign"
											origElem := elem
											if l := len("sign"); len(elem) >= l && elem[0:l] == "sign" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "in"
												origElem := elem
												if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleAuthEmailSigninRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

												elem = origElem
											case 'u': // Prefix: "up"
												origElem := elem
												if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleAuthEmailSignupRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

												elem = origElem
											}

											elem = origElem
										case 'v': // Prefix: "verify"
											origElem := elem
											if l := len("verify"); len(elem) >= l && elem[0:l] == "verify" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleAuthEmailVerifyRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								case 'l': // Prefix: "logout"
									origElem := elem
									if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAuthProviderLogoutRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 'o': // Prefix: "oauth/"
									origElem := elem
									if l := len("oauth/"); len(elem) >= l && elem[0:l] == "oauth/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "oauth_provider"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/callback"
										origElem := elem
										if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleOAuthProviderCallbackRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case 'p': // Prefix: "p"
									origElem := elem
									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assword"
										origElem := elem
										if l := len("assword"); len(elem) >= l && elem[0:l] == "assword" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "PATCH":
												s.handleAuthPasswordUpdateRequest([0]string{}, elemIsEscaped, w, r)
											case "POST":
												s.handleAuthPasswordCreateRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "PATCH,POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/sign"
											origElem := elem
											if l := len("/sign"); len(elem) >= l && elem[0:l] == "/sign" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "in"
												origElem := elem
												if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleAuthPasswordSigninRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

												elem = origElem
											case 'u': // Prefix: "up"
												origElem := elem
												if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleAuthPasswordSignupRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

												elem = origElem
											}

											elem = origElem
										}

										elem = origElem
									case 'h': // Prefix: "hone"
										origElem := elem
										if l := len("hone"); len(elem) >= l && elem[0:l] == "hone" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handlePhoneRequestCodeRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "PUT":
													s.handlePhoneSubmitCodeRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "PUT")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								case 'w': // Prefix: "webauthn/"
									origElem := elem
									if l := len("webauthn/"); len(elem) >= l && elem[0:l] == "webauthn/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assert"
										origElem := elem
										if l := len("assert"); len(elem) >= l && elem[0:l] == "assert" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleWebAuthnMakeAssertionRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWebAuthnGetAssertionRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 'm': // Prefix: "make"
										origElem := elem
										if l := len("make"); len(elem) >= l && elem[0:l] == "make" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleWebAuthnMakeCredentialRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWebAuthnRequestCredentialRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'c': // Prefix: "c"
						origElem := elem
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ategories"
							origElem := elem
							if l := len("ategories"); len(elem) >= l && elem[0:l] == "ategories" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleCategoryListRequest([0]string{}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleCategoryUpdateOrderRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleCategoryCreateRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "category_id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PATCH":
										s.handleCategoryUpdateRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PATCH")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'o': // Prefix: "ollections"
							origElem := elem
							if l := len("ollections"); len(elem) >= l && elem[0:l] == "ollections" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleCollectionListRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleCollectionCreateRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "collection_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleCollectionDeleteRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleCollectionGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PATCH":
										s.handleCollectionUpdateRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PATCH")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nodes/"
										origElem := elem
										if l := len("nodes/"); len(elem) >= l && elem[0:l] == "nodes/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "node_id"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleCollectionRemoveNodeRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "PUT":
												s.handleCollectionAddNodeRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,PUT")
											}

											return
										}

										elem = origElem
									case 'p': // Prefix: "posts/"
										origElem := elem
										if l := len("posts/"); len(elem) >= l && elem[0:l] == "posts/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "post_id"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleCollectionRemovePostRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "PUT":
												s.handleCollectionAddPostRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,PUT")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'd': // Prefix: "datagraph"
						origElem := elem
						if l := len("datagraph"); len(elem) >= l && elem[0:l] == "datagraph" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleDatagraphSearchRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'i': // Prefix: "info"
						origElem := elem
						if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetInfoRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/icon"
							origElem := elem
							if l := len("/icon"); len(elem) >= l && elem[0:l] == "/icon" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleIconUploadRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "icon_size"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleIconGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'l': // Prefix: "links"
						origElem := elem
						if l := len("links"); len(elem) >= l && elem[0:l] == "links" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleLinkListRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleLinkCreateRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "link_slug"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleLinkGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'n': // Prefix: "nodes"
						origElem := elem
						if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleNodeListRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleNodeCreateRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "node_slug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleNodeDeleteRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleNodeGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleNodeUpdateRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "assets/"
									origElem := elem
									if l := len("assets/"); len(elem) >= l && elem[0:l] == "assets/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "asset_id"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleNodeRemoveAssetRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleNodeAddAssetRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,PUT")
										}

										return
									}

									elem = origElem
								case 'n': // Prefix: "nodes/"
									origElem := elem
									if l := len("nodes/"); len(elem) >= l && elem[0:l] == "nodes/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "node_slug_child"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleNodeRemoveNodeRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleNodeAddNodeRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,PUT")
										}

										return
									}

									elem = origElem
								case 'v': // Prefix: "visibility"
									origElem := elem
									if l := len("visibility"); len(elem) >= l && elem[0:l] == "visibility" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PATCH":
											s.handleNodeUpdateVisibilityRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PATCH")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "p"
						origElem := elem
						if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "osts/"
							origElem := elem
							if l := len("osts/"); len(elem) >= l && elem[0:l] == "osts/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 's': // Prefix: "search"
								origElem := elem
								if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handlePostSearchRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}
							// Param: "post_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handlePostDeleteRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handlePostUpdateRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/reacts"
								origElem := elem
								if l := len("/reacts"); len(elem) >= l && elem[0:l] == "/reacts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handlePostReactAddRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'r': // Prefix: "rofiles"
							origElem := elem
							if l := len("rofiles"); len(elem) >= l && elem[0:l] == "rofiles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleProfileListRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "account_handle"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleProfileGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "threads"
						origElem := elem
						if l := len("threads"); len(elem) >= l && elem[0:l] == "threads" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleThreadListRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleThreadCreateRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "thread_mark"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleThreadDeleteRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleThreadGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleThreadUpdateRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/posts"
								origElem := elem
								if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handlePostCreateRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "ersion"
					origElem := elem
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetVersionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "openapi.json"
				origElem := elem
				if l := len("openapi.json"); len(elem) >= l && elem[0:l] == "openapi.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetSpec"
						r.summary = "Get the OpenAPI 3.0 specification as JSON."
						r.operationID = "GetSpec"
						r.pathPattern = "/openapi.json"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'v': // Prefix: "v"
				origElem := elem
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"
					origElem := elem
					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						origElem := elem
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "ccounts"
							origElem := elem
							if l := len("ccounts"); len(elem) >= l && elem[0:l] == "ccounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "AccountGet"
									r.summary = ""
									r.operationID = "AccountGet"
									r.pathPattern = "/v1/accounts"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = "AccountUpdate"
									r.summary = ""
									r.operationID = "AccountUpdate"
									r.pathPattern = "/v1/accounts"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "self/a"
									origElem := elem
									if l := len("self/a"); len(elem) >= l && elem[0:l] == "self/a" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'u': // Prefix: "uth-methods"
										origElem := elem
										if l := len("uth-methods"); len(elem) >= l && elem[0:l] == "uth-methods" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "AccountAuthProviderList"
												r.summary = ""
												r.operationID = "AccountAuthProviderList"
												r.pathPattern = "/v1/accounts/self/auth-methods"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "auth_method_id"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "DELETE":
													r.name = "AccountAuthMethodDelete"
													r.summary = ""
													r.operationID = "AccountAuthMethodDelete"
													r.pathPattern = "/v1/accounts/self/auth-methods/{auth_method_id}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 'v': // Prefix: "vatar"
										origElem := elem
										if l := len("vatar"); len(elem) >= l && elem[0:l] == "vatar" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = "AccountSetAvatar"
												r.summary = ""
												r.operationID = "AccountSetAvatar"
												r.pathPattern = "/v1/accounts/self/avatar"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}
								// Param: "account_handle"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/avatar"
									origElem := elem
									if l := len("/avatar"); len(elem) >= l && elem[0:l] == "/avatar" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "AccountGetAvatar"
											r.summary = ""
											r.operationID = "AccountGetAvatar"
											r.pathPattern = "/v1/accounts/{account_handle}/avatar"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'd': // Prefix: "dmin"
							origElem := elem
							if l := len("dmin"); len(elem) >= l && elem[0:l] == "dmin" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "PATCH":
									r.name = "AdminSettingsUpdate"
									r.summary = ""
									r.operationID = "AdminSettingsUpdate"
									r.pathPattern = "/v1/admin"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/bans/"
								origElem := elem
								if l := len("/bans/"); len(elem) >= l && elem[0:l] == "/bans/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "account_handle"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = "AdminAccountBanRemove"
										r.summary = ""
										r.operationID = "AdminAccountBanRemove"
										r.pathPattern = "/v1/admin/bans/{account_handle}"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "AdminAccountBanCreate"
										r.summary = ""
										r.operationID = "AdminAccountBanCreate"
										r.pathPattern = "/v1/admin/bans/{account_handle}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "ssets"
							origElem := elem
							if l := len("ssets"); len(elem) >= l && elem[0:l] == "ssets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "AssetUpload"
									r.summary = ""
									r.operationID = "AssetUpload"
									r.pathPattern = "/v1/assets"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "asset_filename"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "AssetGet"
										r.summary = ""
										r.operationID = "AssetGet"
										r.pathPattern = "/v1/assets/{asset_filename}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'u': // Prefix: "uth"
							origElem := elem
							if l := len("uth"); len(elem) >= l && elem[0:l] == "uth" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "AuthProviderList"
									r.summary = ""
									r.operationID = "AuthProviderList"
									r.pathPattern = "/v1/auth"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "email"
									origElem := elem
									if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '-': // Prefix: "-password/sign"
										origElem := elem
										if l := len("-password/sign"); len(elem) >= l && elem[0:l] == "-password/sign" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'i': // Prefix: "in"
											origElem := elem
											if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = "AuthEmailPasswordSignin"
													r.summary = ""
													r.operationID = "AuthEmailPasswordSignin"
													r.pathPattern = "/v1/auth/email-password/signin"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

											elem = origElem
										case 'u': // Prefix: "up"
											origElem := elem
											if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = "AuthEmailPasswordSignup"
													r.summary = ""
													r.operationID = "AuthEmailPasswordSignup"
													r.pathPattern = "/v1/auth/email-password/signup"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 's': // Prefix: "sign"
											origElem := elem
											if l := len("sign"); len(elem) >= l && elem[0:l] == "sign" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "in"
												origElem := elem
												if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = "AuthEmailSignin"
														r.summary = ""
														r.operationID = "AuthEmailSignin"
														r.pathPattern = "/v1/auth/email/signin"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

												elem = origElem
											case 'u': // Prefix: "up"
												origElem := elem
												if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = "AuthEmailSignup"
														r.summary = ""
														r.operationID = "AuthEmailSignup"
														r.pathPattern = "/v1/auth/email/signup"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

												elem = origElem
											}

											elem = origElem
										case 'v': // Prefix: "verify"
											origElem := elem
											if l := len("verify"); len(elem) >= l && elem[0:l] == "verify" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = "AuthEmailVerify"
													r.summary = ""
													r.operationID = "AuthEmailVerify"
													r.pathPattern = "/v1/auth/email/verify"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								case 'l': // Prefix: "logout"
									origElem := elem
									if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "AuthProviderLogout"
											r.summary = ""
											r.operationID = "AuthProviderLogout"
											r.pathPattern = "/v1/auth/logout"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'o': // Prefix: "oauth/"
									origElem := elem
									if l := len("oauth/"); len(elem) >= l && elem[0:l] == "oauth/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "oauth_provider"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/callback"
										origElem := elem
										if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = "OAuthProviderCallback"
												r.summary = ""
												r.operationID = "OAuthProviderCallback"
												r.pathPattern = "/v1/auth/oauth/{oauth_provider}/callback"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case 'p': // Prefix: "p"
									origElem := elem
									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assword"
										origElem := elem
										if l := len("assword"); len(elem) >= l && elem[0:l] == "assword" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "PATCH":
												r.name = "AuthPasswordUpdate"
												r.summary = ""
												r.operationID = "AuthPasswordUpdate"
												r.pathPattern = "/v1/auth/password"
												r.args = args
												r.count = 0
												return r, true
											case "POST":
												r.name = "AuthPasswordCreate"
												r.summary = ""
												r.operationID = "AuthPasswordCreate"
												r.pathPattern = "/v1/auth/password"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/sign"
											origElem := elem
											if l := len("/sign"); len(elem) >= l && elem[0:l] == "/sign" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "in"
												origElem := elem
												if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = "AuthPasswordSignin"
														r.summary = ""
														r.operationID = "AuthPasswordSignin"
														r.pathPattern = "/v1/auth/password/signin"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

												elem = origElem
											case 'u': // Prefix: "up"
												origElem := elem
												if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = "AuthPasswordSignup"
														r.summary = ""
														r.operationID = "AuthPasswordSignup"
														r.pathPattern = "/v1/auth/password/signup"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

												elem = origElem
											}

											elem = origElem
										}

										elem = origElem
									case 'h': // Prefix: "hone"
										origElem := elem
										if l := len("hone"); len(elem) >= l && elem[0:l] == "hone" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "PhoneRequestCode"
												r.summary = ""
												r.operationID = "PhoneRequestCode"
												r.pathPattern = "/v1/auth/phone"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "PUT":
													r.name = "PhoneSubmitCode"
													r.summary = ""
													r.operationID = "PhoneSubmitCode"
													r.pathPattern = "/v1/auth/phone/{account_handle}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								case 'w': // Prefix: "webauthn/"
									origElem := elem
									if l := len("webauthn/"); len(elem) >= l && elem[0:l] == "webauthn/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "assert"
										origElem := elem
										if l := len("assert"); len(elem) >= l && elem[0:l] == "assert" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "WebAuthnMakeAssertion"
												r.summary = ""
												r.operationID = "WebAuthnMakeAssertion"
												r.pathPattern = "/v1/auth/webauthn/assert"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = "WebAuthnGetAssertion"
													r.summary = ""
													r.operationID = "WebAuthnGetAssertion"
													r.pathPattern = "/v1/auth/webauthn/assert/{account_handle}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 'm': // Prefix: "make"
										origElem := elem
										if l := len("make"); len(elem) >= l && elem[0:l] == "make" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "WebAuthnMakeCredential"
												r.summary = ""
												r.operationID = "WebAuthnMakeCredential"
												r.pathPattern = "/v1/auth/webauthn/make"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "account_handle"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = "WebAuthnRequestCredential"
													r.summary = ""
													r.operationID = "WebAuthnRequestCredential"
													r.pathPattern = "/v1/auth/webauthn/make/{account_handle}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'c': // Prefix: "c"
						origElem := elem
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ategories"
							origElem := elem
							if l := len("ategories"); len(elem) >= l && elem[0:l] == "ategories" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "CategoryList"
									r.summary = ""
									r.operationID = "CategoryList"
									r.pathPattern = "/v1/categories"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = "CategoryUpdateOrder"
									r.summary = ""
									r.operationID = "CategoryUpdateOrder"
									r.pathPattern = "/v1/categories"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = "CategoryCreate"
									r.summary = ""
									r.operationID = "CategoryCreate"
									r.pathPattern = "/v1/categories"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "category_id"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PATCH":
										r.name = "CategoryUpdate"
										r.summary = ""
										r.operationID = "CategoryUpdate"
										r.pathPattern = "/v1/categories/{category_id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'o': // Prefix: "ollections"
							origElem := elem
							if l := len("ollections"); len(elem) >= l && elem[0:l] == "ollections" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "CollectionList"
									r.summary = ""
									r.operationID = "CollectionList"
									r.pathPattern = "/v1/collections"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = "CollectionCreate"
									r.summary = ""
									r.operationID = "CollectionCreate"
									r.pathPattern = "/v1/collections"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "collection_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = "CollectionDelete"
										r.summary = ""
										r.operationID = "CollectionDelete"
										r.pathPattern = "/v1/collections/{collection_id}"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = "CollectionGet"
										r.summary = ""
										r.operationID = "CollectionGet"
										r.pathPattern = "/v1/collections/{collection_id}"
										r.args = args
										r.count = 1
										return r, true
									case "PATCH":
										r.name = "CollectionUpdate"
										r.summary = ""
										r.operationID = "CollectionUpdate"
										r.pathPattern = "/v1/collections/{collection_id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nodes/"
										origElem := elem
										if l := len("nodes/"); len(elem) >= l && elem[0:l] == "nodes/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "node_id"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = "CollectionRemoveNode"
												r.summary = ""
												r.operationID = "CollectionRemoveNode"
												r.pathPattern = "/v1/collections/{collection_id}/nodes/{node_id}"
												r.args = args
												r.count = 2
												return r, true
											case "PUT":
												r.name = "CollectionAddNode"
												r.summary = ""
												r.operationID = "CollectionAddNode"
												r.pathPattern = "/v1/collections/{collection_id}/nodes/{node_id}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'p': // Prefix: "posts/"
										origElem := elem
										if l := len("posts/"); len(elem) >= l && elem[0:l] == "posts/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "post_id"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = "CollectionRemovePost"
												r.summary = ""
												r.operationID = "CollectionRemovePost"
												r.pathPattern = "/v1/collections/{collection_id}/posts/{post_id}"
												r.args = args
												r.count = 2
												return r, true
											case "PUT":
												r.name = "CollectionAddPost"
												r.summary = ""
												r.operationID = "CollectionAddPost"
												r.pathPattern = "/v1/collections/{collection_id}/posts/{post_id}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'd': // Prefix: "datagraph"
						origElem := elem
						if l := len("datagraph"); len(elem) >= l && elem[0:l] == "datagraph" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "DatagraphSearch"
								r.summary = ""
								r.operationID = "DatagraphSearch"
								r.pathPattern = "/v1/datagraph"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'i': // Prefix: "info"
						origElem := elem
						if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetInfo"
								r.summary = ""
								r.operationID = "GetInfo"
								r.pathPattern = "/v1/info"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/icon"
							origElem := elem
							if l := len("/icon"); len(elem) >= l && elem[0:l] == "/icon" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "IconUpload"
									r.summary = ""
									r.operationID = "IconUpload"
									r.pathPattern = "/v1/info/icon"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "icon_size"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "IconGet"
										r.summary = ""
										r.operationID = "IconGet"
										r.pathPattern = "/v1/info/icon/{icon_size}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'l': // Prefix: "links"
						origElem := elem
						if l := len("links"); len(elem) >= l && elem[0:l] == "links" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "LinkList"
								r.summary = ""
								r.operationID = "LinkList"
								r.pathPattern = "/v1/links"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "LinkCreate"
								r.summary = ""
								r.operationID = "LinkCreate"
								r.pathPattern = "/v1/links"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "link_slug"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "LinkGet"
									r.summary = ""
									r.operationID = "LinkGet"
									r.pathPattern = "/v1/links/{link_slug}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'n': // Prefix: "nodes"
						origElem := elem
						if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "NodeList"
								r.summary = ""
								r.operationID = "NodeList"
								r.pathPattern = "/v1/nodes"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "NodeCreate"
								r.summary = ""
								r.operationID = "NodeCreate"
								r.pathPattern = "/v1/nodes"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "node_slug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "NodeDelete"
									r.summary = ""
									r.operationID = "NodeDelete"
									r.pathPattern = "/v1/nodes/{node_slug}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "NodeGet"
									r.summary = ""
									r.operationID = "NodeGet"
									r.pathPattern = "/v1/nodes/{node_slug}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "NodeUpdate"
									r.summary = ""
									r.operationID = "NodeUpdate"
									r.pathPattern = "/v1/nodes/{node_slug}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "assets/"
									origElem := elem
									if l := len("assets/"); len(elem) >= l && elem[0:l] == "assets/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "asset_id"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "NodeRemoveAsset"
											r.summary = ""
											r.operationID = "NodeRemoveAsset"
											r.pathPattern = "/v1/nodes/{node_slug}/assets/{asset_id}"
											r.args = args
											r.count = 2
											return r, true
										case "PUT":
											r.name = "NodeAddAsset"
											r.summary = ""
											r.operationID = "NodeAddAsset"
											r.pathPattern = "/v1/nodes/{node_slug}/assets/{asset_id}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'n': // Prefix: "nodes/"
									origElem := elem
									if l := len("nodes/"); len(elem) >= l && elem[0:l] == "nodes/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "node_slug_child"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "NodeRemoveNode"
											r.summary = ""
											r.operationID = "NodeRemoveNode"
											r.pathPattern = "/v1/nodes/{node_slug}/nodes/{node_slug_child}"
											r.args = args
											r.count = 2
											return r, true
										case "PUT":
											r.name = "NodeAddNode"
											r.summary = ""
											r.operationID = "NodeAddNode"
											r.pathPattern = "/v1/nodes/{node_slug}/nodes/{node_slug_child}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'v': // Prefix: "visibility"
									origElem := elem
									if l := len("visibility"); len(elem) >= l && elem[0:l] == "visibility" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PATCH":
											r.name = "NodeUpdateVisibility"
											r.summary = ""
											r.operationID = "NodeUpdateVisibility"
											r.pathPattern = "/v1/nodes/{node_slug}/visibility"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "p"
						origElem := elem
						if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "osts/"
							origElem := elem
							if l := len("osts/"); len(elem) >= l && elem[0:l] == "osts/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 's': // Prefix: "search"
								origElem := elem
								if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "PostSearch"
										r.summary = ""
										r.operationID = "PostSearch"
										r.pathPattern = "/v1/posts/search"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}
							// Param: "post_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "PostDelete"
									r.summary = ""
									r.operationID = "PostDelete"
									r.pathPattern = "/v1/posts/{post_id}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "PostUpdate"
									r.summary = ""
									r.operationID = "PostUpdate"
									r.pathPattern = "/v1/posts/{post_id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/reacts"
								origElem := elem
								if l := len("/reacts"); len(elem) >= l && elem[0:l] == "/reacts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = "PostReactAdd"
										r.summary = ""
										r.operationID = "PostReactAdd"
										r.pathPattern = "/v1/posts/{post_id}/reacts"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'r': // Prefix: "rofiles"
							origElem := elem
							if l := len("rofiles"); len(elem) >= l && elem[0:l] == "rofiles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "ProfileList"
									r.summary = ""
									r.operationID = "ProfileList"
									r.pathPattern = "/v1/profiles"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "account_handle"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "ProfileGet"
										r.summary = ""
										r.operationID = "ProfileGet"
										r.pathPattern = "/v1/profiles/{account_handle}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "threads"
						origElem := elem
						if l := len("threads"); len(elem) >= l && elem[0:l] == "threads" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ThreadList"
								r.summary = ""
								r.operationID = "ThreadList"
								r.pathPattern = "/v1/threads"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "ThreadCreate"
								r.summary = ""
								r.operationID = "ThreadCreate"
								r.pathPattern = "/v1/threads"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "thread_mark"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "ThreadDelete"
									r.summary = ""
									r.operationID = "ThreadDelete"
									r.pathPattern = "/v1/threads/{thread_mark}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "ThreadGet"
									r.summary = "Get information about a thread and the posts within the thread."
									r.operationID = "ThreadGet"
									r.pathPattern = "/v1/threads/{thread_mark}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "ThreadUpdate"
									r.summary = ""
									r.operationID = "ThreadUpdate"
									r.pathPattern = "/v1/threads/{thread_mark}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/posts"
								origElem := elem
								if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "PostCreate"
										r.summary = ""
										r.operationID = "PostCreate"
										r.pathPattern = "/v1/threads/{thread_mark}/posts"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "ersion"
					origElem := elem
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetVersion"
							r.summary = "Get the software version string."
							r.operationID = "GetVersion"
							r.pathPattern = "/version"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
