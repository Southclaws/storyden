// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220906181851-9c600dddea33 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BrowserScopes  = "browser.Scopes"
	WebauthnScopes = "webauthn.Scopes"
)

// APIError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type APIError struct {
	// Error The internal error, not intended for end-user display.
	Error string `json:"error"`

	// Message A human-readable message intended for end-user display.
	Message *string `json:"message,omitempty"`

	// Metadata Any additional metadata related to the error.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Suggested A suggested action for the user.
	Suggested *string `json:"suggested,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Bio *string `json:"bio,omitempty"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccountHandle The unique @ handle of an account.
type AccountHandle string

// AccountName The account owners display name.
type AccountName = string

// AccountsUpdateBody defines model for AccountsUpdateBody.
type AccountsUpdateBody struct {
	Bio *string `json:"bio,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`
}

// AuthOAuthProvider defines model for AuthOAuthProvider.
type AuthOAuthProvider struct {
	// Link The hyperlink to render for the user.
	Link string `json:"link"`

	// LogoUrl The logo to display for the provider.
	LogoUrl string `json:"logo_url"`

	// Name The human-readable name of the provider.
	Name string `json:"name"`

	// Provider The slug name of the provider.
	Provider string `json:"provider"`
}

// AuthOAuthProviderCallbackBody defines model for AuthOAuthProviderCallbackBody.
type AuthOAuthProviderCallbackBody struct {
	Code  string `json:"code"`
	State string `json:"state"`
}

// AuthOAuthProviderListBody defines model for AuthOAuthProviderListBody.
type AuthOAuthProviderListBody = []AuthOAuthProvider

// AuthPasswordBody defines model for AuthPasswordBody.
type AuthPasswordBody struct {
	Identifier string `json:"identifier"`
	Token      string `json:"token"`
}

// AuthSuccess defines model for AuthSuccess.
type AuthSuccess struct {
	Id string `json:"id"`
}

// Category defines model for Category.
type Category struct {
	Admin       *bool   `json:"admin,omitempty"`
	Colour      *string `json:"colour,omitempty"`
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for this resource.
	Id        *Identifier `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	PostCount *int        `json:"postCount,omitempty"`
	Sort      *int        `json:"sort,omitempty"`
}

// CommonProperties defines model for CommonProperties.
type CommonProperties struct {
	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Identifier A unique identifier for this resource.
type Identifier string

// Post defines model for Post.
type Post struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// ReplyTo A unique identifier for this resource.
	ReplyTo *Identifier `json:"reply_to,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostBodyMarkdown The body text of a post within a thread.
type PostBodyMarkdown = string

// PostSubmission A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostSubmission = Post

// ProfileReference A minimal reference to an account.
type ProfileReference struct {
	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`
}

// PublicProfile defines model for PublicProfile.
type PublicProfile struct {
	Bio       *string `json:"bio,omitempty"`
	CreatedAt string  `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Handle The unique @ handle of an account.
	Handle *AccountHandle `json:"handle,omitempty"`

	// Id A unique identifier for this resource.
	Id    Identifier `json:"id"`
	Image *string    `json:"image,omitempty"`

	// Interests A list of tags.
	Interests *TagList `json:"interests,omitempty"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Name The account owners display name.
	Name *AccountName `json:"name,omitempty"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// React defines model for React.
type React struct {
	Emoji *string `json:"emoji,omitempty"`

	// Id A unique identifier for this resource.
	Id *Identifier `json:"id,omitempty"`
}

// Tag A tag which can link profiles or threads via interests.
type Tag struct {
	Colour *string `json:"colour,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Name The name of a tag.
	Name TagName `json:"name"`
}

// TagList A list of tags.
type TagList = []Tag

// TagName The name of a tag.
type TagName = string

// Thread defines model for Thread.
type Thread struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool   `json:"pinned"`
	Posts  []Post `json:"posts"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadReference defines model for ThreadReference.
type ThreadReference struct {
	// Author A minimal reference to an account.
	Author   ProfileReference `json:"author"`
	Category Category         `json:"category"`

	// CreatedAt The time the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt The time the resource was soft-deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for this resource.
	Id Identifier `json:"id"`

	// Misc Arbitrary extra data stored with the resource.
	Misc *map[string]interface{} `json:"misc,omitempty"`

	// Pinned Whether the thread is pinned in this category.
	Pinned bool `json:"pinned"`

	// Posts The number of posts under this thread.
	Posts *int `json:"posts,omitempty"`

	// Reacts A list of reactions this post has had from people.
	Reacts []React `json:"reacts"`

	// Short A short version of the thread's body text for use in previews.
	Short *string `json:"short,omitempty"`

	// Slug A URL friendly slug which is prepended with the post ID
	// for uniqueness and sortability.
	Slug *string `json:"slug,omitempty"`

	// Tags A list of tags associated with the thread.
	Tags []string `json:"tags"`

	// Title The title of the thread.
	Title string `json:"title"`

	// UpdatedAt The time the resource was updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ThreadTitle The title of a thread.
type ThreadTitle = string

// ThreadsCreateBody defines model for ThreadsCreateBody.
type ThreadsCreateBody struct {
	// Body The body text of a post within a thread.
	Body PostBodyMarkdown `json:"body"`

	// Category A unique identifier for this resource.
	Category Identifier `json:"category"`

	// Tags A list of tags.
	Tags TagList `json:"tags"`

	// Title The title of a thread.
	Title ThreadTitle `json:"title"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// ThreadID A unique identifier for this resource.
type ThreadID = Identifier

// AccountsGetSuccess defines model for AccountsGetSuccess.
type AccountsGetSuccess = Account

// AccountsUpdateSuccess defines model for AccountsUpdateSuccess.
type AccountsUpdateSuccess = Account

// AuthOAuthProviderList defines model for AuthOAuthProviderList.
type AuthOAuthProviderList = AuthOAuthProviderListBody

// InternalServerError A description of an error including a human readable message and any
// related metadata from the request and associated services.
type InternalServerError = APIError

// PostsCreateSuccess A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostsCreateSuccess = Post

// ProfilesGetSuccess defines model for ProfilesGetSuccess.
type ProfilesGetSuccess = PublicProfile

// ThreadsCreateSuccess defines model for ThreadsCreateSuccess.
type ThreadsCreateSuccess = Thread

// ThreadsGet defines model for ThreadsGet.
type ThreadsGet = Thread

// ThreadsList defines model for ThreadsList.
type ThreadsList = []ThreadReference

// WebAuthnPublicKeyCreationOptions defines model for WebAuthnPublicKeyCreationOptions.
type WebAuthnPublicKeyCreationOptions any

// AccountsUpdate defines model for AccountsUpdate.
type AccountsUpdate = AccountsUpdateBody

// AuthOAuthProviderCallback defines model for AuthOAuthProviderCallback.
type AuthOAuthProviderCallback = AuthOAuthProviderCallbackBody

// AuthPassword defines model for AuthPassword.
type AuthPassword = AuthPasswordBody

// PostsCreate A new post within a thread of posts. A post may reply to another post in
// the thread by specifying the `reply_to` property. The identifier in the
// `reply_to` value must be post within the same thread.
type PostsCreate = PostSubmission

// ThreadsCreate defines model for ThreadsCreate.
type ThreadsCreate = ThreadsCreateBody

// WebAuthnMakeCredentialJSONBody defines parameters for WebAuthnMakeCredential.
type WebAuthnMakeCredentialJSONBody = map[string]interface{}

// AccountsUpdateJSONRequestBody defines body for AccountsUpdate for application/json ContentType.
type AccountsUpdateJSONRequestBody = AccountsUpdateBody

// AuthOAuthProviderCallbackJSONRequestBody defines body for AuthOAuthProviderCallback for application/json ContentType.
type AuthOAuthProviderCallbackJSONRequestBody = AuthOAuthProviderCallbackBody

// AuthPasswordSigninJSONRequestBody defines body for AuthPasswordSignin for application/json ContentType.
type AuthPasswordSigninJSONRequestBody = AuthPasswordBody

// AuthPasswordSigninFormdataRequestBody defines body for AuthPasswordSignin for application/x-www-form-urlencoded ContentType.
type AuthPasswordSigninFormdataRequestBody = AuthPasswordBody

// AuthPasswordSignupJSONRequestBody defines body for AuthPasswordSignup for application/json ContentType.
type AuthPasswordSignupJSONRequestBody = AuthPasswordBody

// AuthPasswordSignupFormdataRequestBody defines body for AuthPasswordSignup for application/x-www-form-urlencoded ContentType.
type AuthPasswordSignupFormdataRequestBody = AuthPasswordBody

// WebAuthnMakeAssertionJSONRequestBody defines body for WebAuthnMakeAssertion for application/json ContentType.
type WebAuthnMakeAssertionJSONRequestBody = AuthPasswordBody

// WebAuthnMakeAssertionFormdataRequestBody defines body for WebAuthnMakeAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnMakeAssertionFormdataRequestBody = AuthPasswordBody

// WebAuthnGetAssertionJSONRequestBody defines body for WebAuthnGetAssertion for application/json ContentType.
type WebAuthnGetAssertionJSONRequestBody = AuthPasswordBody

// WebAuthnGetAssertionFormdataRequestBody defines body for WebAuthnGetAssertion for application/x-www-form-urlencoded ContentType.
type WebAuthnGetAssertionFormdataRequestBody = AuthPasswordBody

// WebAuthnMakeCredentialJSONRequestBody defines body for WebAuthnMakeCredential for application/json ContentType.
type WebAuthnMakeCredentialJSONRequestBody = WebAuthnMakeCredentialJSONBody

// ThreadsCreateJSONRequestBody defines body for ThreadsCreate for application/json ContentType.
type ThreadsCreateJSONRequestBody = ThreadsCreateBody

// ThreadsCreateFormdataRequestBody defines body for ThreadsCreate for application/x-www-form-urlencoded ContentType.
type ThreadsCreateFormdataRequestBody = ThreadsCreateBody

// PostsCreateJSONRequestBody defines body for PostsCreate for application/json ContentType.
type PostsCreateJSONRequestBody = PostSubmission

// PostsCreateFormdataRequestBody defines body for PostsCreate for application/x-www-form-urlencoded ContentType.
type PostsCreateFormdataRequestBody = PostSubmission

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx echo.Context) error
	// Get the information for the currently authenticated account.
	// (GET /v1/accounts)
	AccountsGet(ctx echo.Context) error
	// Update the information for the currently authenticated account.
	// (PATCH /v1/accounts)
	AccountsUpdate(ctx echo.Context) error
	// Upload an avatar for the authenticated account.
	// (POST /v1/accounts/self/avatar)
	AccountsSetAvatar(ctx echo.Context) error
	// Get an avatar for the specified account.
	// (GET /v1/accounts/{account_handle}/avatar)
	AccountsGetAvatar(ctx echo.Context, accountHandle AccountHandle) error
	// Retrieve a list of OAuth2 providers and their links.
	// (GET /v1/auth/oauth)
	AuthOAuthProviderList(ctx echo.Context) error
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	AuthOAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx echo.Context) error
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx echo.Context) error
	// Complete the credential assertion and sign in to an account.
	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx echo.Context) error
	// Start the WebAuthn assertion for an existing account.
	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error
	// Complete WebAuthn registration by creating a new credential.
	// (GET /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx echo.Context) error
	// Start the WebAuthn registration process by requesting a credential.
	// (POST /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error
	// Get a public profile by ID.
	// (GET /v1/profiles/{account_handle})
	ProfilesGet(ctx echo.Context, accountHandle AccountHandle) error
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx echo.Context) error
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx echo.Context) error
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_id})
	ThreadsGet(ctx echo.Context, threadId ThreadID) error
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx echo.Context, threadId ThreadID) error
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpec(ctx)
	return err
}

// AccountsGet converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGet(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGet(ctx)
	return err
}

// AccountsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsUpdate(ctx)
	return err
}

// AccountsSetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsSetAvatar(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsSetAvatar(ctx)
	return err
}

// AccountsGetAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGetAvatar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsGetAvatar(ctx, accountHandle)
	return err
}

// AuthOAuthProviderList converts echo context to params.
func (w *ServerInterfaceWrapper) AuthOAuthProviderList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthOAuthProviderList(ctx)
	return err
}

// AuthOAuthProviderCallback converts echo context to params.
func (w *ServerInterfaceWrapper) AuthOAuthProviderCallback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "oauth_provider" -------------
	var oauthProvider OAuthProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "oauth_provider", runtime.ParamLocationPath, ctx.Param("oauth_provider"), &oauthProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter oauth_provider: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthOAuthProviderCallback(ctx, oauthProvider)
	return err
}

// AuthPasswordSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignin(ctx)
	return err
}

// AuthPasswordSignup converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPasswordSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthPasswordSignup(ctx)
	return err
}

// WebAuthnMakeAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeAssertion(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeAssertion(ctx)
	return err
}

// WebAuthnGetAssertion converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnGetAssertion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnGetAssertion(ctx, accountHandle)
	return err
}

// WebAuthnMakeCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnMakeCredential(ctx echo.Context) error {
	var err error

	ctx.Set(WebauthnScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnMakeCredential(ctx)
	return err
}

// WebAuthnRequestCredential converts echo context to params.
func (w *ServerInterfaceWrapper) WebAuthnRequestCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WebAuthnRequestCredential(ctx, accountHandle)
	return err
}

// ProfilesGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfilesGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_handle" -------------
	var accountHandle AccountHandle

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_handle", runtime.ParamLocationPath, ctx.Param("account_handle"), &accountHandle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_handle: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfilesGet(ctx, accountHandle)
	return err
}

// ThreadsList converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsList(ctx)
	return err
}

// ThreadsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsCreate(ctx)
	return err
}

// ThreadsGet converts echo context to params.
func (w *ServerInterfaceWrapper) ThreadsGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_id" -------------
	var threadId ThreadID

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, ctx.Param("thread_id"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ThreadsGet(ctx, threadId)
	return err
}

// PostsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thread_id" -------------
	var threadId ThreadID

	err = runtime.BindStyledParameterWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, ctx.Param("thread_id"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thread_id: %s", err))
	}

	ctx.Set(BrowserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostsCreate(ctx, threadId)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetSpec)
	router.GET(baseURL+"/v1/accounts", wrapper.AccountsGet)
	router.PATCH(baseURL+"/v1/accounts", wrapper.AccountsUpdate)
	router.POST(baseURL+"/v1/accounts/self/avatar", wrapper.AccountsSetAvatar)
	router.GET(baseURL+"/v1/accounts/:account_handle/avatar", wrapper.AccountsGetAvatar)
	router.GET(baseURL+"/v1/auth/oauth", wrapper.AuthOAuthProviderList)
	router.POST(baseURL+"/v1/auth/oauth/:oauth_provider/callback", wrapper.AuthOAuthProviderCallback)
	router.POST(baseURL+"/v1/auth/password/signin", wrapper.AuthPasswordSignin)
	router.POST(baseURL+"/v1/auth/password/signup", wrapper.AuthPasswordSignup)
	router.GET(baseURL+"/v1/auth/webauthn/assert", wrapper.WebAuthnMakeAssertion)
	router.POST(baseURL+"/v1/auth/webauthn/assert/:account_handle", wrapper.WebAuthnGetAssertion)
	router.GET(baseURL+"/v1/auth/webauthn/make", wrapper.WebAuthnMakeCredential)
	router.POST(baseURL+"/v1/auth/webauthn/make/:account_handle", wrapper.WebAuthnRequestCredential)
	router.GET(baseURL+"/v1/profiles/:account_handle", wrapper.ProfilesGet)
	router.GET(baseURL+"/v1/threads", wrapper.ThreadsList)
	router.POST(baseURL+"/v1/threads", wrapper.ThreadsCreate)
	router.GET(baseURL+"/v1/threads/:thread_id", wrapper.ThreadsGet)
	router.POST(baseURL+"/v1/threads/:thread_id/posts", wrapper.PostsCreate)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

type AccountsGetAvatarImagepngResponse struct {
	Body io.Reader

	ContentLength int64
}

type AccountsGetSuccessJSONResponse Account

type AccountsUpdateSuccessJSONResponse Account

type AuthOAuthProviderListJSONResponse AuthOAuthProviderListBody

type AuthSuccessResponseHeaders struct {
	SetCookie string
}
type AuthSuccessJSONResponse struct {
	Body AuthSuccess

	Headers AuthSuccessResponseHeaders
}

type BadRequestResponse struct {
}

type InternalServerErrorJSONResponse APIError

type NotFoundResponse struct {
}

type PostsCreateSuccessJSONResponse Post

type ProfilesGetSuccessJSONResponse PublicProfile

type ThreadsCreateSuccessJSONResponse Thread

type ThreadsGetJSONResponse Thread

type ThreadsListJSONResponse []ThreadReference

type UnauthorisedResponse struct {
}

type WebAuthnPublicKeyCreationOptionsResponseHeaders struct {
	SetCookie string
}
type WebAuthnPublicKeyCreationOptionsJSONResponse struct {
	Body any

	Headers WebAuthnPublicKeyCreationOptionsResponseHeaders
}

type GetSpecRequestObject struct {
}

type GetSpecResponseObject interface {
	VisitGetSpecResponse(w http.ResponseWriter) error
}

type GetSpec200TextResponse string

func (response GetSpec200TextResponse) VisitGetSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AccountsGetRequestObject struct {
}

type AccountsGetResponseObject interface {
	VisitAccountsGetResponse(w http.ResponseWriter) error
}

type AccountsGet200JSONResponse = AccountsGetSuccessJSONResponse

func (response AccountsGet200JSONResponse) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsGet401Response = UnauthorisedResponse

func (response AccountsGet401Response) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsGet404Response = NotFoundResponse

func (response AccountsGet404Response) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsGetdefaultJSONResponse) VisitAccountsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountsUpdateRequestObject struct {
	Body *AccountsUpdateJSONRequestBody
}

type AccountsUpdateResponseObject interface {
	VisitAccountsUpdateResponse(w http.ResponseWriter) error
}

type AccountsUpdate200JSONResponse = AccountsUpdateSuccessJSONResponse

func (response AccountsUpdate200JSONResponse) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsUpdate401Response = UnauthorisedResponse

func (response AccountsUpdate401Response) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsUpdate404Response = NotFoundResponse

func (response AccountsUpdate404Response) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsUpdatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsUpdatedefaultJSONResponse) VisitAccountsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountsSetAvatarRequestObject struct {
	Body io.Reader
}

type AccountsSetAvatarResponseObject interface {
	VisitAccountsSetAvatarResponse(w http.ResponseWriter) error
}

type AccountsSetAvatar200Response struct {
}

func (response AccountsSetAvatar200Response) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AccountsSetAvatar401Response = UnauthorisedResponse

func (response AccountsSetAvatar401Response) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsSetAvatar404Response = NotFoundResponse

func (response AccountsSetAvatar404Response) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsSetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsSetAvatardefaultJSONResponse) VisitAccountsSetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccountsGetAvatarRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type AccountsGetAvatarResponseObject interface {
	VisitAccountsGetAvatarResponse(w http.ResponseWriter) error
}

type AccountsGetAvatar200ImagepngResponse = AccountsGetAvatarImagepngResponse

func (response AccountsGetAvatar200ImagepngResponse) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AccountsGetAvatar401Response = UnauthorisedResponse

func (response AccountsGetAvatar401Response) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AccountsGetAvatar404Response = NotFoundResponse

func (response AccountsGetAvatar404Response) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AccountsGetAvatardefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AccountsGetAvatardefaultJSONResponse) VisitAccountsGetAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthOAuthProviderListRequestObject struct {
}

type AuthOAuthProviderListResponseObject interface {
	VisitAuthOAuthProviderListResponse(w http.ResponseWriter) error
}

type AuthOAuthProviderList200JSONResponse = AuthOAuthProviderListJSONResponse

func (response AuthOAuthProviderList200JSONResponse) VisitAuthOAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthOAuthProviderList400Response = BadRequestResponse

func (response AuthOAuthProviderList400Response) VisitAuthOAuthProviderListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthOAuthProviderListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthOAuthProviderListdefaultJSONResponse) VisitAuthOAuthProviderListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthOAuthProviderCallbackRequestObject struct {
	OauthProvider OAuthProvider `json:"oauth_provider"`
	Body          *AuthOAuthProviderCallbackJSONRequestBody
}

type AuthOAuthProviderCallbackResponseObject interface {
	VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error
}

type AuthOAuthProviderCallback200JSONResponse = AuthSuccessJSONResponse

func (response AuthOAuthProviderCallback200JSONResponse) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthOAuthProviderCallback401Response = UnauthorisedResponse

func (response AuthOAuthProviderCallback401Response) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthOAuthProviderCallback404Response = NotFoundResponse

func (response AuthOAuthProviderCallback404Response) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthOAuthProviderCallbackdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthOAuthProviderCallbackdefaultJSONResponse) VisitAuthOAuthProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSigninRequestObject struct {
	JSONBody     *AuthPasswordSigninJSONRequestBody
	FormdataBody *AuthPasswordSigninFormdataRequestBody
}

type AuthPasswordSigninResponseObject interface {
	VisitAuthPasswordSigninResponse(w http.ResponseWriter) error
}

type AuthPasswordSignin200JSONResponse = AuthSuccessJSONResponse

func (response AuthPasswordSignin200JSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignin401Response = UnauthorisedResponse

func (response AuthPasswordSignin401Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AuthPasswordSignin404Response = NotFoundResponse

func (response AuthPasswordSignin404Response) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthPasswordSignindefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignindefaultJSONResponse) VisitAuthPasswordSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignupRequestObject struct {
	JSONBody     *AuthPasswordSignupJSONRequestBody
	FormdataBody *AuthPasswordSignupFormdataRequestBody
}

type AuthPasswordSignupResponseObject interface {
	VisitAuthPasswordSignupResponse(w http.ResponseWriter) error
}

type AuthPasswordSignup200JSONResponse = AuthSuccessJSONResponse

func (response AuthPasswordSignup200JSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthPasswordSignup400Response = BadRequestResponse

func (response AuthPasswordSignup400Response) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthPasswordSignupdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response AuthPasswordSignupdefaultJSONResponse) VisitAuthPasswordSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertionRequestObject struct {
	JSONBody     *WebAuthnMakeAssertionJSONRequestBody
	FormdataBody *WebAuthnMakeAssertionFormdataRequestBody
}

type WebAuthnMakeAssertionResponseObject interface {
	VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnMakeAssertion200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnMakeAssertion200JSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeAssertion401Response = UnauthorisedResponse

func (response WebAuthnMakeAssertion401Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnMakeAssertion404Response = NotFoundResponse

func (response WebAuthnMakeAssertion404Response) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnMakeAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeAssertiondefaultJSONResponse) VisitWebAuthnMakeAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertionRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
	JSONBody      *WebAuthnGetAssertionJSONRequestBody
	FormdataBody  *WebAuthnGetAssertionFormdataRequestBody
}

type WebAuthnGetAssertionResponseObject interface {
	VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error
}

type WebAuthnGetAssertion200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnGetAssertion200JSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnGetAssertion401Response = UnauthorisedResponse

func (response WebAuthnGetAssertion401Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WebAuthnGetAssertion404Response = NotFoundResponse

func (response WebAuthnGetAssertion404Response) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type WebAuthnGetAssertiondefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnGetAssertiondefaultJSONResponse) VisitWebAuthnGetAssertionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredentialRequestObject struct {
	Body *WebAuthnMakeCredentialJSONRequestBody
}

type WebAuthnMakeCredentialResponseObject interface {
	VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnMakeCredential200JSONResponse = AuthSuccessJSONResponse

func (response WebAuthnMakeCredential200JSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnMakeCredential400Response = BadRequestResponse

func (response WebAuthnMakeCredential400Response) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnMakeCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnMakeCredentialdefaultJSONResponse) VisitWebAuthnMakeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredentialRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type WebAuthnRequestCredentialResponseObject interface {
	VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error
}

type WebAuthnRequestCredential200JSONResponse = WebAuthnPublicKeyCreationOptionsJSONResponse

func (response WebAuthnRequestCredential200JSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebAuthnRequestCredential400Response = BadRequestResponse

func (response WebAuthnRequestCredential400Response) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type WebAuthnRequestCredentialdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response WebAuthnRequestCredentialdefaultJSONResponse) VisitWebAuthnRequestCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProfilesGetRequestObject struct {
	AccountHandle AccountHandle `json:"account_handle"`
}

type ProfilesGetResponseObject interface {
	VisitProfilesGetResponse(w http.ResponseWriter) error
}

type ProfilesGet200JSONResponse = ProfilesGetSuccessJSONResponse

func (response ProfilesGet200JSONResponse) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfilesGet401Response = UnauthorisedResponse

func (response ProfilesGet401Response) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProfilesGet404Response = NotFoundResponse

func (response ProfilesGet404Response) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProfilesGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ProfilesGetdefaultJSONResponse) VisitProfilesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsListRequestObject struct {
}

type ThreadsListResponseObject interface {
	VisitThreadsListResponse(w http.ResponseWriter) error
}

type ThreadsList200JSONResponse = ThreadsListJSONResponse

func (response ThreadsList200JSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsList401Response = UnauthorisedResponse

func (response ThreadsList401Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsList404Response = NotFoundResponse

func (response ThreadsList404Response) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsListdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsListdefaultJSONResponse) VisitThreadsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsCreateRequestObject struct {
	JSONBody     *ThreadsCreateJSONRequestBody
	FormdataBody *ThreadsCreateFormdataRequestBody
}

type ThreadsCreateResponseObject interface {
	VisitThreadsCreateResponse(w http.ResponseWriter) error
}

type ThreadsCreate200JSONResponse = ThreadsCreateSuccessJSONResponse

func (response ThreadsCreate200JSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsCreate401Response = UnauthorisedResponse

func (response ThreadsCreate401Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsCreate404Response = NotFoundResponse

func (response ThreadsCreate404Response) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsCreatedefaultJSONResponse) VisitThreadsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ThreadsGetRequestObject struct {
	ThreadId ThreadID `json:"thread_id"`
}

type ThreadsGetResponseObject interface {
	VisitThreadsGetResponse(w http.ResponseWriter) error
}

type ThreadsGet200JSONResponse = ThreadsGetJSONResponse

func (response ThreadsGet200JSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ThreadsGet401Response = UnauthorisedResponse

func (response ThreadsGet401Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ThreadsGet404Response = NotFoundResponse

func (response ThreadsGet404Response) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ThreadsGetdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response ThreadsGetdefaultJSONResponse) VisitThreadsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostsCreateRequestObject struct {
	ThreadId     ThreadID `json:"thread_id"`
	JSONBody     *PostsCreateJSONRequestBody
	FormdataBody *PostsCreateFormdataRequestBody
}

type PostsCreateResponseObject interface {
	VisitPostsCreateResponse(w http.ResponseWriter) error
}

type PostsCreate200JSONResponse = PostsCreateSuccessJSONResponse

func (response PostsCreate200JSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostsCreate401Response = UnauthorisedResponse

func (response PostsCreate401Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostsCreate404Response = NotFoundResponse

func (response PostsCreate404Response) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostsCreatedefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response PostsCreatedefaultJSONResponse) VisitPostsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200TextResponse string

func (response GetVersion200TextResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OpenAPI 3.0 specification as JSON.
	// (GET /openapi.json)
	GetSpec(ctx context.Context, request GetSpecRequestObject) (GetSpecResponseObject, error)
	// Get the information for the currently authenticated account.
	// (GET /v1/accounts)
	AccountsGet(ctx context.Context, request AccountsGetRequestObject) (AccountsGetResponseObject, error)
	// Update the information for the currently authenticated account.
	// (PATCH /v1/accounts)
	AccountsUpdate(ctx context.Context, request AccountsUpdateRequestObject) (AccountsUpdateResponseObject, error)
	// Upload an avatar for the authenticated account.
	// (POST /v1/accounts/self/avatar)
	AccountsSetAvatar(ctx context.Context, request AccountsSetAvatarRequestObject) (AccountsSetAvatarResponseObject, error)
	// Get an avatar for the specified account.
	// (GET /v1/accounts/{account_handle}/avatar)
	AccountsGetAvatar(ctx context.Context, request AccountsGetAvatarRequestObject) (AccountsGetAvatarResponseObject, error)
	// Retrieve a list of OAuth2 providers and their links.
	// (GET /v1/auth/oauth)
	AuthOAuthProviderList(ctx context.Context, request AuthOAuthProviderListRequestObject) (AuthOAuthProviderListResponseObject, error)
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/oauth/{oauth_provider}/callback)
	AuthOAuthProviderCallback(ctx context.Context, request AuthOAuthProviderCallbackRequestObject) (AuthOAuthProviderCallbackResponseObject, error)
	// Sign in to an existing account with a username and password.
	// (POST /v1/auth/password/signin)
	AuthPasswordSignin(ctx context.Context, request AuthPasswordSigninRequestObject) (AuthPasswordSigninResponseObject, error)
	// Register a new account with a username and password.
	// (POST /v1/auth/password/signup)
	AuthPasswordSignup(ctx context.Context, request AuthPasswordSignupRequestObject) (AuthPasswordSignupResponseObject, error)
	// Complete the credential assertion and sign in to an account.
	// (GET /v1/auth/webauthn/assert)
	WebAuthnMakeAssertion(ctx context.Context, request WebAuthnMakeAssertionRequestObject) (WebAuthnMakeAssertionResponseObject, error)
	// Start the WebAuthn assertion for an existing account.
	// (POST /v1/auth/webauthn/assert/{account_handle})
	WebAuthnGetAssertion(ctx context.Context, request WebAuthnGetAssertionRequestObject) (WebAuthnGetAssertionResponseObject, error)
	// Complete WebAuthn registration by creating a new credential.
	// (GET /v1/auth/webauthn/make)
	WebAuthnMakeCredential(ctx context.Context, request WebAuthnMakeCredentialRequestObject) (WebAuthnMakeCredentialResponseObject, error)
	// Start the WebAuthn registration process by requesting a credential.
	// (POST /v1/auth/webauthn/make/{account_handle})
	WebAuthnRequestCredential(ctx context.Context, request WebAuthnRequestCredentialRequestObject) (WebAuthnRequestCredentialResponseObject, error)
	// Get a public profile by ID.
	// (GET /v1/profiles/{account_handle})
	ProfilesGet(ctx context.Context, request ProfilesGetRequestObject) (ProfilesGetResponseObject, error)
	// Get a list of all threads.
	// (GET /v1/threads)
	ThreadsList(ctx context.Context, request ThreadsListRequestObject) (ThreadsListResponseObject, error)
	// Create a new thread within the specified category.
	// (POST /v1/threads)
	ThreadsCreate(ctx context.Context, request ThreadsCreateRequestObject) (ThreadsCreateResponseObject, error)
	// Get information about a thread and the posts within the thread.
	// (GET /v1/threads/{thread_id})
	ThreadsGet(ctx context.Context, request ThreadsGetRequestObject) (ThreadsGetResponseObject, error)
	// Create a new post within a thread.
	// (POST /v1/threads/{thread_id}/posts)
	PostsCreate(ctx context.Context, request PostsCreateRequestObject) (PostsCreateResponseObject, error)
	// Get the software version string.
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSpec operation middleware
func (sh *strictHandler) GetSpec(ctx echo.Context) error {
	var request GetSpecRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpec(ctx.Request().Context(), request.(GetSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpec")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSpecResponseObject); ok {
		return validResponse.VisitGetSpecResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsGet operation middleware
func (sh *strictHandler) AccountsGet(ctx echo.Context) error {
	var request AccountsGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsGet(ctx.Request().Context(), request.(AccountsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsGetResponseObject); ok {
		return validResponse.VisitAccountsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsUpdate operation middleware
func (sh *strictHandler) AccountsUpdate(ctx echo.Context) error {
	var request AccountsUpdateRequestObject

	var body AccountsUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsUpdate(ctx.Request().Context(), request.(AccountsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsUpdateResponseObject); ok {
		return validResponse.VisitAccountsUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsSetAvatar operation middleware
func (sh *strictHandler) AccountsSetAvatar(ctx echo.Context) error {
	var request AccountsSetAvatarRequestObject

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsSetAvatar(ctx.Request().Context(), request.(AccountsSetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsSetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsSetAvatarResponseObject); ok {
		return validResponse.VisitAccountsSetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AccountsGetAvatar operation middleware
func (sh *strictHandler) AccountsGetAvatar(ctx echo.Context, accountHandle AccountHandle) error {
	var request AccountsGetAvatarRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsGetAvatar(ctx.Request().Context(), request.(AccountsGetAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGetAvatar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsGetAvatarResponseObject); ok {
		return validResponse.VisitAccountsGetAvatarResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthOAuthProviderList operation middleware
func (sh *strictHandler) AuthOAuthProviderList(ctx echo.Context) error {
	var request AuthOAuthProviderListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthOAuthProviderList(ctx.Request().Context(), request.(AuthOAuthProviderListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthOAuthProviderList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthOAuthProviderListResponseObject); ok {
		return validResponse.VisitAuthOAuthProviderListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthOAuthProviderCallback operation middleware
func (sh *strictHandler) AuthOAuthProviderCallback(ctx echo.Context, oauthProvider OAuthProvider) error {
	var request AuthOAuthProviderCallbackRequestObject

	request.OauthProvider = oauthProvider

	var body AuthOAuthProviderCallbackJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthOAuthProviderCallback(ctx.Request().Context(), request.(AuthOAuthProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthOAuthProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthOAuthProviderCallbackResponseObject); ok {
		return validResponse.VisitAuthOAuthProviderCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignin operation middleware
func (sh *strictHandler) AuthPasswordSignin(ctx echo.Context) error {
	var request AuthPasswordSigninRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSigninJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSigninFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignin(ctx.Request().Context(), request.(AuthPasswordSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSigninResponseObject); ok {
		return validResponse.VisitAuthPasswordSigninResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AuthPasswordSignup operation middleware
func (sh *strictHandler) AuthPasswordSignup(ctx echo.Context) error {
	var request AuthPasswordSignupRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AuthPasswordSignupJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AuthPasswordSignupFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthPasswordSignup(ctx.Request().Context(), request.(AuthPasswordSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthPasswordSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthPasswordSignupResponseObject); ok {
		return validResponse.VisitAuthPasswordSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeAssertion operation middleware
func (sh *strictHandler) WebAuthnMakeAssertion(ctx echo.Context) error {
	var request WebAuthnMakeAssertionRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnMakeAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnMakeAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeAssertion(ctx.Request().Context(), request.(WebAuthnMakeAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnMakeAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnGetAssertion operation middleware
func (sh *strictHandler) WebAuthnGetAssertion(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnGetAssertionRequestObject

	request.AccountHandle = accountHandle
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body WebAuthnGetAssertionJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body WebAuthnGetAssertionFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnGetAssertion(ctx.Request().Context(), request.(WebAuthnGetAssertionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnGetAssertion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnGetAssertionResponseObject); ok {
		return validResponse.VisitWebAuthnGetAssertionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnMakeCredential operation middleware
func (sh *strictHandler) WebAuthnMakeCredential(ctx echo.Context) error {
	var request WebAuthnMakeCredentialRequestObject

	var body WebAuthnMakeCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnMakeCredential(ctx.Request().Context(), request.(WebAuthnMakeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnMakeCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnMakeCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnMakeCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// WebAuthnRequestCredential operation middleware
func (sh *strictHandler) WebAuthnRequestCredential(ctx echo.Context, accountHandle AccountHandle) error {
	var request WebAuthnRequestCredentialRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WebAuthnRequestCredential(ctx.Request().Context(), request.(WebAuthnRequestCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebAuthnRequestCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WebAuthnRequestCredentialResponseObject); ok {
		return validResponse.VisitWebAuthnRequestCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ProfilesGet operation middleware
func (sh *strictHandler) ProfilesGet(ctx echo.Context, accountHandle AccountHandle) error {
	var request ProfilesGetRequestObject

	request.AccountHandle = accountHandle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfilesGet(ctx.Request().Context(), request.(ProfilesGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfilesGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfilesGetResponseObject); ok {
		return validResponse.VisitProfilesGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsList operation middleware
func (sh *strictHandler) ThreadsList(ctx echo.Context) error {
	var request ThreadsListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsList(ctx.Request().Context(), request.(ThreadsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsListResponseObject); ok {
		return validResponse.VisitThreadsListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsCreate operation middleware
func (sh *strictHandler) ThreadsCreate(ctx echo.Context) error {
	var request ThreadsCreateRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ThreadsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body ThreadsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsCreate(ctx.Request().Context(), request.(ThreadsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsCreateResponseObject); ok {
		return validResponse.VisitThreadsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ThreadsGet operation middleware
func (sh *strictHandler) ThreadsGet(ctx echo.Context, threadId ThreadID) error {
	var request ThreadsGetRequestObject

	request.ThreadId = threadId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ThreadsGet(ctx.Request().Context(), request.(ThreadsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ThreadsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ThreadsGetResponseObject); ok {
		return validResponse.VisitThreadsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostsCreate operation middleware
func (sh *strictHandler) PostsCreate(ctx echo.Context, threadId ThreadID) error {
	var request PostsCreateRequestObject

	request.ThreadId = threadId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body PostsCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body PostsCreateFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostsCreate(ctx.Request().Context(), request.(PostsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostsCreateResponseObject); ok {
		return validResponse.VisitPostsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx echo.Context) error {
	var request GetVersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx.Request().Context(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		return validResponse.VisitGetVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
