openapi: 3.1.0

#
#            ╓███,
#          ▄██▀"███▄
#         ╚█▀    `▀██▄
#     ,,     ╓███,  ▀██▌_
#   ╓███   ▄██▀"███▄  ╙███_
#  ▐██"  ▄██▀    `▀██▄  ╙██
#  ▐██  ╙██▄       ╫██Γ  ██─
#  ▐██    ▀██▄  ,▓██▀    ██─
#  ▐██      ╙█████▀      ██─
#  ▐██      ╓█████_      ██─
#  ▐██    ▄██▀` ╙███╥    ██─
#  └███████▀      `▀██   ██
#

info:
  contact:
    name: Barnaby Keene
  description: Storyden social API for building community driven platforms.
  title: storyden
  version: "1"

servers:
  - url: "/api"
    description: |
      The HTTP interface that this document describes is mounted on the `/api` 
      path and any requests outside of this base path will be proxied to the
      frontend if Storyden is running in standalone mode.

security:
  - browser: []

tags:
  - name: misc
    description: Non-business logic stuff.
  - name: admin
    description: Administration and configuration settings.
  - name: auth
    description: Authentication resources.
  - name: accounts
    description: User accounts.
  - name: profiles
    description: Public profiles.
  - name: categories
    description: Thread categories.
  - name: threads
    description: Forum threads.
  - name: posts
    description: Posts within a specific thread.
  - name: assets
    description: File uploads and downloads.
  - name: collections
    description: User curated collections of posts.
  - name: nodes
    description: Structured knowledgebase content tree.
  - name: links
    description: Social bookmarks.
  - name: datagraph
    description: Content graph (posts, nodes, links) APIs.

#
# 8888888b.     d8888 88888888888 888    888  .d8888b.
# 888   Y88b   d88888     888     888    888 d88P  Y88b
# 888    888  d88P888     888     888    888 Y88b.
# 888   d88P d88P 888     888     8888888888  "Y888b.
# 8888888P" d88P  888     888     888    888     "Y88b.
# 888      d88P   888     888     888    888       "888
# 888     d8888888888     888     888    888 Y88b  d88P
# 888    d88P     888     888     888    888  "Y8888P"
#

paths:
  #
  #                d8b
  #                Y8P
  #
  #  88888b.d88b.  888 .d8888b   .d8888b
  #  888 "888 "88b 888 88K      d88P"
  #  888  888  888 888 "Y8888b. 888
  #  888  888  888 888      X88 Y88b.
  #  888  888  888 888  88888P'  "Y8888P
  #

  /version:
    get:
      operationId: GetVersion
      summary: Get the software version string.
      description: |
        The version number includes the date and time of the release build as
        well as a short representation of the Git commit hash.
      security: []
      tags: [misc]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string

  /openapi.json:
    get:
      operationId: GetSpec
      summary: Get the OpenAPI 3.0 specification as JSON.
      description: |
        Note: the generator creates a `map[string]interface{}` if this is set to
        `application/json`... so I'm just using plain text for now.

      security: []
      tags: [misc]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string

  /v1/info:
    get:
      operationId: GetInfo
      description: |
        Get the basic forum installation info such as title, description, etc.
      security: []
      tags: [misc]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "200": { $ref: "#/components/responses/GetInfoOK" }

  /v1/info/icon/{icon_size}:
    get:
      operationId: IconGet
      description: Get the logo icon image.
      security: []
      tags: [misc]
      parameters: [{ $ref: "#/components/parameters/IconSize" }]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "200": { $ref: "#/components/responses/AssetGetOK" }
  /v1/info/icon:
    post:
      operationId: IconUpload
      description: Upload and process the installation's logo image.
      tags: [misc]
      requestBody: { $ref: "#/components/requestBodies/AssetUpload" }
      parameters: [$ref: "#/components/parameters/ContentLength"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200":
          description: OK

  #
  #               888               d8b
  #               888               Y8P
  #               888
  #  8888b.   .d88888 88888b.d88b.  888 88888b.
  #     "88b d88" 888 888 "888 "88b 888 888 "88b
  # .d888888 888  888 888  888  888 888 888  888
  # 888  888 Y88b 888 888  888  888 888 888  888
  # "Y888888  "Y88888 888  888  888 888 888  888
  #

  /v1/admin:
    patch:
      operationId: AdminSettingsUpdate
      description: Update non-env configuration settings for installation.
      tags: [admin]
      requestBody: { $ref: "#/components/requestBodies/AdminSettingsUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AdminSettingsUpdateOK" }

  /v1/admin/bans/{account_handle}:
    post:
      operationId: AdminAccountBanCreate
      description: |
        Suspend an account - soft delete. This disables the ability for the
        account owner to log in and use the platform. It keeps the account on
        record for linkage to content so UI doesn't break. It does not change
        anything else about the account such as the avatar, name, etc.
      tags: [accounts]
      parameters: [$ref: "#/components/parameters/AccountHandleParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountGetOK" }
    delete:
      operationId: AdminAccountBanRemove
      description: Given the account is suspended, remove the suspended state.
      tags: [accounts]
      parameters: [$ref: "#/components/parameters/AccountHandleParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountGetOK" }

  #
  #                   888    888
  #                   888    888
  #                   888    888
  #  8888b.  888  888 888888 88888b.
  #     "88b 888  888 888    888 "88b
  # .d888888 888  888 888    888  888
  # 888  888 Y88b 888 Y88b.  888  888
  # "Y888888  "Y88888  "Y888 888  888
  #

  /v1/auth:
    get:
      operationId: AuthProviderList
      description: |
        Retrieve a list of authentication providers. Storyden supports a few
        ways to authenticate, from simple passwords to OAuth and WebAuthn. This
        endpoint tells a client which auth capabilities are enabled.
      tags: [auth]
      security: []
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthProviderListOK" }

  /v1/auth/password/signup:
    post:
      operationId: AuthPasswordSignup
      description: Register a new account with a username and password.
      tags: [auth]
      security: []
      requestBody: { $ref: "#/components/requestBodies/AuthPassword" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/password/signin:
    post:
      operationId: AuthPasswordSignin
      description: Sign in to an existing account with a username and password.
      tags: [auth]
      security: []
      requestBody: { $ref: "#/components/requestBodies/AuthPassword" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/password:
    post:
      operationId: AuthPasswordCreate
      description: |
        Given the requesting account does not have a password authentication,
        add a password authentication method to it with the given password.
      tags: [auth]
      security: []
      requestBody: { $ref: "#/components/requestBodies/AuthPasswordCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }
    patch:
      operationId: AuthPasswordUpdate
      description: |
        Given the requesting account has a password authentication, update the
        password on file.
      tags: [auth]
      security: []
      requestBody: { $ref: "#/components/requestBodies/AuthPasswordUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/oauth/{oauth_provider}/callback:
    post:
      operationId: OAuthProviderCallback
      description: OAuth2 callback.
      tags: [auth]
      security: []
      parameters: [$ref: "#/components/parameters/OAuthProvider"]
      requestBody: { $ref: "#/components/requestBodies/OAuthProviderCallback" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "404": { $ref: "#/components/responses/NotFound" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/webauthn/make/{account_handle}:
    get:
      operationId: WebAuthnRequestCredential
      description: |
        Start the WebAuthn registration process by requesting a credential.
      tags: [auth]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandleParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/WebAuthnRequestCredentialOK" }

  /v1/auth/webauthn/make:
    post:
      operationId: WebAuthnMakeCredential
      description: Complete WebAuthn registration by creating a new credential.
      tags: [auth]
      security: [webauthn: []]
      requestBody: { $ref: "#/components/requestBodies/WebAuthnMakeCredential" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/webauthn/assert/{account_handle}:
    get:
      operationId: WebAuthnGetAssertion
      description: Start the WebAuthn assertion for an existing account.
      tags: [auth]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandleParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200":
          $ref: "#/components/responses/WebAuthnGetAssertionOK"

  /v1/auth/webauthn/assert:
    post:
      operationId: WebAuthnMakeAssertion
      description: Complete the credential assertion and sign in to an account.
      tags: [auth]
      security: [webauthn: []]
      requestBody: { $ref: "#/components/requestBodies/WebAuthnMakeAssertion" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/phone:
    post:
      operationId: PhoneRequestCode
      description: |
        Start the authentication flow with a phone number. The handler will send
        a one-time code to the provided phone number which must then be sent to
        the other phone endpoint to verify the number and validate the account.
      tags: [auth]
      security: []
      requestBody: { $ref: "#/components/requestBodies/PhoneRequestCode" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/phone/{account_handle}:
    put:
      operationId: PhoneSubmitCode
      description: |
        Complete the phone number authentication flow by submitting the one-time
        code that was sent to the user's phone.
      tags: [auth]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandleParam"]
      requestBody: { $ref: "#/components/requestBodies/PhoneSubmitCode" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthSuccessOK" }

  /v1/auth/logout:
    get:
      operationId: AuthProviderLogout
      description: Remove cookies from requesting client.
      tags: [auth]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200":
          description: OK
          headers: { Set-Cookie: { schema: { type: string } } }

  #
  #                                                      888
  #                                                      888
  #                                                      888
  #   8888b.   .d8888b .d8888b .d88b.  888  888 88888b.  888888 .d8888b
  #      "88b d88P"   d88P"   d88""88b 888  888 888 "88b 888    88K
  #  .d888888 888     888     888  888 888  888 888  888 888    "Y8888b.
  #  888  888 Y88b.   Y88b.   Y88..88P Y88b 888 888  888 Y88b.       X88
  #  "Y888888  "Y8888P "Y8888P "Y88P"   "Y88888 888  888  "Y888  88888P'
  #

  /v1/accounts:
    get:
      operationId: AccountGet
      description: Get the information for the currently authenticated account.
      tags: [accounts]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountGetOK" }

    patch:
      operationId: AccountUpdate
      description: Update the information for the currently authenticated account.
      tags: [accounts]
      requestBody: { $ref: "#/components/requestBodies/AccountUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountUpdateOK" }

  /v1/accounts/self/auth-methods:
    get:
      operationId: AccountAuthProviderList
      description: |
        Retrieve a list of authentication providers with a flag indicating which
        ones are active for the currently authenticated account.
      tags: [accounts]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AccountAuthProviderListOK" }

  /v1/accounts/self/auth-methods/{auth_method_id}:
    delete:
      operationId: AccountAuthMethodDelete
      description: |
        Retrieve a list of authentication providers with a flag indicating which
        ones are active for the currently authenticated account.
      tags: [accounts]
      parameters:
        - name: auth_method_id
          required: true
          in: path
          schema:
            type: string
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AccountAuthProviderListOK" }

  /v1/accounts/self/avatar:
    post:
      operationId: AccountSetAvatar
      description: Upload an avatar for the authenticated account.
      tags: [accounts]
      requestBody: { $ref: "#/components/requestBodies/AccountSetAvatar" }
      parameters: [$ref: "#/components/parameters/ContentLength"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { description: "OK" }

  /v1/accounts/{account_handle}/avatar:
    get:
      operationId: AccountGetAvatar
      description: Get an avatar for the specified account.
      tags: [accounts]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandleParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountGetAvatar" }

  #
  #                           .d888 d8b 888
  #                          d88P"  Y8P 888
  #                          888        888
  # 88888b.  888d888 .d88b.  888888 888 888  .d88b.  .d8888b
  # 888 "88b 888P"  d88""88b 888    888 888 d8P  Y8b 88K
  # 888  888 888    888  888 888    888 888 88888888 "Y8888b.
  # 888 d88P 888    Y88..88P 888    888 888 Y8b.          X88
  # 88888P"  888     "Y88P"  888    888 888  "Y8888   88888P'
  # 888
  # 888
  # 888
  #

  /v1/profiles:
    get:
      operationId: ProfileList
      description: Query and search profiles.
      tags: [profiles]
      security: []
      parameters:
        - $ref: "#/components/parameters/SearchQuery"
        - $ref: "#/components/parameters/PaginationQuery"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ProfileListOK" }

  /v1/profiles/{account_handle}:
    get:
      operationId: ProfileGet
      description: Get a public profile by ID.
      tags: [profiles]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandleParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ProfileGetOK" }

  #
  #                   888                                      d8b
  #                   888                                      Y8P
  #                   888
  #  .d8888b  8888b.  888888 .d88b.   .d88b.   .d88b.  888d888 888  .d88b.  .d8888b
  # d88P"        "88b 888   d8P  Y8b d88P"88b d88""88b 888P"   888 d8P  Y8b 88K
  # 888      .d888888 888   88888888 888  888 888  888 888     888 88888888 "Y8888b.
  # Y88b.    888  888 Y88b. Y8b.     Y88b 888 Y88..88P 888     888 Y8b.          X88
  #  "Y8888P "Y888888  "Y888 "Y8888   "Y88888  "Y88P"  888     888  "Y8888   88888P'
  #                                       888
  #                                  Y8b d88P
  #                                   "Y88P"
  #

  /v1/categories:
    post:
      operationId: CategoryCreate
      description: Create a category for organising posts.
      tags: [categories]
      requestBody: { $ref: "#/components/requestBodies/CategoryCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CategoryCreateOK" }
    get:
      operationId: CategoryList
      description: Get a list of all categories on the site.
      security: []
      tags: [categories]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "200": { $ref: "#/components/responses/CategoryListOK" }
    patch:
      operationId: CategoryUpdateOrder
      description: Update the sort order of categories.
      security: []
      tags: [categories]
      requestBody: { $ref: "#/components/requestBodies/CategoryUpdateOrder" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "200": { $ref: "#/components/responses/CategoryListOK" }

  /v1/categories/{category_id}:
    patch:
      operationId: CategoryUpdate
      description: Create a category for organising posts.
      tags: [categories]
      parameters: [$ref: "#/components/parameters/CategoryIDParam"]
      requestBody: { $ref: "#/components/requestBodies/CategoryUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CategoryUpdateOK" }

  #
  # 888    888                                    888
  # 888    888                                    888
  # 888    888                                    888
  # 888888 88888b.  888d888 .d88b.   8888b.   .d88888 .d8888b
  # 888    888 "88b 888P"  d8P  Y8b     "88b d88" 888 88K
  # 888    888  888 888    88888888 .d888888 888  888 "Y8888b.
  # Y88b.  888  888 888    Y8b.     888  888 Y88b 888      X88
  #  "Y888 888  888 888     "Y8888  "Y888888  "Y88888  88888P'
  #

  /v1/threads:
    post:
      operationId: ThreadCreate
      description: Create a new thread within the specified category.
      tags: [threads]
      requestBody: { $ref: "#/components/requestBodies/ThreadCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ThreadCreateOK" }

    get:
      operationId: ThreadList
      description: Get a list of all threads.
      tags: [threads]
      security: []
      parameters:
        - $ref: "#/components/parameters/SearchQuery"
        - $ref: "#/components/parameters/PaginationQuery"
        - name: author
          description: Show only results creeated by this user.
          required: false
          in: query
          schema: { $ref: "#/components/schemas/AccountHandle" }
        - name: tags
          description: Show only results with these tags
          required: false
          in: query
          schema: { $ref: "#/components/schemas/TagListIDs" }
        - name: categories
          description: Show only results with these categories
          required: false
          in: query
          schema: { $ref: "#/components/schemas/CategorySlugList" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ThreadListOK" }

  /v1/threads/{thread_mark}:
    get:
      operationId: ThreadGet
      summary: Get information about a thread and the posts within the thread.
      description: |
        Get information about a thread such as its title, author, when it was
        created as well as a list of the posts within the thread.
      security: []
      tags: [threads]
      parameters: [$ref: "#/components/parameters/ThreadMarkParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ThreadGet" }
    patch:
      operationId: ThreadUpdate
      description: Publish changes to a thread.
      tags: [threads]
      parameters: [$ref: "#/components/parameters/ThreadMarkParam"]
      requestBody: { $ref: "#/components/requestBodies/ThreadUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ThreadUpdateOK" }
    delete:
      operationId: ThreadDelete
      description: Archive a thread using soft-delete.
      tags: [threads]
      parameters: [$ref: "#/components/parameters/ThreadMarkParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { description: OK }

  #
  #                             888
  #                             888
  #                             888
  #  88888b.   .d88b.  .d8888b  888888 .d8888b
  #  888 "88b d88""88b 88K      888    88K
  #  888  888 888  888 "Y8888b. 888    "Y8888b.
  #  888 d88P Y88..88P      X88 Y88b.       X88
  #  88888P"   "Y88P"   88888P'  "Y888  88888P'
  #  888
  #  888
  #  888
  #

  /v1/threads/{thread_mark}/posts:
    post:
      operationId: PostCreate
      description: Create a new post within a thread.
      tags: [posts]
      parameters: [$ref: "#/components/parameters/ThreadMarkParam"]
      requestBody: { $ref: "#/components/requestBodies/PostCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/PostCreateOK" }

  /v1/posts/{post_id}:
    patch:
      operationId: PostUpdate
      description: Publish changes to a single post.
      tags: [posts]
      parameters: [$ref: "#/components/parameters/PostIDParam"]
      requestBody: { $ref: "#/components/requestBodies/PostUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/PostUpdateOK" }
    delete:
      operationId: PostDelete
      description: Archive a post using soft-delete.
      tags: [posts]
      parameters: [$ref: "#/components/parameters/PostIDParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { description: OK }

  /v1/posts/search:
    get:
      operationId: PostSearch
      description: Search through posts using various queries and filters.
      tags: [posts]
      security: []
      parameters:
        - name: body
          description: A text query to search for in post content.
          required: false
          in: query
          schema: { type: string }
        - name: author
          description: Show only results created by this account.
          required: false
          in: query
          schema: { $ref: "#/components/schemas/AccountHandle" }
        - name: kind
          description: Posts, threads or both.
          required: false
          in: query
          schema: { $ref: "#/components/schemas/ContentKinds" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/PostSearchOK" }

  /v1/posts/{post_id}/reacts:
    put:
      operationId: PostReactAdd
      description: Add a reaction to a post.
      tags: [posts]
      parameters: [$ref: "#/components/parameters/PostIDParam"]
      requestBody: { $ref: "#/components/requestBodies/PostReactAdd" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/PostReactAddOK" }

  #
  #                                     888
  #                                     888
  #                                     888
  #  8888b.  .d8888b  .d8888b   .d88b.  888888 .d8888b
  #     "88b 88K      88K      d8P  Y8b 888    88K
  # .d888888 "Y8888b. "Y8888b. 88888888 888    "Y8888b.
  # 888  888      X88      X88 Y8b.     Y88b.       X88
  # "Y888888  88888P'  88888P'  "Y8888   "Y888  88888P'
  #

  /v1/assets:
    post:
      operationId: AssetUpload
      description: Upload and process a media file.
      tags: [assets]
      requestBody: { $ref: "#/components/requestBodies/AssetUpload" }
      parameters: [$ref: "#/components/parameters/ContentLength"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AssetUploadOK" }
  /v1/assets/{asset_filename}:
    get:
      operationId: AssetGet
      description: Download an asset by its ID.
      tags: [assets]
      security: []
      parameters: [$ref: "#/components/parameters/AssetPathParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AssetGetOK" }

  #
  #                  888 888                   888    d8b
  #                  888 888                   888    Y8P
  #                  888 888                   888
  #  .d8888b .d88b.  888 888  .d88b.   .d8888b 888888 888  .d88b.  88888b.  .d8888b
  # d88P"   d88""88b 888 888 d8P  Y8b d88P"    888    888 d88""88b 888 "88b 88K
  # 888     888  888 888 888 88888888 888      888    888 888  888 888  888 "Y8888b.
  # Y88b.   Y88..88P 888 888 Y8b.     Y88b.    Y88b.  888 Y88..88P 888  888      X88
  #  "Y8888P "Y88P"  888 888  "Y8888   "Y8888P  "Y888 888  "Y88P"  888  888  88888P'
  #

  /v1/collections:
    post:
      operationId: CollectionCreate
      description: |
        Create a collection for curating posts under the authenticated account.
      tags: [collections]
      requestBody: { $ref: "#/components/requestBodies/CollectionCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CollectionCreateOK" }
    get:
      operationId: CollectionList
      description: List all collections using the filtering options.
      tags: [collections]
      security: []
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "200": { $ref: "#/components/responses/CollectionListOK" }

  /v1/collections/{collection_id}:
    get:
      operationId: CollectionGet
      description: |
        Get a collection by its ID. Collections can be public or private so the
        response will depend on which account is making the request and if the
        target collection is public, private, owned or not owned by the account.
      tags: [collections]
      security: []
      parameters: [$ref: "#/components/parameters/CollectionIDParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CollectionGetOK" }
    patch:
      operationId: CollectionUpdate
      description: Update a collection owned by the authenticated account.
      tags: [collections]
      parameters: [$ref: "#/components/parameters/CollectionIDParam"]
      requestBody: { $ref: "#/components/requestBodies/CollectionUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CollectionUpdateOK" }
    delete:
      operationId: CollectionDelete
      description: Delete a collection owned by the authenticated account.
      tags: [collections]
      parameters: [$ref: "#/components/parameters/CollectionIDParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { description: OK }

  /v1/collections/{collection_id}/posts/{post_id}:
    put:
      operationId: CollectionAddPost
      description: |
        Add a post to a collection. The collection must be owned by the account
        making the request. The post can be any published post of any kind.
      tags: [collections]
      parameters:
        - $ref: "#/components/parameters/CollectionIDParam"
        - $ref: "#/components/parameters/PostIDParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CollectionAddPostOK" }
    delete:
      operationId: CollectionRemovePost
      description: |
        Remove a post from a collection. The collection must be owned by the
        account making the request.
      tags: [collections]
      parameters:
        - $ref: "#/components/parameters/CollectionIDParam"
        - $ref: "#/components/parameters/PostIDParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CollectionRemovePostOK" }
  /v1/collections/{collection_id}/nodes/{node_id}:
    put:
      operationId: CollectionAddNode
      description: |
        Add a node to a collection. The collection must be owned by the account
        making the request. The node can be any published node or any node
        not published but owned by the collection owner.
      tags: [collections]
      parameters:
        - $ref: "#/components/parameters/CollectionIDParam"
        - $ref: "#/components/parameters/NodeIDParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CollectionAddNodeOK" }
    delete:
      operationId: CollectionRemoveNode
      description: |
        Remove a node from a collection. The collection must be owned by the
        account making the request.
      tags: [collections]
      parameters:
        - $ref: "#/components/parameters/CollectionIDParam"
        - $ref: "#/components/parameters/NodeIDParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/CollectionRemoveNodeOK" }

  #
  #                        888
  #                        888
  #                        888
  # 88888b.   .d88b.   .d88888  .d88b.  .d8888b
  # 888 "88b d88""88b d88" 888 d8P  Y8b 88K
  # 888  888 888  888 888  888 88888888 "Y8888b.
  # 888  888 Y88..88P Y88b 888 Y8b.          X88
  # 888  888  "Y88P"   "Y88888  "Y8888   88888P'
  #

  /v1/nodes:
    post:
      operationId: NodeCreate
      description: |
        Create a node for curating structured knowledge together.
      tags: [nodes]
      requestBody: { $ref: "#/components/requestBodies/NodeCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeCreateOK" }
    get:
      operationId: NodeList
      description: |
        List nodes using the given filters. Can be used to get a full tree.
      tags: [nodes]
      security: []
      parameters:
        - $ref: "#/components/parameters/SearchQuery"
        - $ref: "#/components/parameters/PaginationQuery"
        - name: node_id
          description: List this node and all child nodes.
          required: false
          in: query
          schema: { $ref: "#/components/schemas/Identifier" }
        - name: author
          description: Show only results owned by this account.
          required: false
          in: query
          schema: { $ref: "#/components/schemas/AccountHandle" }
        - $ref: "#/components/parameters/VisibilityParam"
        - $ref: "#/components/parameters/TreeDepthParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "200": { $ref: "#/components/responses/NodeListOK" }

  /v1/nodes/{node_slug}:
    get:
      operationId: NodeGet
      description: Get a node by its URL slug.
      tags: [nodes]
      security: []
      parameters: [$ref: "#/components/parameters/NodeSlugParam"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeGetOK" }
    patch:
      operationId: NodeUpdate
      description: Update a node.
      tags: [nodes]
      parameters: [$ref: "#/components/parameters/NodeSlugParam"]
      requestBody: { $ref: "#/components/requestBodies/NodeUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeUpdateOK" }
    delete:
      operationId: NodeDelete
      description: Delete a node and move all children to its parent or root.
      tags: [nodes]
      parameters:
        - $ref: "#/components/parameters/NodeSlugParam"
        - $ref: "#/components/parameters/TargetNodeSlugQuery"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeDeleteOK" }

  /v1/nodes/{node_slug}/visibility:
    patch:
      operationId: NodeUpdateVisibility
      description: |
        Update the visibility of a node. When changed, this may trigger other
        operations such as notifications/newsletters. Changing the visibility of
        anything to "published" is often accompanied by some other side effects.
      tags: [nodes]
      parameters: [$ref: "#/components/parameters/NodeSlugParam"]
      requestBody: { $ref: "#/components/requestBodies/VisibilityUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeUpdateOK" }

  /v1/nodes/{node_slug}/assets/{asset_id}:
    put:
      operationId: NodeAddAsset
      description: Add an asset to a node.
      tags: [nodes]
      parameters:
        - $ref: "#/components/parameters/NodeSlugParam"
        - $ref: "#/components/parameters/AssetIDParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeUpdateOK" }
    delete:
      operationId: NodeRemoveAsset
      description: Remove an asset from a node.
      tags: [nodes]
      parameters:
        - $ref: "#/components/parameters/NodeSlugParam"
        - $ref: "#/components/parameters/AssetIDParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeUpdateOK" }

  /v1/nodes/{node_slug}/nodes/{node_slug_child}:
    put:
      operationId: NodeAddNode
      description: Set a node's parent to the specified node
      tags: [nodes]
      parameters:
        - $ref: "#/components/parameters/NodeSlugParam"
        - $ref: "#/components/parameters/NodeSlugChildParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeAddChildOK" }
    delete:
      operationId: NodeRemoveNode
      description: |
        Remove a node from its parent node and back to the top level.
      tags: [nodes]
      parameters:
        - $ref: "#/components/parameters/NodeSlugParam"
        - $ref: "#/components/parameters/NodeSlugChildParam"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/NodeRemoveChildOK" }

  #
  # 888 d8b          888
  # 888 Y8P          888
  # 888              888
  # 888 888 88888b.  888  888 .d8888b
  # 888 888 888 "88b 888 .88P 88K
  # 888 888 888  888 888888K  "Y8888b.
  # 888 888 888  888 888 "88b      X88
  # 888 888 888  888 888  888  88888P'
  #

  /v1/links:
    post:
      operationId: LinkCreate
      description: |
        Add a link to the community bookmarks. This will also scrape the content
        at the site the link points to, if possible. If the submitted link is an
        invalid link for whatever reason (invalid URL structure or page is dead)
        then the API will fail. The metadata for the link is indexed on success.

        If the submitted link already exists it will be an idempotent operation,
        unless the body contains additional metadata. In these cases, the link's
        metadata will be updated with the new metadata and the URL is unchanged.

        When a link is submitted, it is first "cleaned" to remove any fragments.
      tags: [links]
      requestBody: { $ref: "#/components/requestBodies/LinkCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/LinkCreateOK" }
    get:
      operationId: LinkList
      description: List all links using the filtering options.
      tags: [links]
      security: []
      parameters:
        - $ref: "#/components/parameters/SearchQuery"
        - $ref: "#/components/parameters/PaginationQuery"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "200": { $ref: "#/components/responses/LinkListOK" }

  /v1/links/{link_slug}:
    get:
      operationId: LinkGet
      description: |
        Get the details for a specific link. Such as where it's been posted,
        which resources it's linked to and how many times it's been opened.
      tags: [links]
      security: []
      parameters: [{ $ref: "#/components/parameters/LinkSlugParam" }]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "200": { $ref: "#/components/responses/LinkGetOK" }

  #
  #      888          888                                               888
  #      888          888                                               888
  #      888          888                                               888
  #  .d88888  8888b.  888888  8888b.   .d88b.  888d888 8888b.  88888b.  88888b.
  # d88" 888     "88b 888        "88b d88P"88b 888P"      "88b 888 "88b 888 "88b
  # 888  888 .d888888 888    .d888888 888  888 888    .d888888 888  888 888  888
  # Y88b 888 888  888 Y88b.  888  888 Y88b 888 888    888  888 888 d88P 888  888
  #  "Y88888 "Y888888  "Y888 "Y888888  "Y88888 888    "Y888888 88888P"  888  888
  #                                        888                 888
  #                                   Y8b d88P                 888
  #                                    "Y88P"                  888
  #

  /v1/datagraph:
    get:
      operationId: DatagraphSearch
      description: Query and search content.
      tags: [datagraph]
      parameters:
        - $ref: "#/components/parameters/SearchQuery"
        - $ref: "#/components/parameters/PaginationQuery"
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/DatagraphSearchOK" }

components:
  #
  # 8888888b.     d8888 8888888b.         d8888 888b     d888 8888888888 88888888888 8888888888 8888888b.   .d8888b.
  # 888   Y88b   d88888 888   Y88b       d88888 8888b   d8888 888            888     888        888   Y88b d88P  Y88b
  # 888    888  d88P888 888    888      d88P888 88888b.d88888 888            888     888        888    888 Y88b.
  # 888   d88P d88P 888 888   d88P     d88P 888 888Y88888P888 8888888        888     8888888    888   d88P  "Y888b.
  # 8888888P" d88P  888 8888888P"     d88P  888 888 Y888P 888 888            888     888        8888888P"      "Y88b.
  # 888      d88P   888 888 T88b     d88P   888 888  Y8P  888 888            888     888        888 T88b         "888
  # 888     d8888888888 888  T88b   d8888888888 888   "   888 888            888     888        888  T88b  Y88b  d88P
  # 888    d88P     888 888   T88b d88P     888 888       888 8888888888     888     8888888888 888   T88b  "Y8888P"
  #

  parameters:
    IconSize:
      description: Icon sizes.
      example: "512x512"
      name: icon_size
      in: path
      required: true
      schema:
        type: string
        enum:
          - 512x512 # Generic big icon
          - 32x32 # Generic small icon
          - 180x180 # iOS high DPI
          - 120x120 # iOS low DPI
          - 167x167 # iPad OS
          - 152x152 # iPad Mini

    ContentLength:
      description: Body content length in bytes.
      name: Content-Length
      in: header
      required: true
      schema:
        type: number

    AccountHandleParam:
      description: Account handle.
      example: southclaws
      name: account_handle
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/AccountHandle"

    ThreadMarkParam:
      description: Thread unique and permanent identifier.
      name: thread_mark
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ThreadMark"

    PostIDParam:
      description: Unique post ID.
      name: post_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"

    NodeIDParam:
      description: Unique node ID.
      name: node_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"

    OAuthProvider:
      description: The identifier for an OAuth2 provider such as "twitter".
      name: oauth_provider
      in: path
      required: true
      example: twitter
      schema:
        type: string

    SearchQuery:
      description: Search query string.
      name: q
      in: query
      required: false
      allowEmptyValue: true
      schema:
        type: string
        minLength: 0

    PaginationQuery:
      description: Pagination query parameters.
      name: page
      in: query
      required: false
      schema:
        type: string

    AssetPathParam:
      description: Asset ID.
      name: asset_filename
      in: path
      required: true
      schema:
        type: string

    AssetIDParam:
      description: Asset ID.
      name: asset_id
      in: path
      required: true
      schema:
        type: string

    CategoryIDParam:
      description: Unique category ID.
      name: category_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"

    CollectionIDParam:
      description: Unique collection ID.
      name: collection_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"

    NodeSlugParam:
      description: Unique node Slug.
      name: node_slug
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"

    NodeSlugChildParam:
      description: Unique node Slug.
      name: node_slug_child
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"

    TargetNodeSlugQuery:
      description: |
        If set, child nodes will be moved to the target node. If not set, child
        nodes will be moved to the root.
      name: target_node
      in: query
      required: false
      schema:
        type: string

    LinkSlugParam:
      description: Unique link Slug.
      name: link_slug
      in: path
      required: true
      schema:
        type: string

    VisibilityParam:
      name: visibility
      description: |
        Filter nodes with specific visibility values. Note that by
        default, only published nodes are returned. When 'draft' is
        specified, only drafts owned by the requesting account are included.
        When 'review' is specified, the request will fail if the requesting
        account is not an administrator.
      required: false
      in: query
      schema:
        type: array
        items: { $ref: "#/components/schemas/Visibility" }

    TreeDepthParam:
      name: depth
      description: |
        When set to a positive value, the nodes in the response will include all
        child nodes up to the specified depth. When set to zero, then if the
        request includes a node ID only that node will be returned, otherwise
        only top-level (root) nodes will be returned.
      required: false
      in: query
      schema:
        type: string

  #
  # 8888888b.  8888888888 .d88888b.  888     888 8888888888 .d8888b. 88888888888 .d8888b.
  # 888   Y88b 888       d88P" "Y88b 888     888 888       d88P  Y88b    888    d88P  Y88b
  # 888    888 888       888     888 888     888 888       Y88b.         888    Y88b.
  # 888   d88P 8888888   888     888 888     888 8888888    "Y888b.      888     "Y888b.
  # 8888888P"  888       888     888 888     888 888           "Y88b.    888        "Y88b.
  # 888 T88b   888       888 Y8b 888 888     888 888             "888    888          "888
  # 888  T88b  888       Y88b.Y8b88P Y88b. .d88P 888       Y88b  d88P    888    Y88b  d88P
  # 888   T88b 8888888888 "Y888888"   "Y88888P"  8888888888 "Y8888P"     888     "Y8888P"
  #                             Y8b
  #

  requestBodies:
    AdminSettingsUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AdminSettingsMutableProps" }

    AuthPassword:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AuthPair" }

    AuthPasswordCreate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AuthPasswordInitialProps" }

    AuthPasswordUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AuthPasswordMutableProps" }

    OAuthProviderCallback:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/OAuthCallback" }

    WebAuthnMakeCredential:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PublicKeyCredential" }

    WebAuthnMakeAssertion:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PublicKeyCredential" }

    PhoneRequestCode:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PhoneRequestCodeProps" }

    PhoneSubmitCode:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PhoneSubmitCodeProps" }

    AccountUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AccountMutableProps" }

    AccountSetAvatar:
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary

    CategoryCreate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/CategoryInitialProps" }

    CategoryUpdateOrder:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/CategoryIdentifierList" }

    CategoryUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/CategoryMutableProps" }

    ThreadCreate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ThreadInitialProps" }

    ThreadUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ThreadMutableProps" }

    PostCreate:
      description: Create a post within a thread.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PostInitialProps" }

    PostUpdate:
      description: Create a post within a thread.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PostMutableProps" }

    PostReactAdd:
      description: Add a reaction to a post.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PostReactProps" }

    AssetUpload:
      description: Upload a file.
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary

    CollectionCreate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/CollectionInitialProps" }

    CollectionUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/CollectionMutableProps" }

    NodeCreate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/NodeInitialProps" }

    NodeUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/NodeMutableProps" }

    LinkCreate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/LinkInitialProps" }

    VisibilityUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/VisibilityMutationProps" }

  #
  # 8888888b.  8888888888 .d8888b.  8888888b.   .d88888b.  888b    888  .d8888b.  8888888888 .d8888b.
  # 888   Y88b 888       d88P  Y88b 888   Y88b d88P" "Y88b 8888b   888 d88P  Y88b 888       d88P  Y88b
  # 888    888 888       Y88b.      888    888 888     888 88888b  888 Y88b.      888       Y88b.
  # 888   d88P 8888888    "Y888b.   888   d88P 888     888 888Y88b 888  "Y888b.   8888888    "Y888b.
  # 8888888P"  888           "Y88b. 8888888P"  888     888 888 Y88b888     "Y88b. 888           "Y88b.
  # 888 T88b   888             "888 888        888     888 888  Y88888       "888 888             "888
  # 888  T88b  888       Y88b  d88P 888        Y88b. .d88P 888   Y8888 Y88b  d88P 888       Y88b  d88P
  # 888   T88b 8888888888 "Y8888P"  888         "Y88888P"  888    Y888  "Y8888P"  8888888888 "Y8888P"
  #

  responses:
    BadRequest:
      description: Bad request
    NotFound:
      description: Not found
    Unauthorised:
      description: Unauthorized
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"

    GetInfoOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Info"

    AdminSettingsUpdateOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdminSettingsProps"

    AuthSuccessOK:
      description: OK
      headers:
        "Set-Cookie":
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthSuccess"

    AuthProviderListOK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required: [providers]
            properties:
              providers: { $ref: "#/components/schemas/AuthProviderList" }

    WebAuthnRequestCredentialOK:
      description: OK
      headers:
        "Set-Cookie":
          schema:
            type: string
      content:
        application/json:
          schema:
            { $ref: "#/components/schemas/WebAuthnPublicKeyCreationOptions" }

    WebAuthnGetAssertionOK:
      description: OK
      headers:
        "Set-Cookie":
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CredentialRequestOptions"

    AccountGetOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"

    AccountUpdateOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"

    AccountAuthProviderListOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountAuthMethods"

    AccountGetAvatar:
      description: OK
      content:
        image/png:
          schema:
            type: string
            format: binary

    ProfileListOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PublicProfileListResult"

    ProfileGetOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PublicProfile"

    CategoryCreateOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"

    CategoryUpdateOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"

    CategoryListOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryList"

    ThreadCreateOK:
      description: Thread created.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Thread"

    ThreadUpdateOK:
      description: Thread updated.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Thread"

    ThreadListOK:
      description: List of all threads.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ThreadListResult" }

    ThreadGet:
      description: The information about a thread and its posts.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Thread" }

    PostCreateOK:
      description: Thread post created successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PostProps"

    PostUpdateOK:
      description: Thread post updated successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PostProps"

    PostSearchOK:
      description: Thread post updated successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PostSearchResults"

    PostReactAddOK:
      description: Post reaction added.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/React"

    AssetUploadOK:
      description: The new URL of an uploaded file.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Asset"

    AssetGetOK:
      description: The new URL of an uploaded file.
      content:
        "*/*":
          schema:
            type: string
            format: binary

    CollectionCreateOK:
      description: Collection created.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Collection"

    CollectionListOK:
      description: Collection list.
      content:
        application/json:
          schema:
            type: object
            required: [collections]
            properties:
              collections: { $ref: "#/components/schemas/CollectionList" }

    CollectionGetOK:
      description: Collection information and content.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CollectionWithItems"

    CollectionUpdateOK:
      description: Collection updated.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Collection"

    CollectionAddPostOK:
      description: Collection content added.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Collection"

    CollectionRemovePostOK:
      description: Collection content added.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Collection"

    CollectionAddNodeOK:
      description: Collection content added.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Collection"

    CollectionRemoveNodeOK:
      description: Collection content added.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Collection"

    NodeCreateOK:
      description: Node created.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Node"

    NodeListOK:
      description: Node list.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/NodeListResult" }

    NodeGetOK:
      description: Node information and content.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NodeWithChildren"

    NodeUpdateOK:
      description: Node updated.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Node"

    NodeDeleteOK:
      description: Node deleted.
      content:
        application/json:
          schema:
            properties:
              destination:
                $ref: "#/components/schemas/Node"

    NodeAddChildOK:
      description: Node child added. Returns parent node.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Node"

    NodeRemoveChildOK:
      description: Node child removed. Returns parent node.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Node"

    LinkCreateOK:
      description: Link indexed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    LinkListOK:
      description: Link list.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/LinkListResult" }

    LinkGetOK:
      description: Link data.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LinkWithRefs"

    DatagraphSearchOK:
      description: Search results.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/DatagraphSearchResult" }

  #
  #  .d8888b.   .d8888b.  888    888 8888888888 888b     d888        d8888  .d8888b.
  # d88P  Y88b d88P  Y88b 888    888 888        8888b   d8888       d88888 d88P  Y88b
  # Y88b.      888    888 888    888 888        88888b.d88888      d88P888 Y88b.
  #  "Y888b.   888        8888888888 8888888    888Y88888P888     d88P 888  "Y888b.
  #     "Y88b. 888        888    888 888        888 Y888P 888    d88P  888     "Y88b.
  #       "888 888    888 888    888 888        888  Y8P  888   d88P   888       "888
  # Y88b  d88P Y88b  d88P 888    888 888        888   "   888  d8888888888 Y88b  d88P
  #  "Y8888P"   "Y8888P"  888    888 8888888888 888       888 d88P     888  "Y8888P"
  #

  schemas:
    #
    #  .d8888b.
    # d88P  Y88b
    # 888    888
    # 888         .d88b.  88888b.d88b.  88888b.d88b.   .d88b.  88888b.
    # 888        d88""88b 888 "888 "88b 888 "888 "88b d88""88b 888 "88b
    # 888    888 888  888 888  888  888 888  888  888 888  888 888  888
    # Y88b  d88P Y88..88P 888  888  888 888  888  888 Y88..88P 888  888
    #  "Y8888P"   "Y88P"  888  888  888 888  888  888  "Y88P"  888  888
    #

    Identifier:
      type: string
      format: xid
      # NOTE: Does not work currently with oapi-codegen because it generates a
      # new type declaration instead of a type alias so the unmarshalling fails.
      # To work around this, there are special conversion APIs in the oapi pkg.
      x-go-type: string
      # x-go-type-import:
      #   name: xid
      #   path: github.com/rs/xid
      example: "cc5lnd2s1s4652adtu50"
      description: A unique identifier for this resource.

    Info:
      description: Basic public information about the Storyden installation.
      type: object
      required: [title, description, accent_colour, onboarding_status]
      properties:
        title:
          type: string
        description:
          type: string
        accent_colour:
          type: string
        onboarding_status:
          $ref: "#/components/schemas/OnboardingStatus"

    OnboardingStatus:
      description: |
        Derived from data state, indicates what stage in the onboarding process
        the Storyden installation is in for directing first-time setup steps.
      type: string
      enum:
        - requires_first_account
        - requires_category
        - requires_more_accounts
        - requires_first_post
        - complete

    ContentKind:
      type: string
      enum: [post, thread]

    ContentKinds:
      type: array
      items: { $ref: "#/components/schemas/ContentKind" }

    Visibility:
      type: string
      enum:
        - draft
        - review
        - published

    VisibilityMutationProps:
      type: object
      required: [visibility]
      properties:
        visibility: { $ref: "#/components/schemas/Visibility" }

    Slug:
      description: A URL-safe slug for uniquely identifying resources.
      type: string

    ThreadMark:
      description: |
        A thread's ID and optional slug separated by a dash = it's unique mark.
        This allows endpoints to respond to varying forms of a thread's ID.

        For example, given a thread with the ID `cc5lnd2s1s4652adtu50` and the
        slug `top-10-movies-thread`, Storyden will understand both the forms:
        `cc5lnd2s1s4652adtu50-top-10-movies-thread` and `cc5lnd2s1s4652adtu50`
         as the identifier for that thread.
      x-go-type: string
      type: string
      format: xid-prefixed-kebab-case-string
      example: "cc5lnd2s1s4652adtu50-top-10-movies-thread"

    CommonProperties:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        createdAt:
          type: string
          format: date-time
          description: The time the resource was created.
        updatedAt:
          type: string
          format: date-time
          description: The time the resource was updated.
        deletedAt:
          type: string
          format: date-time
          description: The time the resource was soft-deleted.
        misc:
          type: object
          description: Arbitrary extra data stored with the resource.

    APIError:
      type: object
      description: |
        A description of an error including a human readable message and any
        related metadata from the request and associated services.
      required: [error]
      properties:
        error:
          description: The internal error, not intended for end-user display.
          type: string
        message:
          description: A human-readable message intended for end-user display.
          type: string
        suggested:
          description: A suggested action for the user.
          type: string
        metadata:
          description: Any additional metadata related to the error.
          type: object
          additionalProperties: true

    Metadata:
      type: object
      additionalProperties: true
      description: Arbitrary metadata for the resource.

    Properties:
      description: |
        Arbitrary JSON object that can express any additional data for a
        resource object. This is intended for client implementations to use for
        extending objects with arbitrary information to satisfy product needs.

        For example, if you were building a book database, you could use the
        Properties of a node to specify publisher information such as date of
        founding, headquarters, size, etc. and then use the Properties of the
        items in that node to specify book information such as release date,
        number of pages, etc.
      type: object
      additionalProperties: true
      x-go-type: any

    PaginatedResult:
      description: To be composed with paginated resource responses.
      type: object
      required: [page_size, results, total_pages, current_page]
      properties:
        page_size:
          type: integer
        results:
          type: integer
        total_pages:
          type: integer
        current_page:
          type: integer
        next_page:
          type: integer

    URL:
      description: A web address
      type: string
      format: url

    AccountName:
      type: string
      description: The account owners display name.
      example: Barnaby Keene

    AccountHandle:
      type: string
      x-go-type: string
      description: The unique @ handle of an account.
      example: Southclaws

    AccountBio:
      type: string
      description: The rich-text bio for an account's public profile.
      example: <body><p>hi, my name is</p><p>southclaws</p></body>

    ProfileReference:
      type: object
      description: A minimal reference to an account.
      required: [id, handle, name, admin]
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        handle: { $ref: "#/components/schemas/AccountHandle" }
        name: { $ref: "#/components/schemas/AccountName" }
        admin:
          type: boolean

    ThreadTitle:
      type: string
      description: The title of a thread.
      example: Hello world!

    Tag:
      type: object
      description: A tag which can link profiles or threads via interests.
      required: [id, name]
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        name: { $ref: "#/components/schemas/TagName" }
        colour: { type: string }

    TagName:
      type: string
      description: The name of a tag.

    TagList:
      type: array
      description: A list of tags.
      items: { $ref: "#/components/schemas/Tag" }

    TagListIDs:
      type: array
      description: A list of tags IDs.
      items: { $ref: "#/components/schemas/Identifier" }

    PostContent:
      description: |
        The body text of a post within a thread. The type is either a string or
        an object, depending on what was used during creation. Strings can be
        used for basic plain text or markdown content and objects are used for
        more complex types such as Slate.js editor documents.
      type: string

    #
    #        d8888      888               d8b
    #       d88888      888               Y8P
    #      d88P888      888
    #     d88P 888  .d88888 88888b.d88b.  888 88888b.
    #    d88P  888 d88" 888 888 "888 "88b 888 888 "88b
    #   d88P   888 888  888 888  888  888 888 888  888
    #  d8888888888 Y88b 888 888  888  888 888 888  888
    # d88P     888  "Y88888 888  888  888 888 888  888
    #

    AdminSettingsProps:
      description: Storyden installation and administration settings.
      type: object
      required: [title, description, accent_colour]
      properties:
        title:
          type: string
        description:
          type: string
        accent_colour:
          type: string

    AdminSettingsMutableProps:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        accent_colour:
          type: string

    #
    #        d8888          888    888
    #       d88888          888    888
    #      d88P888          888    888
    #     d88P 888 888  888 888888 88888b.
    #    d88P  888 888  888 888    888 "88b
    #   d88P   888 888  888 888    888  888
    #  d8888888888 Y88b 888 Y88b.  888  888
    # d88P     888  "Y88888  "Y888 888  888
    #

    AuthProviderList:
      type: array
      items:
        $ref: "#/components/schemas/AuthProvider"

    AuthProvider:
      type: object
      required: [provider, name, link]
      properties:
        provider:
          description: The slug name of the provider.
          type: string
        name:
          description: The human-readable name of the provider.
          type: string
        link:
          description: The hyperlink to render for the user.
          type: string

    AuthPair:
      type: object
      required: [identifier, token]
      properties:
        identifier:
          example: "odin"
          type: string
        token:
          example: "password"
          type: string

    AuthPasswordInitialProps:
      type: object
      required: [password]
      properties:
        password:
          example: "password123"
          type: string

    AuthPasswordMutableProps:
      type: object
      required: [old, new]
      properties:
        old:
          example: "password123"
          type: string
        new:
          example: "password456"
          type: string

    AuthSuccess:
      type: object
      required: [id]
      properties:
        id:
          type: string

    OAuthCallback:
      type: object
      required:
        - state
        - code
      properties:
        state:
          type: string
        code:
          type: string

    WebAuthnPublicKeyCreationOptions:
      description: |
        https://www.w3.org/TR/webauthn-2/#sctn-credentialcreationoptions-extension
      type: object
      required: [publicKey]
      properties:
        publicKey:
          $ref: "#/components/schemas/PublicKeyCredentialCreationOptions"

    PublicKeyCredentialCreationOptions:
      description: |
        https://www.w3.org/TR/webautehn-2/#dictdef-publickeycredentialcreationoptions
      type: object
      required:
        - rp
        - user
        - challenge
        - excludeCredentials
        - pubKeyCredParams
      properties:
        rp: { $ref: "#/components/schemas/PublicKeyCredentialRpEntity" }
        user: { $ref: "#/components/schemas/PublicKeyCredentialUserEntity" }

        challenge:
          type: string
        pubKeyCredParams:
          type: array
          items: { $ref: "#/components/schemas/PublicKeyCredentialParameters" }

        timeout:
          type: integer
        excludeCredentials:
          type: array
          items: { $ref: "#/components/schemas/PublicKeyCredentialDescriptor" }
        authenticatorSelection:
          { $ref: "#/components/schemas/AuthenticatorSelectionCriteria" }
        attestation:
          { $ref: "#/components/schemas/AttestationConveyancePreference" }
        extensions:
          { $ref: "#/components/schemas/AuthenticationExtensionsClientInputs" }

    PublicKeyCredentialRpEntity:
      description: |
        https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity
      type: object
      required: [name, id]
      properties:
        id:
          type: string
        name:
          type: string

    PublicKeyCredentialUserEntity:
      description: |
        https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
      type: object
      required: [id, name, displayName]
      properties:
        id:
          type: string
        name:
          type: string
        displayName:
          type: string

    PublicKeyCredentialParameters:
      description: |
        https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters
      type: object
      required: [type, alg]
      properties:
        type:
          $ref: "#/components/schemas/PublicKeyCredentialType"
        alg:
          type: number

    PublicKeyCredentialType:
      description: |
        https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype
      type: string
      enum: [public-key]

    PublicKeyCredentialDescriptor:
      description: |
        https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor
      type: object
      required: [type, id]
      properties:
        type:
          $ref: "#/components/schemas/PublicKeyCredentialType"
        id:
          type: string
        transports:
          type: array
          items:
            type: string
            enum: ["ble", "internal", "nfc", "usb", "cable", "hybrid"]

    AuthenticatorSelectionCriteria:
      description: |
        https://www.w3.org/TR/webauthn-2/#dictdef-authenticatorselectioncriteria
      type: object
      required:
        - authenticatorAttachment
        - residentKey
      properties:
        authenticatorAttachment:
          $ref: "#/components/schemas/AuthenticatorAttachment"
        residentKey:
          $ref: "#/components/schemas/ResidentKeyRequirement"
        requireResidentKey:
          type: boolean
        userVerification:
          $ref: "#/components/schemas/UserVerificationRequirement"

    AuthenticatorAttachment:
      description: |
        https://www.w3.org/TR/webauthn-2/#enumdef-authenticatorattachment
      type: string
      enum: [platform, cross-platform]

    ResidentKeyRequirement:
      description: |
        https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement
      type: string
      enum:
        - discouraged
        - preferred
        - required

    UserVerificationRequirement:
      description: |
        https://www.w3.org/TR/webauthn-2/#enumdef-userverificationrequirement
      type: string
      default: preferred
      enum:
        - discouraged
        - preferred
        - required

    AttestationConveyancePreference:
      description: |
        https://www.w3.org/TR/webauthn-2/#enum-attestation-convey
      type: string
      enum:
        - direct
        - enterprise
        - indirect
        - none

    AuthenticationExtensionsClientInputs:
      description: |
        https://www.w3.org/TR/webauthn-2/#dictdef-authenticationextensionsclientinputs
      type: object
      additionalProperties: true

    PublicKeyCredential:
      description: |
        https://www.w3.org/TR/webauthn-2/#iface-pkcredential
      type: object
      required:
        - id
        - rawId
        - response
        - type
      properties:
        id:
          type: string
        rawId:
          type: string
        response: { $ref: "#/components/schemas/AuthenticatorResponse" }
        type:
          type: string
        clientExtensionResults:
          type: object
        authenticatorAttachment:
          type: string

    AuthenticatorResponse:
      description: |
        https://www.w3.org/TR/webauthn-2/#authenticatorresponse
      type: object
      required: [clientDataJSON]
      properties:
        clientDataJSON:
          type: string
        attestationObject:
          type: string
        transports:
          type: array
          items:
            type: string
        authenticatorData:
          type: string
        signature:
          type: string
        userHandle:
          type: string

    CredentialRequestOptions:
      description: |
        https://www.w3.org/TR/webauthn-2/#sctn-credentialrequestoptions-extension
      type: object
      required: [publicKey]
      properties:
        publicKey:
          $ref: "#/components/schemas/PublicKeyCredentialRequestOptions"

    PublicKeyCredentialRequestOptions:
      description: |
        https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
      type: object
      required: [challenge]
      properties:
        challenge:
          type: string
        timeout:
          type: integer
        rpId:
          type: string
        allowCredentials:
          type: array
          items:
            $ref: "#/components/schemas/PublicKeyCredentialDescriptor"
        userVerification:
          type: string
          enum: ["discouraged", "preferred", "required"]

    PhoneRequestCodeProps:
      description: The phone number request payload.
      type: object
      required: [identifier, phone_number]
      properties:
        identifier:
          description: The desired username to link to the phone number.
          example: "southclaws"
          type: string
        phone_number:
          description: The phone number to receive the one-time code on.
          type: string

    PhoneSubmitCodeProps:
      description: The Phone submit code payload.
      type: object
      required: [code]
      properties:
        code:
          type: string

    #
    #        d8888                                            888
    #       d88888                                            888
    #      d88P888                                            888
    #     d88P 888  .d8888b .d8888b .d88b.  888  888 88888b.  888888
    #    d88P  888 d88P"   d88P"   d88""88b 888  888 888 "88b 888
    #   d88P   888 888     888     888  888 888  888 888  888 888
    #  d8888888888 Y88b.   Y88b.   Y88..88P Y88b 888 888  888 Y88b.
    # d88P     888  "Y8888P "Y8888P "Y88P"   "Y88888 888  888  "Y888
    #

    Account:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - $ref: "#/components/schemas/AccountCommonProps"

    AccountCommonProps:
      required: [handle, name, bio, admin]
      properties:
        handle:
          $ref: "#/components/schemas/AccountHandle"
        name:
          $ref: "#/components/schemas/AccountName"
        bio:
          $ref: "#/components/schemas/AccountBio"
        interests:
          $ref: "#/components/schemas/TagList"
        admin:
          type: boolean

    AccountMutableProps:
      type: object
      properties:
        handle:
          $ref: "#/components/schemas/AccountHandle"
        name:
          $ref: "#/components/schemas/AccountName"
        bio:
          $ref: "#/components/schemas/AccountBio"
        interests:
          $ref: "#/components/schemas/TagListIDs"

    AccountAuthMethods:
      type: object
      required: [active, available]
      properties:
        active: { $ref: "#/components/schemas/AccountAuthMethodList" }
        available: { $ref: "#/components/schemas/AuthProviderList" }

    AccountAuthMethodList:
      type: array
      items: { $ref: "#/components/schemas/AccountAuthMethod" }

    AccountAuthMethod:
      description: |
        An authentication method is an active instance of an authentication
        provider associated with an account. Use this to display a user's active
        authentication methods so they can edit or remove it.
      type: object
      required: [id, created_at, name, identifier, provider]
      properties:
        id:
          description: The internal unique ID this method has.
          type: string
        created_at:
          type: string
          format: date-time
          description: When this auth method was registered to the account.
        name:
          description: The personal name given to the method.
          type: string
        identifier:
          description: The external identifier (third party ID or device ID)
          type: string
        provider: { $ref: "#/components/schemas/AuthProvider" }

    #
    # 8888888b.                   .d888 d8b 888
    # 888   Y88b                 d88P"  Y8P 888
    # 888    888                 888        888
    # 888   d88P 888d888 .d88b.  888888 888 888  .d88b.
    # 8888888P"  888P"  d88""88b 888    888 888 d8P  Y8b
    # 888        888    888  888 888    888 888 88888888
    # 888        888    Y88..88P 888    888 888 Y8b.
    # 888        888     "Y88P"  888    888 888  "Y8888
    #

    PublicProfile:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - required: [createdAt, handle, name, bio, interests]
          properties:
            createdAt:
              type: string
            handle:
              $ref: "#/components/schemas/AccountHandle"
            name:
              $ref: "#/components/schemas/AccountName"
            bio:
              $ref: "#/components/schemas/AccountBio"
            image:
              type: string
            interests:
              $ref: "#/components/schemas/TagList"

    PublicProfileListResult:
      allOf:
        - { $ref: "#/components/schemas/PaginatedResult" }
        - type: object
          required: [profiles]
          properties:
            profiles: { $ref: "#/components/schemas/PublicProfileList" }

    PublicProfileList:
      type: array
      items: { $ref: "#/components/schemas/PublicProfile" }

    #
    #  .d8888b.           888
    # d88P  Y88b          888
    # 888    888          888
    # 888         8888b.  888888 .d88b.   .d88b.   .d88b.  888d888 888  888
    # 888            "88b 888   d8P  Y8b d88P"88b d88""88b 888P"   888  888
    # 888    888 .d888888 888   88888888 888  888 888  888 888     888  888
    # Y88b  d88P 888  888 Y88b. Y8b.     Y88b 888 Y88..88P 888     Y88b 888
    #  "Y8888P"  "Y888888  "Y888 "Y8888   "Y88888  "Y88P"  888      "Y88888
    #                                         888                       888
    #                                    Y8b d88P                  Y8b d88P
    #                                     "Y88P"                    "Y88P"
    #

    Category:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - $ref: "#/components/schemas/CategoryCommonProps"
        - $ref: "#/components/schemas/CategoryAdditional"

    CategoryReference:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - $ref: "#/components/schemas/CategoryCommonProps"

    CategoryCommonProps:
      type: object
      required: [name, slug, description, colour, sort, admin]
      properties:
        name:
          $ref: "#/components/schemas/CategoryName"
        slug:
          $ref: "#/components/schemas/CategorySlug"
        description:
          type: string
        colour:
          type: string
        sort:
          type: integer
        admin:
          type: boolean
        meta: { $ref: "#/components/schemas/Metadata" }

    CategoryInitialProps:
      type: object
      required: [name, description, colour, admin]
      properties:
        name:
          $ref: "#/components/schemas/CategoryName"
        slug:
          $ref: "#/components/schemas/CategorySlug"
        description:
          type: string
        colour:
          type: string
        admin:
          type: boolean
        meta: { $ref: "#/components/schemas/Metadata" }

    CategoryMutableProps:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/CategoryName"
        slug:
          $ref: "#/components/schemas/CategorySlug"
        description:
          type: string
        colour:
          type: string
        admin:
          type: boolean
        meta: { $ref: "#/components/schemas/Metadata" }

    CategoryName:
      description: A category's user-facing name.
      type: string

    CategorySlug:
      description: A category's URL-safe slug.
      type: string

    CategorySlugList:
      description: A list of category names.
      type: array
      items:
        $ref: "#/components/schemas/CategorySlug"

    CategoryAdditional:
      type: object
      required: [postCount]
      properties:
        postCount:
          type: integer

    CategoryList:
      type: object
      required: [categories]
      properties:
        categories:
          type: array
          items: { $ref: "#/components/schemas/Category" }

    CategoryIdentifierList:
      type: array
      items: { $ref: "#/components/schemas/Identifier" }

    #
    # 88888888888 888                                    888
    #     888     888                                    888
    #     888     888                                    888
    #     888     88888b.  888d888 .d88b.   8888b.   .d88888
    #     888     888 "88b 888P"  d8P  Y8b     "88b d88" 888
    #     888     888  888 888    88888888 .d888888 888  888
    #     888     888  888 888    Y8b.     888  888 Y88b 888
    #     888     888  888 888     "Y8888  "Y888888  "Y88888
    #

    ThreadInitialProps:
      type: object
      required:
        - title
        - body
        - category
        - visibility
      properties:
        title: { $ref: "#/components/schemas/ThreadTitle" }
        body: { $ref: "#/components/schemas/PostContent" }
        tags: { $ref: "#/components/schemas/TagListIDs" }
        meta: { $ref: "#/components/schemas/Metadata" }
        category: { $ref: "#/components/schemas/Identifier" }
        visibility: { $ref: "#/components/schemas/Visibility" }
        url: { $ref: "#/components/schemas/URL" }

    ThreadMutableProps:
      type: object
      properties:
        title: { $ref: "#/components/schemas/ThreadTitle" }
        body: { $ref: "#/components/schemas/PostContent" }
        tags: { $ref: "#/components/schemas/TagListIDs" }
        meta: { $ref: "#/components/schemas/Metadata" }
        category: { $ref: "#/components/schemas/Identifier" }
        visibility: { $ref: "#/components/schemas/Visibility" }
        url: { $ref: "#/components/schemas/URL" }

    ThreadReference:
      description: |
        A thread reference includes most of the information about a thread but
        does not include the posts within the thread. Useful for rendering large
        lists of threads or other situations when you don't need the full data.
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - type: object
          required:
            - title
            - slug
            - short
            - pinned
            - author
            - tags
            - post_count
            - category
            - reacts
            - assets
            - collections
          properties:
            title:
              type: string
              example: Hello world!
              description: The title of the thread.
            slug: { $ref: "#/components/schemas/ThreadMark" }
            short:
              type: string
              readOnly: true
              description: |
                A short version of the thread's body text for use in previews.
            pinned:
              type: boolean
              description: Whether the thread is pinned in this category.
            author: { $ref: "#/components/schemas/ProfileReference" }
            tags:
              type: array
              items:
                type: string
              description: A list of tags associated with the thread.
            post_count:
              type: integer
              readOnly: true
              description: The number of posts under this thread.
            category: { $ref: "#/components/schemas/CategoryReference" }
            reacts:
              $ref: "#/components/schemas/ReactList"
            meta: { $ref: "#/components/schemas/Metadata" }
            assets: { $ref: "#/components/schemas/AssetList" }
            collections: { $ref: "#/components/schemas/CollectionList" }
            link: { $ref: "#/components/schemas/Link" }

    ThreadList:
      type: array
      items:
        $ref: "#/components/schemas/ThreadReference"

    ThreadListResult:
      allOf:
        - { $ref: "#/components/schemas/PaginatedResult" }
        - type: object
          required: [threads]
          properties:
            threads: { $ref: "#/components/schemas/ThreadList" }

    Thread:
      allOf:
        - $ref: "#/components/schemas/ThreadReference"
        - $ref: "#/components/schemas/DatagraphRecommendations"
        - type: object
          required: [posts]
          properties:
            posts: { $ref: "#/components/schemas/PostList" }

    #
    # 8888888b.                   888
    # 888   Y88b                  888
    # 888    888                  888
    # 888   d88P .d88b.  .d8888b  888888
    # 8888888P" d88""88b 88K      888
    # 888       888  888 "Y8888b. 888
    # 888       Y88..88P      X88 Y88b.
    # 888        "Y88P"   88888P'  "Y888
    #

    PostProps:
      type: object
      description: |
        A new post within a thread of posts. A post may reply to another post in
        the thread by specifying the `reply_to` property. The identifier in the
        `reply_to` value must be post within the same thread.
      allOf:
        - { $ref: "#/components/schemas/PostMetadata" }
        - { $ref: "#/components/schemas/PostCommonProps" }

    PostList:
      type: array
      items: { $ref: "#/components/schemas/PostProps" }

    PostMetadata:
      type: object
      allOf:
        - { $ref: "#/components/schemas/CommonProperties" }

    PostCommonProps:
      type: object
      required: [root_id, root_slug, body, author, reacts, assets, links]
      properties:
        root_id: { $ref: "#/components/schemas/Identifier" }
        root_slug: { $ref: "#/components/schemas/ThreadMark" }
        body: { $ref: "#/components/schemas/PostContent" }
        author: { $ref: "#/components/schemas/ProfileReference" }
        meta: { $ref: "#/components/schemas/Metadata" }
        reacts: { $ref: "#/components/schemas/ReactList" }
        reply_to: { $ref: "#/components/schemas/Identifier" }
        assets: { $ref: "#/components/schemas/AssetList" }
        links: { $ref: "#/components/schemas/LinkList" }

    PostInitialProps:
      type: object
      required: [body]
      properties:
        body: { $ref: "#/components/schemas/PostContent" }
        meta: { $ref: "#/components/schemas/Metadata" }
        reply_to: { $ref: "#/components/schemas/Identifier" }
        url: { $ref: "#/components/schemas/URL" }

    PostMutableProps:
      type: object
      properties:
        body: { $ref: "#/components/schemas/PostContent" }
        meta: { $ref: "#/components/schemas/Metadata" }
        url: { $ref: "#/components/schemas/URL" }

    ReactList:
      description: A list of reactions this post has had from people.
      type: array
      items: { $ref: "#/components/schemas/React" }

    React:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        emoji:
          type: string

    PostReactProps:
      description: |
        Reactions are currently just simple strings but they may improve later.
      type: object
      properties:
        emoji:
          type: string

    PostSearchResults:
      type: object
      required: [count, results]
      properties:
        count:
          type: number
        results:
          type: array
          items:
            $ref: "#/components/schemas/PostProps"

    #
    # 888b     d888               888 d8b
    # 8888b   d8888               888 Y8P
    # 88888b.d88888               888
    # 888Y88888P888  .d88b.   .d88888 888  8888b.
    # 888 Y888P 888 d8P  Y8b d88" 888 888     "88b
    # 888  Y8P  888 88888888 888  888 888 .d888888
    # 888   "   888 Y8b.     Y88b 888 888 888  888
    # 888       888  "Y8888   "Y88888 888 "Y888888
    #

    AssetID:
      $ref: "#/components/schemas/Identifier"

    AssetIDs:
      type: array
      items: { $ref: "#/components/schemas/AssetID" }

    AssetList:
      type: array
      items: { $ref: "#/components/schemas/Asset" }

    Asset:
      type: object
      required: [id, url, mime_type, width, height]
      properties:
        id:
          $ref: "#/components/schemas/AssetID"
        url:
          type: string
        mime_type:
          type: string
        width:
          type: number
        height:
          type: number

    #
    #  .d8888b.           888 888                   888    d8b
    # d88P  Y88b          888 888                   888    Y8P
    # 888    888          888 888                   888
    # 888         .d88b.  888 888  .d88b.   .d8888b 888888 888  .d88b.  88888b.
    # 888        d88""88b 888 888 d8P  Y8b d88P"    888    888 d88""88b 888 "88b
    # 888    888 888  888 888 888 88888888 888      888    888 888  888 888  888
    # Y88b  d88P Y88..88P 888 888 Y8b.     Y88b.    Y88b.  888 Y88..88P 888  888
    #  "Y8888P"   "Y88P"  888 888  "Y8888   "Y8888P  "Y888 888  "Y88P"  888  888
    #

    Collection:
      description: |
        A collection is a group of threads owned by a user. It allows users to
        curate their own lists of content from the site. Collections can only
        contain root level posts (threads) with titles and slugs to link to.
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - $ref: "#/components/schemas/CollectionCommonProps"

    CollectionWithItems:
      description: |
        The full properties of a collection, for rendering a single collection
        somewhere where you can afford to show all the items in the collection.
      type: object
      required: [items]
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - $ref: "#/components/schemas/CollectionCommonProps"
        - required: [items]
          properties:
            items: { $ref: "#/components/schemas/CollectionItemList" }

    CollectionCommonProps:
      description: A reference to the collection
      type: object
      required: [name, description, owner]
      properties:
        name:
          type: string
        description:
          type: string
        owner: { $ref: "#/components/schemas/ProfileReference" }

    CollectionList:
      type: array
      items: { $ref: "#/components/schemas/Collection" }

    CollectionInitialProps:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string

    CollectionMutableProps:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    CollectionItemList:
      type: array
      items: { $ref: "#/components/schemas/CollectionItem" }

    CollectionItem:
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - $ref: "#/components/schemas/DatagraphNode"
        - $ref: "#/components/schemas/CollectionItemMetadata"

    CollectionItemMetadata:
      type: object
      required: [owner, added_at]
      properties:
        owner:
          $ref: "#/components/schemas/ProfileReference"
        added_at:
          type: string
          format: date-time
          description: The time that the item was added to the collection.

    #
    # 888b    888               888
    # 8888b   888               888
    # 88888b  888               888
    # 888Y88b 888  .d88b.   .d88888  .d88b.
    # 888 Y88b888 d88""88b d88" 888 d8P  Y8b
    # 888  Y88888 888  888 888  888 88888888
    # 888   Y8888 Y88..88P Y88b 888 Y8b.
    # 888    Y888  "Y88P"   "Y88888  "Y8888
    #

    Node:
      description: |
        A node is a text document with children and assets. It serves as an
        abstraction for grouping structured data objects. It can represent
        things such as brands, manufacturers, authors, directors, etc. Nodes
        can be referenced in content posts and they also have their own content.
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - $ref: "#/components/schemas/NodeCommonProps"

    NodeWithChildren:
      description: |
        The full properties of a node including all child nodes.
      type: object
      required: [children]
      allOf:
        - $ref: "#/components/schemas/Node"
        - $ref: "#/components/schemas/DatagraphRecommendations"
        - required: [children]
          properties:
            children:
              type: array
              items: { $ref: "#/components/schemas/NodeWithChildren" }

    NodeName:
      type: string

    NodeSlug:
      $ref: "#/components/schemas/Slug"

    NodeDescription:
      type: string

    NodeCommonProps:
      description: The main properties of a node.
      type: object
      required: [name, slug, assets, description, owner, visibility, properties]
      properties:
        name: { $ref: "#/components/schemas/NodeName" }
        slug: { $ref: "#/components/schemas/NodeSlug" }
        assets: { $ref: "#/components/schemas/AssetList" }
        link: { $ref: "#/components/schemas/Link" }
        description: { $ref: "#/components/schemas/NodeDescription" }
        content: { $ref: "#/components/schemas/PostContent" }
        owner: { $ref: "#/components/schemas/ProfileReference" }
        parent: { $ref: "#/components/schemas/Node" }
        visibility: { $ref: "#/components/schemas/Visibility" }
        properties: { $ref: "#/components/schemas/Properties" }

    NodeTree:
      type: array
      items: { $ref: "#/components/schemas/NodeWithChildren" }

    NodeList:
      type: array
      items: { $ref: "#/components/schemas/Node" }

    NodeListResult:
      allOf:
        - { $ref: "#/components/schemas/PaginatedResult" }
        - type: object
          required: [nodes]
          properties:
            nodes: { $ref: "#/components/schemas/NodeTree" }

    NodeInitialProps:
      type: object
      required: [name]
      properties:
        name: { $ref: "#/components/schemas/NodeName" }
        slug: { $ref: "#/components/schemas/NodeSlug" }
        asset_ids: { $ref: "#/components/schemas/AssetIDs" }
        url: { $ref: "#/components/schemas/URL" }
        content: { $ref: "#/components/schemas/PostContent" }
        parent: { $ref: "#/components/schemas/NodeSlug" }
        visibility: { $ref: "#/components/schemas/Visibility" }
        properties: { $ref: "#/components/schemas/Properties" }

    NodeMutableProps:
      description: |
        Note: Properties are replace-all and are not merged with existing.
      type: object
      properties:
        name: { $ref: "#/components/schemas/NodeName" }
        slug: { $ref: "#/components/schemas/NodeSlug" }
        asset_ids: { $ref: "#/components/schemas/AssetIDs" }
        url: { $ref: "#/components/schemas/URL" }
        content: { $ref: "#/components/schemas/PostContent" }
        parent: { $ref: "#/components/schemas/NodeSlug" }
        properties: { $ref: "#/components/schemas/Properties" }

    #
    # 888      d8b          888
    # 888      Y8P          888
    # 888                   888
    # 888      888 88888b.  888  888
    # 888      888 888 "88b 888 .88P
    # 888      888 888  888 888888K
    # 888      888 888  888 888 "88b
    # 88888888 888 888  888 888  888
    #

    LinkTitle:
      type: string
      example: "The Open Graph Protocol"

    LinkDescription:
      type: string
      example: "The Open Graph protocol enables any web page to become a rich object in a social graph."

    LinkSlug:
      type: string
      example: github-com-southclaws-storyden

    LinkDomain:
      type: string
      example: github.com

    Link:
      description: |
        A web address with content information such as title, description, etc.
      type: object
      required: [url, assets, slug, domain]
      properties:
        url: { $ref: "#/components/schemas/URL" }
        title: { $ref: "#/components/schemas/LinkTitle" }
        description: { $ref: "#/components/schemas/LinkDescription" }
        slug: { $ref: "#/components/schemas/LinkSlug" }
        domain: { $ref: "#/components/schemas/LinkDomain" }
        assets: { $ref: "#/components/schemas/AssetList" }

    LinkWithRefs:
      allOf:
        - $ref: "#/components/schemas/Link"
        - $ref: "#/components/schemas/DatagraphRecommendations"
        - required: [threads, posts, nodes, collections]
          properties:
            threads: { $ref: "#/components/schemas/ThreadList" }
            posts: { $ref: "#/components/schemas/PostList" }
            nodes: { $ref: "#/components/schemas/NodeList" }
            collections: { $ref: "#/components/schemas/CollectionList" }

    LinkList:
      type: array
      items: { $ref: "#/components/schemas/Link" }

    LinkListResult:
      allOf:
        - { $ref: "#/components/schemas/PaginatedResult" }
        - type: object
          required: [links]
          properties:
            links: { $ref: "#/components/schemas/LinkList" }

    LinkInitialProps:
      type: object
      required: [url]
      properties:
        url: { $ref: "#/components/schemas/URL" }
        title: { $ref: "#/components/schemas/LinkTitle" }
        description: { $ref: "#/components/schemas/LinkDescription" }

    #
    # 8888888b.           888                                               888
    # 888  "Y88b          888                                               888
    # 888    888          888                                               888
    # 888    888  8888b.  888888  8888b.   .d88b.  888d888 8888b.  88888b.  88888b.
    # 888    888     "88b 888        "88b d88P"88b 888P"      "88b 888 "88b 888 "88b
    # 888    888 .d888888 888    .d888888 888  888 888    .d888888 888  888 888  888
    # 888  .d88P 888  888 Y88b.  888  888 Y88b 888 888    888  888 888 d88P 888  888
    # 8888888P"  "Y888888  "Y888 "Y888888  "Y88888 888    "Y888888 88888P"  888  888
    #                                          888                 888
    #                                     Y8b d88P                 888
    #                                      "Y88P"                  888
    #

    DatagraphSearchResult:
      type: object
      allOf:
        - { $ref: "#/components/schemas/PaginatedResult" }
        - type: object
          required: [items]
          properties:
            items: { $ref: "#/components/schemas/DatagraphNodeList" }

    DatagraphNodeList:
      type: array
      items: { $ref: "#/components/schemas/DatagraphNode" }

    DatagraphNode:
      type: object
      required: [kind, id, name, slug]
      properties:
        kind: { $ref: "#/components/schemas/DatagraphNodeKind" }
        id: { $ref: "#/components/schemas/Identifier" }
        name:
          type: string
        slug:
          type: string
        description:
          type: string

    DatagraphNodeKind:
      type: string
      enum: [post, node, profile]

    DatagraphRecommendations:
      required: [recomentations]
      properties:
        recomentations: { $ref: "#/components/schemas/DatagraphNodeList" }

  securitySchemes:
    browser:
      type: apiKey
      in: cookie
      name: storyden-session
    webauthn:
      type: apiKey
      in: cookie
      name: "storyden-webauthn-session"
#
#     ..:.                                                        .***=
#  .+#%%%%%#+   ...                                               :%%%+
#  #%%%+==+#.  =%%%.                                              :%%%+
# :%%%%:      -*%%%=-.   :==+==:    ---: :== ----     .---- .-===-:%%%+   :==+=-:   .---..-==-.
#  +%%%%%#*=. #%%%%%%-.+%%%%#%%%%+ .%%%##%%% -%%%#.  .#%%#=*%%%%%%%%%%+ =%%#+=+#%#- -%%%#%#%%%%*
#   .-+#%%%%%- +%%%:..#%%%=   +%%%*.%%%#-. .  :#%%#..#%%#:#%%%=  .+%%%+-%%%*===+%%%:-%%%+  .#%%%.
#        +%%%# =%%%. .%%%#    .%%%%.%%%+       .#%%##%%#:.%%%#    :%%%+=%%%*+++++++:-%%%:   +%%%.
# .##*===#%%%= =%%%.  +%%%#=-=#%%%-.%%%+        .#%%%%*.  +%%%#=-=#%%%+.#%%+:..=++= -%%%:   +%%%.
# -*%%%%%%%*-  =%%%.   :*%%%%%%#+: .%%%+         -%%%#.    -*%%%%%*%%%+ .+#%%%%%%+. -%%%:   +%%%.
#    .:::.                .:::.                 -%%%*.        .:.          .:::.
#                                              -%%%*
#                                             -***+
#
