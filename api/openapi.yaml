openapi: 3.0.1

#
#            ╓███,
#          ▄██▀"███▄
#         ╚█▀    `▀██▄
#     ,,     ╓███,  ▀██▌_
#   ╓███   ▄██▀"███▄  ╙███_
#  ▐██"  ▄██▀    `▀██▄  ╙██
#  ▐██  ╙██▄       ╫██Γ  ██─
#  ▐██    ▀██▄  ,▓██▀    ██─
#  ▐██      ╙█████▀      ██─
#  ▐██      ╓█████_      ██─
#  ▐██    ▄██▀` ╙███╥    ██─
#  └███████▀      `▀██   ██
#

info:
  contact:
    name: Barnaby Keene
  description: Storyden social API for building community driven platforms.
  title: storyden
  version: "1"

servers:
  - url: "/api"
    description: |
      The HTTP interface that this document describes is mounted on the `/api` 
      path and any requests outside of this base path will be proxied to the
      frontend if Storyden is running in standalone mode.

security:
  - browser: []

tags:
  - name: misc
    description: Non-business logic stuff.
  - name: auth
    description: Authentication resources.
  - name: accounts
    description: User accounts.
  - name: profiles
    description: Public profiles.
  - name: threads
    description: Forum threads.
  - name: posts
    description: Posts within a specific thread.

#
# 8888888b.     d8888 88888888888 888    888  .d8888b.
# 888   Y88b   d88888     888     888    888 d88P  Y88b
# 888    888  d88P888     888     888    888 Y88b.
# 888   d88P d88P 888     888     8888888888  "Y888b.
# 8888888P" d88P  888     888     888    888     "Y88b.
# 888      d88P   888     888     888    888       "888
# 888     d8888888888     888     888    888 Y88b  d88P
# 888    d88P     888     888     888    888  "Y8888P"
#

paths:
  #
  #                d8b
  #                Y8P
  #
  #  88888b.d88b.  888 .d8888b   .d8888b
  #  888 "888 "88b 888 88K      d88P"
  #  888  888  888 888 "Y8888b. 888
  #  888  888  888 888      X88 Y88b.
  #  888  888  888 888  88888P'  "Y8888P
  #

  /version:
    get:
      operationId: GetVersion
      summary: Get the software version string.
      description: |
        The version number includes the date and time of the release build as
        well as a short representation of the Git commit hash.
      security: []
      tags: [misc]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string

  /openapi.json:
    get:
      operationId: GetSpec
      summary: Get the OpenAPI 3.0 specification as JSON.
      description: |
        Note: the generator creates a `map[string]interface{}` if this is set to
        `application/json`... so I'm just using plain text for now.

      security: []
      tags: [misc]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string

  #
  #                   888    888
  #                   888    888
  #                   888    888
  #  8888b.  888  888 888888 88888b.
  #     "88b 888  888 888    888 "88b
  # .d888888 888  888 888    888  888
  # 888  888 Y88b 888 Y88b.  888  888
  # "Y888888  "Y88888  "Y888 888  888
  #

  /v1/auth:
    get:
      operationId: AuthProviderList
      description: |
        Retrieve a list of authentication providers. Storyden supports a few 
        ways to authenticate, from simple passwords to OAuth and WebAuthn. This
        endpoint tells a client which auth capabilities are enabled.
      tags: [auth]
      security: []
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthProviderList" }

  /v1/auth/password/signup:
    post:
      operationId: AuthPasswordSignup
      description: Register a new account with a username and password.
      tags: [auth]
      security: []
      requestBody: { $ref: "#/components/requestBodies/AuthPassword" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthSuccess" }

  /v1/auth/password/signin:
    post:
      operationId: AuthPasswordSignin
      description: Sign in to an existing account with a username and password.
      tags: [auth]
      security: []
      requestBody: { $ref: "#/components/requestBodies/AuthPassword" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AuthSuccess" }

  /v1/auth/oauth/{oauth_provider}/callback:
    post:
      operationId: AuthOAuthProviderCallback
      description: Sign in to an existing account with a username and password.
      tags: [auth]
      security: []
      parameters: [$ref: "#/components/parameters/OAuthProvider"]
      requestBody:
        { $ref: "#/components/requestBodies/AuthOAuthProviderCallback" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "404": { $ref: "#/components/responses/NotFound" }
        "200": { $ref: "#/components/responses/AuthSuccess" }

  /v1/auth/webauthn/make/{account_handle}:
    get:
      operationId: WebAuthnRequestCredential
      description: |
        Start the WebAuthn registration process by requesting a credential.
      tags: [auth]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandle"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200":
          { $ref: "#/components/responses/WebAuthnPublicKeyCreationOptions" }

  /v1/auth/webauthn/make:
    post:
      operationId: WebAuthnMakeCredential
      description: Complete WebAuthn registration by creating a new credential.
      tags: [auth]
      security: [webauthn: []]
      requestBody:
        content:
          application/json:
            schema:
              type: object

      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "200": { $ref: "#/components/responses/AuthSuccess" }

  /v1/auth/webauthn/assert/{account_handle}:
    post:
      operationId: WebAuthnGetAssertion
      description: Start the WebAuthn assertion for an existing account.
      tags: [auth]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandle"]
      requestBody: { $ref: "#/components/requestBodies/AuthPassword" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AuthSuccess" }

  /v1/auth/webauthn/assert:
    get:
      operationId: WebAuthnMakeAssertion
      description: Complete the credential assertion and sign in to an account.
      tags: [auth]
      security: [webauthn: []]
      requestBody: { $ref: "#/components/requestBodies/AuthPassword" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AuthSuccess" }

  #
  #                                                      888
  #                                                      888
  #                                                      888
  #   8888b.   .d8888b .d8888b .d88b.  888  888 88888b.  888888 .d8888b
  #      "88b d88P"   d88P"   d88""88b 888  888 888 "88b 888    88K
  #  .d888888 888     888     888  888 888  888 888  888 888    "Y8888b.
  #  888  888 Y88b.   Y88b.   Y88..88P Y88b 888 888  888 Y88b.       X88
  #  "Y888888  "Y8888P "Y8888P "Y88P"   "Y88888 888  888  "Y888  88888P'
  #

  /v1/accounts:
    get:
      operationId: AccountsGet
      description: Get the information for the currently authenticated account.
      tags: [accounts]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountsGetSuccess" }

    patch:
      operationId: AccountsUpdate
      description: Update the information for the currently authenticated account.
      tags: [accounts]
      requestBody: { $ref: "#/components/requestBodies/AccountsUpdate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountsUpdateSuccess" }

  /v1/accounts/self/avatar:
    post:
      operationId: AccountsSetAvatar
      description: Upload an avatar for the authenticated account.
      tags: [accounts]
      requestBody: { $ref: "#/components/requestBodies/AccountsSetAvatar" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { description: "OK" }

  /v1/accounts/{account_handle}/avatar:
    get:
      operationId: AccountsGetAvatar
      description: Get an avatar for the specified account.
      tags: [accounts]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandle"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/AccountsGetAvatar" }

  #
  #                           .d888 d8b 888
  #                          d88P"  Y8P 888
  #                          888        888
  # 88888b.  888d888 .d88b.  888888 888 888  .d88b.  .d8888b
  # 888 "88b 888P"  d88""88b 888    888 888 d8P  Y8b 88K
  # 888  888 888    888  888 888    888 888 88888888 "Y8888b.
  # 888 d88P 888    Y88..88P 888    888 888 Y8b.          X88
  # 88888P"  888     "Y88P"  888    888 888  "Y8888   88888P'
  # 888
  # 888
  # 888
  #

  /v1/profiles/{account_handle}:
    get:
      operationId: ProfilesGet
      description: Get a public profile by ID.
      tags: [profiles]
      security: []
      parameters: [$ref: "#/components/parameters/AccountHandle"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ProfilesGetSuccess" }

  #
  # 888    888                                    888
  # 888    888                                    888
  # 888    888                                    888
  # 888888 88888b.  888d888 .d88b.   8888b.   .d88888 .d8888b
  # 888    888 "88b 888P"  d8P  Y8b     "88b d88" 888 88K
  # 888    888  888 888    88888888 .d888888 888  888 "Y8888b.
  # Y88b.  888  888 888    Y8b.     888  888 Y88b 888      X88
  #  "Y888 888  888 888     "Y8888  "Y888888  "Y88888  88888P'
  #

  /v1/threads:
    post:
      operationId: ThreadsCreate
      description: Create a new thread within the specified category.
      tags: [threads]
      requestBody: { $ref: "#/components/requestBodies/ThreadsCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ThreadsCreateSuccess" }

    get:
      operationId: ThreadsList
      description: Get a list of all threads.
      tags: [threads]
      security: []
      parameters:
        - name: author
          description: Show only results creeated by this user.
          required: false
          in: query
          schema: { $ref: "#/components/schemas/AccountHandle" }
        - name: tags
          description: Show only results with these tags
          required: false
          in: query
          schema: { $ref: "#/components/schemas/TagListIDs" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ThreadsList" }

  /v1/threads/{thread_id}:
    get:
      operationId: ThreadsGet
      summary: Get information about a thread and the posts within the thread.
      description: |
        Get information about a thread such as its title, author, when it was
        created as well as a list of the posts within the thread.
      security: []
      tags: [threads]
      parameters: [$ref: "#/components/parameters/ThreadID"]
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/ThreadsGet" }

  #
  #                             888
  #                             888
  #                             888
  #  88888b.   .d88b.  .d8888b  888888 .d8888b
  #  888 "88b d88""88b 88K      888    88K
  #  888  888 888  888 "Y8888b. 888    "Y8888b.
  #  888 d88P Y88..88P      X88 Y88b.       X88
  #  88888P"   "Y88P"   88888P'  "Y888  88888P'
  #  888
  #  888
  #  888
  #

  /v1/threads/{thread_id}/posts:
    post:
      operationId: PostsCreate
      description: Create a new post within a thread.
      tags: [posts]
      parameters: [$ref: "#/components/parameters/ThreadID"]
      requestBody: { $ref: "#/components/requestBodies/PostsCreate" }
      responses:
        default: { $ref: "#/components/responses/InternalServerError" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorised" }
        "200": { $ref: "#/components/responses/PostsCreateSuccess" }

  # /v1/threads/{thread_id}/posts/{post_id}:
  #   get:
  #     operationId: PostsGet
  #     description: Get the data for a single post.
  #     tags: [posts]
  #     responses:
  #       default: { $ref: "#/components/responses/InternalServerError" }
  #       "404": { $ref: "#/components/responses/NotFound" }
  #       "401": { $ref: "#/components/responses/Unauthorised" }

components:
  #
  # 8888888b.     d8888 8888888b.         d8888 888b     d888 8888888888 88888888888 8888888888 8888888b.   .d8888b.
  # 888   Y88b   d88888 888   Y88b       d88888 8888b   d8888 888            888     888        888   Y88b d88P  Y88b
  # 888    888  d88P888 888    888      d88P888 88888b.d88888 888            888     888        888    888 Y88b.
  # 888   d88P d88P 888 888   d88P     d88P 888 888Y88888P888 8888888        888     8888888    888   d88P  "Y888b.
  # 8888888P" d88P  888 8888888P"     d88P  888 888 Y888P 888 888            888     888        8888888P"      "Y88b.
  # 888      d88P   888 888 T88b     d88P   888 888  Y8P  888 888            888     888        888 T88b         "888
  # 888     d8888888888 888  T88b   d8888888888 888   "   888 888            888     888        888  T88b  Y88b  d88P
  # 888    d88P     888 888   T88b d88P     888 888       888 8888888888     888     8888888888 888   T88b  "Y8888P"
  #

  parameters:
    AccountHandle:
      description: Account handle.
      example: southclaws
      name: account_handle
      in: path
      required: true
      schema:
        type: string

    ThreadID:
      description: Thread ID
      name: thread_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"

    OAuthProvider:
      description: The identifier for an OAuth2 provider such as "twitter".
      name: oauth_provider
      in: path
      required: true
      example: twitter
      schema:
        type: string

  #
  # 8888888b.  8888888888 .d88888b.  888     888 8888888888 .d8888b. 88888888888 .d8888b.
  # 888   Y88b 888       d88P" "Y88b 888     888 888       d88P  Y88b    888    d88P  Y88b
  # 888    888 888       888     888 888     888 888       Y88b.         888    Y88b.
  # 888   d88P 8888888   888     888 888     888 8888888    "Y888b.      888     "Y888b.
  # 8888888P"  888       888     888 888     888 888           "Y88b.    888        "Y88b.
  # 888 T88b   888       888 Y8b 888 888     888 888             "888    888          "888
  # 888  T88b  888       Y88b.Y8b88P Y88b. .d88P 888       Y88b  d88P    888    Y88b  d88P
  # 888   T88b 8888888888 "Y888888"   "Y88888P"  8888888888 "Y8888P"     888     "Y8888P"
  #                             Y8b
  #

  requestBodies:
    AuthPassword:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AuthPasswordBody" }
        application/x-www-form-urlencoded:
          schema: { $ref: "#/components/schemas/AuthPasswordBody" }

    AuthOAuthProviderCallback:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AuthOAuthProviderCallbackBody" }

    AccountsUpdate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AccountsUpdateBody" }

    AccountsSetAvatar:
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary

    ThreadsCreate:
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ThreadsCreateBody" }
        application/x-www-form-urlencoded:
          schema: { $ref: "#/components/schemas/ThreadsCreateBody" }

    PostsCreate:
      description: Create a post within a thread.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PostSubmission" }
        application/x-www-form-urlencoded:
          schema: { $ref: "#/components/schemas/PostSubmission" }

  #
  # 8888888b.  8888888888 .d8888b.  8888888b.   .d88888b.  888b    888  .d8888b.  8888888888 .d8888b.
  # 888   Y88b 888       d88P  Y88b 888   Y88b d88P" "Y88b 8888b   888 d88P  Y88b 888       d88P  Y88b
  # 888    888 888       Y88b.      888    888 888     888 88888b  888 Y88b.      888       Y88b.
  # 888   d88P 8888888    "Y888b.   888   d88P 888     888 888Y88b 888  "Y888b.   8888888    "Y888b.
  # 8888888P"  888           "Y88b. 8888888P"  888     888 888 Y88b888     "Y88b. 888           "Y88b.
  # 888 T88b   888             "888 888        888     888 888  Y88888       "888 888             "888
  # 888  T88b  888       Y88b  d88P 888        Y88b. .d88P 888   Y8888 Y88b  d88P 888       Y88b  d88P
  # 888   T88b 8888888888 "Y8888P"  888         "Y88888P"  888    Y888  "Y8888P"  8888888888 "Y8888P"
  #

  responses:
    BadRequest:
      description: Bad request
    NotFound:
      description: Not found
    Unauthorised:
      description: Unauthorized
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"

    AuthSuccess:
      description: OK
      headers:
        "Set-Cookie":
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthSuccess"

    AuthProviderList:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthProviderListBody"

    WebAuthnPublicKeyCreationOptions:
      description: OK
      headers:
        "Set-Cookie":
          schema:
            type: string
      content:
        application/json:
          schema:
            type: object
            x-go-type: any

    AccountsGetSuccess:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"

    AccountsUpdateSuccess:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"

    AccountsGetAvatar:
      description: OK
      content:
        image/png:
          schema:
            type: string
            format: binary

    ProfilesGetSuccess:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PublicProfile"

    ThreadsCreateSuccess:
      description: Thread created.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Thread"

    ThreadsList:
      description: List of all threads.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ThreadReference"

    ThreadsGet:
      description: The information about a thread and its posts.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Thread" }

    PostsCreateSuccess:
      description: Thread post created successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"

  #
  #  .d8888b.   .d8888b.  888    888 8888888888 888b     d888        d8888  .d8888b.
  # d88P  Y88b d88P  Y88b 888    888 888        8888b   d8888       d88888 d88P  Y88b
  # Y88b.      888    888 888    888 888        88888b.d88888      d88P888 Y88b.
  #  "Y888b.   888        8888888888 8888888    888Y88888P888     d88P 888  "Y888b.
  #     "Y88b. 888        888    888 888        888 Y888P 888    d88P  888     "Y88b.
  #       "888 888    888 888    888 888        888  Y8P  888   d88P   888       "888
  # Y88b  d88P Y88b  d88P 888    888 888        888   "   888  d8888888888 Y88b  d88P
  #  "Y8888P"   "Y8888P"  888    888 8888888888 888       888 d88P     888  "Y8888P"
  #

  schemas:
    Identifier:
      type: string
      format: xid
      # NOTE: Does not work currently with oapi-codegen because it generates a
      # new type declaration instead of a type alias so the unmarshalling fails.
      # To work around this, there are special conversion APIs in the oapi pkg.
      x-go-type: string
      # x-go-type-import:
      #   name: xid
      #   path: github.com/rs/xid
      example: "cc5lnd2s1s4652adtu50"
      description: A unique identifier for this resource.

    CommonProperties:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        createdAt:
          type: string
          format: date-time
          description: The time the resource was created.
        updatedAt:
          type: string
          format: date-time
          description: The time the resource was updated.
        deletedAt:
          type: string
          format: date-time
          description: The time the resource was soft-deleted.
        misc:
          type: object
          description: Arbitrary extra data stored with the resource.

    APIError:
      type: object
      description: |
        A description of an error including a human readable message and any
        related metadata from the request and associated services.
      required: [error]
      properties:
        error:
          description: The internal error, not intended for end-user display.
          type: string
        message:
          description: A human-readable message intended for end-user display.
          type: string
        suggested:
          description: A suggested action for the user.
          type: string
        metadata:
          description: Any additional metadata related to the error.
          type: object
          additionalProperties: true

    Metadata:
      type: object
      additionalProperties: true
      description: Arbitrary metadata for the resource.

    # -
    # Auth
    # -

    AuthProviderListBody:
      type: array
      items:
        $ref: "#/components/schemas/AuthProvider"

    AuthProvider:
      required: [provider, name, logo_url, link]
      properties:
        provider:
          description: The slug name of the provider.
          type: string
        name:
          description: The human-readable name of the provider.
          type: string
        logo_url:
          description: The logo to display for the provider.
          type: string
        link:
          description: The hyperlink to render for the user.
          type: string

    AuthPasswordBody:
      type: object
      required: [identifier, token]
      properties:
        identifier:
          example: "southclaws@storyden.org"
          type: string
        token:
          example: "password"
          type: string

    AuthSuccess:
      type: object
      required: [id]
      properties:
        id:
          type: string

    AuthOAuthProviderCallbackBody:
      type: object
      required:
        - state
        - code
      properties:
        state:
          type: string
        code:
          type: string

    # -
    # Account
    # -

    Account:
      type: object
      required: [handle, id]
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - properties:
            handle:
              $ref: "#/components/schemas/AccountHandle"
            name:
              $ref: "#/components/schemas/AccountName"
            bio:
              type: string
            interests:
              $ref: "#/components/schemas/TagList"

    AccountsUpdateBody:
      type: object
      properties:
        handle:
          $ref: "#/components/schemas/AccountHandle"
        name:
          $ref: "#/components/schemas/AccountName"
        bio:
          type: string
        interests:
          $ref: "#/components/schemas/TagList"

    # -
    # PublicProfile
    # -

    PublicProfile:
      type: object
      required: [id, handle, name, createdAt, interests]
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - properties:
            handle:
              $ref: "#/components/schemas/AccountHandle"
            name:
              $ref: "#/components/schemas/AccountName"
            bio:
              type: string
            image:
              type: string
            createdAt:
              type: string
            interests:
              $ref: "#/components/schemas/TagList"

    # -
    # Threads
    # -

    ThreadsCreateBody:
      type: object
      required:
        - title
        - body
        - tags
        - category
      properties:
        title: { $ref: "#/components/schemas/ThreadTitle" }
        body: { $ref: "#/components/schemas/PostBodyMarkdown" }
        tags: { $ref: "#/components/schemas/TagList" }
        meta: { $ref: "#/components/schemas/Metadata" }
        category:
          $ref: "#/components/schemas/Identifier"

    ThreadReference:
      description: |
        A thread reference includes most of the information about a thread but
        does not include the posts within the thread. Useful for rendering large
        lists of threads or other situations when you don't need the full data.
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - type: object
          required:
            - title
            - slug
            - short
            - pinned
            - author
            - tags
            - post_count
            - category
            - reacts
            - meta
          properties:
            title:
              type: string
              example: Hello world!
              description: The title of the thread.
            slug:
              type: string
              readOnly: true
              description: |
                A URL friendly slug which is prepended with the post ID
                for uniqueness and sortability.
            short:
              type: string
              readOnly: true
              description: |
                A short version of the thread's body text for use in previews.
            pinned:
              type: boolean
              description: Whether the thread is pinned in this category.
            author: { $ref: "#/components/schemas/ProfileReference" }
            tags:
              type: array
              items:
                type: string
              description: A list of tags associated with the thread.
            post_count:
              type: integer
              readOnly: true
              description: The number of posts under this thread.
            category: { $ref: "#/components/schemas/Category" }
            reacts:
              type: array
              items: { $ref: "#/components/schemas/React" }
              description: A list of reactions this post has had from people.
            meta: { $ref: "#/components/schemas/Metadata" }

    Thread:
      allOf:
        - $ref: "#/components/schemas/ThreadReference"
        - type: object
          required:
            [title, slug, short, pinned, author, tags, posts, category, reacts]
          properties:
            posts:
              type: array
              items: { $ref: "#/components/schemas/Post" }

    Category:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        name:
          type: string
        description:
          type: string
        colour:
          type: string
        sort:
          type: integer
        admin:
          type: boolean
        postCount:
          type: integer

    # -
    # Posts
    # -

    PostSubmission:
      $ref: "#/components/schemas/Post"

    Post:
      type: object
      description: |
        A new post within a thread of posts. A post may reply to another post in
        the thread by specifying the `reply_to` property. The identifier in the
        `reply_to` value must be post within the same thread.
      allOf:
        - $ref: "#/components/schemas/CommonProperties"
        - type: object
          required: [body]
          properties:
            body: { $ref: "#/components/schemas/PostBodyMarkdown" }
            meta: { $ref: "#/components/schemas/Metadata" }
            reply_to:
              $ref: "#/components/schemas/Identifier"

    React:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        emoji:
          type: string

    # -
    # Commonly used small/simple types.
    # -

    AccountName:
      type: string
      description: The account owners display name.
      example: Barnaby Keene

    AccountHandle:
      type: string
      x-go-type: string
      description: The unique @ handle of an account.
      example: Southclaws

    ProfileReference:
      type: object
      description: A minimal reference to an account.
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        name: { $ref: "#/components/schemas/AccountName" }

    ThreadTitle:
      type: string
      description: The title of a thread.
      example: Hello world!

    Tag:
      type: object
      description: A tag which can link profiles or threads via interests.
      required: [id, name]
      properties:
        id: { $ref: "#/components/schemas/Identifier" }
        name: { $ref: "#/components/schemas/TagName" }
        colour: { type: string }

    TagName:
      type: string
      description: The name of a tag.

    TagList:
      type: array
      description: A list of tags.
      items: { $ref: "#/components/schemas/Tag" }

    TagListIDs:
      type: array
      description: A list of tags.
      items: { $ref: "#/components/schemas/Identifier" }

    PostBodyMarkdown:
      type: string
      description: The body text of a post within a thread.
      example: |
        # My post

        This is a _post_ within a _thread_ formatted in *markdown*.

  securitySchemes:
    browser:
      type: apiKey
      in: cookie
      name: storyden-session
    webauthn:
      type: apiKey
      in: cookie
      name: "storyden-webauthn-session"
#
#     ..:.                                                        .***=
#  .+#%%%%%#+   ...                                               :%%%+
#  #%%%+==+#.  =%%%.                                              :%%%+
# :%%%%:      -*%%%=-.   :==+==:    ---: :== ----     .---- .-===-:%%%+   :==+=-:   .---..-==-.
#  +%%%%%#*=. #%%%%%%-.+%%%%#%%%%+ .%%%##%%% -%%%#.  .#%%#=*%%%%%%%%%%+ =%%#+=+#%#- -%%%#%#%%%%*
#   .-+#%%%%%- +%%%:..#%%%=   +%%%*.%%%#-. .  :#%%#..#%%#:#%%%=  .+%%%+-%%%*===+%%%:-%%%+  .#%%%.
#        +%%%# =%%%. .%%%#    .%%%%.%%%+       .#%%##%%#:.%%%#    :%%%+=%%%*+++++++:-%%%:   +%%%.
# .##*===#%%%= =%%%.  +%%%#=-=#%%%-.%%%+        .#%%%%*.  +%%%#=-=#%%%+.#%%+:..=++= -%%%:   +%%%.
# -*%%%%%%%*-  =%%%.   :*%%%%%%#+: .%%%+         -%%%#.    -*%%%%%*%%%+ .+#%%%%%%+. -%%%:   +%%%.
#    .:::.                .:::.                 -%%%*.        .:.          .:::.
#                                              -%%%*
#                                             -***+
#
