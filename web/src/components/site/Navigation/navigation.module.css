/*
  Navgrid sets up the grid for content, top, left and right navigation elements.

  It's done in pure CSS because it's just so much easier to read and write.

  We're using a grid layout here in two places in order to make the sticky parts
  easier to deal with. The first place it's used is the actual in-flow layout,
  which only defines the scrollable content. This content is placed in to the
  ".main" grid area and the other areas remain completely empty. Then the second
  usage is for the sticky elements, which occupy the areas specified by classes
  ".topbar", ".leftbar" and ".rightbar". This results in two instances of this
  grid being overlayed on top of each other, making layout adjustments easier.
*/

.navgrid {
  --grid-padding-outer: var(--spacing-5);
  --grid-padding-inner: var(--spacing-3);
  --grid-padding-inner-right: 0px;
  --navgrid-right-bar-display: none;
}

@media screen and (min-width: 1280px) {
  .navgrid {
    --grid-padding-inner-right: var(--spacing-3);
    --navgrid-right-bar-display: block;
  }
}

.navgrid {
  display: grid;

  grid-template-rows:
    var(--grid-padding-outer)
    4rem
    var(--grid-padding-inner)
    1fr
    var(--grid-padding-outer);

  grid-template-columns:
    minmax(var(--grid-padding-outer), 1fr)
    18rem
    var(--grid-padding-inner)
    minmax(0, var(--sizes-breakpoint-lg))
    var(--grid-padding-inner-right)
    18rem
    minmax(var(--grid-padding-outer), 1fr);

  grid-template-areas:
    " padtl    padtop    padtop   padtop   padtop   padtop    padtr    "
    " padleft  topbar    topbar   topbar   topbar   topbar    padright "
    " padleft  padmid    padmid   padmid   padmid   padmid    padright "
    " padleft  leftbar   .        main     main     main      padright "
    " padbl    padbot    padbot   padbot   padbot   padbot    padbr    ";
}

@media screen and (min-width: 1280px) {
  .navgrid {
    grid-template-areas:
      " padtl    padtop    padtop   padtop   padtop   padtop    padtr    "
      " padleft  topbar    topbar   topbar   topbar   topbar    padright "
      " padleft  padmid    padmid   padmid   padmid   padmid    padright "
      " padleft  leftbar   .        main     .        rightbar  padright "
      " padbl    padbot    padbot   padbot   padbot   padbot    padbr    ";
  }
}

.topbar {
  grid-area: topbar;
  pointer-events: all;

  display: grid;
  grid-template-columns: subgrid;
}

.topbar-left {
  grid-area: 0/1;
  grid-row: 1/2;
}
.topbar-middle {
  grid-area: 2/3;
  grid-row: 1/2;
}
.topbar-right {
  grid-area: 4/5;
  grid-row: 1/2;
}

.leftbar {
  grid-area: leftbar;
  pointer-events: all;
  overflow: hidden;

  /* NOTE: This maintains the shadow bleed despite the overflow hidden prop. */
  margin: -15px;
  padding: 15px;

  /* Animate show/hide */
  animation: fadeIn 0.2s ease-in-out;
}

.desktop-nav-container[data-leftbar-hidden="true"] .leftbar {
  animation: fadeOut 0.2s ease-in-out;
  opacity: 0;
  pointer-events: none;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateX(-10px);
  }
  to {
    opacity: 1;
    transform: translateX(0px);
  }
}
@keyframes fadeOut {
  from {
    opacity: 1;
    transform: translateX(0px);
  }
  to {
    opacity: 0;
    transform: translateX(-10px);
  }
}

.rightbar {
  display: var(--navgrid-right-bar-display);
  grid-area: rightbar;
  pointer-events: all;

  overflow: hidden;

  /* NOTE: This maintains the shadow bleed despite the overflow hidden prop. */
  margin: -15px;
  padding: 15px;
}

.main {
  grid-area: main;
}

@media screen and (max-width: 1280px) {
  .desktop-nav-container[data-leftbar-hidden="true"] .main {
    grid-column: leftbar / main;
  }
}
