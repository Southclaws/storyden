/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { fetcher } from "../client";

import type {
  AccessRefreshTokenRedirectResponseResponse,
  AuthSuccessOKResponse,
  BadRequestResponse,
  InternalServerErrorResponse,
  SAMLACSGetParams,
  UnauthorisedResponse,
} from "./schemas";

/**
 * Initiates a SAML authentication flow and, upon returning with a successful login with token, performs the necessary steps to either  create an account or sign the user in. Upon success, returns a cookie.

 */
export const sAMLLogin = () => {
  return fetcher<AuthSuccessOKResponse>({ url: `/saml/login`, method: "GET" });
};

export const getSAMLLoginKey = () => [`/saml/login`] as const;

export type SAMLLoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof sAMLLogin>>
>;
export type SAMLLoginQueryError =
  | void
  | UnauthorisedResponse
  | InternalServerErrorResponse;

export const useSAMLLogin = <
  TError = void | UnauthorisedResponse | InternalServerErrorResponse,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof sAMLLogin>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getSAMLLoginKey() : null));
  const swrFn = () => sAMLLogin();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * The metadata XML can be downloaded or used for the SAML 2.0 Metadata URL discovery mechanism. This URL is the SAML 2.0 EntityID of the Service Provider implemented by this server.

 */
export const sAMLMetadataRead = () => {
  return fetcher<string>({ url: `/saml/metadata`, method: "GET" });
};

export const getSAMLMetadataReadKey = () => [`/saml/metadata`] as const;

export type SAMLMetadataReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof sAMLMetadataRead>>
>;
export type SAMLMetadataReadQueryError = InternalServerErrorResponse;

export const useSAMLMetadataRead = <
  TError = InternalServerErrorResponse,
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof sAMLMetadataRead>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getSAMLMetadataReadKey() : null));
  const swrFn = () => sAMLMetadataRead();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Implements the SAML 2.0 Assertion Consumer Service (ACS) endpoint
supporting the POST and Artifact bindings.

 */
export const sAMLACSGet = (params?: SAMLACSGetParams) => {
  return fetcher<InternalServerErrorResponse>({
    url: `/saml/acs`,
    method: "POST",
    params,
  });
};

export const getSAMLACSGetMutationFetcher = (params?: SAMLACSGetParams) => {
  return (
    _: string,
    __: { arg: Arguments },
  ): Promise<InternalServerErrorResponse> => {
    return sAMLACSGet(params);
  };
};
export const getSAMLACSGetMutationKey = () => `/saml/acs` as const;

export type SAMLACSGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof sAMLACSGet>>
>;
export type SAMLACSGetMutationError =
  | AccessRefreshTokenRedirectResponseResponse
  | BadRequestResponse
  | InternalServerErrorResponse;

export const useSAMLACSGet = <
  TError =
    | AccessRefreshTokenRedirectResponseResponse
    | BadRequestResponse
    | InternalServerErrorResponse,
>(
  params?: SAMLACSGetParams,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof sAMLACSGet>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof sAMLACSGet>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getSAMLACSGetMutationKey();
  const swrFn = getSAMLACSGetMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
