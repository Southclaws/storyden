/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { fetcher } from "../client";

import type {
  InternalServerErrorResponse,
  ItemCreateBody,
  ItemCreateOKResponse,
  ItemGetOKResponse,
  ItemListOKResponse,
  ItemListParams,
  ItemUpdateBody,
  ItemUpdateOKResponse,
  NotFoundResponse,
  UnauthorisedResponse,
} from "./schemas";

/**
 * Create a item to represent a piece of structured data such as an item in
a video game, an article of clothing, a product in a store, etc.

 */
export const itemCreate = (itemCreateBody: ItemCreateBody) => {
  return fetcher<ItemCreateOKResponse>({
    url: `/v1/items`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: itemCreateBody,
  });
};

export const getItemCreateMutationFetcher = () => {
  return (
    _: string,
    { arg }: { arg: Arguments },
  ): Promise<ItemCreateOKResponse> => {
    return itemCreate(arg as ItemCreateBody);
  };
};
export const getItemCreateMutationKey = () => `/v1/items` as const;

export type ItemCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof itemCreate>>
>;
export type ItemCreateMutationError =
  | UnauthorisedResponse
  | InternalServerErrorResponse;

export const useItemCreate = <
  TError = UnauthorisedResponse | InternalServerErrorResponse,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof itemCreate>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof itemCreate>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getItemCreateMutationKey();
  const swrFn = getItemCreateMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * List all items using the filtering options.
 */
export const itemList = (params?: ItemListParams) => {
  return fetcher<ItemListOKResponse>({
    url: `/v1/items`,
    method: "GET",
    params,
  });
};

export const getItemListKey = (params?: ItemListParams) =>
  [`/v1/items`, ...(params ? [params] : [])] as const;

export type ItemListQueryResult = NonNullable<
  Awaited<ReturnType<typeof itemList>>
>;
export type ItemListQueryError = NotFoundResponse | InternalServerErrorResponse;

export const useItemList = <
  TError = NotFoundResponse | InternalServerErrorResponse,
>(
  params?: ItemListParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof itemList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getItemListKey(params) : null));
  const swrFn = () => itemList(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Get a item by its URL slug.
 */
export const itemGet = (itemSlug: string) => {
  return fetcher<ItemGetOKResponse>({
    url: `/v1/items/${itemSlug}`,
    method: "GET",
  });
};

export const getItemGetKey = (itemSlug: string) =>
  [`/v1/items/${itemSlug}`] as const;

export type ItemGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof itemGet>>
>;
export type ItemGetQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useItemGet = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  itemSlug: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof itemGet>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!itemSlug;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getItemGetKey(itemSlug) : null));
  const swrFn = () => itemGet(itemSlug);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Update a item.
 */
export const itemUpdate = (
  itemSlug: string,
  itemUpdateBody: ItemUpdateBody,
) => {
  return fetcher<ItemUpdateOKResponse>({
    url: `/v1/items/${itemSlug}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: itemUpdateBody,
  });
};

export const getItemUpdateMutationFetcher = (itemSlug: string) => {
  return (
    _: string,
    { arg }: { arg: Arguments },
  ): Promise<ItemUpdateOKResponse> => {
    return itemUpdate(itemSlug, arg as ItemUpdateBody);
  };
};
export const getItemUpdateMutationKey = (itemSlug: string) =>
  `/v1/items/${itemSlug}` as const;

export type ItemUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof itemUpdate>>
>;
export type ItemUpdateMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useItemUpdate = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  itemSlug: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof itemUpdate>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof itemUpdate>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getItemUpdateMutationKey(itemSlug);
  const swrFn = getItemUpdateMutationFetcher(itemSlug);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Delete an item.
 */
export const itemDelete = (itemSlug: string) => {
  return fetcher<void>({ url: `/v1/items/${itemSlug}`, method: "DELETE" });
};

export const getItemDeleteMutationFetcher = (itemSlug: string) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<void> => {
    return itemDelete(itemSlug);
  };
};
export const getItemDeleteMutationKey = (itemSlug: string) =>
  `/v1/items/${itemSlug}` as const;

export type ItemDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof itemDelete>>
>;
export type ItemDeleteMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useItemDelete = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  itemSlug: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof itemDelete>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof itemDelete>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getItemDeleteMutationKey(itemSlug);
  const swrFn = getItemDeleteMutationFetcher(itemSlug);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Add an asset to an item.
 */
export const itemAddAsset = (itemSlug: string, id: string) => {
  return fetcher<ItemUpdateOKResponse>({
    url: `/v1/items/${itemSlug}/assets/${id}`,
    method: "PUT",
  });
};

export const getItemAddAssetMutationFetcher = (
  itemSlug: string,
  id: string,
) => {
  return (
    _: string,
    { arg }: { arg: Arguments },
  ): Promise<ItemUpdateOKResponse> => {
    return itemAddAsset(itemSlug, id);
  };
};
export const getItemAddAssetMutationKey = (itemSlug: string, id: string) =>
  `/v1/items/${itemSlug}/assets/${id}` as const;

export type ItemAddAssetMutationResult = NonNullable<
  Awaited<ReturnType<typeof itemAddAsset>>
>;
export type ItemAddAssetMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useItemAddAsset = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  itemSlug: string,
  id: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof itemAddAsset>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof itemAddAsset>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getItemAddAssetMutationKey(itemSlug, id);
  const swrFn = getItemAddAssetMutationFetcher(itemSlug, id);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Remove an asset from an item.
 */
export const itemRemoveAsset = (itemSlug: string, id: string) => {
  return fetcher<ItemUpdateOKResponse>({
    url: `/v1/items/${itemSlug}/assets/${id}`,
    method: "DELETE",
  });
};

export const getItemRemoveAssetMutationFetcher = (
  itemSlug: string,
  id: string,
) => {
  return (
    _: string,
    { arg }: { arg: Arguments },
  ): Promise<ItemUpdateOKResponse> => {
    return itemRemoveAsset(itemSlug, id);
  };
};
export const getItemRemoveAssetMutationKey = (itemSlug: string, id: string) =>
  `/v1/items/${itemSlug}/assets/${id}` as const;

export type ItemRemoveAssetMutationResult = NonNullable<
  Awaited<ReturnType<typeof itemRemoveAsset>>
>;
export type ItemRemoveAssetMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useItemRemoveAsset = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  itemSlug: string,
  id: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof itemRemoveAsset>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof itemRemoveAsset>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getItemRemoveAssetMutationKey(itemSlug, id);
  const swrFn = getItemRemoveAssetMutationFetcher(itemSlug, id);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
