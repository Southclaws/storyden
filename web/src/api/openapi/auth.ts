/**
 * Generated by orval v6.9.6 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import useSwr from "swr";
import type { SWRConfiguration, Key } from "swr";
import type {
  AuthProviderListResponse,
  BadRequestResponse,
  InternalServerErrorResponse,
  AuthSuccessResponse,
  AuthPasswordBody,
  UnauthorisedResponse,
  NotFoundResponse,
  AuthOAuthProviderCallbackBody,
  WebAuthnPublicKeyCreationOptionsResponse,
  WebAuthnMakeCredentialBody,
  WebAuthnGetAssertionBody,
  WebAuthnMakeAssertionBody,
} from "./schemas";
import { fetcher } from "../client";

/**
 * Retrieve a list of authentication providers. Storyden supports a few 
ways to authenticate, from simple passwords to OAuth and WebAuthn. This
endpoint tells a client which auth capabilities are enabled.

 */
export const authProviderList = () => {
  return fetcher<AuthProviderListResponse>({ url: `/v1/auth`, method: "get" });
};

export const getAuthProviderListKey = () => [`/v1/auth`];

export type AuthProviderListQueryResult = NonNullable<
  Awaited<ReturnType<typeof authProviderList>>
>;
export type AuthProviderListQueryError =
  | BadRequestResponse
  | InternalServerErrorResponse;

export const useAuthProviderList = <
  TError = BadRequestResponse | InternalServerErrorResponse
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof authProviderList>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getAuthProviderListKey() : null));
  const swrFn = () => authProviderList();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Register a new account with a username and password.
 */
export const authPasswordSignup = (authPasswordBody: AuthPasswordBody) => {
  return fetcher<AuthSuccessResponse>({
    url: `/v1/auth/password/signup`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: authPasswordBody,
  });
};

/**
 * Sign in to an existing account with a username and password.
 */
export const authPasswordSignin = (authPasswordBody: AuthPasswordBody) => {
  return fetcher<AuthSuccessResponse>({
    url: `/v1/auth/password/signin`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: authPasswordBody,
  });
};

/**
 * Sign in to an existing account with a username and password.
 */
export const authOAuthProviderCallback = (
  oauthProvider: string,
  authOAuthProviderCallbackBody: AuthOAuthProviderCallbackBody
) => {
  return fetcher<AuthSuccessResponse>({
    url: `/v1/auth/oauth/${oauthProvider}/callback`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: authOAuthProviderCallbackBody,
  });
};

/**
 * Start the WebAuthn registration process by requesting a credential.

 */
export const webAuthnRequestCredential = (accountHandle: string) => {
  return fetcher<WebAuthnPublicKeyCreationOptionsResponse>({
    url: `/v1/auth/webauthn/make/${accountHandle}`,
    method: "get",
  });
};

export const getWebAuthnRequestCredentialKey = (accountHandle: string) => [
  `/v1/auth/webauthn/make/${accountHandle}`,
];

export type WebAuthnRequestCredentialQueryResult = NonNullable<
  Awaited<ReturnType<typeof webAuthnRequestCredential>>
>;
export type WebAuthnRequestCredentialQueryError =
  | BadRequestResponse
  | InternalServerErrorResponse;

export const useWebAuthnRequestCredential = <
  TError = BadRequestResponse | InternalServerErrorResponse
>(
  accountHandle: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof webAuthnRequestCredential>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!accountHandle;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getWebAuthnRequestCredentialKey(accountHandle) : null));
  const swrFn = () => webAuthnRequestCredential(accountHandle);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Complete WebAuthn registration by creating a new credential.
 */
export const webAuthnMakeCredential = (
  webAuthnMakeCredentialBody: WebAuthnMakeCredentialBody
) => {
  return fetcher<AuthSuccessResponse>({
    url: `/v1/auth/webauthn/make`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: webAuthnMakeCredentialBody,
  });
};

/**
 * Start the WebAuthn assertion for an existing account.
 */
export const webAuthnGetAssertion = (
  accountHandle: string,
  webAuthnGetAssertionBody: WebAuthnGetAssertionBody
) => {
  return fetcher<AuthSuccessResponse>({
    url: `/v1/auth/webauthn/assert/${accountHandle}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: webAuthnGetAssertionBody,
  });
};

/**
 * Complete the credential assertion and sign in to an account.
 */
export const webAuthnMakeAssertion = (
  webAuthnMakeAssertionBody: WebAuthnMakeAssertionBody
) => {
  return fetcher<AuthSuccessResponse>({
    url: `/v1/auth/webauthn/assert`,
    method: "get",
    headers: { "Content-Type": "application/json" },
  });
};

export const getWebAuthnMakeAssertionKey = (
  webAuthnMakeAssertionBody: WebAuthnMakeAssertionBody
) => [`/v1/auth/webauthn/assert`, webAuthnMakeAssertionBody];

export type WebAuthnMakeAssertionQueryResult = NonNullable<
  Awaited<ReturnType<typeof webAuthnMakeAssertion>>
>;
export type WebAuthnMakeAssertionQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useWebAuthnMakeAssertion = <
  TError = UnauthorisedResponse | NotFoundResponse | InternalServerErrorResponse
>(
  webAuthnMakeAssertionBody: WebAuthnMakeAssertionBody,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof webAuthnMakeAssertion>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getWebAuthnMakeAssertionKey(webAuthnMakeAssertionBody)
        : null);
  const swrFn = () => webAuthnMakeAssertion(webAuthnMakeAssertionBody);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
