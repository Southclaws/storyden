/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

import { fetcher } from "../client";

import type {
  DatagraphSearchOKResponse,
  DatagraphSearchParams,
  InternalServerErrorResponse,
  NotFoundResponse,
  UnauthorisedResponse,
} from "./schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Query and search content.
 */
export const datagraphSearch = (params?: DatagraphSearchParams) => {
  return fetcher<DatagraphSearchOKResponse>({
    url: `/v1/datagraph`,
    method: "get",
    params,
  });
};

export const getDatagraphSearchKey = (params?: DatagraphSearchParams) =>
  [`/v1/datagraph`, ...(params ? [params] : [])] as const;

export type DatagraphSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof datagraphSearch>>
>;
export type DatagraphSearchQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useDatagraphSearch = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  params?: DatagraphSearchParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof datagraphSearch>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getDatagraphSearchKey(params) : null));
  const swrFn = () => datagraphSearch(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
