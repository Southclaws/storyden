/**
 * Generated by orval v6.9.6 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import useSwr from "swr";
import type { SWRConfiguration, Key } from "swr";
import type {
  ThreadsCreateOKResponse,
  UnauthorisedResponse,
  NotFoundResponse,
  InternalServerErrorResponse,
  ThreadsCreateBody,
  ThreadsListOKResponse,
  ThreadsListParams,
  ThreadsGetResponse,
} from "./schemas";
import { fetcher } from "../client";

/**
 * Create a new thread within the specified category.
 */
export const threadsCreate = (threadsCreateBody: ThreadsCreateBody) => {
  return fetcher<ThreadsCreateOKResponse>({
    url: `/v1/threads`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: threadsCreateBody,
  });
};

/**
 * Get a list of all threads.
 */
export const threadsList = (params?: ThreadsListParams) => {
  return fetcher<ThreadsListOKResponse>({
    url: `/v1/threads`,
    method: "get",
    params,
  });
};

export const getThreadsListKey = (params?: ThreadsListParams) => [
  `/v1/threads`,
  ...(params ? [params] : []),
];

export type ThreadsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof threadsList>>
>;
export type ThreadsListQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useThreadsList = <
  TError = UnauthorisedResponse | NotFoundResponse | InternalServerErrorResponse
>(
  params?: ThreadsListParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof threadsList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getThreadsListKey(params) : null));
  const swrFn = () => threadsList(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get information about a thread such as its title, author, when it was
created as well as a list of the posts within the thread.

 * @summary Get information about a thread and the posts within the thread.
 */
export const threadsGet = (threadMark: string) => {
  return fetcher<ThreadsGetResponse>({
    url: `/v1/threads/${threadMark}`,
    method: "get",
  });
};

export const getThreadsGetKey = (threadMark: string) => [
  `/v1/threads/${threadMark}`,
];

export type ThreadsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof threadsGet>>
>;
export type ThreadsGetQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useThreadsGet = <
  TError = UnauthorisedResponse | NotFoundResponse | InternalServerErrorResponse
>(
  threadMark: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof threadsGet>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!threadMark;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getThreadsGetKey(threadMark) : null));
  const swrFn = () => threadsGet(threadMark);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
