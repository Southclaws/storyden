/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import useSwr from "swr";
import type { SWRConfiguration, Key } from "swr";
import type {
  ThreadCreateOKResponse,
  UnauthorisedResponse,
  NotFoundResponse,
  InternalServerErrorResponse,
  ThreadCreateBody,
  ThreadListOKResponse,
  ThreadListParams,
  ThreadGetResponse,
  ThreadUpdateOKResponse,
  ThreadUpdateBody,
} from "./schemas";
import { fetcher } from "../client";

/**
 * Create a new thread within the specified category.
 */
export const threadCreate = (threadCreateBody: ThreadCreateBody) => {
  return fetcher<ThreadCreateOKResponse>({
    url: `/v1/threads`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: threadCreateBody,
  });
};

/**
 * Get a list of all threads.
 */
export const threadList = (params?: ThreadListParams) => {
  return fetcher<ThreadListOKResponse>({
    url: `/v1/threads`,
    method: "get",
    params,
  });
};

export const getThreadListKey = (params?: ThreadListParams) =>
  [`/v1/threads`, ...(params ? [params] : [])] as const;

export type ThreadListQueryResult = NonNullable<
  Awaited<ReturnType<typeof threadList>>
>;
export type ThreadListQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useThreadList = <
  TError = UnauthorisedResponse | NotFoundResponse | InternalServerErrorResponse
>(
  params?: ThreadListParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof threadList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getThreadListKey(params) : null));
  const swrFn = () => threadList(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get information about a thread such as its title, author, when it was
created as well as a list of the posts within the thread.

 * @summary Get information about a thread and the posts within the thread.
 */
export const threadGet = (threadMark: string) => {
  return fetcher<ThreadGetResponse>({
    url: `/v1/threads/${threadMark}`,
    method: "get",
  });
};

export const getThreadGetKey = (threadMark: string) =>
  [`/v1/threads/${threadMark}`] as const;

export type ThreadGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof threadGet>>
>;
export type ThreadGetQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useThreadGet = <
  TError = UnauthorisedResponse | NotFoundResponse | InternalServerErrorResponse
>(
  threadMark: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof threadGet>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!threadMark;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getThreadGetKey(threadMark) : null));
  const swrFn = () => threadGet(threadMark);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Publish changes to a thread.
 */
export const threadUpdate = (
  threadMark: string,
  threadUpdateBody: ThreadUpdateBody
) => {
  return fetcher<ThreadUpdateOKResponse>({
    url: `/v1/threads/${threadMark}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: threadUpdateBody,
  });
};

/**
 * Archive a thread using soft-delete.
 */
export const threadDelete = (threadMark: string) => {
  return fetcher<void>({ url: `/v1/threads/${threadMark}`, method: "delete" });
};
