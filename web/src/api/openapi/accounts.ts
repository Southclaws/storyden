/**
 * Generated by orval v6.9.6 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import useSwr from "swr";
import type { SWRConfiguration, Key } from "swr";
import type {
  AccountGetOKResponse,
  UnauthorisedResponse,
  NotFoundResponse,
  InternalServerErrorResponse,
  AccountUpdateOKResponse,
  AccountUpdateBody,
  AccountSetAvatarBody,
  AccountGetAvatarResponse,
} from "./schemas";
import { fetcher } from "../client";

/**
 * Get the information for the currently authenticated account.
 */
export const accountGet = () => {
  return fetcher<AccountGetOKResponse>({ url: `/v1/accounts`, method: "get" });
};

export const getAccountGetKey = () => [`/v1/accounts`];

export type AccountGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountGet>>
>;
export type AccountGetQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAccountGet = <
  TError = UnauthorisedResponse | NotFoundResponse | InternalServerErrorResponse
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof accountGet>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getAccountGetKey() : null));
  const swrFn = () => accountGet();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Update the information for the currently authenticated account.
 */
export const accountUpdate = (accountUpdateBody: AccountUpdateBody) => {
  return fetcher<AccountUpdateOKResponse>({
    url: `/v1/accounts`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: accountUpdateBody,
  });
};

/**
 * Upload an avatar for the authenticated account.
 */
export const accountSetAvatar = (
  accountSetAvatarBody: AccountSetAvatarBody
) => {
  return fetcher<void>({
    url: `/v1/accounts/self/avatar`,
    method: "post",
    headers: { "Content-Type": "application/octet-stream" },
    data: accountSetAvatarBody,
  });
};

/**
 * Get an avatar for the specified account.
 */
export const accountGetAvatar = (accountHandle: string) => {
  return fetcher<AccountGetAvatarResponse>({
    url: `/v1/accounts/${accountHandle}/avatar`,
    method: "get",
  });
};

export const getAccountGetAvatarKey = (accountHandle: string) => [
  `/v1/accounts/${accountHandle}/avatar`,
];

export type AccountGetAvatarQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountGetAvatar>>
>;
export type AccountGetAvatarQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAccountGetAvatar = <
  TError = UnauthorisedResponse | NotFoundResponse | InternalServerErrorResponse
>(
  accountHandle: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof accountGetAvatar>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!accountHandle;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAccountGetAvatarKey(accountHandle) : null));
  const swrFn = () => accountGetAvatar(accountHandle);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
