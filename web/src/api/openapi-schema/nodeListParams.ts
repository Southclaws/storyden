/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
The Storyden API does not adhere to semantic versioning but instead applies a rolling strategy with deprecations and minimal breaking changes. This has been done mainly for a simpler development process and it may be changed to a more fixed versioning strategy in the future. Ultimately, the primary way Storyden tracks versions is dates, there are no set release tags currently.

 * OpenAPI spec version: v1.25.8-canary
 */
import type { AccountHandle } from "./accountHandle";
import type { Identifier } from "./identifier";
import type { NodeListFormatParamParameter } from "./nodeListFormatParamParameter";
import type { PaginationQueryParameter } from "./paginationQueryParameter";
import type { SearchQueryParameter } from "./searchQueryParameter";
import type { TreeDepthParamParameter } from "./treeDepthParamParameter";
import type { VisibilityParamParameter } from "./visibilityParamParameter";

export type NodeListParams = {
  /**
   * Search query string.
   */
  q?: SearchQueryParameter;
  /**
   * Pagination query parameters.
   */
  page?: PaginationQueryParameter;
  /**
   * List this node and all child nodes.
   */
  node_id?: Identifier;
  /**
   * Show only results owned by this account.
   */
  author?: AccountHandle;
  /**
 * Filter content with specific visibility values. Note that by default,
only published items are returned. When 'draft' is specified, only
drafts owned by the requesting account are included. When 'review' is
specified, the request will fail if the requesting account does not have
the necessary permission to view in-review items.

 */
  visibility?: VisibilityParamParameter;
  /**
 * When set to a positive value, the nodes in the response will include all
child nodes up to the specified depth. When set to zero, then if the
request includes a node ID only that node will be returned, otherwise
only top-level (root) nodes will be returned.

 */
  depth?: TreeDepthParamParameter;
  /**
 * List format, either a tree where each item contains a children array or
flat where children items contain an ID that references their parent.

 */
  format?: NodeListFormatParamParameter;
};
