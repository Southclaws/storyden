/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
The Storyden API does not adhere to semantic versioning but instead applies a rolling strategy with deprecations and minimal breaking changes. This has been done mainly for a simpler development process and it may be changed to a more fixed versioning strategy in the future. Ultimately, the primary way Storyden tracks versions is dates, there are no set release tags currently.

 * OpenAPI spec version: rolling
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { fetcher } from "../client";
import type {
  AccountAuthProviderListOKResponse,
  AccountGetAvatarResponse,
  AccountGetOKResponse,
  AccountSetAvatarBody,
  AccountUpdateBody,
  AccountUpdateOKResponse,
  BadRequestResponse,
  InternalServerErrorResponse,
  NotFoundResponse,
  UnauthorisedResponse,
} from "../openapi-schema";

/**
 * Suspend an account - soft delete. This disables the ability for the
account owner to log in and use the platform. It keeps the account on
record for linkage to content so UI doesn't break. It does not change
anything else about the account such as the avatar, name, etc.

 */
export const adminAccountBanCreate = (accountHandle: string) => {
  return fetcher<AccountGetOKResponse>({
    url: `/admin/bans/${accountHandle}`,
    method: "POST",
  });
};

export const getAdminAccountBanCreateMutationFetcher = (
  accountHandle: string,
) => {
  return (_: string, __: { arg: Arguments }): Promise<AccountGetOKResponse> => {
    return adminAccountBanCreate(accountHandle);
  };
};
export const getAdminAccountBanCreateMutationKey = (accountHandle: string) =>
  `/admin/bans/${accountHandle}` as const;

export type AdminAccountBanCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccountBanCreate>>
>;
export type AdminAccountBanCreateMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAdminAccountBanCreate = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  accountHandle: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof adminAccountBanCreate>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof adminAccountBanCreate>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getAdminAccountBanCreateMutationKey(accountHandle);
  const swrFn = getAdminAccountBanCreateMutationFetcher(accountHandle);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Given the account is suspended, remove the suspended state.
 */
export const adminAccountBanRemove = (accountHandle: string) => {
  return fetcher<AccountGetOKResponse>({
    url: `/admin/bans/${accountHandle}`,
    method: "DELETE",
  });
};

export const getAdminAccountBanRemoveMutationFetcher = (
  accountHandle: string,
) => {
  return (_: string, __: { arg: Arguments }): Promise<AccountGetOKResponse> => {
    return adminAccountBanRemove(accountHandle);
  };
};
export const getAdminAccountBanRemoveMutationKey = (accountHandle: string) =>
  `/admin/bans/${accountHandle}` as const;

export type AdminAccountBanRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccountBanRemove>>
>;
export type AdminAccountBanRemoveMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAdminAccountBanRemove = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  accountHandle: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof adminAccountBanRemove>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof adminAccountBanRemove>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getAdminAccountBanRemoveMutationKey(accountHandle);
  const swrFn = getAdminAccountBanRemoveMutationFetcher(accountHandle);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Get the information for the currently authenticated account.
 */
export const accountGet = () => {
  return fetcher<AccountGetOKResponse>({ url: `/accounts`, method: "GET" });
};

export const getAccountGetKey = () => [`/accounts`] as const;

export type AccountGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountGet>>
>;
export type AccountGetQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAccountGet = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof accountGet>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getAccountGetKey() : null));
  const swrFn = () => accountGet();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Update the information for the currently authenticated account.
 */
export const accountUpdate = (accountUpdateBody: AccountUpdateBody) => {
  return fetcher<AccountUpdateOKResponse>({
    url: `/accounts`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: accountUpdateBody,
  });
};

export const getAccountUpdateMutationFetcher = () => {
  return (
    _: string,
    { arg }: { arg: AccountUpdateBody },
  ): Promise<AccountUpdateOKResponse> => {
    return accountUpdate(arg);
  };
};
export const getAccountUpdateMutationKey = () => `/accounts` as const;

export type AccountUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountUpdate>>
>;
export type AccountUpdateMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAccountUpdate = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof accountUpdate>>,
    TError,
    string,
    AccountUpdateBody,
    Awaited<ReturnType<typeof accountUpdate>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getAccountUpdateMutationKey();
  const swrFn = getAccountUpdateMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Retrieve a list of authentication providers with a flag indicating which
ones are active for the currently authenticated account.

 */
export const accountAuthProviderList = () => {
  return fetcher<AccountAuthProviderListOKResponse>({
    url: `/accounts/self/auth-methods`,
    method: "GET",
  });
};

export const getAccountAuthProviderListKey = () =>
  [`/accounts/self/auth-methods`] as const;

export type AccountAuthProviderListQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountAuthProviderList>>
>;
export type AccountAuthProviderListQueryError =
  | BadRequestResponse
  | InternalServerErrorResponse;

export const useAccountAuthProviderList = <
  TError = BadRequestResponse | InternalServerErrorResponse,
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof accountAuthProviderList>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAccountAuthProviderListKey() : null));
  const swrFn = () => accountAuthProviderList();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Retrieve a list of authentication providers with a flag indicating which
ones are active for the currently authenticated account.

 */
export const accountAuthMethodDelete = (authMethodId: string) => {
  return fetcher<AccountAuthProviderListOKResponse>({
    url: `/accounts/self/auth-methods/${authMethodId}`,
    method: "DELETE",
  });
};

export const getAccountAuthMethodDeleteMutationFetcher = (
  authMethodId: string,
) => {
  return (
    _: string,
    __: { arg: Arguments },
  ): Promise<AccountAuthProviderListOKResponse> => {
    return accountAuthMethodDelete(authMethodId);
  };
};
export const getAccountAuthMethodDeleteMutationKey = (authMethodId: string) =>
  `/accounts/self/auth-methods/${authMethodId}` as const;

export type AccountAuthMethodDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountAuthMethodDelete>>
>;
export type AccountAuthMethodDeleteMutationError =
  | BadRequestResponse
  | InternalServerErrorResponse;

export const useAccountAuthMethodDelete = <
  TError = BadRequestResponse | InternalServerErrorResponse,
>(
  authMethodId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof accountAuthMethodDelete>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof accountAuthMethodDelete>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getAccountAuthMethodDeleteMutationKey(authMethodId);
  const swrFn = getAccountAuthMethodDeleteMutationFetcher(authMethodId);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Upload an avatar for the authenticated account.
 */
export const accountSetAvatar = (
  accountSetAvatarBody: AccountSetAvatarBody,
) => {
  return fetcher<void>({
    url: `/accounts/self/avatar`,
    method: "POST",
    headers: { "Content-Type": "application/octet-stream" },
    data: accountSetAvatarBody,
  });
};

export const getAccountSetAvatarMutationFetcher = () => {
  return (_: string, { arg }: { arg: AccountSetAvatarBody }): Promise<void> => {
    return accountSetAvatar(arg);
  };
};
export const getAccountSetAvatarMutationKey = () =>
  `/accounts/self/avatar` as const;

export type AccountSetAvatarMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountSetAvatar>>
>;
export type AccountSetAvatarMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAccountSetAvatar = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof accountSetAvatar>>,
    TError,
    string,
    AccountSetAvatarBody,
    Awaited<ReturnType<typeof accountSetAvatar>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getAccountSetAvatarMutationKey();
  const swrFn = getAccountSetAvatarMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Get an avatar for the specified account.
 */
export const accountGetAvatar = (accountHandle: string) => {
  return fetcher<AccountGetAvatarResponse>({
    url: `/accounts/${accountHandle}/avatar`,
    method: "GET",
  });
};

export const getAccountGetAvatarKey = (accountHandle: string) =>
  [`/accounts/${accountHandle}/avatar`] as const;

export type AccountGetAvatarQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountGetAvatar>>
>;
export type AccountGetAvatarQueryError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useAccountGetAvatar = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  accountHandle: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof accountGetAvatar>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!accountHandle;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAccountGetAvatarKey(accountHandle) : null));
  const swrFn = () => accountGetAvatar(accountHandle);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
