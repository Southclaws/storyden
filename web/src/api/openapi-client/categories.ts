/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
The Storyden API does not adhere to semantic versioning but instead applies a rolling strategy with deprecations and minimal breaking changes. This has been done mainly for a simpler development process and it may be changed to a more fixed versioning strategy in the future. Ultimately, the primary way Storyden tracks versions is dates, there are no set release tags currently.

 * OpenAPI spec version: v1.25.7-canary
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { fetcher } from "../client";
import type {
  BadRequestResponse,
  CategoryCreateBody,
  CategoryCreateOKResponse,
  CategoryDeleteBody,
  CategoryDeleteOKResponse,
  CategoryGetOKResponse,
  CategoryListOKResponse,
  CategoryUpdateBody,
  CategoryUpdateOKResponse,
  CategoryUpdatePositionBody,
  InternalServerErrorResponse,
  NotFoundResponse,
  UnauthorisedResponse,
} from "../openapi-schema";

/**
 * Create a category for organising posts.
 */
export const categoryCreate = (categoryCreateBody: CategoryCreateBody) => {
  return fetcher<CategoryCreateOKResponse>({
    url: `/categories`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: categoryCreateBody,
  });
};

export const getCategoryCreateMutationFetcher = () => {
  return (
    _: Key,
    { arg }: { arg: CategoryCreateBody },
  ): Promise<CategoryCreateOKResponse> => {
    return categoryCreate(arg);
  };
};
export const getCategoryCreateMutationKey = () => [`/categories`] as const;

export type CategoryCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoryCreate>>
>;
export type CategoryCreateMutationError =
  | BadRequestResponse
  | UnauthorisedResponse
  | InternalServerErrorResponse;

export const useCategoryCreate = <
  TError =
    | BadRequestResponse
    | UnauthorisedResponse
    | InternalServerErrorResponse,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof categoryCreate>>,
    TError,
    Key,
    CategoryCreateBody,
    Awaited<ReturnType<typeof categoryCreate>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCategoryCreateMutationKey();
  const swrFn = getCategoryCreateMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Get a list of all categories on the site.
 */
export const categoryList = () => {
  return fetcher<CategoryListOKResponse>({ url: `/categories`, method: "GET" });
};

export const getCategoryListKey = () => [`/categories`] as const;

export type CategoryListQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoryList>>
>;
export type CategoryListQueryError = InternalServerErrorResponse;

export const useCategoryList = <
  TError = InternalServerErrorResponse,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof categoryList>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getCategoryListKey() : null));
  const swrFn = () => categoryList();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Get information about a category.
 */
export const categoryGet = (categorySlug: string) => {
  return fetcher<CategoryGetOKResponse>({
    url: `/categories/${categorySlug}`,
    method: "GET",
  });
};

export const getCategoryGetKey = (categorySlug: string) =>
  [`/categories/${categorySlug}`] as const;

export type CategoryGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoryGet>>
>;
export type CategoryGetQueryError =
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useCategoryGet = <
  TError = NotFoundResponse | InternalServerErrorResponse,
>(
  categorySlug: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof categoryGet>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!categorySlug;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getCategoryGetKey(categorySlug) : null));
  const swrFn = () => categoryGet(categorySlug);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Update a category's information.
 */
export const categoryUpdate = (
  categorySlug: string,
  categoryUpdateBody: CategoryUpdateBody,
) => {
  return fetcher<CategoryUpdateOKResponse>({
    url: `/categories/${categorySlug}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: categoryUpdateBody,
  });
};

export const getCategoryUpdateMutationFetcher = (categorySlug: string) => {
  return (
    _: Key,
    { arg }: { arg: CategoryUpdateBody },
  ): Promise<CategoryUpdateOKResponse> => {
    return categoryUpdate(categorySlug, arg);
  };
};
export const getCategoryUpdateMutationKey = (categorySlug: string) =>
  [`/categories/${categorySlug}`] as const;

export type CategoryUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoryUpdate>>
>;
export type CategoryUpdateMutationError =
  | BadRequestResponse
  | UnauthorisedResponse
  | InternalServerErrorResponse;

export const useCategoryUpdate = <
  TError =
    | BadRequestResponse
    | UnauthorisedResponse
    | InternalServerErrorResponse,
>(
  categorySlug: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof categoryUpdate>>,
      TError,
      Key,
      CategoryUpdateBody,
      Awaited<ReturnType<typeof categoryUpdate>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getCategoryUpdateMutationKey(categorySlug);
  const swrFn = getCategoryUpdateMutationFetcher(categorySlug);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Delete a category. All posts in this category will be moved to the specified target category.
 */
export const categoryDelete = (
  categorySlug: string,
  categoryDeleteBody: CategoryDeleteBody,
) => {
  return fetcher<CategoryDeleteOKResponse>({
    url: `/categories/${categorySlug}`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: categoryDeleteBody,
  });
};

export const getCategoryDeleteMutationFetcher = (categorySlug: string) => {
  return (
    _: Key,
    { arg }: { arg: CategoryDeleteBody },
  ): Promise<CategoryDeleteOKResponse> => {
    return categoryDelete(categorySlug, arg);
  };
};
export const getCategoryDeleteMutationKey = (categorySlug: string) =>
  [`/categories/${categorySlug}`] as const;

export type CategoryDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoryDelete>>
>;
export type CategoryDeleteMutationError =
  | BadRequestResponse
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useCategoryDelete = <
  TError =
    | BadRequestResponse
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  categorySlug: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof categoryDelete>>,
      TError,
      Key,
      CategoryDeleteBody,
      Awaited<ReturnType<typeof categoryDelete>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getCategoryDeleteMutationKey(categorySlug);
  const swrFn = getCategoryDeleteMutationFetcher(categorySlug);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Update the category's position in the tree. You may change the parent
using `parent`, and/or reposition the category among its siblings using
either `before` or `after`. Use this operation for drag-and-drop
interfaces.

 */
export const categoryUpdatePosition = (
  categorySlug: string,
  categoryUpdatePositionBody: CategoryUpdatePositionBody,
) => {
  return fetcher<CategoryListOKResponse>({
    url: `/categories/${categorySlug}/position`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: categoryUpdatePositionBody,
  });
};

export const getCategoryUpdatePositionMutationFetcher = (
  categorySlug: string,
) => {
  return (
    _: Key,
    { arg }: { arg: CategoryUpdatePositionBody },
  ): Promise<CategoryListOKResponse> => {
    return categoryUpdatePosition(categorySlug, arg);
  };
};
export const getCategoryUpdatePositionMutationKey = (categorySlug: string) =>
  [`/categories/${categorySlug}/position`] as const;

export type CategoryUpdatePositionMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoryUpdatePosition>>
>;
export type CategoryUpdatePositionMutationError =
  | BadRequestResponse
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const useCategoryUpdatePosition = <
  TError =
    | BadRequestResponse
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  categorySlug: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof categoryUpdatePosition>>,
      TError,
      Key,
      CategoryUpdatePositionBody,
      Awaited<ReturnType<typeof categoryUpdatePosition>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getCategoryUpdatePositionMutationKey(categorySlug);
  const swrFn = getCategoryUpdatePositionMutationFetcher(categorySlug);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
