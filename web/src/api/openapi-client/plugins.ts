/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
The Storyden API does not adhere to semantic versioning but instead applies a rolling strategy with deprecations and minimal breaking changes. This has been done mainly for a simpler development process and it may be changed to a more fixed versioning strategy in the future. Ultimately, the primary way Storyden tracks versions is dates, there are no set release tags currently.

 * OpenAPI spec version: v1.25.8-canary
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { fetcher } from "../client";
import type {
  BadRequestResponse,
  InternalServerErrorResponse,
  NoContentResponse,
  NotFoundResponse,
  PluginAddBody,
  PluginGetOKResponse,
  PluginListOKResponse,
  PluginSetActiveStateBody,
  UnauthorisedResponse,
} from "../openapi-schema";

/**
 * List all plugins that are installed on the instance.
 */
export const pluginList = () => {
  return fetcher<PluginListOKResponse>({ url: `/plugins`, method: "GET" });
};

export const getPluginListKey = () => [`/plugins`] as const;

export type PluginListQueryResult = NonNullable<
  Awaited<ReturnType<typeof pluginList>>
>;
export type PluginListQueryError = InternalServerErrorResponse;

export const usePluginList = <TError = InternalServerErrorResponse>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof pluginList>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getPluginListKey() : null));
  const swrFn = () => pluginList();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Add a plugin to the instance. This will not install or activate the
plugin immediately. It will validate and prepare the plugin for install.

Plugins can be uploaded directly as files or via a URL to a repository.

 */
export const pluginAdd = (pluginAddBody: PluginAddBody) => {
  return fetcher<PluginGetOKResponse>({
    url: `/plugins`,
    method: "POST",
    headers: { "Content-Type": "application/octet-stream" },
    data: pluginAddBody,
  });
};

export const getPluginAddMutationFetcher = () => {
  return (
    _: Key,
    { arg }: { arg: PluginAddBody },
  ): Promise<PluginGetOKResponse> => {
    return pluginAdd(arg);
  };
};
export const getPluginAddMutationKey = () => [`/plugins`] as const;

export type PluginAddMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginAdd>>
>;
export type PluginAddMutationError =
  | BadRequestResponse
  | UnauthorisedResponse
  | InternalServerErrorResponse;

export const usePluginAdd = <
  TError =
    | BadRequestResponse
    | UnauthorisedResponse
    | InternalServerErrorResponse,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof pluginAdd>>,
    TError,
    Key,
    PluginAddBody,
    Awaited<ReturnType<typeof pluginAdd>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPluginAddMutationKey();
  const swrFn = getPluginAddMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Get information about a specific plugin.
 */
export const pluginGet = (pluginInstanceId: string) => {
  return fetcher<PluginGetOKResponse>({
    url: `/plugins/${pluginInstanceId}`,
    method: "GET",
  });
};

export const getPluginGetKey = (pluginInstanceId: string) =>
  [`/plugins/${pluginInstanceId}`] as const;

export type PluginGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof pluginGet>>
>;
export type PluginGetQueryError =
  | NotFoundResponse
  | InternalServerErrorResponse;

export const usePluginGet = <
  TError = NotFoundResponse | InternalServerErrorResponse,
>(
  pluginInstanceId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof pluginGet>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!pluginInstanceId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getPluginGetKey(pluginInstanceId) : null));
  const swrFn = () => pluginGet(pluginInstanceId);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * Completely delete a plugin from the instance. This will uninstall the
plugin first then remove its binary file from the storage backend.

Some plugins may write additional data to the instance, this will not
be removed by this operation unless the plugin cleans up after itself.

 */
export const pluginDelete = (pluginInstanceId: string) => {
  return fetcher<NoContentResponse>({
    url: `/plugins/${pluginInstanceId}`,
    method: "DELETE",
  });
};

export const getPluginDeleteMutationFetcher = (pluginInstanceId: string) => {
  return (_: Key, __: { arg: Arguments }): Promise<NoContentResponse> => {
    return pluginDelete(pluginInstanceId);
  };
};
export const getPluginDeleteMutationKey = (pluginInstanceId: string) =>
  [`/plugins/${pluginInstanceId}`] as const;

export type PluginDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginDelete>>
>;
export type PluginDeleteMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const usePluginDelete = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  pluginInstanceId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof pluginDelete>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof pluginDelete>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getPluginDeleteMutationKey(pluginInstanceId);
  const swrFn = getPluginDeleteMutationFetcher(pluginInstanceId);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * Change the active state of a plugin. When activated, the plugin will
install itself and become available for use. When deactivated, This will
uninstall the plugin but keep its data and config for reactivation.

 */
export const pluginSetActiveState = (
  pluginInstanceId: string,
  pluginSetActiveStateBody: PluginSetActiveStateBody,
) => {
  return fetcher<PluginGetOKResponse>({
    url: `/plugins/${pluginInstanceId}/active`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: pluginSetActiveStateBody,
  });
};

export const getPluginSetActiveStateMutationFetcher = (
  pluginInstanceId: string,
) => {
  return (
    _: Key,
    { arg }: { arg: PluginSetActiveStateBody },
  ): Promise<PluginGetOKResponse> => {
    return pluginSetActiveState(pluginInstanceId, arg);
  };
};
export const getPluginSetActiveStateMutationKey = (pluginInstanceId: string) =>
  [`/plugins/${pluginInstanceId}/active`] as const;

export type PluginSetActiveStateMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginSetActiveState>>
>;
export type PluginSetActiveStateMutationError =
  | UnauthorisedResponse
  | NotFoundResponse
  | InternalServerErrorResponse;

export const usePluginSetActiveState = <
  TError =
    | UnauthorisedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
>(
  pluginInstanceId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof pluginSetActiveState>>,
      TError,
      Key,
      PluginSetActiveStateBody,
      Awaited<ReturnType<typeof pluginSetActiveState>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getPluginSetActiveStateMutationKey(pluginInstanceId);
  const swrFn = getPluginSetActiveStateMutationFetcher(pluginInstanceId);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
