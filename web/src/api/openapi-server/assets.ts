/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import type {
  AssetGetOKResponse,
  AssetUploadBody,
  AssetUploadOKResponse,
  AssetUploadParams,
} from "../openapi-schema";
import { fetcher } from "../server";

/**
 * Upload and process a media file.
 */
export type assetUploadResponse = {
  data: AssetUploadOKResponse;
  status: number;
};

export const getAssetUploadUrl = (params?: AssetUploadParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/v1/assets?${normalizedParams.toString()}`;
};

export const assetUpload = async (
  assetUploadBody: AssetUploadBody,
  params?: AssetUploadParams,
  options?: RequestInit,
): Promise<assetUploadResponse> => {
  return fetcher<Promise<assetUploadResponse>>(getAssetUploadUrl(params), {
    ...options,
    method: "POST",
    body: JSON.stringify(assetUploadBody),
  });
};

/**
 * Download an asset by its ID.
 */
export type assetGetResponse = {
  data: AssetGetOKResponse;
  status: number;
};

export const getAssetGetUrl = (assetFilename: string) => {
  return `/v1/assets/${assetFilename}`;
};

export const assetGet = async (
  assetFilename: string,
  options?: RequestInit,
): Promise<assetGetResponse> => {
  return fetcher<Promise<assetGetResponse>>(getAssetGetUrl(assetFilename), {
    ...options,
    method: "GET",
  });
};
