/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
 * OpenAPI spec version: 1
 */
import type {
  CollectionAddNodeOKResponse,
  CollectionAddPostOKResponse,
  CollectionCreateBody,
  CollectionCreateOKResponse,
  CollectionGetOKResponse,
  CollectionListOKResponse,
  CollectionListParams,
  CollectionRemoveNodeOKResponse,
  CollectionRemovePostOKResponse,
  CollectionUpdateBody,
  CollectionUpdateOKResponse,
} from "../openapi-schema";
import { fetcher } from "../server";

/**
 * Create a collection for curating posts under the authenticated account.

 */
export type collectionCreateResponse = {
  data: CollectionCreateOKResponse;
  status: number;
};

export const getCollectionCreateUrl = () => {
  return `/v1/collections`;
};

export const collectionCreate = async (
  collectionCreateBody: CollectionCreateBody,
  options?: RequestInit,
): Promise<collectionCreateResponse> => {
  return fetcher<Promise<collectionCreateResponse>>(getCollectionCreateUrl(), {
    ...options,
    method: "POST",
    body: JSON.stringify(collectionCreateBody),
  });
};

/**
 * List all collections using the filtering options.
 */
export type collectionListResponse = {
  data: CollectionListOKResponse;
  status: number;
};

export const getCollectionListUrl = (params?: CollectionListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/v1/collections?${normalizedParams.toString()}`;
};

export const collectionList = async (
  params?: CollectionListParams,
  options?: RequestInit,
): Promise<collectionListResponse> => {
  return fetcher<Promise<collectionListResponse>>(
    getCollectionListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Get a collection by its ID. Collections can be public or private so the
response will depend on which account is making the request and if the
target collection is public, private, owned or not owned by the account.

 */
export type collectionGetResponse = {
  data: CollectionGetOKResponse;
  status: number;
};

export const getCollectionGetUrl = (collectionId: string) => {
  return `/v1/collections/${collectionId}`;
};

export const collectionGet = async (
  collectionId: string,
  options?: RequestInit,
): Promise<collectionGetResponse> => {
  return fetcher<Promise<collectionGetResponse>>(
    getCollectionGetUrl(collectionId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Update a collection owned by the authenticated account.
 */
export type collectionUpdateResponse = {
  data: CollectionUpdateOKResponse;
  status: number;
};

export const getCollectionUpdateUrl = (collectionId: string) => {
  return `/v1/collections/${collectionId}`;
};

export const collectionUpdate = async (
  collectionId: string,
  collectionUpdateBody: CollectionUpdateBody,
  options?: RequestInit,
): Promise<collectionUpdateResponse> => {
  return fetcher<Promise<collectionUpdateResponse>>(
    getCollectionUpdateUrl(collectionId),
    {
      ...options,
      method: "PATCH",
      body: JSON.stringify(collectionUpdateBody),
    },
  );
};

/**
 * Delete a collection owned by the authenticated account.
 */
export type collectionDeleteResponse = {
  data: void;
  status: number;
};

export const getCollectionDeleteUrl = (collectionId: string) => {
  return `/v1/collections/${collectionId}`;
};

export const collectionDelete = async (
  collectionId: string,
  options?: RequestInit,
): Promise<collectionDeleteResponse> => {
  return fetcher<Promise<collectionDeleteResponse>>(
    getCollectionDeleteUrl(collectionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Add a post to a collection. The collection must be owned by the account
making the request. The post can be any published post of any kind.

 */
export type collectionAddPostResponse = {
  data: CollectionAddPostOKResponse;
  status: number;
};

export const getCollectionAddPostUrl = (
  collectionId: string,
  postId: string,
) => {
  return `/v1/collections/${collectionId}/posts/${postId}`;
};

export const collectionAddPost = async (
  collectionId: string,
  postId: string,
  options?: RequestInit,
): Promise<collectionAddPostResponse> => {
  return fetcher<Promise<collectionAddPostResponse>>(
    getCollectionAddPostUrl(collectionId, postId),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * Remove a post from a collection. The collection must be owned by the
account making the request.

 */
export type collectionRemovePostResponse = {
  data: CollectionRemovePostOKResponse;
  status: number;
};

export const getCollectionRemovePostUrl = (
  collectionId: string,
  postId: string,
) => {
  return `/v1/collections/${collectionId}/posts/${postId}`;
};

export const collectionRemovePost = async (
  collectionId: string,
  postId: string,
  options?: RequestInit,
): Promise<collectionRemovePostResponse> => {
  return fetcher<Promise<collectionRemovePostResponse>>(
    getCollectionRemovePostUrl(collectionId, postId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Add a node to a collection. The collection must be owned by the account
making the request. The node can be any published node or any node
not published but owned by the collection owner.

 */
export type collectionAddNodeResponse = {
  data: CollectionAddNodeOKResponse;
  status: number;
};

export const getCollectionAddNodeUrl = (
  collectionId: string,
  nodeId: string,
) => {
  return `/v1/collections/${collectionId}/nodes/${nodeId}`;
};

export const collectionAddNode = async (
  collectionId: string,
  nodeId: string,
  options?: RequestInit,
): Promise<collectionAddNodeResponse> => {
  return fetcher<Promise<collectionAddNodeResponse>>(
    getCollectionAddNodeUrl(collectionId, nodeId),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * Remove a node from a collection. The collection must be owned by the
account making the request.

 */
export type collectionRemoveNodeResponse = {
  data: CollectionRemoveNodeOKResponse;
  status: number;
};

export const getCollectionRemoveNodeUrl = (
  collectionId: string,
  nodeId: string,
) => {
  return `/v1/collections/${collectionId}/nodes/${nodeId}`;
};

export const collectionRemoveNode = async (
  collectionId: string,
  nodeId: string,
  options?: RequestInit,
): Promise<collectionRemoveNodeResponse> => {
  return fetcher<Promise<collectionRemoveNodeResponse>>(
    getCollectionRemoveNodeUrl(collectionId, nodeId),
    {
      ...options,
      method: "DELETE",
    },
  );
};
