/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
The Storyden API does not adhere to semantic versioning but instead applies a rolling strategy with deprecations and minimal breaking changes. This has been done mainly for a simpler development process and it may be changed to a more fixed versioning strategy in the future. Ultimately, the primary way Storyden tracks versions is dates, there are no set release tags currently.

 * OpenAPI spec version: v1.25.8-canary
 */
import type {
  NoContentResponse,
  PluginAddBody,
  PluginGetOKResponse,
  PluginListOKResponse,
  PluginSetActiveStateBody,
} from "../openapi-schema";
import { fetcher } from "../server";

/**
 * List all plugins that are installed on the instance.
 */
export type pluginListResponse = {
  data: PluginListOKResponse;
  status: number;
};

export const getPluginListUrl = () => {
  return `/plugins`;
};

export const pluginList = async (
  options?: RequestInit,
): Promise<pluginListResponse> => {
  return fetcher<Promise<pluginListResponse>>(getPluginListUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Add a plugin to the instance. This will not install or activate the
plugin immediately. It will validate and prepare the plugin for install.

Plugins can be uploaded directly as files or via a URL to a repository.

 */
export type pluginAddResponse = {
  data: PluginGetOKResponse;
  status: number;
};

export const getPluginAddUrl = () => {
  return `/plugins`;
};

export const pluginAdd = async (
  pluginAddBody: PluginAddBody,
  options?: RequestInit,
): Promise<pluginAddResponse> => {
  return fetcher<Promise<pluginAddResponse>>(getPluginAddUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/octet-stream",
      ...options?.headers,
    },
    body: JSON.stringify(pluginAddBody),
  });
};

/**
 * Get information about a specific plugin.
 */
export type pluginGetResponse = {
  data: PluginGetOKResponse;
  status: number;
};

export const getPluginGetUrl = (pluginInstanceId: string) => {
  return `/plugins/${pluginInstanceId}`;
};

export const pluginGet = async (
  pluginInstanceId: string,
  options?: RequestInit,
): Promise<pluginGetResponse> => {
  return fetcher<Promise<pluginGetResponse>>(
    getPluginGetUrl(pluginInstanceId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Completely delete a plugin from the instance. This will uninstall the
plugin first then remove its binary file from the storage backend.

Some plugins may write additional data to the instance, this will not
be removed by this operation unless the plugin cleans up after itself.

 */
export type pluginDeleteResponse = {
  data: NoContentResponse;
  status: number;
};

export const getPluginDeleteUrl = (pluginInstanceId: string) => {
  return `/plugins/${pluginInstanceId}`;
};

export const pluginDelete = async (
  pluginInstanceId: string,
  options?: RequestInit,
): Promise<pluginDeleteResponse> => {
  return fetcher<Promise<pluginDeleteResponse>>(
    getPluginDeleteUrl(pluginInstanceId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Change the active state of a plugin. When activated, the plugin will
install itself and become available for use. When deactivated, This will
uninstall the plugin but keep its data and config for reactivation.

 */
export type pluginSetActiveStateResponse = {
  data: PluginGetOKResponse;
  status: number;
};

export const getPluginSetActiveStateUrl = (pluginInstanceId: string) => {
  return `/plugins/${pluginInstanceId}/active`;
};

export const pluginSetActiveState = async (
  pluginInstanceId: string,
  pluginSetActiveStateBody: PluginSetActiveStateBody,
  options?: RequestInit,
): Promise<pluginSetActiveStateResponse> => {
  return fetcher<Promise<pluginSetActiveStateResponse>>(
    getPluginSetActiveStateUrl(pluginInstanceId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(pluginSetActiveStateBody),
    },
  );
};
