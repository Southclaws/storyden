/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
The Storyden API does not adhere to semantic versioning but instead applies a rolling strategy with deprecations and minimal breaking changes. This has been done mainly for a simpler development process and it may be changed to a more fixed versioning strategy in the future. Ultimately, the primary way Storyden tracks versions is dates, there are no set release tags currently.

 * OpenAPI spec version: rolling
 */
import type {
  CategoryCreateBody,
  CategoryCreateOKResponse,
  CategoryListOKResponse,
  CategoryUpdateBody,
  CategoryUpdateOKResponse,
  CategoryUpdateOrderBody,
} from "../openapi-schema";
import { fetcher } from "../server";

/**
 * Create a category for organising posts.
 */
export type categoryCreateResponse = {
  data: CategoryCreateOKResponse;
  status: number;
};

export const getCategoryCreateUrl = () => {
  return `/categories`;
};

export const categoryCreate = async (
  categoryCreateBody: CategoryCreateBody,
  options?: RequestInit,
): Promise<categoryCreateResponse> => {
  return fetcher<Promise<categoryCreateResponse>>(getCategoryCreateUrl(), {
    ...options,
    method: "POST",
    body: JSON.stringify(categoryCreateBody),
  });
};

/**
 * Get a list of all categories on the site.
 */
export type categoryListResponse = {
  data: CategoryListOKResponse;
  status: number;
};

export const getCategoryListUrl = () => {
  return `/categories`;
};

export const categoryList = async (
  options?: RequestInit,
): Promise<categoryListResponse> => {
  return fetcher<Promise<categoryListResponse>>(getCategoryListUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Update the sort order of categories.
 */
export type categoryUpdateOrderResponse = {
  data: CategoryListOKResponse;
  status: number;
};

export const getCategoryUpdateOrderUrl = () => {
  return `/categories`;
};

export const categoryUpdateOrder = async (
  categoryUpdateOrderBody: CategoryUpdateOrderBody,
  options?: RequestInit,
): Promise<categoryUpdateOrderResponse> => {
  return fetcher<Promise<categoryUpdateOrderResponse>>(
    getCategoryUpdateOrderUrl(),
    {
      ...options,
      method: "PATCH",
      body: JSON.stringify(categoryUpdateOrderBody),
    },
  );
};

/**
 * Create a category for organising posts.
 */
export type categoryUpdateResponse = {
  data: CategoryUpdateOKResponse;
  status: number;
};

export const getCategoryUpdateUrl = (categoryId: string) => {
  return `/categories/${categoryId}`;
};

export const categoryUpdate = async (
  categoryId: string,
  categoryUpdateBody: CategoryUpdateBody,
  options?: RequestInit,
): Promise<categoryUpdateResponse> => {
  return fetcher<Promise<categoryUpdateResponse>>(
    getCategoryUpdateUrl(categoryId),
    {
      ...options,
      method: "PATCH",
      body: JSON.stringify(categoryUpdateBody),
    },
  );
};
