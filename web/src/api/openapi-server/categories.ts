/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * storyden
 * Storyden social API for building community driven platforms.
The Storyden API does not adhere to semantic versioning but instead applies a rolling strategy with deprecations and minimal breaking changes. This has been done mainly for a simpler development process and it may be changed to a more fixed versioning strategy in the future. Ultimately, the primary way Storyden tracks versions is dates, there are no set release tags currently.

 * OpenAPI spec version: v1.25.7-canary
 */
import type {
  CategoryCreateBody,
  CategoryCreateOKResponse,
  CategoryDeleteBody,
  CategoryDeleteOKResponse,
  CategoryGetOKResponse,
  CategoryListOKResponse,
  CategoryUpdateBody,
  CategoryUpdateOKResponse,
  CategoryUpdatePositionBody,
} from "../openapi-schema";
import { fetcher } from "../server";

/**
 * Create a category for organising posts.
 */
export type categoryCreateResponse = {
  data: CategoryCreateOKResponse;
  status: number;
};

export const getCategoryCreateUrl = () => {
  return `/categories`;
};

export const categoryCreate = async (
  categoryCreateBody: CategoryCreateBody,
  options?: RequestInit,
): Promise<categoryCreateResponse> => {
  return fetcher<Promise<categoryCreateResponse>>(getCategoryCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(categoryCreateBody),
  });
};

/**
 * Get a list of all categories on the site.
 */
export type categoryListResponse = {
  data: CategoryListOKResponse;
  status: number;
};

export const getCategoryListUrl = () => {
  return `/categories`;
};

export const categoryList = async (
  options?: RequestInit,
): Promise<categoryListResponse> => {
  return fetcher<Promise<categoryListResponse>>(getCategoryListUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Get information about a category.
 */
export type categoryGetResponse = {
  data: CategoryGetOKResponse;
  status: number;
};

export const getCategoryGetUrl = (categorySlug: string) => {
  return `/categories/${categorySlug}`;
};

export const categoryGet = async (
  categorySlug: string,
  options?: RequestInit,
): Promise<categoryGetResponse> => {
  return fetcher<Promise<categoryGetResponse>>(
    getCategoryGetUrl(categorySlug),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Update a category's information.
 */
export type categoryUpdateResponse = {
  data: CategoryUpdateOKResponse;
  status: number;
};

export const getCategoryUpdateUrl = (categorySlug: string) => {
  return `/categories/${categorySlug}`;
};

export const categoryUpdate = async (
  categorySlug: string,
  categoryUpdateBody: CategoryUpdateBody,
  options?: RequestInit,
): Promise<categoryUpdateResponse> => {
  return fetcher<Promise<categoryUpdateResponse>>(
    getCategoryUpdateUrl(categorySlug),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(categoryUpdateBody),
    },
  );
};

/**
 * Delete a category. All posts in this category will be moved to the specified target category.
 */
export type categoryDeleteResponse = {
  data: CategoryDeleteOKResponse;
  status: number;
};

export const getCategoryDeleteUrl = (categorySlug: string) => {
  return `/categories/${categorySlug}`;
};

export const categoryDelete = async (
  categorySlug: string,
  categoryDeleteBody: CategoryDeleteBody,
  options?: RequestInit,
): Promise<categoryDeleteResponse> => {
  return fetcher<Promise<categoryDeleteResponse>>(
    getCategoryDeleteUrl(categorySlug),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(categoryDeleteBody),
    },
  );
};

/**
 * Update the category's position in the tree. You may change the parent
using `parent`, and/or reposition the category among its siblings using
either `before` or `after`. Use this operation for drag-and-drop
interfaces.

 */
export type categoryUpdatePositionResponse = {
  data: CategoryListOKResponse;
  status: number;
};

export const getCategoryUpdatePositionUrl = (categorySlug: string) => {
  return `/categories/${categorySlug}/position`;
};

export const categoryUpdatePosition = async (
  categorySlug: string,
  categoryUpdatePositionBody: CategoryUpdatePositionBody,
  options?: RequestInit,
): Promise<categoryUpdatePositionResponse> => {
  return fetcher<Promise<categoryUpdatePositionResponse>>(
    getCategoryUpdatePositionUrl(categorySlug),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(categoryUpdatePositionBody),
    },
  );
};
